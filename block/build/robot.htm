<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\robot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\robot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Tue Mar 17 13:47:54 2015
<BR><P>
<H3>Maximum Stack Usage =       1552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DMA2_Stream1_IRQHandler &rArr; Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[17e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">NMI_Handler</a><BR>
 <LI><a href="#[1e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">HardFault_Handler</a><BR>
 <LI><a href="#[1f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">MemManage_Handler</a><BR>
 <LI><a href="#[20]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">BusFault_Handler</a><BR>
 <LI><a href="#[21]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">UsageFault_Handler</a><BR>
 <LI><a href="#[22]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">SVC_Handler</a><BR>
 <LI><a href="#[23]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">DebugMon_Handler</a><BR>
 <LI><a href="#[24]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">PendSV_Handler</a><BR>
 <LI><a href="#[25]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">SysTick_Handler</a><BR>
 <LI><a href="#[38]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC_IRQHandler</a><BR>
 <LI><a href="#[143]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[143]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[20]">BusFault_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3a]">CAN1_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3c]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[39]">CAN1_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[66]">CAN2_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[68]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[65]">CAN2_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[75]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[74]">DCMI_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream6_IRQHandler</a> from uart.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[55]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[80]">DMA2D_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream1_IRQHandler</a> from spi.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream6_IRQHandler</a> from spi.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[63]">ETH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[64]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[77]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[76]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1e]">HardFault_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[46]">I2C1_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[45]">I2C1_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[48]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[47]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6f]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6e]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7f]">LTDC_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7e]">LTDC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1f]">MemManage_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[27]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4f]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[29]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7d]">SAI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[57]">SDIO_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4a]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[59]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7a]">SPI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7b]">SPI5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7c]">SPI6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[22]">SVC_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[25]">SysTick_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[81]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[28]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_TIM11_IRQHandler</a> from lights.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[43]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[44]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[58]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5c]">TIM6_DAC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5d]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[51]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[54]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[53]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[52]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5a]">UART4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5b]">UART5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[78]">UART7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[79]">UART8_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4d]">USART3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6d]">USART6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[21]">UsageFault_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[99]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[87]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[90]">Anki::Cozmo::TestModeController::IMUTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController13IMUTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[91]">Anki::Cozmo::TestModeController::AnimTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14AnimTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[8f]">Anki::Cozmo::TestModeController::HeadTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14HeadTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[8d]">Anki::Cozmo::TestModeController::LiftTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14LiftTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[93]">Anki::Cozmo::TestModeController::StopTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14StopTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[8c]">Anki::Cozmo::TestModeController::DriveTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15DriveTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[92]">Anki::Cozmo::TestModeController::LightTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15LightTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[89]">Anki::Cozmo::TestModeController::DockPathTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18DockPathTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[94]">Anki::Cozmo::TestModeController::MaxPowerTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18MaxPowerTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[95]">Anki::Cozmo::TestModeController::FaceTrackTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController19FaceTrackTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[8e]">Anki::Cozmo::TestModeController::LiftToggleTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20LiftToggleTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[8a]">Anki::Cozmo::TestModeController::PathFollowTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20PathFollowTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[88]">Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController22PickAndPlaceTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[8b]">Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()</a> from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController35PathFollowConvenienceFuncTestUpdateEv) referenced from testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
 <LI><a href="#[1a]">Anki::Cozmo::HAL::UARTGetCharacter(unsigned)</a> from uart.o(i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj) referenced 2 times from uart.o(.data)
 <LI><a href="#[19]">Anki::Cozmo::HAL::UARTStartTransfer()</a> from uart.o(i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv) referenced 2 times from uart.o(.data)
 <LI><a href="#[d7]">Anki::Cozmo::Messages::ProcessPingMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages18ProcessPingMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a3]">Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveHeadMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a2]">Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveLiftMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b1]">Anki::Cozmo::Messages::ProcessSyncTimeMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages22ProcessSyncTimeMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ab]">Anki::Cozmo::Messages::ProcessTrimPathMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages22ProcessTrimPathMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a7]">Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages23ProcessClearPathMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d5]">Anki::Cozmo::Messages::ProcessIMURequestMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages24ProcessIMURequestMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a0]">Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages25ProcessDriveWheelsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ac]">Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages25ProcessExecutePathMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ae]">Anki::Cozmo::Messages::ProcessAbortDockingMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessAbortDockingMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d6]">Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessFaceTrackingMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b3]">Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessImageRequestMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a5]">Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadAngleMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b5]">Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadlightMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bb]">Anki::Cozmo::Messages::ProcessFaceDetectionMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessFaceDetectionMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[da]">Anki::Cozmo::Messages::ProcessFlashBlockIDsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessFlashBlockIDsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bd]">Anki::Cozmo::Messages::ProcessPlayAnimationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessPlayAnimationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a4]">Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessSetLiftHeightMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b4]">Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStartTestModeMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a6]">Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStopAllMotorsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bf]">Anki::Cozmo::Messages::ProcessAbortAnimationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages28ProcessAbortAnimationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ad]">Anki::Cozmo::Messages::ProcessDockWithObjectMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages28ProcessDockWithObjectMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d8]">Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages28ProcessPanAndTiltHeadMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[db]">Anki::Cozmo::Messages::ProcessSetBlockLightsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages28ProcessSetBlockLightsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b2]">Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages29ProcessHeadAngleUpdateMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b6]">Anki::Cozmo::Messages::ProcessSetDefaultLightsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages30ProcessSetDefaultLightsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b9]">Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages32ProcessDockingErrorSignalMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[af]">Anki::Cozmo::Messages::ProcessPlaceObjectOnGroundMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages33ProcessPlaceObjectOnGroundMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[bc]">Anki::Cozmo::Messages::ProcessSetFaceDetectParamsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages33ProcessSetFaceDetectParamsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a9]">Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages34ProcessAppendPathSegmentArcMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c0]">Anki::Cozmo::Messages::ProcessClearCannedAnimationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages34ProcessClearCannedAnimationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a1]">Anki::Cozmo::Messages::ProcessDriveWheelsCurvatureMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages34ProcessDriveWheelsCurvatureMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b0]">Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAbsLocalizationUpdateMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[a8]">Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAppendPathSegmentLineMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ba]">Anki::Cozmo::Messages::ProcessSetVisionSystemParamsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages35ProcessSetVisionSystemParamsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d9]">Anki::Cozmo::Messages::ProcessClientConnectionStatusMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages36ProcessClientConnectionStatusMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b7]">Anki::Cozmo::Messages::ProcessSetHeadControllerGainsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages36ProcessSetHeadControllerGainsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[b8]">Anki::Cozmo::Messages::ProcessSetLiftControllerGainsMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages36ProcessSetLiftControllerGainsMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cb]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldPoseMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages38ProcessAddAnimKeyFrame_HoldPoseMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c9]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_DriveLineMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages39ProcessAddAnimKeyFrame_DriveLineMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cc]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_PlaySoundMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages39ProcessAddAnimKeyFrame_PlaySoundMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ce]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopSoundMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages39ProcessAddAnimKeyFrame_StopSoundMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[aa]">Anki::Cozmo::Messages::ProcessAppendPathSegmentPointTurnMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages40ProcessAppendPathSegmentPointTurnMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[be]">Anki::Cozmo::Messages::ProcessTransitionToStateAnimationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages40ProcessTransitionToStateAnimationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c4]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopHeadNodMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages41ProcessAddAnimKeyFrame_StopHeadNodMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c8]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopLiftNodMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages41ProcessAddAnimKeyFrame_StopLiftNodMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[ca]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TurnInPlaceMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages41ProcessAddAnimKeyFrame_TurnInPlaceMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c1]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetHeadAngleMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_SetHeadAngleMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c3]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartHeadNodMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_StartHeadNodMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c7]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartLiftNodMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_StartLiftNodMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cd]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_WaitForSoundMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_WaitForSoundMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c2]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldHeadAngleMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_HoldHeadAngleMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c5]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetLiftHeightMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_SetLiftHeightMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[cf]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartBlinkingMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_StartBlinkingMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[c6]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldLiftHeightMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages44ProcessAddAnimKeyFrame_HoldLiftHeightMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d3]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopEyeAnimationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages46ProcessAddAnimKeyFrame_StopEyeAnimationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d4]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TriggerAnimationMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages46ProcessAddAnimKeyFrame_TriggerAnimationMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d1]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartFlashingEyesMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages47ProcessAddAnimKeyFrame_StartFlashingEyesMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d2]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartSpinningEyesMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages47ProcessAddAnimKeyFrame_StartSpinningEyesMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[d0]">Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessage(const unsigned char*)</a> from messages.o(i._ZN4Anki5Cozmo8Messages49ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessageEPKh) referenced from messages.o(.constdata)
 <LI><a href="#[96]">Anki::Cozmo::Messages::SendText(const char*, std::__va_list)</a> from messages.o(i._ZN4Anki5Cozmo8Messages8SendTextEPKcSt9__va_list) referenced from cozmobot.o(i._ZN4Anki5Cozmo5Robot4InitEv)
 <LI><a href="#[97]">Anki::Cozmo::Animation::Track::Track()</a> from animation.o(i._ZN4Anki5Cozmo9Animation5TrackC1Ev) referenced from animation.o(i._ZN4Anki5Cozmo9AnimationC1Ev)
 <LI><a href="#[9d]">Anki::Cozmo::Animation::Animation()</a> from animation.o(i._ZN4Anki5Cozmo9AnimationC1Ev) referenced from animationcontroller.o(i.__sti___23_animationController_cpp_e8cc3375)
 <LI><a href="#[9b]">Anki::Mailbox&lang;Anki::Cozmo::Messages::FaceDetection&rang;::Mailbox()</a> from messages.o(t._ZN4Anki7MailboxINS_5Cozmo8Messages13FaceDetectionEEC1Ev) referenced from messages.o(i.__sti___12_messages_cpp_0235eab8)
 <LI><a href="#[9e]">Anki::Embedded::Point&lang;float&rang;::Point()</a> from offboardvisionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev) referenced from offboardvisionsystem.o(i.__sti___24_offboardVisionSystem_cpp_b6ff7547)
 <LI><a href="#[9f]">Anki::Embedded::Point3&lang;float&rang;::Point3()</a> from offboardvisionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev) referenced from offboardvisionsystem.o(i.__sti___24_offboardVisionSystem_cpp_b6ff7547)
 <LI><a href="#[98]">Anki::Planning::PathSegment::PathSegment()</a> from path.o(i._ZN4Anki8Planning11PathSegmentC1Ev) referenced from path.o(i._ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf)
 <LI><a href="#[98]">Anki::Planning::PathSegment::PathSegment()</a> from path.o(i._ZN4Anki8Planning11PathSegmentC1Ev) referenced from path.o(i._ZN4Anki8Planning4PathC1Ev)
 <LI><a href="#[9c]">Anki::Planning::Path::~Path()</a> from path.o(i._ZN4Anki8Planning4PathD1Ev) referenced from pathfollower.o(i.__sti___16_pathFollower_cpp_b5ce3046)
 <LI><a href="#[9a]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
 <LI><a href="#[104]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[e5]">__sti___10_blocks_cpp_b9277415</a> from blocks.o(i.__sti___10_blocks_cpp_b9277415) referenced from blocks.o(.init_array)
 <LI><a href="#[dd]">__sti___10_lights_cpp_bdf0f37f</a> from lights.o(i.__sti___10_lights_cpp_bdf0f37f) referenced from lights.o(.init_array)
 <LI><a href="#[102]">__sti___10_locale_cpp_ff99fc7b</a> from locale.o(i.__sti___10_locale_cpp_ff99fc7b) referenced from locale.o(.init_array)
 <LI><a href="#[df]">__sti___10_motors_cpp_b251b376</a> from motors.o(i.__sti___10_motors_cpp_b251b376) referenced from motors.o(.init_array)
 <LI><a href="#[103]">__sti___10_rwcats_cpp_64e8068e</a> from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e) referenced from rwcats.o(.init_array)
 <LI><a href="#[e6]">__sti___11_battery_cpp_5ced7e3b</a> from battery.o(i.__sti___11_battery_cpp_5ced7e3b) referenced from battery.o(.init_array)
 <LI><a href="#[e1]">__sti___11_startup_cpp_5c656aa9</a> from startup.o(i.__sti___11_startup_cpp_5c656aa9) referenced from startup.o(.init_array)
 <LI><a href="#[e7]">__sti___12_cozmoBot_cpp_fcd62337</a> from cozmobot.o(i.__sti___12_cozmoBot_cpp_fcd62337) referenced from cozmobot.o(.init_array)
 <LI><a href="#[fc]">__sti___12_keyFrame_cpp_a2e5f0e7</a> from keyframe.o(i.__sti___12_keyFrame_cpp_a2e5f0e7) referenced from keyframe.o(.init_array)
 <LI><a href="#[ed]">__sti___12_messages_cpp_0235eab8</a> from messages.o(i.__sti___12_messages_cpp_0235eab8) referenced from messages.o(.init_array)
 <LI><a href="#[fb]">__sti___13_animation_cpp_38b7b398</a> from animation.o(i.__sti___13_animation_cpp_38b7b398) referenced from animation.o(.init_array)
 <LI><a href="#[f6]">__sti___13_imuFilter_cpp_873cf2e8</a> from imufilter.o(i.__sti___13_imuFilter_cpp_873cf2e8) referenced from imufilter.o(.init_array)
 <LI><a href="#[ff]">__sti___13_trig_fast_cpp_21420f07</a> from trig_fast.o(i.__sti___13_trig_fast_cpp_21420f07) referenced from trig_fast.o(.init_array)
 <LI><a href="#[e4]">__sti___13_usb_radio_cpp_bde5bef1</a> from usb_radio.o(i.__sti___13_usb_radio_cpp_bde5bef1) referenced from usb_radio.o(.init_array)
 <LI><a href="#[100]">__sti___13_utilities_cpp_61c45304</a> from utilities.o(i.__sti___13_utilities_cpp_61c45304) referenced from utilities.o(.init_array)
 <LI><a href="#[f8]">__sti___15_proxSensors_cpp_d6c7b5b3</a> from proxsensors.o(i.__sti___15_proxSensors_cpp_d6c7b5b3) referenced from proxsensors.o(.init_array)
 <LI><a href="#[fe]">__sti___16_benchmarking_cpp_4a8bcdb9</a> from benchmarking.o(i.__sti___16_benchmarking_cpp_4a8bcdb9) referenced from benchmarking.o(.init_array)
 <LI><a href="#[ec]">__sti___16_localization_cpp_1cac3972</a> from localization.o(i.__sti___16_localization_cpp_1cac3972) referenced from localization.o(.init_array)
 <LI><a href="#[ee]">__sti___16_pathFollower_cpp_b5ce3046</a> from pathfollower.o(i.__sti___16_pathFollower_cpp_b5ce3046) referenced from pathfollower.o(.init_array)
 <LI><a href="#[fa]">__sti___17_eyeController_cpp_8860946f</a> from eyecontroller.o(i.__sti___17_eyeController_cpp_8860946f) referenced from eyecontroller.o(.init_array)
 <LI><a href="#[e9]">__sti___18_gripController_cpp</a> from gripcontroller.o(i.__sti___18_gripController_cpp) referenced from gripcontroller.o(.init_array)
 <LI><a href="#[ea]">__sti___18_headController_cpp_d23a1f8e</a> from headcontroller.o(i.__sti___18_headController_cpp_d23a1f8e) referenced from headcontroller.o(.init_array)
 <LI><a href="#[eb]">__sti___18_liftController_cpp_265a82b9</a> from liftcontroller.o(i.__sti___18_liftController_cpp_265a82b9) referenced from liftcontroller.o(.init_array)
 <LI><a href="#[f0]">__sti___19_speedController_cpp_183f1a36</a> from speedcontroller.o(i.__sti___19_speedController_cpp_183f1a36) referenced from speedcontroller.o(.init_array)
 <LI><a href="#[f5]">__sti___19_wheelController_cpp_bcff47de</a> from wheelcontroller.o(i.__sti___19_wheelController_cpp_bcff47de) referenced from wheelcontroller.o(.init_array)
 <LI><a href="#[f4]">__sti___20_visionParameters_cpp_491d0e6b</a> from visionparameters.o(i.__sti___20_visionParameters_cpp_491d0e6b) referenced from visionparameters.o(.init_array)
 <LI><a href="#[e8]">__sti___21_dockingController_cpp_90697494</a> from dockingcontroller.o(i.__sti___21_dockingController_cpp_90697494) referenced from dockingcontroller.o(.init_array)
 <LI><a href="#[f3]">__sti___21_visionDebugStream_cpp_7de1fc27</a> from visiondebugstream.o(i.__sti___21_visionDebugStream_cpp_7de1fc27) referenced from visiondebugstream.o(.init_array)
 <LI><a href="#[f1]">__sti___22_steeringController_cpp_8d9ca2e6</a> from steeringcontroller.o(i.__sti___22_steeringController_cpp_8d9ca2e6) referenced from steeringcontroller.o(.init_array)
 <LI><a href="#[f2]">__sti___22_testModeController_cpp_d0b2da69</a> from testmodecontroller.o(i.__sti___22_testModeController_cpp_d0b2da69) referenced from testmodecontroller.o(.init_array)
 <LI><a href="#[f7]">__sti___23_animationController_cpp_e8cc3375</a> from animationcontroller.o(i.__sti___23_animationController_cpp_e8cc3375) referenced from animationcontroller.o(.init_array)
 <LI><a href="#[fd]">__sti___24_offboardVisionSystem_cpp_b6ff7547</a> from offboardvisionsystem.o(i.__sti___24_offboardVisionSystem_cpp_b6ff7547) referenced from offboardvisionsystem.o(.init_array)
 <LI><a href="#[f9]">__sti___26_faceTrackingController_cpp_9c07dc23</a> from facetrackingcontroller.o(i.__sti___26_faceTrackingController_cpp_9c07dc23) referenced from facetrackingcontroller.o(.init_array)
 <LI><a href="#[ef]">__sti___26_pickAndPlaceController_cpp_cf406342</a> from pickandplacecontroller.o(i.__sti___26_pickAndPlaceController_cpp_cf406342) referenced from pickandplacecontroller.o(.init_array)
 <LI><a href="#[dc]">__sti___7_imu_cpp_fa0e53e7</a> from imu.o(i.__sti___7_imu_cpp_fa0e53e7) referenced from imu.o(.init_array)
 <LI><a href="#[e0]">__sti___7_spi_cpp_2ddf8692</a> from spi.o(i.__sti___7_spi_cpp_2ddf8692) referenced from spi.o(.init_array)
 <LI><a href="#[101]">__sti___8_char_cpp_a3dc957a</a> from char.o(i.__sti___8_char_cpp_a3dc957a) referenced from char.o(.init_array)
 <LI><a href="#[de]">__sti___8_main_cpp_7a2c016d</a> from main.o(i.__sti___8_main_cpp_7a2c016d) referenced from main.o(.init_array)
 <LI><a href="#[e3]">__sti___8_uart_cpp_ae57ec1a</a> from uart.o(i.__sti___8_uart_cpp_ae57ec1a) referenced from uart.o(.init_array)
 <LI><a href="#[e2]">__sti___9_timer_cpp_03dbb631</a> from timer.o(i.__sti___9_timer_cpp_03dbb631) referenced from timer.o(.init_array)
 <LI><a href="#[86]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[84]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[83]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[85]">fputc</a> from uart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[1b]">vprintf</a> from vprintf.o(.text) referenced 2 times from utilities_shared.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[104]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[106]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b5]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2b6]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[109]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[152]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10b]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[10d]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[10f]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[110]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[111]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2b8]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[113]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[115]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[116]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[117]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[119]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[11b]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[11d]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[121]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2b9]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[123]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[125]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[127]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[129]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2ba]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[13c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[12b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[12d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[136]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[141]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2ce]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2cf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2d0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2d1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2d2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2d3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[107]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2d4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[139]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[13d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[17f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[140]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[142]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[282]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RandS32(int, int)
</UL>

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2d8]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilities_shared.o(.data)
</UL>
<P><STRONG><a name="[145]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[148]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[14b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[149]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[114]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[14f]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[11a]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[122]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[10c]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[150]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[153]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[130]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[154]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, signed char) const
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintSegment(unsigned char) const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopFront(unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopBack(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AddArc(float, float, float, float, float, float, float, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[272]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[156]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2db]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopFront(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::SortKeyFrames()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
</UL>

<P><STRONG><a name="[158]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2df]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[2e0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2a4]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2e2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[29a]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[15a]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[15d]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[15e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[160]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[14c]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14d]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14e]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10a]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[146]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[147]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[83]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[124]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[126]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[144]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>

<P><STRONG><a name="[163]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[11c]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[166]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[118]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[120]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[155]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2e3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[15b]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[298]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2e5]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[16b]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[12e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[16d]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[11]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e9]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[176]"></a>_printf_fp_hex_real</STRONG> (Thumb, 750 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[177]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[128]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[12a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[164]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[168]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[167]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[179]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[17c]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[99]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[13a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[132]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[17a]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[16a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[175]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16f]"></a>_btod_etento</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13f]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[178]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[16c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[17b]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2ea]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[170]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[183]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[182]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[184]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[185]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[171]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[172]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[186]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[37]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, spi.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, spi.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>DMA_ClearFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>DMA_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[240]"></a>DMA_DeInit</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[244]"></a>DMA_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[241]"></a>DMA_Init</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[23d]"></a>GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[23e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[233]"></a>NVIC_Init</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[22d]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[23c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[22e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[18e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[245]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUDeselectAll()
</UL>

<P><STRONG><a name="[24c]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>

<P><STRONG><a name="[24b]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>

<P><STRONG><a name="[81]"></a>SystemInit</STRONG> (Thumb, 162 bytes, Stack size 4 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 296 bytes, Stack size 36 bytes, lights.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[231]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[230]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[22f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
</UL>

<P><STRONG><a name="[23f]"></a>USART_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[242]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[189]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_HalfDuplexCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
</UL>

<P><STRONG><a name="[18f]"></a>_Anki_Log</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, errorhandling.o(i._Anki_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::Init(const Anki::Cozmo::VisionSystem::FaceDetectionParameters&)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::AddKeyFrame(const Anki::Cozmo::KeyFrame&)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::ClearCannedAnimation(int)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
</UL>

<P><STRONG><a name="[192]"></a>atan2_acc(float, float)</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, trig_fast.o(i._Z9atan2_accff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool)
</UL>

<P><STRONG><a name="[20d]"></a>atan_fast(float)</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, trig_fast.o(i._Z9atan_fastf))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
</UL>

<P><STRONG><a name="[191]"></a>Anki::CoreTechPrint(const char*, std::__va_list)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utilities_shared.o(i._ZN4Anki13CoreTechPrintEPKcSt9__va_list))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>

<P><STRONG><a name="[190]"></a>Anki::CoreTechPrint(const char*, ...)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, utilities_shared.o(i._ZN4Anki13CoreTechPrintEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, signed char) const
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintSegment(unsigned char) const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AddArc(float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[195]"></a>Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGenerator12StartProfileEfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[197]"></a>Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 916 bytes, Stack size 96 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGenerator26StartProfile_fixedDurationEfffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float) &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[1ad]"></a>Anki::VelocityProfileGenerator::VelocityProfileGenerator()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGeneratorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_liftController_cpp_265a82b9
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_headController_cpp_d23a1f8e
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_steeringController_cpp_8d9ca2e6
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[2ec]"></a>Anki::VelocityProfileGenerator::VelocityProfileGenerator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, velocityprofilegenerator.o(i._ZN4Anki24VelocityProfileGeneratorC1Ev), UNUSED)

<P><STRONG><a name="[254]"></a>Anki::SetCoreTechPrintFunctionPtr(int(*)(const char*, std::__va_list))</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities_shared.o(i._ZN4Anki27SetCoreTechPrintFunctionPtrEPFiPKcSt9__va_listE))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[19d]"></a>Anki::Cozmo::Localization::GetHistIdx(unsigned, unsigned short&)</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, localization.o(i._ZN4Anki5Cozmo12Localization10GetHistIdxEjRt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[269]"></a>Anki::Cozmo::Localization::GetPoseFrameId()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization14GetPoseFrameIdEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[25a]"></a>Anki::Cozmo::Localization::ResetPoseFrame()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization14ResetPoseFrameEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)
</UL>

<P><STRONG><a name="[198]"></a>Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization17GetCurrentMatPoseERfS2_RNS_7RadiansE))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[19a]"></a>Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, localization.o(i._ZN4Anki5Cozmo12Localization17SetCurrentMatPoseEffNS_7RadiansE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestInit()
</UL>

<P><STRONG><a name="[19c]"></a>Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)</STRONG> (Thumb, 920 bytes, Stack size 128 bytes, localization.o(i._ZN4Anki5Cozmo12Localization22UpdatePoseWithKeyframeEjjfff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetHistIdx(unsigned, unsigned short&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[1a8]"></a>Anki::Cozmo::Localization::GetCurrentMatOrientation()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localization.o(i._ZN4Anki5Cozmo12Localization24GetCurrentMatOrientationEv))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(const Anki::Radians&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[1aa]"></a>Anki::Cozmo::Localization::Init()</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, localization.o(i._ZN4Anki5Cozmo12Localization4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::Localization::Init() &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1ac]"></a>Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)</STRONG> (Thumb, 832 bytes, Stack size 240 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower13DriveStraightEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()
</UL>

<P><STRONG><a name="[1b6]"></a>Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)</STRONG> (Thumb, 624 bytes, Stack size 192 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower14DrivePointTurnEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()
</UL>

<P><STRONG><a name="[214]"></a>Anki::Cozmo::PathFollower::IsTraversingPath()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower16IsTraversingPathEv))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()
</UL>

<P><STRONG><a name="[1b8]"></a>Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower18GenerateDubinsPathEffffffffffffPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>

<P><STRONG><a name="[25e]"></a>Anki::Cozmo::PathFollower::SetManualPathSpeed(float, float, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower18SetManualPathSpeedEfff))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
</UL>

<P><STRONG><a name="[1b5]"></a>Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower18StartPathTraversalEtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, signed char) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::SetPathFollowMode()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[25d]"></a>Anki::Cozmo::PathFollower::IsInManualSpeedMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower19IsInManualSpeedModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
</UL>

<P><STRONG><a name="[1bf]"></a>Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower21AppendPathSegment_ArcEjffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
</UL>

<P><STRONG><a name="[1c1]"></a>Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower22AppendPathSegment_LineEjfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float) &rArr; Anki::Cozmo::PathFollower::TrimPath() &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
</UL>

<P><STRONG><a name="[1c2]"></a>Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower27AppendPathSegment_PointTurnEjffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float) &rArr; Anki::Cozmo::PathFollower::TrimPath() &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAppendPathSegmentPointTurnMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1c3]"></a>Anki::Cozmo::PathFollower::Init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::Init() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1c4]"></a>Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)</STRONG> (Thumb, 832 bytes, Stack size 232 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower8DriveArcEfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()
</UL>

<P><STRONG><a name="[1c5]"></a>Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower8TrimPathEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char) &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopFront(unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopBack(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessTrimPathMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1b3]"></a>Anki::Cozmo::PathFollower::TrimPath()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower8TrimPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::TrimPath() &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopFront(unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PopBack(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1c8]"></a>Anki::Cozmo::PathFollower::ClearPath()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower9ClearPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::ClearPath() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestInit()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
</UL>

<P><STRONG><a name="[1c9]"></a>Anki::Cozmo::PathFollower::PrintPath()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pathfollower.o(i._ZN4Anki5Cozmo12PathFollower9PrintPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PathFollower::PrintPath() &rArr; Anki::Planning::Path::PrintPath() const &rArr; Anki::Planning::PathSegment::Print() const &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>

<P><STRONG><a name="[1d8]"></a>Anki::Cozmo::VisionSystem::DebugStream::Initialize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, visiondebugstream.o(i._ZN4Anki5Cozmo12VisionSystem11DebugStream10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[1f1]"></a>Anki::Cozmo::VisionSystem::StopTracking()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem12StopTrackingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::VisionSystem::StopTracking()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
</UL>

<P><STRONG><a name="[260]"></a>Anki::Cozmo::VisionSystem::SetImageSendMode(Anki::Cozmo::ImageSendMode_t, Anki::Vision::CameraResolution)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem16SetImageSendModeENS0_15ImageSendMode_tENS_6Vision16CameraResolutionE))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageRequestMessage(const Anki::Cozmo::Messages::ImageRequest&)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1d6]"></a>Anki::Cozmo::VisionSystem::TrackerParameters::Initialize()</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem17TrackerParameters10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[2a1]"></a>Anki::Cozmo::VisionSystem::TrackerParameters::TrackerParameters()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem17TrackerParametersC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
</UL>

<P><STRONG><a name="[2ed]"></a>Anki::Cozmo::VisionSystem::TrackerParameters::TrackerParameters__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem17TrackerParametersC1Ev), UNUSED)

<P><STRONG><a name="[1d0]"></a>Anki::Cozmo::VisionSystem::SetFaceDetectParams(float, int, int, int, int, int)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem19SetFaceDetectParamsEfiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::SetFaceDetectParams(float, int, int, int, int, int) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetFaceDetectParamsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[257]"></a>Anki::Cozmo::VisionSystem::GetFaceDetectionParams()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem22GetFaceDetectionParamsEv))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1d7]"></a>Anki::Cozmo::VisionSystem::FaceDetectionParameters::Initialize()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem23FaceDetectionParameters10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[2a2]"></a>Anki::Cozmo::VisionSystem::FaceDetectionParameters::FaceDetectionParameters()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem23FaceDetectionParametersC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
</UL>

<P><STRONG><a name="[2ee]"></a>Anki::Cozmo::VisionSystem::FaceDetectionParameters::FaceDetectionParameters__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem23FaceDetectionParametersC1Ev), UNUSED)

<P><STRONG><a name="[1d5]"></a>Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::Initialize()</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem31DetectFiducialMarkersParameters10InitializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[2a0]"></a>Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::DetectFiducialMarkersParameters()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem31DetectFiducialMarkersParametersC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
</UL>

<P><STRONG><a name="[2ef]"></a>Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::DetectFiducialMarkersParameters__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, visionparameters.o(i._ZN4Anki5Cozmo12VisionSystem31DetectFiducialMarkersParametersC1Ev), UNUSED)

<P><STRONG><a name="[1d1]"></a>Anki::Cozmo::VisionSystem::Init()</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::Init() &rArr; Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetHeadCamInfo()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::Initialize()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::FaceDetectionParameters::Initialize()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerParameters::Initialize()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DebugStream::Initialize()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::&lang;unnamed&rang;::MarkerToTrack::Clear()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1da]"></a>Anki::Cozmo::VisionSystem::SetParams(bool, float, int, float, float, unsigned char, float, bool)</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem9SetParamsEbfiffhfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::SetParams(bool, float, int, float, float, unsigned char, float, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetVisionSystemParamsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[275]"></a>Anki::Cozmo::EyeController::StopAnimating()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eyecontroller.o(i._ZN4Anki5Cozmo13EyeController13StopAnimatingEv))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
</UL>

<P><STRONG><a name="[255]"></a>Anki::Cozmo::EyeController::Init()</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, eyecontroller.o(i._ZN4Anki5Cozmo13EyeController4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::EyeController::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[202]"></a>Anki::Cozmo::HeadController::GetAngleRad()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController11GetAngleRadEv))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
</UL>

<P><STRONG><a name="[1db]"></a>Anki::Cozmo::HeadController::SetAngleRad(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController11SetAngleRadEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HeadController::SetAngleRad(float) &rArr; Anki::Radians::operator =(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1dd]"></a>Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController12StartNoddingEfftiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClientConnectionStatusMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1df]"></a>Anki::Cozmo::HeadController::SetDesiredAngle(float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[1e0]"></a>Anki::Cozmo::HeadController::SetDesiredAngle(float, float, float, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController15SetDesiredAngleEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::SetDesiredAngle(float, float, float, float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[262]"></a>Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController16SetSpeedAndAccelEff))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[1e1]"></a>Anki::Cozmo::HeadController::SetAngularVelocity(float)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController18SetAngularVelocityEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::HeadController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Stop()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[1e3]"></a>Anki::Cozmo::HeadController::StartCalibrationRoutine()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController23StartCalibrationRoutineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::StartCalibrationRoutine() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1e4]"></a>Anki::Cozmo::HeadController::Stop()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::HeadController::Stop() &rArr; Anki::Cozmo::HeadController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
</UL>

<P><STRONG><a name="[21a]"></a>Anki::Cozmo::HeadController::Enable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController6EnableEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[26c]"></a>Anki::Cozmo::HeadController::SetGains(float, float, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController8SetGainsEfff))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadControllerGainsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1e5]"></a>Anki::Cozmo::LiftController::Height2Rad(float)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController10Height2RadEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Cozmo::LiftController::Height2Rad(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Init()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
</UL>

<P><STRONG><a name="[204]"></a>Anki::Cozmo::LiftController::GetAngleRad()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController11GetAngleRadEv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
</UL>

<P><STRONG><a name="[1e6]"></a>Anki::Cozmo::LiftController::GetHeightMM()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController11GetHeightMMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Anki::Cozmo::LiftController::GetHeightMM() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
</UL>

<P><STRONG><a name="[20c]"></a>Anki::Cozmo::LiftController::IsInPosition()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController12IsInPositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
</UL>

<P><STRONG><a name="[1e7]"></a>Anki::Cozmo::LiftController::SetDesiredHeight(float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::SetDesiredHeight(float) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[1e9]"></a>Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController16SetDesiredHeightEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[264]"></a>Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController16SetSpeedAndAccelEff))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[203]"></a>Anki::Cozmo::LiftController::GetAngularVelocity()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController18GetAngularVelocityEv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
</UL>

<P><STRONG><a name="[1ea]"></a>Anki::Cozmo::LiftController::SetAngularVelocity(float)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController18SetAngularVelocityEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Stop()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[1eb]"></a>Anki::Cozmo::LiftController::StartCalibrationRoutine()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController23StartCalibrationRoutineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::StartCalibrationRoutine() &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1ec]"></a>Anki::Cozmo::LiftController::Init()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::LiftController::Init() &rArr; Anki::Cozmo::LiftController::Height2Rad(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1ed]"></a>Anki::Cozmo::LiftController::Stop()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::LiftController::Stop() &rArr; Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
</UL>

<P><STRONG><a name="[219]"></a>Anki::Cozmo::LiftController::Enable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController6EnableEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[21b]"></a>Anki::Cozmo::LiftController::Disable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController7DisableEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
</UL>

<P><STRONG><a name="[26d]"></a>Anki::Cozmo::LiftController::SetGains(float, float, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController8SetGainsEfff))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetLiftControllerGainsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[1bc]"></a>Anki::Cozmo::SpeedController::SetUserCommandedAcceleration(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController28SetUserCommandedAccelerationEt))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
</UL>

<P><STRONG><a name="[1bd]"></a>Anki::Cozmo::SpeedController::SetUserCommandedDeceleration(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController28SetUserCommandedDecelerationEt))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
</UL>

<P><STRONG><a name="[1af]"></a>Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController30GetCurrentMeasuredVehicleSpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[1f5]"></a>Anki::Cozmo::SpeedController::GetUserCommandedDesiredVehicleSpeed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController35GetUserCommandedDesiredVehicleSpeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[1bb]"></a>Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, speedcontroller.o(i._ZN4Anki5Cozmo15SpeedController35SetUserCommandedDesiredVehicleSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[1f6]"></a>Anki::Cozmo::WheelController::GetDesiredWheelSpeeds(float&, float&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController21GetDesiredWheelSpeedsERfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>

<P><STRONG><a name="[1ee]"></a>Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController22GetFilteredWheelSpeedsERfS2_))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetCurrentMeasuredVehicleSpeed()
</UL>

<P><STRONG><a name="[217]"></a>Anki::Cozmo::WheelController::Enable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController6EnableEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[206]"></a>Anki::Cozmo::WheelController::Disable()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheelcontroller.o(i._ZN4Anki5Cozmo15WheelController7DisableEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
</UL>

<P><STRONG><a name="[1ef]"></a>Anki::Cozmo::DockingController::ResetDocker()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController11ResetDockerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::DockingController::ResetDocker() &rArr; Anki::Cozmo::PathFollower::ClearPath() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::StopTracking()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Init()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbortDockingMessage(const unsigned char*)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Reset()
</UL>

<P><STRONG><a name="[1f2]"></a>Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)</STRONG> (Thumb, 664 bytes, Stack size 96 bytes, dockingcontroller.o(i._ZN4Anki5Cozmo17DockingController14SetRelDockPoseEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator +(const Anki::Radians&, float)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::PrintPath()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DockPathTestUpdate()
</UL>

<P><STRONG><a name="[1f4]"></a>Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController16ExecutePointTurnEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatOrientation()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::GetUserCommandedDesiredVehicleSpeed()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
</UL>

<P><STRONG><a name="[1be]"></a>Anki::Cozmo::SteeringController::SetPathFollowMode()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController17SetPathFollowModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
</UL>

<P><STRONG><a name="[1f0]"></a>Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController18ExecuteDirectDriveEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetDesiredWheelSpeeds(float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
</UL>

<P><STRONG><a name="[1fe]"></a>Anki::Cozmo::SteeringController::GetMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, steeringcontroller.o(i._ZN4Anki5Cozmo18SteeringController7GetModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
</UL>

<P><STRONG><a name="[1f7]"></a>Anki::Cozmo::TestModeController::IMUTestInit(int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController11IMUTestInitEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[1f8]"></a>Anki::Cozmo::TestModeController::AnimTestInit()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController12AnimTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
</UL>

<P><STRONG><a name="[1fa]"></a>Anki::Cozmo::TestModeController::HeadTestInit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController12HeadTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[1fb]"></a>Anki::Cozmo::TestModeController::LiftTestInit()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController12LiftTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[1fc]"></a>Anki::Cozmo::TestModeController::StopTestInit()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController12StopTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[1fd]"></a>Anki::Cozmo::TestModeController::DriveTestInit(int, int, int)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController13DriveTestInitEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::DriveTestInit(int, int, int) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
</UL>

<P><STRONG><a name="[90]"></a>Anki::Cozmo::TestModeController::IMUTestUpdate()</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController13IMUTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::IMUTestUpdate() &rArr; Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::GetRotation()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::GetMode()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[91]"></a>Anki::Cozmo::TestModeController::AnimTestUpdate()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14AnimTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::AnimTestUpdate() &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::IsDefined(int)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[8f]"></a>Anki::Cozmo::TestModeController::HeadTestUpdate()</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14HeadTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::HeadTestUpdate() &rArr; Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[8d]"></a>Anki::Cozmo::TestModeController::LiftTestUpdate()</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14LiftTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::LiftTestUpdate() &rArr; Anki::Cozmo::LiftController::SetDesiredHeight(float) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetAngularVelocity()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetHeightMM()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetAngleRad()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[93]"></a>Anki::Cozmo::TestModeController::StopTestUpdate()</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController14StopTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::StopTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[8c]"></a>Anki::Cozmo::TestModeController::DriveTestUpdate()</STRONG> (Thumb, 744 bytes, Stack size 88 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15DriveTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::DriveTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Disable()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[92]"></a>Anki::Cozmo::TestModeController::LightTestUpdate()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController15LightTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::LightTestUpdate() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[209]"></a>Anki::Cozmo::TestModeController::DockPathTestInit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController16DockPathTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[89]"></a>Anki::Cozmo::TestModeController::DockPathTestUpdate()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18DockPathTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::DockPathTestUpdate() &rArr; Anki::Cozmo::DockingController::SetRelDockPose(float, float, float) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[20a]"></a>Anki::Cozmo::TestModeController::LiftToggleTestInit()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18LiftToggleTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[94]"></a>Anki::Cozmo::TestModeController::MaxPowerTestUpdate()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18MaxPowerTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::MaxPowerTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[20b]"></a>Anki::Cozmo::TestModeController::PathFollowTestInit()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController18PathFollowTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
</UL>

<P><STRONG><a name="[95]"></a>Anki::Cozmo::TestModeController::FaceTrackTestUpdate()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController19FaceTrackTestUpdateEv))
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[8e]"></a>Anki::Cozmo::TestModeController::LiftToggleTestUpdate()</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20LiftToggleTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::LiftToggleTestUpdate() &rArr; Anki::Cozmo::LiftController::SetDesiredHeight(float) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::IsInPosition()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetHeightMM()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[8a]"></a>Anki::Cozmo::TestModeController::PathFollowTestUpdate()</STRONG> (Thumb, 466 bytes, Stack size 72 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20PathFollowTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::PathFollowTestUpdate() &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan_fast(float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[20e]"></a>Anki::Cozmo::TestModeController::PickAndPlaceTestInit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController20PickAndPlaceTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[88]"></a>Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController22PickAndPlaceTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DidLastActionSucceed()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::IsBusy()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::PlaceOnGround(float, float, float, bool)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[213]"></a>Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestInit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController33PathFollowConvenienceFuncTestInitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
</UL>

<P><STRONG><a name="[8b]"></a>Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController35PathFollowConvenienceFuncTestUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate() &rArr; Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsTraversingPath()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii)
</UL>
<P><STRONG><a name="[215]"></a>Anki::Cozmo::TestModeController::Reset()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5ResetEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Enable()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Enable()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Enable()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Reset()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Stop()
</UL>

<P><STRONG><a name="[208]"></a>Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController5StartENS0_8TestModeEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Disable()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Enable()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Enable()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Disable()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::WheelController::Enable()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestInit(int, int, int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Reset()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Stop()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStartTestModeMessage(const Anki::Cozmo::Messages::StartTestMode&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LightTestUpdate()
</UL>

<P><STRONG><a name="[268]"></a>Anki::Cozmo::TestModeController::GetMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmodecontroller.o(i._ZN4Anki5Cozmo18TestModeController7GetModeEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[21d]"></a>Anki::Cozmo::AnimationController::TransitionAndPlay(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController17TransitionAndPlayEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::AnimationController::TransitionAndPlay(int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessTransitionToStateAnimationMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[21e]"></a>Anki::Cozmo::AnimationController::ClearCannedAnimation(int)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController20ClearCannedAnimationEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Anki::Cozmo::AnimationController::ClearCannedAnimation(int) &rArr; Anki::Cozmo::Animation::Clear() &rArr; Anki::Cozmo::Animation::Stop() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Clear()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClearCannedAnimationMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[221]"></a>Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController28AddKeyFrameToCannedAnimationERKNS0_8KeyFrameEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int) &rArr; Anki::Cozmo::Animation::AddKeyFrame(const Anki::Cozmo::KeyFrame&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::AddKeyFrame(const Anki::Cozmo::KeyFrame&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldHeadAngleMessage(const unsigned char*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_WaitForSoundMessage(const unsigned char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartLiftNodMessage(const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartHeadNodMessage(const unsigned char*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetHeadAngleMessage(const unsigned char*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TurnInPlaceMessage(const unsigned char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopLiftNodMessage(const unsigned char*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopHeadNodMessage(const unsigned char*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopSoundMessage(const unsigned char*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_PlaySoundMessage(const unsigned char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_DriveLineMessage(const unsigned char*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldPoseMessage(const unsigned char*)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessage(const unsigned char*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartSpinningEyesMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartSpinningEyes&)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartFlashingEyesMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartFlashingEyes&)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TriggerAnimationMessage(const unsigned char*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopEyeAnimationMessage(const unsigned char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldLiftHeightMessage(const unsigned char*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartBlinkingMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartBlinking&)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetLiftHeightMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[256]"></a>Anki::Cozmo::AnimationController::Init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[1f9]"></a>Anki::Cozmo::AnimationController::Play(int, unsigned)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController4PlayEij))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPlayAnimationMessage(const unsigned char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::AnimTestUpdate()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::AnimTestInit()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::TransitionAndPlay(int, int)
</UL>

<P><STRONG><a name="[216]"></a>Anki::Cozmo::AnimationController::Stop()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Cozmo::AnimationController::Stop() &rArr; Anki::Cozmo::Animation::Stop() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbortAnimationMessage(const unsigned char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[200]"></a>Anki::Cozmo::AnimationController::IsDefined(int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, animationcontroller.o(i._ZN4Anki5Cozmo19AnimationController9IsDefinedEi))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::IsDefined()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::AnimTestUpdate()
</UL>

<P><STRONG><a name="[21c]"></a>Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, facetrackingcontroller.o(i._ZN4Anki5Cozmo22FaceTrackingController13StartTrackingENS1_19FaceSelectionMethodEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::FaceDetection&)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const Anki::Cozmo::Messages::FaceTracking&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[228]"></a>Anki::Cozmo::FaceTrackingController::Init(const Anki::Cozmo::VisionSystem::FaceDetectionParameters&)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, facetrackingcontroller.o(i._ZN4Anki5Cozmo22FaceTrackingController4InitERKNS0_12VisionSystem23FaceDetectionParametersE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Anki::Cozmo::FaceTrackingController::Init(const Anki::Cozmo::VisionSystem::FaceDetectionParameters&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetHeadCamInfo()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[229]"></a>Anki::Cozmo::FaceTrackingController::Reset()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, facetrackingcontroller.o(i._ZN4Anki5Cozmo22FaceTrackingController5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::FaceTrackingController::Reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::FaceDetection&)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const Anki::Cozmo::Messages::FaceTracking&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[22a]"></a>Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, const Anki::Embedded::Point&lang;float&rang;&, float, bool, Anki::Cozmo::DockAction_t)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fRKNS_8Embedded5PointIfEEfbNS0_12DockAction_tE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDockWithObjectMessage(const Anki::Cozmo::Messages::DockWithObject&)
</UL>

<P><STRONG><a name="[20f]"></a>Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController11DockToBlockENS_6Vision10MarkerTypeES3_fbNS0_12DockAction_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDockWithObjectMessage(const Anki::Cozmo::Messages::DockWithObject&)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, const Anki::Embedded::Point&lang;float&rang;&, float, bool, Anki::Cozmo::DockAction_t)
</UL>

<P><STRONG><a name="[212]"></a>Anki::Cozmo::PickAndPlaceController::PlaceOnGround(float, float, float, bool)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController13PlaceOnGroundEfffb))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPlaceObjectOnGroundMessage(const unsigned char*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
</UL>

<P><STRONG><a name="[211]"></a>Anki::Cozmo::PickAndPlaceController::DidLastActionSucceed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController20DidLastActionSucceedEv))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
</UL>

<P><STRONG><a name="[22b]"></a>Anki::Cozmo::PickAndPlaceController::Init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PickAndPlaceController::Init() &rArr; Anki::Cozmo::DockingController::ResetDocker() &rArr; Anki::Cozmo::PathFollower::ClearPath() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
</UL>

<P><STRONG><a name="[218]"></a>Anki::Cozmo::PickAndPlaceController::Reset()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::PickAndPlaceController::Reset() &rArr; Anki::Cozmo::DockingController::ResetDocker() &rArr; Anki::Cozmo::PathFollower::ClearPath() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
</UL>

<P><STRONG><a name="[210]"></a>Anki::Cozmo::PickAndPlaceController::IsBusy()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pickandplacecontroller.o(i._ZN4Anki5Cozmo22PickAndPlaceController6IsBusyEv))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
</UL>

<P><STRONG><a name="[22c]"></a>Anki::Cozmo::HAL::LightsInit()</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, lights.o(i._ZN4Anki5Cozmo3HAL10LightsInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Anki::Cozmo::HAL::LightsInit() &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, imu.o(i._ZN4Anki5Cozmo3HAL11IMUReadDataERNS1_17IMU_DataStructureE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&) &rArr; Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE) &rArr; Anki::Cozmo::HAL::IMUDeselectAll() &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUDeselectAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
</UL>

<P><STRONG><a name="[24a]"></a>Anki::Cozmo::HAL::UARTGetChar(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL11UARTGetCharEj))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
</UL>

<P><STRONG><a name="[237]"></a>Anki::Cozmo::HAL::UARTPutChar(int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(i._ZN4Anki5Cozmo3HAL11UARTPutCharEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::UARTPutChar(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::BufPutChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a6]"></a>Anki::Cozmo::HAL::GetTimeStamp()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN4Anki5Cozmo3HAL12GetTimeStampEv))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFlashBlockIDsMessage(const unsigned char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessPingMessage(const unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Init()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::RecordAndSend(unsigned)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[24f]"></a>Anki::Cozmo::HAL::SetTimeStamp(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN4Anki5Cozmo3HAL12SetTimeStampEj))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)
</UL>

<P><STRONG><a name="[239]"></a>Anki::Cozmo::HAL::FlashBlockIDs()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, blocks.o(i._ZN4Anki5Cozmo3HAL13FlashBlockIDsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::HAL::FlashBlockIDs() &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFlashBlockIDsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[201]"></a>Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
</UL>

<P><STRONG><a name="[1e2]"></a>Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::MaxPowerTestUpdate()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
</UL>

<P><STRONG><a name="[23a]"></a>Anki::Cozmo::HAL::SetBlockLight(unsigned char, const unsigned*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, blocks.o(i._ZN4Anki5Cozmo3HAL13SetBlockLightEhPKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::SetBlockLight(unsigned char, const unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetBlockLightsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[263]"></a>Anki::Cozmo::HAL::SetHeadlights(bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lights.o(i._ZN4Anki5Cozmo3HAL13SetHeadlightsEb))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[23b]"></a>Anki::Cozmo::HAL::UARTConfigure()</STRONG> (Thumb, 356 bytes, Stack size 120 bytes, uart.o(i._ZN4Anki5Cozmo3HAL13UARTConfigureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Anki::Cozmo::HAL::UARTConfigure() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTInit()
</UL>

<P><STRONG><a name="[1d3]"></a>Anki::Cozmo::HAL::GetHeadCamInfo()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN4Anki5Cozmo3HAL14GetHeadCamInfoEv))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::Init(const Anki::Cozmo::VisionSystem::FaceDetectionParameters&)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)
</UL>

<P><STRONG><a name="[246]"></a>Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, uart.o(i._ZN4Anki5Cozmo3HAL14UARTPutMessageEhPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::BufPutChar(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
</UL>

<P><STRONG><a name="[258]"></a>Anki::Cozmo::HAL::DisconnectRadio()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL15DisconnectRadioEv))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
</UL>

<P><STRONG><a name="[18b]"></a>Anki::Cozmo::HAL::GetMicroCounter()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i._ZN4Anki5Cozmo3HAL15GetMicroCounterEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTGetCharacter(unsigned)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
</UL>

<P><STRONG><a name="[1ab]"></a>Anki::Cozmo::HAL::MotorGetPosition(Anki::Cozmo::HAL::MotorID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL16MotorGetPositionENS1_7MotorIDE))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
</UL>

<P><STRONG><a name="[250]"></a>Anki::Cozmo::HAL::RadioIsConnected()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL16RadioIsConnectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[247]"></a>Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFlashBlockIDsMessage(const unsigned char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)
</UL>

<P><STRONG><a name="[26b]"></a>Anki::Cozmo::HAL::RadioUpdateState(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL16RadioUpdateStateEhh))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessClientConnectionStatusMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[205]"></a>Anki::Cozmo::HAL::MotorResetPosition(Anki::Cozmo::HAL::MotorID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motors.o(i._ZN4Anki5Cozmo3HAL18MotorResetPositionENS1_7MotorIDE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
</UL>

<P><STRONG><a name="[249]"></a>Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, usb_radio.o(i._ZN4Anki5Cozmo3HAL19RadioGetNextMessageEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTGetChar(unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
</UL>

<P><STRONG><a name="[207]"></a>Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lights.o(i._ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTInit()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetBlockLight(unsigned char, const unsigned*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FlashBlockIDs()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSetDefaultLightsMessage(const unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LightTestUpdate()
</UL>

<P><STRONG><a name="[2a3]"></a>Anki::Cozmo::HAL::Startup()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup.o(i._ZN4Anki5Cozmo3HAL7StartupEv))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24d]"></a>Anki::Cozmo::HAL::UARTInit()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i._ZN4Anki5Cozmo3HAL8UARTInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Anki::Cozmo::HAL::UARTInit() &rArr; Anki::Cozmo::HAL::UARTConfigure() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTConfigure()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>Anki::Cozmo::HAL::MicroWait(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, timer.o(i._ZN4Anki5Cozmo3HAL9MicroWaitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUDeselectAll()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FlashBlockIDs()
</UL>

<P><STRONG><a name="[24e]"></a>Anki::Cozmo::HAL::TimerInit()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timer.o(i._ZN4Anki5Cozmo3HAL9TimerInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Anki::Cozmo::HAL::TimerInit() &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>Anki::Cozmo::Robot::step_MainExecution()</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, cozmobot.o(i._ZN4Anki5Cozmo5Robot18step_MainExecutionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetTimeStamp(unsigned)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioIsConnected()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ResetInit()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253]"></a>Anki::Cozmo::Robot::Init()</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, cozmobot.o(i._ZN4Anki5Cozmo5Robot4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Robot::Init() &rArr; Anki::Cozmo::VisionSystem::Init() &rArr; Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::Init()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::Init(const Anki::Cozmo::VisionSystem::FaceDetectionParameters&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Init()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Init()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::StartCalibrationRoutine()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::StartCalibrationRoutine()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::EyeController::Init()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::GetFaceDetectionParams()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Init()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::SetCoreTechPrintFunctionPtr(int(*)(const char*, std::__va_list))
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>Anki::Cozmo::Messages::CheckMailbox(Anki::Cozmo::Messages::FaceDetection&)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages12CheckMailboxERNS1_13FaceDetectionE))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::Reset()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
</UL>

<P><STRONG><a name="[d7]"></a>Anki::Cozmo::Messages::ProcessPingMessage(const unsigned char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages18ProcessPingMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::Messages::ProcessPingMessage(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[252]"></a>Anki::Cozmo::Messages::ProcessBTLEMessages()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, messages.o(i._ZN4Anki5Cozmo8Messages19ProcessBTLEMessagesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessBTLEMessages() &rArr; Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::DisconnectRadio()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[a3]"></a>Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveHeadMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::Messages::ProcessMoveHeadMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessMoveLiftMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::Cozmo::Messages::ProcessMoveLiftMessage(const unsigned char*) &rArr; Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Anki::Cozmo::Messages::ProcessSyncTimeMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessSyncTimeMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[259]"></a>Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessSyncTimeMessageERKNS1_8SyncTimeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetHeadCamInfo()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetTimeStamp(unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::ResetPoseFrame()
</UL>

<P><STRONG><a name="[ab]"></a>Anki::Cozmo::Messages::ProcessTrimPathMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages22ProcessTrimPathMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessTrimPathMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char) &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages23ProcessClearPathMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessClearPathMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::ClearPath() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SpeedController::SetUserCommandedDesiredVehicleSpeed(short)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>Anki::Cozmo::Messages::ProcessIMURequestMessage(const unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages24ProcessIMURequestMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessIMURequestMessage(const unsigned char*) &rArr; Anki::Cozmo::IMUFilter::RecordAndSend(unsigned) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::RecordAndSend(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages25ProcessDriveWheelsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, messages.o(i._ZN4Anki5Cozmo8Messages25ProcessDriveWheelsMessageERKNS1_11DriveWheelsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsTraversingPath()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::IsInManualSpeedMode()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::SetManualPathSpeed(float, float, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[ac]"></a>Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages25ProcessExecutePathMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessExecutePathMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>Anki::Cozmo::Messages::ProcessAbortDockingMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessAbortDockingMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAbortDockingMessage(const unsigned char*) &rArr; Anki::Cozmo::DockingController::ResetDocker() &rArr; Anki::Cozmo::PathFollower::ClearPath() &rArr; Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::ResetDocker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessFaceTrackingMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::Reset()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const Anki::Cozmo::Messages::FaceTracking&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessFaceTrackingMessageERKNS1_12FaceTrackingE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::Reset()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
</UL>

<P><STRONG><a name="[b3]"></a>Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessImageRequestMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetImageSendMode(Anki::Cozmo::ImageSendMode_t, Anki::Vision::CameraResolution)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[261]"></a>Anki::Cozmo::Messages::ProcessImageRequestMessage(const Anki::Cozmo::Messages::ImageRequest&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessImageRequestMessageERKNS1_12ImageRequestE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetImageSendMode(Anki::Cozmo::ImageSendMode_t, Anki::Vision::CameraResolution)
</UL>

<P><STRONG><a name="[a5]"></a>Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadAngleMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetHeadAngleMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Anki::Cozmo::Messages::ProcessSetHeadlightMessage(const unsigned char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages26ProcessSetHeadlightMessageEPKh))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetHeadlights(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Anki::Cozmo::Messages::ProcessFaceDetectionMessage(const unsigned char*)</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessFaceDetectionMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Anki::Cozmo::Messages::ProcessFaceDetectionMessage(const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>Anki::Cozmo::Messages::ProcessFlashBlockIDsMessage(const unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessFlashBlockIDsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::Messages::ProcessFlashBlockIDsMessage(const unsigned char*) &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::FlashBlockIDs()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>Anki::Cozmo::Messages::ProcessPlayAnimationMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessPlayAnimationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessPlayAnimationMessage(const unsigned char*) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessSetLiftHeightMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetLiftHeightMessage(const unsigned char*) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight(float) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStartTestModeMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*) &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>Anki::Cozmo::Messages::ProcessStartTestModeMessage(const Anki::Cozmo::Messages::StartTestMode&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStartTestModeMessageERKNS1_13StartTestModeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
</UL>

<P><STRONG><a name="[a6]"></a>Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages27ProcessStopAllMotorsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Cozmo::Messages::ProcessStopAllMotorsMessage(const unsigned char*) &rArr; Anki::Cozmo::LiftController::SetAngularVelocity(float) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>Anki::Cozmo::Messages::ProcessAbortAnimationMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages28ProcessAbortAnimationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Cozmo::Messages::ProcessAbortAnimationMessage(const unsigned char*) &rArr; Anki::Cozmo::AnimationController::Stop() &rArr; Anki::Cozmo::Animation::Stop() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>Anki::Cozmo::Messages::ProcessDockWithObjectMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages28ProcessDockWithObjectMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>Anki::Cozmo::Messages::ProcessDockWithObjectMessage(const Anki::Cozmo::Messages::DockWithObject&)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, messages.o(i._ZN4Anki5Cozmo8Messages28ProcessDockWithObjectMessageERKNS1_14DockWithObjectE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, const Anki::Embedded::Point&lang;float&rang;&, float, bool, Anki::Cozmo::DockAction_t)
</UL>

<P><STRONG><a name="[d8]"></a>Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, messages.o(i._ZN4Anki5Cozmo8Messages28ProcessPanAndTiltHeadMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessPanAndTiltHeadMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle(float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::GetAngleRad()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatOrientation()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>Anki::Cozmo::Messages::ProcessSetBlockLightsMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages28ProcessSetBlockLightsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetBlockLightsMessage(const unsigned char*) &rArr; Anki::Cozmo::HAL::SetBlockLight(unsigned char, const unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetBlockLight(unsigned char, const unsigned*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages29ProcessHeadAngleUpdateMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::Messages::ProcessHeadAngleUpdateMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::SetAngleRad(float) &rArr; Anki::Radians::operator =(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngleRad(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>Anki::Cozmo::Messages::ProcessSetDefaultLightsMessage(const unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, messages.o(i._ZN4Anki5Cozmo8Messages30ProcessSetDefaultLightsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetDefaultLightsMessage(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, messages.o(i._ZN4Anki5Cozmo8Messages32ProcessDockingErrorSignalMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Anki::Cozmo::Messages::ProcessDockingErrorSignalMessage(const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>Anki::Cozmo::Messages::ProcessPlaceObjectOnGroundMessage(const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages33ProcessPlaceObjectOnGroundMessageEPKh))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::PlaceOnGround(float, float, float, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>Anki::Cozmo::Messages::ProcessSetFaceDetectParamsMessage(const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages33ProcessSetFaceDetectParamsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetFaceDetectParamsMessage(const unsigned char*) &rArr; Anki::Cozmo::VisionSystem::SetFaceDetectParams(float, int, int, int, int, int) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetFaceDetectParams(float, int, int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages34ProcessAppendPathSegmentArcMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAppendPathSegmentArcMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float) &rArr; Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>Anki::Cozmo::Messages::ProcessClearCannedAnimationMessage(const unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages34ProcessClearCannedAnimationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Anki::Cozmo::Messages::ProcessClearCannedAnimationMessage(const unsigned char*) &rArr; Anki::Cozmo::AnimationController::ClearCannedAnimation(int) &rArr; Anki::Cozmo::Animation::Clear() &rArr; Anki::Cozmo::Animation::Stop() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::ClearCannedAnimation(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>Anki::Cozmo::Messages::ProcessDriveWheelsCurvatureMessage(const unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages34ProcessDriveWheelsCurvatureMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAbsLocalizationUpdateMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[267]"></a>Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAbsLocalizationUpdateMessageERKNS1_21AbsLocalizationUpdateE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetPoseFrameId()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::getDegrees() const
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::GetMode()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[a8]"></a>Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessAppendPathSegmentLineMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAppendPathSegmentLineMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float) &rArr; Anki::Cozmo::PathFollower::TrimPath() &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>Anki::Cozmo::Messages::ProcessSetVisionSystemParamsMessage(const unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages35ProcessSetVisionSystemParamsMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessSetVisionSystemParamsMessage(const unsigned char*) &rArr; Anki::Cozmo::VisionSystem::SetParams(bool, float, int, float, float, unsigned char, float, bool) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetParams(bool, float, int, float, float, unsigned char, float, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>Anki::Cozmo::Messages::ProcessClientConnectionStatusMessage(const unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, messages.o(i._ZN4Anki5Cozmo8Messages36ProcessClientConnectionStatusMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessClientConnectionStatusMessage(const unsigned char*) &rArr; Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float) &rArr; Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioUpdateState(unsigned char, unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>Anki::Cozmo::Messages::ProcessSetHeadControllerGainsMessage(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages36ProcessSetHeadControllerGainsMessageEPKh))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetGains(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>Anki::Cozmo::Messages::ProcessSetLiftControllerGainsMessage(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages36ProcessSetLiftControllerGainsMessageEPKh))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetGains(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldPoseMessage(const unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages38ProcessAddAnimKeyFrame_HoldPoseMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldPoseMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_DriveLineMessage(const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages39ProcessAddAnimKeyFrame_DriveLineMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_DriveLineMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_PlaySoundMessage(const unsigned char*)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages39ProcessAddAnimKeyFrame_PlaySoundMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_PlaySoundMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopSoundMessage(const unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages39ProcessAddAnimKeyFrame_StopSoundMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopSoundMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>Anki::Cozmo::Messages::ProcessAppendPathSegmentPointTurnMessage(const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages40ProcessAppendPathSegmentPointTurnMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAppendPathSegmentPointTurnMessage(const unsigned char*) &rArr; Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float) &rArr; Anki::Cozmo::PathFollower::TrimPath() &rArr; Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Anki::Cozmo::Messages::ProcessTransitionToStateAnimationMessage(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages40ProcessTransitionToStateAnimationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessTransitionToStateAnimationMessage(const unsigned char*) &rArr; Anki::Cozmo::AnimationController::TransitionAndPlay(int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::TransitionAndPlay(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopHeadNodMessage(const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages41ProcessAddAnimKeyFrame_StopHeadNodMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopHeadNodMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopLiftNodMessage(const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages41ProcessAddAnimKeyFrame_StopLiftNodMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopLiftNodMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TurnInPlaceMessage(const unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages41ProcessAddAnimKeyFrame_TurnInPlaceMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TurnInPlaceMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetHeadAngleMessage(const unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_SetHeadAngleMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetHeadAngleMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartHeadNodMessage(const unsigned char*)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_StartHeadNodMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartHeadNodMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartLiftNodMessage(const unsigned char*)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_StartLiftNodMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartLiftNodMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_WaitForSoundMessage(const unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages42ProcessAddAnimKeyFrame_WaitForSoundMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_WaitForSoundMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldHeadAngleMessage(const unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_HoldHeadAngleMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldHeadAngleMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetLiftHeightMessage(const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_SetLiftHeightMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetLiftHeightMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartBlinkingMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_StartBlinkingMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartBlinkingMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartBlinking&)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages43ProcessAddAnimKeyFrame_StartBlinkingMessageERKNS1_29AddAnimKeyFrame_StartBlinkingE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>

<P><STRONG><a name="[c6]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldLiftHeightMessage(const unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages44ProcessAddAnimKeyFrame_HoldLiftHeightMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldLiftHeightMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopEyeAnimationMessage(const unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages46ProcessAddAnimKeyFrame_StopEyeAnimationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopEyeAnimationMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TriggerAnimationMessage(const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages46ProcessAddAnimKeyFrame_TriggerAnimationMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TriggerAnimationMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartFlashingEyesMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages47ProcessAddAnimKeyFrame_StartFlashingEyesMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[26f]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartFlashingEyesMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartFlashingEyes&)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages47ProcessAddAnimKeyFrame_StartFlashingEyesMessageERKNS1_33AddAnimKeyFrame_StartFlashingEyesE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>

<P><STRONG><a name="[d2]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartSpinningEyesMessage(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages47ProcessAddAnimKeyFrame_StartSpinningEyesMessageEPKh))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[270]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartSpinningEyesMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartSpinningEyes&)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages47ProcessAddAnimKeyFrame_StartSpinningEyesMessageERKNS1_33AddAnimKeyFrame_StartSpinningEyesE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>

<P><STRONG><a name="[d0]"></a>Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessage(const unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, messages.o(i._ZN4Anki5Cozmo8Messages49ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessageEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessage(const unsigned char*) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.constdata)
</UL>
<P><STRONG><a name="[248]"></a>Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages7GetSizeENS1_2IDE))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
</UL>

<P><STRONG><a name="[96]"></a>Anki::Cozmo::Messages::SendText(const char*, std::__va_list)</STRONG> (Thumb, 132 bytes, Stack size 584 bytes, messages.o(i._ZN4Anki5Cozmo8Messages8SendTextEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessBTLEMessages()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const Anki::Cozmo::Messages::FaceTracking&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cozmobot.o(i._ZN4Anki5Cozmo5Robot4InitEv)
</UL>
<P><STRONG><a name="[1a7]"></a>Anki::Cozmo::Messages::SendText(const char*, ...)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, messages.o(i._ZN4Anki5Cozmo8Messages8SendTextEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::StartCalibrationRoutine()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::StartCalibrationRoutine()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldHeadAngleMessage(const unsigned char*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_WaitForSoundMessage(const unsigned char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartLiftNodMessage(const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartHeadNodMessage(const unsigned char*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetHeadAngleMessage(const unsigned char*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TurnInPlaceMessage(const unsigned char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopLiftNodMessage(const unsigned char*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopHeadNodMessage(const unsigned char*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopSoundMessage(const unsigned char*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_PlaySoundMessage(const unsigned char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_DriveLineMessage(const unsigned char*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldPoseMessage(const unsigned char*)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStartTestModeMessage(const Anki::Cozmo::Messages::StartTestMode&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessStartTestModeMessage(const unsigned char*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageRequestMessage(const Anki::Cozmo::Messages::ImageRequest&)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessImageRequestMessage(const unsigned char*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const Anki::Cozmo::Messages::FaceTracking&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessFaceTrackingMessage(const unsigned char*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessSyncTimeMessage(const Anki::Cozmo::Messages::SyncTime&)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Reset()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestUpdate()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowConvenienceFuncTestInit()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestUpdate()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PickAndPlaceTestInit()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestInit()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::MaxPowerTestUpdate()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestInit()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DockPathTestUpdate()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DockPathTestInit()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LightTestUpdate()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::AnimTestUpdate()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestInit(int, int, int)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestInit()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestInit()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestInit()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::AnimTestInit()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestInit(int)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::IMUFilter::RecordAndSend(unsigned)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PickAndPlaceController::DockToBlock(Anki::Vision::MarkerType, Anki::Vision::MarkerType, float, bool, Anki::Cozmo::DockAction_t)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetParams(bool, float, int, float, float, unsigned char, float, bool)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetFaceDetectParams(float, int, int, int, int, int)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetEyeShapeAndColorMessage(const unsigned char*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartSpinningEyesMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartSpinningEyes&)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartFlashingEyesMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartFlashingEyes&)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_TriggerAnimationMessage(const unsigned char*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StopEyeAnimationMessage(const unsigned char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_HoldLiftHeightMessage(const unsigned char*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_StartBlinkingMessage(const Anki::Cozmo::Messages::AddAnimKeyFrame_StartBlinking&)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAddAnimKeyFrame_SetLiftHeightMessage(const unsigned char*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::GetTrack(Anki::Cozmo::KeyFrame::Type)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::SortKeyFrames()
</UL>

<P><STRONG><a name="[251]"></a>Anki::Cozmo::Messages::ResetInit()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, messages.o(i._ZN4Anki5Cozmo8Messages9ResetInitEv))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
</UL>

<P><STRONG><a name="[222]"></a>Anki::Cozmo::Animation::AddKeyFrame(const Anki::Cozmo::KeyFrame&)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, animation.o(i._ZN4Anki5Cozmo9Animation11AddKeyFrameERKNS0_8KeyFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Anki::Cozmo::Animation::AddKeyFrame(const Anki::Cozmo::KeyFrame&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::AddKeyFrameToCannedAnimation(const Anki::Cozmo::KeyFrame&, int)
</UL>

<P><STRONG><a name="[273]"></a>Anki::Cozmo::Animation::SortKeyFrames()</STRONG> (Thumb, 218 bytes, Stack size 672 bytes, animation.o(i._ZN4Anki5Cozmo9Animation13SortKeyFramesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Init()
</UL>

<P><STRONG><a name="[223]"></a>Anki::Cozmo::Animation::Init()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, animation.o(i._ZN4Anki5Cozmo9Animation4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::SortKeyFrames()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
</UL>

<P><STRONG><a name="[21f]"></a>Anki::Cozmo::Animation::Stop()</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, animation.o(i._ZN4Anki5Cozmo9Animation4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Cozmo::Animation::Stop() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Stop()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Stop()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::EyeController::StopAnimating()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Clear()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Stop()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::Play(int, unsigned)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::ClearCannedAnimation(int)
</UL>

<P><STRONG><a name="[220]"></a>Anki::Cozmo::Animation::Clear()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, animation.o(i._ZN4Anki5Cozmo9Animation5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Cozmo::Animation::Clear() &rArr; Anki::Cozmo::Animation::Stop() &rArr; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*) &rArr; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::ClearCannedAnimation(int)
</UL>

<P><STRONG><a name="[97]"></a>Anki::Cozmo::Animation::Track::Track()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, animation.o(i._ZN4Anki5Cozmo9Animation5TrackC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> animation.o(i._ZN4Anki5Cozmo9AnimationC1Ev)
</UL>
<P><STRONG><a name="[2f0]"></a>Anki::Cozmo::Animation::Track::Track__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, animation.o(i._ZN4Anki5Cozmo9Animation5TrackC1Ev), UNUSED)

<P><STRONG><a name="[276]"></a>Anki::Cozmo::Animation::GetTrack(Anki::Cozmo::KeyFrame::Type)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, animation.o(i._ZN4Anki5Cozmo9Animation8GetTrackENS0_8KeyFrame4TypeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>

<P><STRONG><a name="[224]"></a>Anki::Cozmo::Animation::IsDefined()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, animation.o(i._ZN4Anki5Cozmo9Animation9IsDefinedEv))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::AnimationController::IsDefined(int)
</UL>

<P><STRONG><a name="[277]"></a>Anki::Cozmo::Animation::StopTrack(Anki::Cozmo::Animation::TrackType)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, animation.o(i._ZN4Anki5Cozmo9Animation9StopTrackENS1_9TrackTypeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Stop()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::Stop()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::EyeController::StopAnimating()
</UL>

<P><STRONG><a name="[9d]"></a>Anki::Cozmo::Animation::Animation()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, animation.o(i._ZN4Anki5Cozmo9AnimationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Cozmo::Animation::Animation() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> animationcontroller.o(i.__sti___23_animationController_cpp_e8cc3375)
</UL>
<P><STRONG><a name="[2f1]"></a>Anki::Cozmo::Animation::Animation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, animation.o(i._ZN4Anki5Cozmo9AnimationC1Ev), UNUSED)

<P><STRONG><a name="[19b]"></a>Anki::Cozmo::IMUFilter::GetRotation()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter11GetRotationEv))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
</UL>

<P><STRONG><a name="[25b]"></a>Anki::Cozmo::IMUFilter::RecordAndSend(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, imufilter.o(i._ZN4Anki5Cozmo9IMUFilter13RecordAndSendEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::IMUFilter::RecordAndSend(unsigned) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessIMURequestMessage(const unsigned char*)
</UL>

<P><STRONG><a name="[279]"></a>Anki::Radians::rescale()</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, radians.o(i._ZN4Anki7Radians7rescaleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator +(const Anki::Radians&, float)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>

<P><STRONG><a name="[1a9]"></a>Anki::Radians::Radians(const Anki::Radians&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatOrientation()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[2f2]"></a>Anki::Radians::Radians__sub_object(const Anki::Radians&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1ERKS0_), UNUSED)

<P><STRONG><a name="[1a5]"></a>Anki::Radians::Radians(float)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radians.o(i._ZN4Anki7RadiansC1Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_dockingController_cpp_90697494
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp_1cac3972
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_liftController_cpp_265a82b9
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_headController_cpp_d23a1f8e
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestInit()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[2f3]"></a>Anki::Radians::Radians__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, radians.o(i._ZN4Anki7RadiansC1Ef), UNUSED)

<P><STRONG><a name="[1ae]"></a>Anki::Radians::Radians()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_steeringController_cpp_8d9ca2e6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___26_pickAndPlaceController_cpp_cf406342
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[2f4]"></a>Anki::Radians::Radians__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansC1Ev), UNUSED)

<P><STRONG><a name="[199]"></a>Anki::Radians::operator =(const Anki::Radians&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansaSERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::Init()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::GetCurrentMatPose(float&, float&, Anki::Radians&)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::SetCurrentMatPose(float, float, Anki::Radians)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1dc]"></a>Anki::Radians::operator =(float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radians.o(i._ZN4Anki7RadiansaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Radians::operator =(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngleRad(float)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
</UL>

<P><STRONG><a name="[27b]"></a>Anki::Embedded::MemoryStack::Allocate(int, bool, int&)</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStack8AllocateEibRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[1cd]"></a>Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp_1cac3972
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
</UL>

<P><STRONG><a name="[2f5]"></a>Anki::Embedded::MemoryStack::MemoryStack__sub_object(void*, int, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1EPviNS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[1a0]"></a>Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1ERKS1_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[2f6]"></a>Anki::Embedded::MemoryStack::MemoryStack__sub_object(const Anki::Embedded::MemoryStack&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1ERKS1_), UNUSED)

<P><STRONG><a name="[27e]"></a>Anki::Embedded::MemoryStack::MemoryStack()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::SerializedBuffer::SerializedBuffer()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
</UL>

<P><STRONG><a name="[2f7]"></a>Anki::Embedded::MemoryStack::MemoryStack__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memory.o(i._ZN4Anki8Embedded11MemoryStackC1Ev), UNUSED)

<P><STRONG><a name="[280]"></a>Anki::Embedded::SerializedBuffer::SerializedBuffer()</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, serialize.o(i._ZN4Anki8Embedded16SerializedBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Anki::Embedded::SerializedBuffer::SerializedBuffer() &rArr; Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_visionDebugStream_cpp_7de1fc27
</UL>

<P><STRONG><a name="[2f8]"></a>Anki::Embedded::SerializedBuffer::SerializedBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, serialize.o(i._ZN4Anki8Embedded16SerializedBufferC1Ev), UNUSED)

<P><STRONG><a name="[1cc]"></a>Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ebbb))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp_1cac3972
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
</UL>

<P><STRONG><a name="[2f9]"></a>Anki::Embedded::Flags::Buffer::Buffer__sub_object(bool, bool, bool)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ebbb), UNUSED)

<P><STRONG><a name="[27f]"></a>Anki::Embedded::Flags::Buffer::Buffer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[2fa]"></a>Anki::Embedded::Flags::Buffer::Buffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flags.o(i._ZN4Anki8Embedded5Flags6BufferC1Ev), UNUSED)

<P><STRONG><a name="[281]"></a>Anki::Embedded::RandS32(int, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utilities.o(i._ZN4Anki8Embedded7RandS32Eii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Embedded::RandS32(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[283]"></a>Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, path.o(i._ZN4Anki8Planning11GetArcAngleEffffffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[287]"></a>Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegment10DefineLineEfffffff))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[285]"></a>Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegment9DefineArcEffffffff))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AddArc(float, float, float, float, float, float, float, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[98]"></a>Anki::Planning::PathSegment::PathSegment()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegmentC1Ev))
<BR>[Address Reference Count : 2]<UL><LI> path.o(i._ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf)
<LI> path.o(i._ZN4Anki8Planning4PathC1Ev)
</UL>
<P><STRONG><a name="[2fb]"></a>Anki::Planning::PathSegment::PathSegment__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning11PathSegmentC1Ev), UNUSED)

<P><STRONG><a name="[284]"></a>Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)</STRONG> (Thumb, 780 bytes, Stack size 144 bytes, path.o(i._ZN4Anki8Planning16GenerateCSCCurveEfffffffffffNS0_14DubinsPathTypeEPNS0_11PathSegmentERf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
</UL>

<P><STRONG><a name="[1b9]"></a>Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)</STRONG> (Thumb, 432 bytes, Stack size 528 bytes, path.o(i._ZN4Anki8Planning18GenerateDubinsPathERNS0_4PathEffffffffffffPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*) &rArr; Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&) &rArr; Anki::Planning::GetArcAngle(float, float, float, float, float, float, bool) &rArr; atan2_acc(float, float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::GenerateDubinsPath(float, float, float, float, float, float, float, float, float, float, float, float, float*)
</UL>

<P><STRONG><a name="[1b4]"></a>Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4Path10AppendLineEjfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::AppendLine(unsigned, float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineLine(float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Line(unsigned, float, float, float, float, float, float, float)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[1b7]"></a>Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4Path15AppendPointTurnEjffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::AppendPointTurn(unsigned, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_PointTurn(unsigned, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1b2]"></a>Anki::Planning::Path::Clear()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4Path5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::Clear() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::Init()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::ClearPath()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
</UL>

<P><STRONG><a name="[288]"></a>Anki::Planning::Path::AddArc(float, float, float, float, float, float, float, float)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, path.o(i._ZN4Anki8Planning4Path6AddArcEffffffff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1c6]"></a>Anki::Planning::Path::PopBack(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4Path7PopBackEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::PopBack(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c7]"></a>Anki::Planning::Path::PopFront(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4Path8PopFrontEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::PopFront(unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::TrimPath(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c0]"></a>Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 736 bytes, Stack size 152 bytes, path.o(i._ZN4Anki8Planning4Path9AppendArcEjffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator -(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &lang;(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator &rang;=(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator ==(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(const Anki::Radians&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(const Anki::Radians&)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::operator !=(const Anki::Radians&, const Anki::Radians&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::DefineArc(float, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::AppendPathSegment_Arc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[28e]"></a>Anki::Planning::Path::Path()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4PathC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Anki::Planning::Path::Path() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_pathFollower_cpp_b5ce3046
</UL>

<P><STRONG><a name="[2fc]"></a>Anki::Planning::Path::Path__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, path.o(i._ZN4Anki8Planning4PathC1Ev), UNUSED)

<P><STRONG><a name="[9c]"></a>Anki::Planning::Path::~Path()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning4PathD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> pathfollower.o(i.__sti___16_pathFollower_cpp_b5ce3046)
</UL>
<P><STRONG><a name="[2fd]"></a>Anki::Planning::Path::~Path__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, path.o(i._ZN4Anki8Planning4PathD1Ev), UNUSED)

<P><STRONG><a name="[28d]"></a>Anki::operator ==(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkieqERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[289]"></a>Anki::operator &rang;=(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkigeERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[28b]"></a>Anki::operator &lang;(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkiltERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[28c]"></a>Anki::operator -(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkimiERKNS_7RadiansES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::operator -(const Anki::Radians&, const Anki::Radians&) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[28a]"></a>Anki::operator !=(const Anki::Radians&, const Anki::Radians&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, radians.o(i._ZN4AnkineERKNS_7RadiansES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::AppendArc(unsigned, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1f3]"></a>Anki::operator +(const Anki::Radians&, float)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, radians.o(i._ZN4AnkiplERKNS_7RadiansEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Anki::operator +(const Anki::Radians&, float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
</UL>

<P><STRONG><a name="[274]"></a>Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, keyframe.o(i._ZNK4Anki5Cozmo8KeyFrame14TransitionIntoEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const &rArr; Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float) &rArr; Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetTimeStamp()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecuteDirectDrive(float, float, float, float)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetSpeedAndAccel(float, float)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float, float, float, float)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetSpeedAndAccel(float, float)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::RandS32(int, int)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Init()
</UL>

<P><STRONG><a name="[26a]"></a>Anki::Radians::getDegrees() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radians.o(i._ZNK4Anki7Radians10getDegreesEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
</UL>

<P><STRONG><a name="[1ce]"></a>Anki::Embedded::MemoryStack::IsValid() const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, memory.o(i._ZNK4Anki8Embedded11MemoryStack7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Anki::Embedded::MemoryStack::IsValid() const &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
</UL>

<P><STRONG><a name="[27d]"></a>Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flags.o(i._ZNK4Anki8Embedded5Flags6Buffer20get_isFullyAllocatedEv))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[2a7]"></a>Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flags.o(i._ZNK4Anki8Embedded5Flags6Buffer23get_zeroAllocatedMemoryEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[2a8]"></a>Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flags.o(i._ZNK4Anki8Embedded5Flags6Buffer27get_useBoundaryFillPatternsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[28f]"></a>Anki::Planning::PathSegment::GetEndPoint(float&, float&) const</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning11PathSegment11GetEndPointERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetEndPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const
</UL>

<P><STRONG><a name="[290]"></a>Anki::Planning::PathSegment::GetStartPoint(float&, float&) const</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning11PathSegment13GetStartPointERfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetStartPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const
</UL>

<P><STRONG><a name="[291]"></a>Anki::Planning::PathSegment::Print() const</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, path.o(i._ZNK4Anki8Planning11PathSegment5PrintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Anki::Planning::PathSegment::Print() const &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintPath() const
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::PrintSegment(unsigned char) const
</UL>

<P><STRONG><a name="[286]"></a>Anki::Planning::PathSegment::GetLength() const</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, path.o(i._ZNK4Anki8Planning11PathSegment9GetLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::PathSegment::GetLength() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[292]"></a>Anki::Planning::Path::PrintSegment(unsigned char) const</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning4Path12PrintSegmentEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
</UL>

<P><STRONG><a name="[1ba]"></a>Anki::Planning::Path::CheckContinuity(float, signed char) const</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, path.o(i._ZNK4Anki8Planning4Path15CheckContinuityEfa))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::CheckContinuity(float, signed char) const &rArr; Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const &rArr; Anki::Planning::PathSegment::GetStartPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::StartPathTraversal(unsigned short, bool)
</UL>

<P><STRONG><a name="[293]"></a>Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const</STRONG> (Thumb, 224 bytes, Stack size 96 bytes, path.o(i._ZNK4Anki8Planning4Path22CheckSegmentContinuityEfa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const &rArr; Anki::Planning::PathSegment::GetStartPoint(float&, float&) const &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckContinuity(float, signed char) const
</UL>

<P><STRONG><a name="[1ca]"></a>Anki::Planning::Path::PrintPath() const</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, path.o(i._ZNK4Anki8Planning4Path9PrintPathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Anki::Planning::Path::PrintPath() const &rArr; Anki::Planning::PathSegment::Print() const &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::CoreTechPrint(const char*, ...)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::PrintPath()
</UL>

<P><STRONG><a name="[294]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
</UL>

<P><STRONG><a name="[295]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[296]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
</UL>

<P><STRONG><a name="[297]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[174]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[29c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_pathFollower_cpp_b5ce3046
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_messages_cpp_0235eab8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Animation::Animation()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___23_animationController_cpp_e8cc3375
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Path()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
</UL>

<P><STRONG><a name="[138]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[1a4]"></a>__hardfp_acosf</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[194]"></a>__hardfp_asinf</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
</UL>

<P><STRONG><a name="[1d4]"></a>__hardfp_atanf</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[27a]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::rescale()
</UL>

<P><STRONG><a name="[2fe]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[19f]"></a>__hardfp_cosf</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[19e]"></a>__hardfp_sinf</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::GetHeightMM()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::PathFollowTestUpdate()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateDubinsPath(Anki::Planning::Path&, float, float, float, float, float, float, float, float, float, float, float, float, float*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetStartPoint(float&, float&) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetEndPoint(float&, float&) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[193]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_acc(float, float)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::GetLength() const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::GenerateCSCCurve(float, float, float, float, float, float, float, float, float, float, float, Anki::Planning::DubinsPathType, Anki::Planning::PathSegment*, float&)
</UL>

<P><STRONG><a name="[29d]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[29e]"></a>__mathlib_rredf2</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[151]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[143]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[180]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[162]"></a>ferror</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[85]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; Anki::Cozmo::HAL::UARTPutChar(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutChar(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>main</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = main &rArr; Anki::Cozmo::Robot::step_MainExecution() &rArr; Anki::Cozmo::TestModeController::Start(Anki::Cozmo::TestMode, int, int, int) &rArr; Anki::Cozmo::AnimationController::Play(int, unsigned) &rArr; Anki::Cozmo::Animation::Init() &rArr; Anki::Cozmo::Animation::SortKeyFrames() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::Init()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Robot::step_MainExecution()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::TimerInit()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTInit()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::Startup()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::LightsInit()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[29b]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[86]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[9b]"></a>Anki::Mailbox&lang;Anki::Cozmo::Messages::FaceDetection&rang;::Mailbox()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, messages.o(t._ZN4Anki7MailboxINS_5Cozmo8Messages13FaceDetectionEEC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i.__sti___12_messages_cpp_0235eab8)
</UL>
<P><STRONG><a name="[2ff]"></a>Anki::Mailbox&lang;Anki::Cozmo::Messages::FaceDetection&rang;::Mailbox__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messages.o(t._ZN4Anki7MailboxINS_5Cozmo8Messages13FaceDetectionEEC1Ev), UNUSED)

<P><STRONG><a name="[2a5]"></a>Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[300]"></a>Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded14LinearSequenceIiEC1Eii), UNUSED)

<P><STRONG><a name="[1a1]"></a>Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)</STRONG> (Thumb, 558 bytes, Stack size 112 bytes, localization.o(t._ZN4Anki8Embedded15ComputePoseDiffIfEENS_6ResultERKNS0_5ArrayIT_EERKNS0_6Point3IS4_EES7_SB_RS5_RS9_NS0_11MemoryStackE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[29f]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEE8set_sizeEi))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>

<P><STRONG><a name="[1cf]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 538 bytes, Stack size 120 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_isFullyAllocated() const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::LinearSequence&lang;int&rang;::LinearSequence(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()
</UL>

<P><STRONG><a name="[301]"></a>Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList__sub_object(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 120 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded15FixedLengthListINS0_12VisionMarkerEEC1EiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[1d9]"></a>Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, localization.o(t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_useBoundaryFillPatterns() const
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::get_zeroAllocatedMemory() const
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::Allocate(int, bool, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_localization_cpp_1cac3972
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
</UL>

<P><STRONG><a name="[302]"></a>Anki::Embedded::Array&lang;float&rang;::Array__sub_object(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, localization.o(t._ZN4Anki8Embedded5ArrayIfEC1EiiRNS0_11MemoryStackENS0_5Flags6BufferE), UNUSED)

<P><STRONG><a name="[9e]"></a>Anki::Embedded::Point&lang;float&rang;::Point()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> offboardvisionsystem.o(i.__sti___24_offboardVisionSystem_cpp_b6ff7547)
</UL>
<P><STRONG><a name="[303]"></a>Anki::Embedded::Point&lang;float&rang;::Point__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded5PointIfEC1Ev), UNUSED)

<P><STRONG><a name="[1a2]"></a>Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, perspectiveposeestimation.o(t._ZN4Anki8Embedded6Matrix8MultiplyIffEENS_6ResultERKNS0_5ArrayIT_EES8_RNS4_IT0_EE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::get_size(int) const
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[2aa]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Efff), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)
</UL>

<P><STRONG><a name="[304]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Efff), UNUSED)

<P><STRONG><a name="[9f]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> offboardvisionsystem.o(i.__sti___24_offboardVisionSystem_cpp_b6ff7547)
</UL>
<P><STRONG><a name="[305]"></a>Anki::Embedded::Point3&lang;float&rang;::Point3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, offboardvisionsystem.o(t._ZN4Anki8Embedded6Point3IfEC1Ev), UNUSED)

<P><STRONG><a name="[1a3]"></a>Anki::Embedded::operator *&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&)</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, offboardvisionsystem.o(t._ZN4Anki8EmbeddedmlIfEENS0_6Point3IT_EERKNS0_5ArrayIS3_EERKS4_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Point3&lang;float&rang;::Point3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Localization::UpdatePoseWithKeyframe(unsigned, unsigned, float, float, float)
</UL>

<P><STRONG><a name="[9a]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
</UL>
<P><STRONG><a name="[306]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[2a9]"></a>Anki::Embedded::Array&lang;float&rang;::IsValid() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, perspectiveposeestimation.o(t._ZNK4Anki8Embedded5ArrayIfE7IsValidEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
</UL>

<P><STRONG><a name="[2a6]"></a>Anki::Embedded::Array&lang;float&rang;::get_size(int) const</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, localization.o(t._ZNK4Anki8Embedded5ArrayIfE8get_sizeEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Anki_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::ComputePoseDiff&lang;float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Point3&lang;T1&rang;&, Anki::Embedded::MemoryStack)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Matrix::Multiply&lang;float, float&rang;(const Anki::Embedded::Array&lang;T1&rang;&, const Anki::Embedded::Array&lang;T1&rang;&, Anki::Embedded::Array&lang;T2&rang;&)
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[2ab]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
</UL>

<P><STRONG><a name="[2ae]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
</UL>

<P><STRONG><a name="[307]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::FaceTrackingController::StartTracking(Anki::Cozmo::FaceTrackingController::FaceSelectionMethod, unsigned)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
</UL>

<P><STRONG><a name="[2af]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ad]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2b0]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetAngularVelocity(float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetAngularVelocity(float)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::DockingController::SetRelDockPose(float, float, float)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessAbsLocalizationUpdateMessage(const Anki::Cozmo::Messages::AbsLocalizationUpdate&)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::ProcessDriveWheelsMessage(const Anki::Cozmo::Messages::DriveWheels&)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftToggleTestUpdate()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::MaxPowerTestUpdate()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::DriveTestUpdate()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::StopTestUpdate()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::LiftTestUpdate()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::HeadTestUpdate()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::TestModeController::IMUTestUpdate()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveArc(float, float, float, float, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DrivePointTurn(float, float, float, float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::PathFollower::DriveStraight(float, float, float, float)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::SteeringController::ExecutePointTurn(float, float, float, float)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetParams(bool, float, int, float, float, unsigned char, float, bool)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::SetFaceDetectParams(float, int, int, int, int, int)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::KeyFrame::TransitionInto(unsigned, unsigned char) const
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::CheckSegmentContinuity(float, signed char) const
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::PathSegment::Print() const
</UL>

<P><STRONG><a name="[2b1]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2b2]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[12c]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[308]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[309]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2ac]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[10e]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[112]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[236]"></a>Anki::Cozmo::HAL::IMUDeselectAll()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, imu.o(i._ZN4Anki5Cozmo3HAL14IMUDeselectAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Anki::Cozmo::HAL::IMUDeselectAll() &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)
</UL>

<P><STRONG><a name="[234]"></a>Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, imu.o(i._ZN4Anki5Cozmo3HAL15IMUSelectDeviceE10IMU_DEVICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Anki::Cozmo::HAL::IMUSelectDevice(IMU_DEVICE) &rArr; Anki::Cozmo::HAL::IMUDeselectAll() &rArr; Anki::Cozmo::HAL::MicroWait(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::MicroWait(unsigned)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUDeselectAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
</UL>

<P><STRONG><a name="[235]"></a>Anki::Cozmo::HAL::IMUWriteReadPipelined(short)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, imu.o(i._ZN4Anki5Cozmo3HAL21IMUWriteReadPipelinedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Anki::Cozmo::HAL::IMUWriteReadPipelined(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::IMUReadData(Anki::Cozmo::HAL::IMU_DataStructure&)
</UL>

<P><STRONG><a name="[dc]"></a>__sti___7_imu_cpp_fa0e53e7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imu.o(i.__sti___7_imu_cpp_fa0e53e7))
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.init_array)
</UL>
<P><STRONG><a name="[dd]"></a>__sti___10_lights_cpp_bdf0f37f</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lights.o(i.__sti___10_lights_cpp_bdf0f37f))
<BR>[Address Reference Count : 1]<UL><LI> lights.o(.init_array)
</UL>
<P><STRONG><a name="[de]"></a>__sti___8_main_cpp_7a2c016d</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.__sti___8_main_cpp_7a2c016d))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[df]"></a>__sti___10_motors_cpp_b251b376</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motors.o(i.__sti___10_motors_cpp_b251b376))
<BR>[Address Reference Count : 1]<UL><LI> motors.o(.init_array)
</UL>
<P><STRONG><a name="[e0]"></a>__sti___7_spi_cpp_2ddf8692</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(i.__sti___7_spi_cpp_2ddf8692))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[e1]"></a>__sti___11_startup_cpp_5c656aa9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup.o(i.__sti___11_startup_cpp_5c656aa9))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.init_array)
</UL>
<P><STRONG><a name="[e2]"></a>__sti___9_timer_cpp_03dbb631</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.__sti___9_timer_cpp_03dbb631))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.init_array)
</UL>
<P><STRONG><a name="[238]"></a>Anki::Cozmo::HAL::BufPutChar(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL10BufPutCharEh))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::UARTPutChar(int)
</UL>

<P><STRONG><a name="[1a]"></a>Anki::Cozmo::HAL::UARTGetCharacter(unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart.o(i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Anki::Cozmo::HAL::UARTGetCharacter(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Anki::Cozmo::HAL::UARTStartTransfer()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>__sti___8_uart_cpp_ae57ec1a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.__sti___8_uart_cpp_ae57ec1a))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.init_array)
</UL>
<P><STRONG><a name="[e4]"></a>__sti___13_usb_radio_cpp_bde5bef1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_radio.o(i.__sti___13_usb_radio_cpp_bde5bef1))
<BR>[Address Reference Count : 1]<UL><LI> usb_radio.o(.init_array)
</UL>
<P><STRONG><a name="[e5]"></a>__sti___10_blocks_cpp_b9277415</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, blocks.o(i.__sti___10_blocks_cpp_b9277415))
<BR>[Address Reference Count : 1]<UL><LI> blocks.o(.init_array)
</UL>
<P><STRONG><a name="[e6]"></a>__sti___11_battery_cpp_5ced7e3b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(i.__sti___11_battery_cpp_5ced7e3b))
<BR>[Address Reference Count : 1]<UL><LI> battery.o(.init_array)
</UL>
<P><STRONG><a name="[e7]"></a>__sti___12_cozmoBot_cpp_fcd62337</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cozmobot.o(i.__sti___12_cozmoBot_cpp_fcd62337))
<BR>[Address Reference Count : 1]<UL><LI> cozmobot.o(.init_array)
</UL>
<P><STRONG><a name="[e8]"></a>__sti___21_dockingController_cpp_90697494</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dockingcontroller.o(i.__sti___21_dockingController_cpp_90697494))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___21_dockingController_cpp_90697494 &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dockingcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[e9]"></a>__sti___18_gripController_cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gripcontroller.o(i.__sti___18_gripController_cpp))
<BR>[Address Reference Count : 1]<UL><LI> gripcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[1de]"></a>Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float)</STRONG> (Thumb, 372 bytes, Stack size 104 bytes, headcontroller.o(i._ZN4Anki5Cozmo14HeadController24SetDesiredAngle_internalEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::HeadController::SetDesiredAngle_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float, float, float, float)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::SetDesiredAngle(float)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HeadController::StartNodding(float, float, unsigned short, int, float, float)
</UL>

<P><STRONG><a name="[ea]"></a>__sti___18_headController_cpp_d23a1f8e</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, headcontroller.o(i.__sti___18_headController_cpp_d23a1f8e))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___18_headController_cpp_d23a1f8e &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> headcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[1e8]"></a>Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float)</STRONG> (Thumb, 418 bytes, Stack size 104 bytes, liftcontroller.o(i._ZN4Anki5Cozmo14LiftController25SetDesiredHeight_internalEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::LiftController::SetDesiredHeight_internal(float, float, float, float) &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::HAL::GetMicroCounter()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::Height2Rad(float)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::operator =(float)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile_fixedDuration(float, float, float, float, float, float, float, float, float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::StartProfile(float, float, float, float, float, float, float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::StartCalibrationRoutine()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float, float, float, float)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::LiftController::SetDesiredHeight(float)
</UL>

<P><STRONG><a name="[eb]"></a>__sti___18_liftController_cpp_265a82b9</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, liftcontroller.o(i.__sti___18_liftController_cpp_265a82b9))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___18_liftController_cpp_265a82b9 &rArr; Anki::Radians::Radians(float) &rArr; Anki::Radians::rescale()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liftcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[ec]"></a>__sti___16_localization_cpp_1cac3972</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, localization.o(i.__sti___16_localization_cpp_1cac3972))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __sti___16_localization_cpp_1cac3972 &rArr; Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer) &rArr; Anki::Embedded::MemoryStack::Allocate(int, bool, int&) &rArr; _Anki_Log &rArr; Anki::CoreTechPrint(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians(float)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Array&lang;float&rang;::Array(int, int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> localization.o(.init_array)
</UL>
<P><STRONG><a name="[ed]"></a>__sti___12_messages_cpp_0235eab8</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, messages.o(i.__sti___12_messages_cpp_0235eab8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___12_messages_cpp_0235eab8 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(.init_array)
</UL>
<P><STRONG><a name="[ee]"></a>__sti___16_pathFollower_cpp_b5ce3046</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pathfollower.o(i.__sti___16_pathFollower_cpp_b5ce3046))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___16_pathFollower_cpp_b5ce3046 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Planning::Path::Path()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pathfollower.o(.init_array)
</UL>
<P><STRONG><a name="[ef]"></a>__sti___26_pickAndPlaceController_cpp_cf406342</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pickandplacecontroller.o(i.__sti___26_pickAndPlaceController_cpp_cf406342))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___26_pickAndPlaceController_cpp_cf406342
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pickandplacecontroller.o(.init_array)
</UL>
<P><STRONG><a name="[f0]"></a>__sti___19_speedController_cpp_183f1a36</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speedcontroller.o(i.__sti___19_speedController_cpp_183f1a36))
<BR>[Address Reference Count : 1]<UL><LI> speedcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[f1]"></a>__sti___22_steeringController_cpp_8d9ca2e6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, steeringcontroller.o(i.__sti___22_steeringController_cpp_8d9ca2e6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___22_steeringController_cpp_8d9ca2e6
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::VelocityProfileGenerator::VelocityProfileGenerator()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Radians::Radians()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steeringcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[f2]"></a>__sti___22_testModeController_cpp_d0b2da69</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testmodecontroller.o(i.__sti___22_testModeController_cpp_d0b2da69))
<BR>[Address Reference Count : 1]<UL><LI> testmodecontroller.o(.init_array)
</UL>
<P><STRONG><a name="[f3]"></a>__sti___21_visionDebugStream_cpp_7de1fc27</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, visiondebugstream.o(i.__sti___21_visionDebugStream_cpp_7de1fc27))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___21_visionDebugStream_cpp_7de1fc27 &rArr; Anki::Embedded::SerializedBuffer::SerializedBuffer() &rArr; Anki::Embedded::MemoryStack::MemoryStack()
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::SerializedBuffer::SerializedBuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> visiondebugstream.o(.init_array)
</UL>
<P><STRONG><a name="[f4]"></a>__sti___20_visionParameters_cpp_491d0e6b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, visionparameters.o(i.__sti___20_visionParameters_cpp_491d0e6b))
<BR>[Address Reference Count : 1]<UL><LI> visionparameters.o(.init_array)
</UL>
<P><STRONG><a name="[f5]"></a>__sti___19_wheelController_cpp_bcff47de</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheelcontroller.o(i.__sti___19_wheelController_cpp_bcff47de))
<BR>[Address Reference Count : 1]<UL><LI> wheelcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[f6]"></a>__sti___13_imuFilter_cpp_873cf2e8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imufilter.o(i.__sti___13_imuFilter_cpp_873cf2e8))
<BR>[Address Reference Count : 1]<UL><LI> imufilter.o(.init_array)
</UL>
<P><STRONG><a name="[f7]"></a>__sti___23_animationController_cpp_e8cc3375</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, animationcontroller.o(i.__sti___23_animationController_cpp_e8cc3375))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___23_animationController_cpp_e8cc3375 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> animationcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[f8]"></a>__sti___15_proxSensors_cpp_d6c7b5b3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, proxsensors.o(i.__sti___15_proxSensors_cpp_d6c7b5b3))
<BR>[Address Reference Count : 1]<UL><LI> proxsensors.o(.init_array)
</UL>
<P><STRONG><a name="[f9]"></a>__sti___26_faceTrackingController_cpp_9c07dc23</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, facetrackingcontroller.o(i.__sti___26_faceTrackingController_cpp_9c07dc23))
<BR>[Address Reference Count : 1]<UL><LI> facetrackingcontroller.o(.init_array)
</UL>
<P><STRONG><a name="[fa]"></a>__sti___17_eyeController_cpp_8860946f</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eyecontroller.o(i.__sti___17_eyeController_cpp_8860946f))
<BR>[Address Reference Count : 1]<UL><LI> eyecontroller.o(.init_array)
</UL>
<P><STRONG><a name="[fb]"></a>__sti___13_animation_cpp_38b7b398</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, animation.o(i.__sti___13_animation_cpp_38b7b398))
<BR>[Address Reference Count : 1]<UL><LI> animation.o(.init_array)
</UL>
<P><STRONG><a name="[fc]"></a>__sti___12_keyFrame_cpp_a2e5f0e7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, keyframe.o(i.__sti___12_keyFrame_cpp_a2e5f0e7))
<BR>[Address Reference Count : 1]<UL><LI> keyframe.o(.init_array)
</UL>
<P><STRONG><a name="[1cb]"></a>Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers()</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem12VisionMemory12ResetBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Anki::Cozmo::VisionSystem::VisionMemory::ResetBuffers() &rArr; Anki::Cozmo::Messages::SendText(const char*, ...) &rArr; Anki::Cozmo::Messages::SendText(const char*, std::__va_list) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::Messages::SendText(const char*, ...)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer(bool, bool, bool)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack(void*, int, Anki::Embedded::Flags::Buffer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::IsValid() const
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::FixedLengthList(int, Anki::Embedded::MemoryStack&, Anki::Embedded::Flags::Buffer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
</UL>

<P><STRONG><a name="[1d2]"></a>Anki::Cozmo::VisionSystem::&lang;unnamed&rang;::MarkerToTrack::Clear()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, offboardvisionsystem.o(i._ZN4Anki5Cozmo12VisionSystem48_GLOBAL__N__24_offboardVisionSystem_cpp_b6ff754713MarkerToTrack5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Anki::Cozmo::VisionSystem::&lang;unnamed&rang;::MarkerToTrack::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::Init()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_offboardVisionSystem_cpp_b6ff7547
</UL>

<P><STRONG><a name="[fd]"></a>__sti___24_offboardVisionSystem_cpp_b6ff7547</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, offboardvisionsystem.o(i.__sti___24_offboardVisionSystem_cpp_b6ff7547))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___24_offboardVisionSystem_cpp_b6ff7547 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::Flags::Buffer::Buffer()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::DetectFiducialMarkersParameters::DetectFiducialMarkersParameters()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::FaceDetectionParameters::FaceDetectionParameters()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::TrackerParameters::TrackerParameters()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Cozmo::VisionSystem::&lang;unnamed&rang;::MarkerToTrack::Clear()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::MemoryStack::MemoryStack()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Anki::Embedded::FixedLengthList&lang;Anki::Embedded::VisionMarker&rang;::set_size(int)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> offboardvisionsystem.o(.init_array)
</UL>
<P><STRONG><a name="[fe]"></a>__sti___16_benchmarking_cpp_4a8bcdb9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, benchmarking.o(i.__sti___16_benchmarking_cpp_4a8bcdb9))
<BR>[Address Reference Count : 1]<UL><LI> benchmarking.o(.init_array)
</UL>
<P><STRONG><a name="[ff]"></a>__sti___13_trig_fast_cpp_21420f07</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, trig_fast.o(i.__sti___13_trig_fast_cpp_21420f07))
<BR>[Address Reference Count : 1]<UL><LI> trig_fast.o(.init_array)
</UL>
<P><STRONG><a name="[100]"></a>__sti___13_utilities_cpp_61c45304</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utilities.o(i.__sti___13_utilities_cpp_61c45304))
<BR>[Address Reference Count : 1]<UL><LI> utilities.o(.init_array)
</UL>
<P><STRONG><a name="[84]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>__sti___8_char_cpp_a3dc957a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp_a3dc957a))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[102]"></a>__sti___10_locale_cpp_ff99fc7b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp_ff99fc7b))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[16e]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[103]"></a>__sti___10_rwcats_cpp_64e8068e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp_64e8068e))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___10_rwcats_cpp_64e8068e &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL>
<P><STRONG><a name="[87]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
