; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\sequences.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\sequences.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\sequences.crf ..\coretech\common\robot\src\sequences.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded13IndexSequenceEi||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded13IndexSequenceEi PROC ; Anki::Embedded::IndexSequence(int)
;;;87     
;;;88         LinearSequence<s32> IndexSequence(s32 arraySize)
000000  b530              PUSH     {r4,r5,lr}
;;;89         {
000002  4604              MOV      r4,r0
;;;90           return IndexSequence<s32>(0, 1, arraySize-1, arraySize);
000004  2300              MOVS     r3,#0
000006  2001              MOVS     r0,#1
000008  b085              SUB      sp,sp,#0x14           ;89
00000a  1e4a              SUBS     r2,r1,#1
00000c  bf48              IT       MI
00000e  440a              ADDMI    r2,r1
000010  e9cd3003          STRD     r3,r0,[sp,#0xc]
000014  4601              MOV      r1,r0
000016  2a00              CMP      r2,#0
000018  bf08              IT       EQ
00001a  2101              MOVEQ    r1,#1
00001c  d016              BEQ      |L1.76|
00001e  2500              MOVS     r5,#0                 ;89
000020  428d              CMP      r5,r1                 ;89
000022  da01              BGE      |L1.40|
000024  2a00              CMP      r2,#0                 ;89
000026  da01              BGE      |L1.44|
                  |L1.40|
000028  4629              MOV      r1,r5                 ;89
00002a  e00f              B        |L1.76|
                  |L1.44|
00002c  1c50              ADDS     r0,r2,#1              ;89
00002e  fb90f1f1          SDIV     r1,r0,r1              ;89
000032  2900              CMP      r1,#0                 ;89
000034  da0a              BGE      |L1.76|
000036  2185              MOVS     r1,#0x85              ;89
000038  4809              LDR      r0,|L1.96|
00003a  e9cd0100          STRD     r0,r1,[sp,#0]         ;89
00003e  4b09              LDR      r3,|L1.100|
000040  4a09              LDR      r2,|L1.104|
000042  490a              LDR      r1,|L1.108|
000044  2005              MOVS     r0,#5                 ;89
000046  f7fffffe          BL       _Anki_Log
00004a  4629              MOV      r1,r5                 ;89
                  |L1.76|
00004c  4608              MOV      r0,r1                 ;89
00004e  9102              STR      r1,[sp,#8]            ;89
000050  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;89
000054  60a2              STR      r2,[r4,#8]            ;89
000056  e9c40100          STRD     r0,r1,[r4,#0]         ;89
;;;91         }
00005a  b005              ADD      sp,sp,#0x14
00005c  bd30              POP      {r4,r5,pc}
;;;92       } // namespace Embedded
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
                  |L1.100|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 3)
                  |L1.104|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 2)
                  |L1.108|
                          DCD      _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string

                          AREA ||i._ZN4Anki8Embedded14LinearSequenceIdE11computeSizeEddd||, CODE, READONLY, ALIGN=3

                  _ZN4Anki8Embedded14LinearSequenceIdE11computeSizeEddd PROC ; Anki::Embedded::LinearSequence<double>::computeSize(double, double, double)
;;;82     
;;;83         template<> s32 LinearSequence<f64>::computeSize(const f64 start, const f64 increment, const f64 end)
000000  b570              PUSH     {r4-r6,lr}
;;;84         {
000002  2400              MOVS     r4,#0
000004  ed2d8b0a          VPUSH    {d8-d12}
000008  eeb09a42          VMOV.F32 s18,s4
00000c  eef09a62          VMOV.F32 s19,s5
000010  eeb0aa40          VMOV.F32 s20,s0
000014  eef0aa60          VMOV.F32 s21,s1
000018  b082              SUB      sp,sp,#8
00001a  eeb08a41          VMOV.F32 s16,s2
00001e  eef08a61          VMOV.F32 s17,s3
000022  ec532b19          VMOV     r2,r3,d9
000026  ec510b1a          VMOV     r0,r1,d10
00002a  f7fffffe          BL       __aeabi_drsub
00002e  ed9fbb5a          VLDR     d11,|L2.408|
000032  ed9fcb5b          VLDR     d12,|L2.416|
000036  460e              MOV      r6,r1
000038  ec460b10          VMOV     d0,r0,r6
00003c  4605              MOV      r5,r0
00003e  ec532b1c          VMOV     r2,r3,d12
000042  ec510b10          VMOV     r0,r1,d0
000046  f7fffffe          BL       __aeabi_cdrcmple
00004a  bf98              IT       LS
00004c  ec465b10          VMOVLS   d0,r5,r6
;;;85           return computeSize_float<f64>(start, increment, end);
000050  d907              BLS      |L2.98|
000052  ec532b19          VMOV     r2,r3,d9
000056  ec510b1a          VMOV     r0,r1,d10
00005a  f7fffffe          BL       __aeabi_dsub
00005e  ec410b10          VMOV     d0,r0,r1
                  |L2.98|
000062  ec532b1b          VMOV     r2,r3,d11
000066  ec510b10          VMOV     r0,r1,d0
00006a  f7fffffe          BL       __aeabi_cdcmple
00006e  bf9f              ITTTT    LS
000070  2001              MOVLS    r0,#1
;;;86         }
000072  b002              ADDLS    sp,sp,#8
000074  ecbd8b0a          VPOPLS   {d8-d12}
000078  bd70              POPLS    {r4-r6,pc}
00007a  ec532b1c          VMOV     r2,r3,d12
00007e  ec510b18          VMOV     r0,r1,d8
000082  f7fffffe          BL       __aeabi_cdrcmple
000086  bf9c              ITT      LS
000088  eeb00a48          VMOVLS.F32 s0,s16
00008c  eef00a68          VMOVLS.F32 s1,s17
000090  d905              BLS      |L2.158|
000092  ec510b18          VMOV     r0,r1,d8
000096  f7fffffe          BL       __aeabi_dneg
00009a  ec410b10          VMOV     d0,r0,r1
                  |L2.158|
00009e  ec532b1b          VMOV     r2,r3,d11
0000a2  ec510b10          VMOV     r0,r1,d0
0000a6  f7fffffe          BL       __aeabi_cdcmple
0000aa  d804              BHI      |L2.182|
                  |L2.172|
0000ac  4620              MOV      r0,r4
                  |L2.174|
0000ae  b002              ADD      sp,sp,#8
0000b0  ecbd8b0a          VPOP     {d8-d12}
0000b4  bd70              POP      {r4-r6,pc}
                  |L2.182|
0000b6  ec532b1c          VMOV     r2,r3,d12
0000ba  ec510b18          VMOV     r0,r1,d8
0000be  f7fffffe          BL       __aeabi_cdcmple
0000c2  d206              BCS      |L2.210|
0000c4  ec532b19          VMOV     r2,r3,d9
0000c8  ec510b1a          VMOV     r0,r1,d10
0000cc  f7fffffe          BL       __aeabi_cdcmple
0000d0  d3ec              BCC      |L2.172|
                  |L2.210|
0000d2  ec532b1c          VMOV     r2,r3,d12
0000d6  ec510b18          VMOV     r0,r1,d8
0000da  f7fffffe          BL       __aeabi_cdrcmple
0000de  d206              BCS      |L2.238|
0000e0  ec532b19          VMOV     r2,r3,d9
0000e4  ec510b1a          VMOV     r0,r1,d10
0000e8  f7fffffe          BL       __aeabi_cdrcmple
0000ec  d3de              BCC      |L2.172|
                  |L2.238|
0000ee  ec532b19          VMOV     r2,r3,d9
0000f2  ec510b1a          VMOV     r0,r1,d10
0000f6  f7fffffe          BL       __aeabi_cdcmple
0000fa  bf27              ITTEE    CS
0000fc  eeb0ba49          VMOVCS.F32 s22,s18
000100  eef0ba69          VMOVCS.F32 s23,s19
000104  eeb0ba4a          VMOVCC.F32 s22,s20
000108  eef0ba6a          VMOVCC.F32 s23,s21
00010c  ec532b19          VMOV     r2,r3,d9
000110  ec510b1a          VMOV     r0,r1,d10
000114  f7fffffe          BL       __aeabi_cdrcmple
000118  bf3c              ITT      CC
00011a  eeb09a4a          VMOVCC.F32 s18,s20
00011e  eef09a6a          VMOVCC.F32 s19,s21
000122  ec532b1c          VMOV     r2,r3,d12
000126  ec510b18          VMOV     r0,r1,d8
00012a  f7fffffe          BL       __aeabi_cdrcmple
00012e  d905              BLS      |L2.316|
000130  ec510b18          VMOV     r0,r1,d8
000134  f7fffffe          BL       __aeabi_dneg
000138  ec410b18          VMOV     d8,r0,r1
                  |L2.316|
00013c  ec532b1b          VMOV     r2,r3,d11
000140  ec510b19          VMOV     r0,r1,d9
000144  f7fffffe          BL       __aeabi_dsub
000148  ec532b18          VMOV     r2,r3,d8
00014c  f7fffffe          BL       __aeabi_dadd
000150  ec532b18          VMOV     r2,r3,d8
000154  f7fffffe          BL       __aeabi_ddiv
000158  f7fffffe          BL       __aeabi_d2f
00015c  ee000a10          VMOV     s0,r0
000160  eddf0a11          VLDR     s1,|L2.424|
000164  ee300a20          VADD.F32 s0,s0,s1
000168  f7fffffe          BL       __hardfp_floorf
00016c  eebd0ac0          VCVT.S32.F32 s0,s0
000170  ee100a10          VMOV     r0,s0
000174  2800              CMP      r0,#0
000176  bfa2              ITTT     GE
000178  b002              ADDGE    sp,sp,#8
00017a  ecbd8b0a          VPOPGE   {d8-d12}
00017e  bd70              POPGE    {r4-r6,pc}
000180  213f              MOVS     r1,#0x3f
000182  480a              LDR      r0,|L2.428|
000184  e9cd0100          STRD     r0,r1,[sp,#0]
000188  4b09              LDR      r3,|L2.432|
00018a  4a0a              LDR      r2,|L2.436|
00018c  490a              LDR      r1,|L2.440|
00018e  2005              MOVS     r0,#5
000190  f7fffffe          BL       _Anki_Log
000194  4620              MOV      r0,r4
000196  e78a              B        |L2.174|
;;;87     
                          ENDP

                  |L2.408|
000198  0c924223          DCFD     0x3bc79ca10c924223 ; 9.9999999999999995e-21
00019c  3bc79ca1
                  |L2.416|
0001a0  00000000          DCFD     0x0000000000000000 ; 0
0001a4  00000000
                  |L2.424|
0001a8  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L2.428|
                          DCD      _ZZ17computeSize_floatIdEiT_S0_S0_E19__PRETTY_FUNCTION__ ; computeSize_float<double>(T1, T1, T1)::__PRETTY_FUNCTION__
                  |L2.432|
                          DCD      _ZZ17computeSize_floatIdEiT_S0_S0_Es_1 ; computeSize_float<double>(T1, T1, T1)::string (instance 3)
                  |L2.436|
                          DCD      _ZZ17computeSize_floatIdEiT_S0_S0_Es_0 ; computeSize_float<double>(T1, T1, T1)::string (instance 2)
                  |L2.440|
                          DCD      _ZZ17computeSize_floatIdEiT_S0_S0_Es ; computeSize_float<double>(T1, T1, T1)::string

                          AREA ||i._ZN4Anki8Embedded14LinearSequenceIfE11computeSizeEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded14LinearSequenceIfE11computeSizeEfff PROC ; Anki::Embedded::LinearSequence<float>::computeSize(float, float, float)
;;;77     
;;;78         template<> s32 LinearSequence<f32>::computeSize(const f32 start, const f32 increment, const f32 end)
000000  ee711a40          VSUB.F32 s3,s2,s0
000004  eef51ac0          VCMPE.F32 s3,#0.0
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  bfb8              IT       LT
00000e  ee701a41          VSUBLT.F32 s3,s0,s2
000012  ee110a90          VMOV     r0,s3
000016  4933              LDR      r1,|L3.228|
000018  4288              CMP      r0,r1
00001a  bfdc              ITT      LE
00001c  2001              MOVLE    r0,#1
;;;79         {
;;;80           return computeSize_float<f32>(start, increment, end);
;;;81         }
00001e  4770              BXLE     lr
000020  eeb02a60          VMOV.F32 s4,s1
000024  eef01a60          VMOV.F32 s3,s1                 ;80
000028  eeb52ac0          VCMPE.F32 s4,#0.0               ;80
00002c  eef11a61          VNEG.F32 s3,s3                 ;80
000030  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;80
000034  bfac              ITE      GE                    ;80
000036  eeb02a60          VMOVGE.F32 s4,s1                 ;80
00003a  eeb02a61          VMOVLT.F32 s4,s3                 ;80
00003e  b510              PUSH     {r4,lr}               ;79
000040  ee120a10          VMOV     r0,s4                 ;79
000044  2400              MOVS     r4,#0                 ;79
000046  b082              SUB      sp,sp,#8              ;79
000048  4288              CMP      r0,r1                 ;79
00004a  dd13              BLE      |L3.116|
00004c  eef50ac0          VCMPE.F32 s1,#0.0               ;79
000050  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;79
000054  bf3c              ITT      CC                    ;79
000056  eeb40ac1          VCMPECC.F32 s0,s2                 ;79
00005a  eef1fa10          VMRSCC   APSR_nzcv,FPSCR       ;79
00005e  d309              BCC      |L3.116|
000060  eef50ac0          VCMPE.F32 s1,#0.0               ;79
000064  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;79
000068  bfc4              ITT      GT                    ;79
00006a  eeb40ac1          VCMPEGT.F32 s0,s2                 ;79
00006e  eef1fa10          VMRSGT   APSR_nzcv,FPSCR       ;79
000072  dd02              BLE      |L3.122|
                  |L3.116|
000074  b002              ADD      sp,sp,#8
000076  4620              MOV      r0,r4
000078  bd10              POP      {r4,pc}
                  |L3.122|
00007a  eeb40ac1          VCMPE.F32 s0,s2
00007e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000082  bf34              ITE      CC
000084  eeb02a40          VMOVCC.F32 s4,s0
000088  eeb02a41          VMOVCS.F32 s4,s2
00008c  bfd8              IT       LE
00008e  eeb00a41          VMOVLE.F32 s0,s2
000092  eef50ac0          VCMPE.F32 s1,#0.0
000096  eef1fa10          VMRS     APSR_nzcv,FPSCR
00009a  bfb8              IT       LT
00009c  eef00a61          VMOVLT.F32 s1,s3
0000a0  ee300a42          VSUB.F32 s0,s0,s4
0000a4  ee301a20          VADD.F32 s2,s0,s1
0000a8  ee810a20          VDIV.F32 s0,s2,s1
0000ac  eddf0a0e          VLDR     s1,|L3.232|
0000b0  ee300a20          VADD.F32 s0,s0,s1
0000b4  f7fffffe          BL       __hardfp_floorf
0000b8  eebd0ac0          VCVT.S32.F32 s0,s0
0000bc  ee100a10          VMOV     r0,s0
0000c0  2800              CMP      r0,#0
0000c2  bfa4              ITT      GE
0000c4  b002              ADDGE    sp,sp,#8
0000c6  bd10              POPGE    {r4,pc}
0000c8  213f              MOVS     r1,#0x3f
0000ca  4808              LDR      r0,|L3.236|
0000cc  e9cd0100          STRD     r0,r1,[sp,#0]
0000d0  4b07              LDR      r3,|L3.240|
0000d2  4a08              LDR      r2,|L3.244|
0000d4  4908              LDR      r1,|L3.248|
0000d6  2005              MOVS     r0,#5
0000d8  f7fffffe          BL       _Anki_Log
0000dc  b002              ADD      sp,sp,#8
0000de  4620              MOV      r0,r4
0000e0  bd10              POP      {r4,pc}
;;;82     
                          ENDP

0000e2  0000              DCW      0x0000
                  |L3.228|
                          DCD      0x1e3ce508
                  |L3.232|
0000e8  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L3.236|
                          DCD      _ZZ17computeSize_floatIfEiT_S0_S0_E19__PRETTY_FUNCTION__ ; computeSize_float<float>(T1, T1, T1)::__PRETTY_FUNCTION__
                  |L3.240|
                          DCD      _ZZ17computeSize_floatIfEiT_S0_S0_Es_1 ; computeSize_float<float>(T1, T1, T1)::string (instance 3)
                  |L3.244|
                          DCD      _ZZ17computeSize_floatIfEiT_S0_S0_Es_0 ; computeSize_float<float>(T1, T1, T1)::string (instance 2)
                  |L3.248|
                          DCD      _ZZ17computeSize_floatIfEiT_S0_S0_Es ; computeSize_float<float>(T1, T1, T1)::string

                          AREA ||i._ZN4Anki8Embedded14LinearSequenceIhE11computeSizeEhhh||, CODE, READONLY, ALIGN=1

                  _ZN4Anki8Embedded14LinearSequenceIhE11computeSizeEhhh PROC ; Anki::Embedded::LinearSequence<unsigned char>::computeSize(unsigned char, unsigned char, unsigned char)
;;;72       {
;;;73         template<> s32 LinearSequence<u8>::computeSize(const u8 start, const u8 increment, const u8 end)
000000  4603              MOV      r3,r0
000002  4290              CMP      r0,r2
000004  bf15              ITETE    NE
000006  2000              MOVNE    r0,#0
000008  2001              MOVEQ    r0,#1
00000a  2900              CMPNE    r1,#0
;;;74         {
;;;75           return computeSize_u32(start, increment,end);
;;;76         }
00000c  4770              BXEQ     lr
00000e  4293              CMP      r3,r2
000010  bf88              IT       HI
000012  4770              BXHI     lr
000014  1ad0              SUBS     r0,r2,r3
000016  4408              ADD      r0,r0,r1
000018  fbb0f0f1          UDIV     r0,r0,r1
00001c  4770              BX       lr
;;;77     
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded14LinearSequenceIhE11computeSizeEhhh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded14LinearSequenceIhE11computeSizeEhhh||
                          DCD      0x00000001

                          AREA ||area_number.6||, LINKORDER=||i._ZN4Anki8Embedded14LinearSequenceIfE11computeSizeEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded14LinearSequenceIfE11computeSizeEfff||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki8Embedded14LinearSequenceIdE11computeSizeEddd||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded14LinearSequenceIdE11computeSizeEddd||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Anki8Embedded13IndexSequenceEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded13IndexSequenceEi||
                          DCD      0x00000001

                          AREA ||.data__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs, DATA, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string
000000  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000004  61725365          DCB      0x61,0x72,0x53,0x65
000008  7175656e          DCB      0x71,0x75,0x65,0x6e
00000c  63653c54          DCB      0x63,0x65,0x3c,0x54
000010  7970653e          DCB      0x79,0x70,0x65,0x3e
000014  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000018  6d707574          DCB      0x6d,0x70,0x75,0x74
00001c  6553697a          DCB      0x65,0x53,0x69,0x7a
000020  6500              DCB      0x65,0x00

                          AREA ||.data__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0, DATA, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_0 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 2)
000000  73697a65          DCB      0x73,0x69,0x7a,0x65
000004  20657374          DCB      0x20,0x65,0x73,0x74
000008  696d6174          DCB      0x69,0x6d,0x61,0x74
00000c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000010  6661696c          DCB      0x66,0x61,0x69,0x6c
000014  656400            DCB      0x65,0x64,0x00

                          AREA ||.data__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1, DATA, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiEs_1 ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000014  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000018  64655c61          DCB      0x64,0x65,0x5c,0x61
00001c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000020  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000024  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000028  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00002c  2f736571          DCB      0x2f,0x73,0x65,0x71
000030  75656e63          DCB      0x75,0x65,0x6e,0x63
000034  65732e68          DCB      0x65,0x73,0x2e,0x68
000038  00                DCB      0x00

                          AREA ||.data__ZZ17computeSize_floatIfEiT_S0_S0_Es||, COMGROUP=_ZZ17computeSize_floatIfEiT_S0_S0_Es, DATA, ALIGN=0

                  _ZZ17computeSize_floatIfEiT_S0_S0_Es ; computeSize_float<float>(T1, T1, T1)::string
000000  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000004  61725365          DCB      0x61,0x72,0x53,0x65
000008  7175656e          DCB      0x71,0x75,0x65,0x6e
00000c  63653c54          DCB      0x63,0x65,0x3c,0x54
000010  7970653e          DCB      0x79,0x70,0x65,0x3e
000014  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000018  6d707574          DCB      0x6d,0x70,0x75,0x74
00001c  6553697a          DCB      0x65,0x53,0x69,0x7a
000020  6500              DCB      0x65,0x00

                          AREA ||.data__ZZ17computeSize_floatIfEiT_S0_S0_Es_0||, COMGROUP=_ZZ17computeSize_floatIfEiT_S0_S0_Es_0, DATA, ALIGN=0

                  _ZZ17computeSize_floatIfEiT_S0_S0_Es_0 ; computeSize_float<float>(T1, T1, T1)::string (instance 2)
000000  73697a65          DCB      0x73,0x69,0x7a,0x65
000004  20657374          DCB      0x20,0x65,0x73,0x74
000008  696d6174          DCB      0x69,0x6d,0x61,0x74
00000c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000010  6661696c          DCB      0x66,0x61,0x69,0x6c
000014  656400            DCB      0x65,0x64,0x00

                          AREA ||.data__ZZ17computeSize_floatIfEiT_S0_S0_Es_1||, COMGROUP=_ZZ17computeSize_floatIfEiT_S0_S0_Es_1, DATA, ALIGN=0

                  _ZZ17computeSize_floatIfEiT_S0_S0_Es_1 ; computeSize_float<float>(T1, T1, T1)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c736571          DCB      0x5c,0x73,0x65,0x71
000020  75656e63          DCB      0x75,0x65,0x6e,0x63
000024  65732e63          DCB      0x65,0x73,0x2e,0x63
000028  707000            DCB      0x70,0x70,0x00

                          AREA ||.data__ZZ17computeSize_floatIdEiT_S0_S0_Es||, COMGROUP=_ZZ17computeSize_floatIdEiT_S0_S0_Es, DATA, ALIGN=0

                  _ZZ17computeSize_floatIdEiT_S0_S0_Es ; computeSize_float<double>(T1, T1, T1)::string
000000  4c696e65          DCB      0x4c,0x69,0x6e,0x65
000004  61725365          DCB      0x61,0x72,0x53,0x65
000008  7175656e          DCB      0x71,0x75,0x65,0x6e
00000c  63653c54          DCB      0x63,0x65,0x3c,0x54
000010  7970653e          DCB      0x79,0x70,0x65,0x3e
000014  3a3a636f          DCB      0x3a,0x3a,0x63,0x6f
000018  6d707574          DCB      0x6d,0x70,0x75,0x74
00001c  6553697a          DCB      0x65,0x53,0x69,0x7a
000020  6500              DCB      0x65,0x00

                          AREA ||.data__ZZ17computeSize_floatIdEiT_S0_S0_Es_0||, COMGROUP=_ZZ17computeSize_floatIdEiT_S0_S0_Es_0, DATA, ALIGN=0

                  _ZZ17computeSize_floatIdEiT_S0_S0_Es_0 ; computeSize_float<double>(T1, T1, T1)::string (instance 2)
000000  73697a65          DCB      0x73,0x69,0x7a,0x65
000004  20657374          DCB      0x20,0x65,0x73,0x74
000008  696d6174          DCB      0x69,0x6d,0x61,0x74
00000c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000010  6661696c          DCB      0x66,0x61,0x69,0x6c
000014  656400            DCB      0x65,0x64,0x00

                          AREA ||.data__ZZ17computeSize_floatIdEiT_S0_S0_Es_1||, COMGROUP=_ZZ17computeSize_floatIdEiT_S0_S0_Es_1, DATA, ALIGN=0

                  _ZZ17computeSize_floatIdEiT_S0_S0_Es_1 ; computeSize_float<double>(T1, T1, T1)::string (instance 3)
000000  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000004  6f726574          DCB      0x6f,0x72,0x65,0x74
000008  6563685c          DCB      0x65,0x63,0x68,0x5c
00000c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000010  6f6e5c72          DCB      0x6f,0x6e,0x5c,0x72
000014  6f626f74          DCB      0x6f,0x62,0x6f,0x74
000018  5c737263          DCB      0x5c,0x73,0x72,0x63
00001c  5c736571          DCB      0x5c,0x73,0x65,0x71
000020  75656e63          DCB      0x75,0x65,0x6e,0x63
000024  65732e63          DCB      0x65,0x73,0x2e,0x63
000028  707000            DCB      0x70,0x70,0x00

                          AREA ||.constdata__ZZ17computeSize_floatIfEiT_S0_S0_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZ17computeSize_floatIfEiT_S0_S0_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZ17computeSize_floatIfEiT_S0_S0_E19__PRETTY_FUNCTION__ ; computeSize_float<float>(T1, T1, T1)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742063          DCB      0x6e,0x74,0x20,0x63
00000c  6f6d7075          DCB      0x6f,0x6d,0x70,0x75
000010  74655369          DCB      0x74,0x65,0x53,0x69
000014  7a655f66          DCB      0x7a,0x65,0x5f,0x66
000018  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00001c  28547970          DCB      0x28,0x54,0x79,0x70
000020  652c2054          DCB      0x65,0x2c,0x20,0x54
000024  7970652c          DCB      0x79,0x70,0x65,0x2c
000028  20547970          DCB      0x20,0x54,0x79,0x70
00002c  6529205b          DCB      0x65,0x29,0x20,0x5b
000030  77697468          DCB      0x77,0x69,0x74,0x68
000034  20547970          DCB      0x20,0x54,0x79,0x70
000038  65203d20          DCB      0x65,0x20,0x3d,0x20
00003c  666c6f61          DCB      0x66,0x6c,0x6f,0x61
000040  745d00            DCB      0x74,0x5d,0x00

                          AREA ||.constdata__ZZ17computeSize_floatIdEiT_S0_S0_E19__PRETTY_FUNCTION__||, COMGROUP=_ZZ17computeSize_floatIdEiT_S0_S0_E19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZ17computeSize_floatIdEiT_S0_S0_E19__PRETTY_FUNCTION__ ; computeSize_float<double>(T1, T1, T1)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742063          DCB      0x6e,0x74,0x20,0x63
00000c  6f6d7075          DCB      0x6f,0x6d,0x70,0x75
000010  74655369          DCB      0x74,0x65,0x53,0x69
000014  7a655f66          DCB      0x7a,0x65,0x5f,0x66
000018  6c6f6174          DCB      0x6c,0x6f,0x61,0x74
00001c  28547970          DCB      0x28,0x54,0x79,0x70
000020  652c2054          DCB      0x65,0x2c,0x20,0x54
000024  7970652c          DCB      0x79,0x70,0x65,0x2c
000028  20547970          DCB      0x20,0x54,0x79,0x70
00002c  6529205b          DCB      0x65,0x29,0x20,0x5b
000030  77697468          DCB      0x77,0x69,0x74,0x68
000034  20547970          DCB      0x20,0x54,0x79,0x70
000038  65203d20          DCB      0x65,0x20,0x3d,0x20
00003c  646f7562          DCB      0x64,0x6f,0x75,0x62
000040  6c655d00          DCB      0x6c,0x65,0x5d,0x00

                          AREA ||.constdata__ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__||, COMGROUP=_ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__, DATA, READONLY, ALIGN=0

                  _ZZN4Anki8Embedded14LinearSequenceIiE11computeSizeEiiiE19__PRETTY_FUNCTION__ ; Anki::Embedded::LinearSequence<int>::computeSize(int, int, int)::__PRETTY_FUNCTION__
000000  7369676e          DCB      0x73,0x69,0x67,0x6e
000004  65642069          DCB      0x65,0x64,0x20,0x69
000008  6e742041          DCB      0x6e,0x74,0x20,0x41
00000c  6e6b693a          DCB      0x6e,0x6b,0x69,0x3a
000010  3a456d62          DCB      0x3a,0x45,0x6d,0x62
000014  65646465          DCB      0x65,0x64,0x64,0x65
000018  643a3a4c          DCB      0x64,0x3a,0x3a,0x4c
00001c  696e6561          DCB      0x69,0x6e,0x65,0x61
000020  72536571          DCB      0x72,0x53,0x65,0x71
000024  75656e63          DCB      0x75,0x65,0x6e,0x63
000028  653c5479          DCB      0x65,0x3c,0x54,0x79
00002c  70653e3a          DCB      0x70,0x65,0x3e,0x3a
000030  3a636f6d          DCB      0x3a,0x63,0x6f,0x6d
000034  70757465          DCB      0x70,0x75,0x74,0x65
000038  53697a65          DCB      0x53,0x69,0x7a,0x65
00003c  28547970          DCB      0x28,0x54,0x79,0x70
000040  652c2054          DCB      0x65,0x2c,0x20,0x54
000044  7970652c          DCB      0x79,0x70,0x65,0x2c
000048  20547970          DCB      0x20,0x54,0x79,0x70
00004c  6529205b          DCB      0x65,0x29,0x20,0x5b
000050  77697468          DCB      0x77,0x69,0x74,0x68
000054  20547970          DCB      0x20,0x54,0x79,0x70
000058  65203d20          DCB      0x65,0x20,0x3d,0x20
00005c  7369676e          DCB      0x73,0x69,0x67,0x6e
000060  65642069          DCB      0x65,0x64,0x20,0x69
000064  6e745d00          DCB      0x6e,0x74,0x5d,0x00
