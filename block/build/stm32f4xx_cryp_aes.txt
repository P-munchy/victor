; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_cryp_aes.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_cryp_aes.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_cryp_aes.crf arm_hal\lib\stm32f4xx_cryp_aes.c]
                          THUMB

                          AREA ||i.CRYP_AES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CBC PROC
;;;293      */
;;;294    ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;295                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;296                             uint8_t *Output)
;;;297    {
000004  b093              SUB      sp,sp,#0x4c
;;;298      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;299      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;300      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;301      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  e9dd4820          LDRD     r4,r8,[sp,#0x80]      ;297
00000e  469a              MOV      r10,r3                ;297
000010  4616              MOV      r6,r2                 ;297
000012  9d22              LDR      r5,[sp,#0x88]
;;;302      uint32_t busystatus = 0;
;;;303      ErrorStatus status = SUCCESS;
000014  2701              MOVS     r7,#1
;;;304      uint32_t keyaddr    = (uint32_t)Key;
;;;305      uint32_t inputaddr  = (uint32_t)Input;
;;;306      uint32_t outputaddr = (uint32_t)Output;
;;;307      uint32_t ivaddr = (uint32_t)InitVectors;
000016  468b              MOV      r11,r1
;;;308      uint32_t i = 0;
;;;309    
;;;310      /* Crypto structures initialisation*/
;;;311      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;312    
;;;313      switch(Keysize)
000022  f1ba0f80          CMP      r10,#0x80
000026  d006              BEQ      |L1.54|
000028  f1ba0fc0          CMP      r10,#0xc0
00002c  d012              BEQ      |L1.84|
00002e  f5ba7f80          CMP      r10,#0x100
000032  d025              BEQ      |L1.128|
000034  e03f              B        |L1.182|
                  |L1.54|
;;;314      {
;;;315        case 128:
;;;316        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;317        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000036  f8cd902c          STR      r9,[sp,#0x2c]
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
;;;318        keyaddr+=4;
;;;319        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00003e  9004              STR      r0,[sp,#0x10]
000040  6870              LDR      r0,[r6,#4]
000042  ba00              REV      r0,r0
;;;320        keyaddr+=4;
;;;321        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000044  9005              STR      r0,[sp,#0x14]
000046  68b0              LDR      r0,[r6,#8]
000048  ba00              REV      r0,r0
;;;322        keyaddr+=4;
;;;323        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00004a  9006              STR      r0,[sp,#0x18]
00004c  68f0              LDR      r0,[r6,#0xc]
00004e  ba00              REV      r0,r0
;;;324        break;
000050  9007              STR      r0,[sp,#0x1c]
000052  e030              B        |L1.182|
                  |L1.84|
;;;325        case 192:
;;;326        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
000054  f44f7080          MOV      r0,#0x100
;;;327        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000058  900b              STR      r0,[sp,#0x2c]
00005a  6830              LDR      r0,[r6,#0]
00005c  ba00              REV      r0,r0
;;;328        keyaddr+=4;
;;;329        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00005e  9002              STR      r0,[sp,#8]
000060  6870              LDR      r0,[r6,#4]
000062  ba00              REV      r0,r0
;;;330        keyaddr+=4;
;;;331        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000064  9003              STR      r0,[sp,#0xc]
000066  68b0              LDR      r0,[r6,#8]
000068  ba00              REV      r0,r0
;;;332        keyaddr+=4;
;;;333        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00006a  9004              STR      r0,[sp,#0x10]
00006c  68f0              LDR      r0,[r6,#0xc]
00006e  ba00              REV      r0,r0
;;;334        keyaddr+=4;
;;;335        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000070  9005              STR      r0,[sp,#0x14]
000072  6930              LDR      r0,[r6,#0x10]
000074  ba00              REV      r0,r0
;;;336        keyaddr+=4;
;;;337        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000076  9006              STR      r0,[sp,#0x18]
000078  6970              LDR      r0,[r6,#0x14]
00007a  ba00              REV      r0,r0
;;;338        break;
00007c  9007              STR      r0,[sp,#0x1c]
00007e  e01a              B        |L1.182|
                  |L1.128|
;;;339        case 256:
;;;340        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000080  f44f7000          MOV      r0,#0x200
;;;341        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000084  900b              STR      r0,[sp,#0x2c]
000086  6830              LDR      r0,[r6,#0]
000088  ba00              REV      r0,r0
;;;342        keyaddr+=4;
;;;343        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00008a  9000              STR      r0,[sp,#0]
00008c  6870              LDR      r0,[r6,#4]
00008e  ba00              REV      r0,r0
;;;344        keyaddr+=4;
;;;345        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000090  9001              STR      r0,[sp,#4]
000092  68b0              LDR      r0,[r6,#8]
000094  ba00              REV      r0,r0
;;;346        keyaddr+=4;
;;;347        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000096  9002              STR      r0,[sp,#8]
000098  68f0              LDR      r0,[r6,#0xc]
00009a  ba00              REV      r0,r0
;;;348        keyaddr+=4;
;;;349        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00009c  9003              STR      r0,[sp,#0xc]
00009e  6930              LDR      r0,[r6,#0x10]
0000a0  ba00              REV      r0,r0
;;;350        keyaddr+=4;
;;;351        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000a2  9004              STR      r0,[sp,#0x10]
0000a4  6970              LDR      r0,[r6,#0x14]
0000a6  ba00              REV      r0,r0
;;;352        keyaddr+=4;
;;;353        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000a8  9005              STR      r0,[sp,#0x14]
0000aa  69b0              LDR      r0,[r6,#0x18]
0000ac  ba00              REV      r0,r0
;;;354        keyaddr+=4;
;;;355        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000ae  9006              STR      r0,[sp,#0x18]
0000b0  69f0              LDR      r0,[r6,#0x1c]
0000b2  ba00              REV      r0,r0
0000b4  9007              STR      r0,[sp,#0x1c]
                  |L1.182|
;;;356        break;
;;;357        default:
;;;358        break;
;;;359      }
;;;360    
;;;361      /* CRYP Initialization Vectors */
;;;362      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000b6  f8db0000          LDR      r0,[r11,#0]
0000ba  ba00              REV      r0,r0
;;;363      ivaddr+=4;
;;;364      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000bc  900e              STR      r0,[sp,#0x38]
0000be  f8db0004          LDR      r0,[r11,#4]
0000c2  ba00              REV      r0,r0
;;;365      ivaddr+=4;
;;;366      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000c4  900f              STR      r0,[sp,#0x3c]
0000c6  f8db0008          LDR      r0,[r11,#8]
0000ca  ba00              REV      r0,r0
;;;367      ivaddr+=4;
;;;368      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000cc  9010              STR      r0,[sp,#0x40]
0000ce  f8db000c          LDR      r0,[r11,#0xc]
0000d2  ba00              REV      r0,r0
;;;369    
;;;370    
;;;371      /*------------------ AES Decryption ------------------*/
;;;372      if(Mode == MODE_DECRYPT) /* AES decryption */
0000d4  9011              STR      r0,[sp,#0x44]
0000d6  9813              LDR      r0,[sp,#0x4c]
0000d8  b1e0              CBZ      r0,|L1.276|
;;;373      {
;;;374        /* Flush IN/OUT FIFOs */
;;;375        CRYP_FIFOFlush();
;;;376    
;;;377        /* Crypto Init for Key preparation for decryption process */
;;;378        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;379        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;380        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;381    
;;;382        CRYP_Init(&AES_CRYP_InitStructure);
;;;383    
;;;384        /* Key Initialisation */
;;;385        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;386    
;;;387        /* Enable Crypto processor */
;;;388        CRYP_Cmd(ENABLE);
;;;389    
;;;390        /* wait until the Busy flag is RESET */
;;;391        do
;;;392        {
;;;393          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;394          counter++;
;;;395        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;396    
;;;397        if (busystatus != RESET)
;;;398       {
;;;399           status = ERROR;
;;;400        }
;;;401        else
;;;402        {
;;;403          /* Crypto Init for decryption process */  
;;;404          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;405        }
;;;406      }
;;;407      /*------------------ AES Encryption ------------------*/
;;;408      else /* AES encryption */
;;;409      {
;;;410        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000da  4668              MOV      r0,sp
0000dc  f7fffffe          BL       CRYP_KeyInit
;;;411    
;;;412        /* Crypto Init for Encryption process */
;;;413        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0000e0  f8cd9020          STR      r9,[sp,#0x20]
                  |L1.228|
;;;414      }
;;;415      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
0000e4  2028              MOVS     r0,#0x28
;;;416      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000e6  9009              STR      r0,[sp,#0x24]
0000e8  2080              MOVS     r0,#0x80
;;;417      CRYP_Init(&AES_CRYP_InitStructure);
0000ea  900a              STR      r0,[sp,#0x28]
0000ec  a808              ADD      r0,sp,#0x20
0000ee  f7fffffe          BL       CRYP_Init
;;;418    
;;;419      /* CRYP Initialization Vectors */
;;;420      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000f2  a80e              ADD      r0,sp,#0x38
0000f4  f7fffffe          BL       CRYP_IVInit
;;;421    
;;;422      /* Flush IN/OUT FIFOs */
;;;423      CRYP_FIFOFlush();
0000f8  f7fffffe          BL       CRYP_FIFOFlush
;;;424    
;;;425      /* Enable Crypto processor */
;;;426      CRYP_Cmd(ENABLE);
0000fc  2001              MOVS     r0,#1
0000fe  f7fffffe          BL       CRYP_Cmd
;;;427    
;;;428      if(CRYP_GetCmdStatus() == DISABLE)
000102  f7fffffe          BL       CRYP_GetCmdStatus
000106  2800              CMP      r0,#0
;;;429      {
;;;430        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;431           the CRYP peripheral (please check the device sales type. */
;;;432        return(ERROR);
;;;433      }
;;;434      
;;;435      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000108  bf12              ITEE     NE
00010a  2600              MOVNE    r6,#0
;;;436      {
;;;437    
;;;438        /* Write the Input block in the IN FIFO */
;;;439        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;440        inputaddr+=4;
;;;441        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;442        inputaddr+=4;
;;;443        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;444        inputaddr+=4;
;;;445        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;446        inputaddr+=4;
;;;447        /* Wait until the complete message has been processed */
;;;448        counter = 0;
;;;449        do
;;;450        {
;;;451          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;452          counter++;
;;;453        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;454    
;;;455        if (busystatus != RESET)
;;;456       {
;;;457           status = ERROR;
;;;458        }
;;;459        else
;;;460        {
;;;461    
;;;462          /* Read the Output block from the Output FIFO */
;;;463          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;464          outputaddr+=4;
;;;465          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;466          outputaddr+=4;
;;;467          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;468          outputaddr+=4;
;;;469          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;470          outputaddr+=4;
;;;471        }
;;;472      }
;;;473    
;;;474      /* Disable Crypto */
;;;475      CRYP_Cmd(DISABLE);
;;;476    
;;;477      return status;
;;;478    }
00010c  b017              ADDEQ    sp,sp,#0x5c
00010e  e8bd8ff0          POPEQ    {r4-r11,pc}
000112  e055              B        |L1.448|
                  |L1.276|
000114  f7fffffe          BL       CRYP_FIFOFlush
000118  2604              MOVS     r6,#4                 ;378
00011a  2038              MOVS     r0,#0x38              ;379
00011c  e9cd6008          STRD     r6,r0,[sp,#0x20]      ;380
000120  f8cd9028          STR      r9,[sp,#0x28]         ;380
000124  a808              ADD      r0,sp,#0x20           ;382
000126  f7fffffe          BL       CRYP_Init
00012a  4668              MOV      r0,sp                 ;385
00012c  f7fffffe          BL       CRYP_KeyInit
000130  2001              MOVS     r0,#1                 ;388
000132  f7fffffe          BL       CRYP_Cmd
                  |L1.310|
000136  2010              MOVS     r0,#0x10              ;393
000138  f7fffffe          BL       CRYP_GetFlagStatus
00013c  990c              LDR      r1,[sp,#0x30]         ;394
00013e  1c49              ADDS     r1,r1,#1              ;394
000140  910c              STR      r1,[sp,#0x30]         ;395
000142  f5b13f80          CMP      r1,#0x10000           ;395
000146  d002              BEQ      |L1.334|
000148  2800              CMP      r0,#0                 ;395
00014a  d1f4              BNE      |L1.310|
00014c  e003              B        |L1.342|
                  |L1.334|
00014e  2800              CMP      r0,#0                 ;397
000150  bf18              IT       NE                    ;399
000152  2700              MOVNE    r7,#0                 ;399
000154  d1c6              BNE      |L1.228|
                  |L1.342|
000156  9608              STR      r6,[sp,#0x20]         ;404
000158  e7c4              B        |L1.228|
                  |L1.346|
00015a  6820              LDR      r0,[r4,#0]            ;439
00015c  f7fffffe          BL       CRYP_DataIn
000160  f8540f04          LDR      r0,[r4,#4]!           ;441
000164  f7fffffe          BL       CRYP_DataIn
000168  f8540f04          LDR      r0,[r4,#4]!           ;443
00016c  f7fffffe          BL       CRYP_DataIn
000170  f8540f04          LDR      r0,[r4,#4]!           ;445
000174  f7fffffe          BL       CRYP_DataIn
000178  1d24              ADDS     r4,r4,#4              ;448
00017a  f8cd9030          STR      r9,[sp,#0x30]         ;448
                  |L1.382|
00017e  2010              MOVS     r0,#0x10              ;451
000180  f7fffffe          BL       CRYP_GetFlagStatus
000184  990c              LDR      r1,[sp,#0x30]         ;452
000186  1c49              ADDS     r1,r1,#1              ;452
000188  910c              STR      r1,[sp,#0x30]         ;453
00018a  f5b13f80          CMP      r1,#0x10000           ;453
00018e  d002              BEQ      |L1.406|
000190  2800              CMP      r0,#0                 ;453
000192  d1f4              BNE      |L1.382|
000194  e003              B        |L1.414|
                  |L1.406|
000196  2800              CMP      r0,#0                 ;455
000198  bf18              IT       NE                    ;457
00019a  2700              MOVNE    r7,#0                 ;457
00019c  d10f              BNE      |L1.446|
                  |L1.414|
00019e  f7fffffe          BL       CRYP_DataOut
0001a2  f8450b04          STR      r0,[r5],#4            ;463
0001a6  f7fffffe          BL       CRYP_DataOut
0001aa  f8450b04          STR      r0,[r5],#4            ;465
0001ae  f7fffffe          BL       CRYP_DataOut
0001b2  f8450b04          STR      r0,[r5],#4            ;467
0001b6  f7fffffe          BL       CRYP_DataOut
0001ba  f8450b04          STR      r0,[r5],#4            ;469
                  |L1.446|
0001be  3610              ADDS     r6,r6,#0x10           ;469
                  |L1.448|
0001c0  4546              CMP      r6,r8                 ;435
0001c2  d201              BCS      |L1.456|
0001c4  2f00              CMP      r7,#0                 ;435
0001c6  d1c8              BNE      |L1.346|
                  |L1.456|
0001c8  2000              MOVS     r0,#0                 ;475
0001ca  f7fffffe          BL       CRYP_Cmd
0001ce  b017              ADD      sp,sp,#0x5c
0001d0  4638              MOV      r0,r7                 ;477
0001d2  e8bd8ff0          POP      {r4-r11,pc}
;;;479    
                          ENDP


                          AREA ||i.CRYP_AES_CCM||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CCM PROC
;;;1134     */
;;;1135   ErrorStatus CRYP_AES_CCM(uint8_t Mode, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1136                            uint8_t* Nonce, uint32_t NonceSize,
;;;1137                            uint8_t *Key, uint16_t Keysize,
;;;1138                            uint8_t *Input, uint32_t ILength,
;;;1139                            uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
;;;1140                            uint8_t *Output,
;;;1141                            uint8_t *AuthTAG, uint32_t TAGSize)
;;;1142   {
000004  b09f              SUB      sp,sp,#0x7c
;;;1143     CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;1144     CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;1145     CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;1146     __IO uint32_t counter = 0;
000006  f04f0c00          MOV      r12,#0
00000a  e9dd7e32          LDRD     r7,lr,[sp,#0xc8]      ;1142
00000e  e9dd952e          LDRD     r9,r5,[sp,#0xb8]      ;1142
;;;1147     uint32_t busystatus = 0;
;;;1148     ErrorStatus status = SUCCESS;
;;;1149     uint32_t keyaddr    = (uint32_t)Key;
;;;1150     uint32_t inputaddr  = (uint32_t)Input;
;;;1151     uint32_t outputaddr = (uint32_t)Output;
;;;1152     uint32_t headeraddr = (uint32_t)Header;
;;;1153     uint32_t tagaddr = (uint32_t)AuthTAG;
;;;1154     uint32_t headersize = HLength;
;;;1155     uint32_t loopcounter = 0;
000012  f8ddb0d0          LDR      r11,[sp,#0xd0]
000016  e9dd4030          LDRD     r4,r0,[sp,#0xc0]      ;1142
00001a  e9cdce10          STRD     r12,lr,[sp,#0x40]
00001e  9e2d              LDR      r6,[sp,#0xb4]
;;;1156     uint32_t bufferidx = 0;
;;;1157     uint8_t blockb0[16] = {0};/* Block B0 */
000020  f8cdc000          STR      r12,[sp,#0]
000024  f8cdc004          STR      r12,[sp,#4]
000028  469a              MOV      r10,r3                ;1149
00002a  f8cdc008          STR      r12,[sp,#8]
;;;1158     uint8_t ctr[16] = {0}; /* Counter */
00002e  f8cdc00c          STR      r12,[sp,#0xc]
000032  f8cdc010          STR      r12,[sp,#0x10]
000036  f8cdc014          STR      r12,[sp,#0x14]
00003a  f8cdc018          STR      r12,[sp,#0x18]
00003e  4663              MOV      r3,r12                ;1155
;;;1159     uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
000040  f8cdc01c          STR      r12,[sp,#0x1c]
000044  f8cdc048          STR      r12,[sp,#0x48]
000048  f8cdc04c          STR      r12,[sp,#0x4c]
00004c  f8cdc050          STR      r12,[sp,#0x50]
;;;1160     uint32_t ctraddr = (uint32_t)ctr;
000050  f8cdc054          STR      r12,[sp,#0x54]
000054  f10d0c10          ADD      r12,sp,#0x10
000058  f04f0801          MOV      r8,#1                 ;1148
;;;1161     uint32_t b0addr = (uint32_t)blockb0;
;;;1162     
;;;1163     /************************ Formatting the header block ***********************/
;;;1164     if(headersize != 0)
00005c  f8cdc040          STR      r12,[sp,#0x40]
000060  2c00              CMP      r4,#0
000062  d044              BEQ      |L2.238|
;;;1165     {
;;;1166       /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
;;;1167       if(headersize < 65280)
;;;1168       {
;;;1169         HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
;;;1170         HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
000064  f0040cff          AND      r12,r4,#0xff
000068  f5b44f7f          CMP      r4,#0xff00            ;1167
00006c  d209              BCS      |L2.130|
00006e  ea4f2e14          LSR      lr,r4,#8              ;1169
000072  f880e000          STRB     lr,[r0,#0]            ;1169
000076  f880c001          STRB     r12,[r0,#1]
00007a  f04f0c02          MOV      r12,#2
00007e  1ca4              ADDS     r4,r4,#2
;;;1171         headersize += 2;
000080  e014              B        |L2.172|
                  |L2.130|
;;;1172       }
;;;1173       else
;;;1174       {
;;;1175         /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
;;;1176         HBuffer[bufferidx++] = 0xFF;
000082  f04f0eff          MOV      lr,#0xff
000086  f880e000          STRB     lr,[r0,#0]
;;;1177         HBuffer[bufferidx++] = 0xFE;
00008a  f04f0efe          MOV      lr,#0xfe
00008e  f880e001          STRB     lr,[r0,#1]
;;;1178         HBuffer[bufferidx++] = headersize & 0xff000000;
000092  f04f0e00          MOV      lr,#0
000096  f880e002          STRB     lr,[r0,#2]
;;;1179         HBuffer[bufferidx++] = headersize & 0x00ff0000;
00009a  f880e003          STRB     lr,[r0,#3]
;;;1180         HBuffer[bufferidx++] = headersize & 0x0000ff00;
00009e  f880e004          STRB     lr,[r0,#4]
;;;1181         HBuffer[bufferidx++] = headersize & 0x000000ff;
0000a2  f880c005          STRB     r12,[r0,#5]
0000a6  f04f0c06          MOV      r12,#6
0000aa  1da4              ADDS     r4,r4,#6
                  |L2.172|
;;;1182         headersize += 6;
;;;1183       }
;;;1184       /* Copy the header buffer in internal buffer "HBuffer" */
;;;1185       for(loopcounter = 0; loopcounter < headersize; loopcounter++)
0000ac  2c00              CMP      r4,#0
0000ae  d908              BLS      |L2.194|
                  |L2.176|
;;;1186       {
;;;1187         HBuffer[bufferidx++] = Header[loopcounter];
0000b0  f815e003          LDRB     lr,[r5,r3]
0000b4  f800e00c          STRB     lr,[r0,r12]
0000b8  1c5b              ADDS     r3,r3,#1
0000ba  f10c0c01          ADD      r12,r12,#1
0000be  429c              CMP      r4,r3                 ;1185
0000c0  d8f6              BHI      |L2.176|
                  |L2.194|
;;;1188       }
;;;1189       /* Check if the header size is modulo 16 */
;;;1190       if ((headersize % 16) != 0)
0000c2  f0140f0f          TST      r4,#0xf
0000c6  d00c              BEQ      |L2.226|
;;;1191       {
;;;1192         /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
;;;1193         for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
0000c8  0923              LSRS     r3,r4,#4
0000ca  011d              LSLS     r5,r3,#4
0000cc  f1050c10          ADD      r12,r5,#0x10
0000d0  4564              CMP      r4,r12
0000d2  bf98              IT       LS
0000d4  2300              MOVLS    r3,#0
0000d6  d803              BHI      |L2.224|
                  |L2.216|
;;;1194         {
;;;1195           HBuffer[loopcounter] = 0;
0000d8  5503              STRB     r3,[r0,r4]
0000da  1c64              ADDS     r4,r4,#1
0000dc  4564              CMP      r4,r12                ;1193
0000de  d9fb              BLS      |L2.216|
                  |L2.224|
;;;1196         }
;;;1197         /* Set the header size to modulo 16 */
;;;1198         headersize = ((headersize/16) + 1) * 16;
0000e0  4664              MOV      r4,r12
                  |L2.226|
;;;1199       }
;;;1200       /* set the pointer headeraddr to HBuffer */
;;;1201       headeraddr = (uint32_t)HBuffer;
0000e2  4605              MOV      r5,r0
;;;1202     }
;;;1203     /************************* Formatting the block B0 **************************/
;;;1204     if(headersize != 0)
0000e4  2c00              CMP      r4,#0
;;;1205     {
;;;1206       blockb0[0] = 0x40;
0000e6  bf1c              ITT      NE
0000e8  2040              MOVNE    r0,#0x40
0000ea  f88d0000          STRBNE   r0,[sp,#0]
                  |L2.238|
;;;1207     }
;;;1208     /* Flags byte */
;;;1209     blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
0000ee  f00b00ff          AND      r0,r11,#0xff
0000f2  1e80              SUBS     r0,r0,#2
0000f4  eb0070d0          ADD      r0,r0,r0,LSR #31
0000f8  f3c00342          UBFX     r3,r0,#1,#3
0000fc  f1c2000e          RSB      r0,r2,#0xe
000100  f36300df          BFI      r0,r3,#3,#29
000104  f89d3000          LDRB     r3,[sp,#0]
000108  4318              ORRS     r0,r0,r3
00010a  f88d0000          STRB     r0,[sp,#0]
;;;1210     
;;;1211     for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
00010e  2000              MOVS     r0,#0
000110  466b              MOV      r3,sp                 ;1157
000112  2a00              CMP      r2,#0
000114  d90a              BLS      |L2.300|
                  |L2.278|
;;;1212     {
;;;1213       blockb0[loopcounter+1] = Nonce[loopcounter];
000116  f811c000          LDRB     r12,[r1,r0]
00011a  eb030e00          ADD      lr,r3,r0
00011e  1c40              ADDS     r0,r0,#1
000120  f88ec001          STRB     r12,[lr,#1]
000124  4290              CMP      r0,r2                 ;1211
000126  d3f6              BCC      |L2.278|
;;;1214     }
;;;1215     for ( ; loopcounter < 13; loopcounter++)
000128  280d              CMP      r0,#0xd
00012a  d207              BCS      |L2.316|
                  |L2.300|
00012c  2100              MOVS     r1,#0
                  |L2.302|
;;;1216     {
;;;1217       blockb0[loopcounter+1] = 0;
00012e  eb030c00          ADD      r12,r3,r0
000132  1c40              ADDS     r0,r0,#1
000134  f88c1001          STRB     r1,[r12,#1]
000138  280d              CMP      r0,#0xd               ;1215
00013a  d3f8              BCC      |L2.302|
                  |L2.316|
;;;1218     }
;;;1219     
;;;1220     blockb0[14] = ((ILength >> 8) & 0xFF);
00013c  ea4f2019          LSR      r0,r9,#8
000140  f88d000e          STRB     r0,[sp,#0xe]
;;;1221     blockb0[15] = (ILength & 0xFF);
;;;1222     
;;;1223     /************************* Formatting the initial counter *******************/
;;;1224     /* Byte 0:
;;;1225        Bits 7 and 6 are reserved and shall be set to 0
;;;1226        Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
;;;1227        are distinct from B0
;;;1228        Bits 0, 1, and 2 contain the same encoding of q as in B0
;;;1229     */
;;;1230     ctr[0] = blockb0[0] & 0x07;
000144  f89d0000          LDRB     r0,[sp,#0]
;;;1231     /* byte 1 to NonceSize is the IV (Nonce) */
;;;1232     for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
000148  f1020c01          ADD      r12,r2,#1
00014c  f0000007          AND      r0,r0,#7              ;1230
000150  f88d0010          STRB     r0,[sp,#0x10]         ;1230
000154  2001              MOVS     r0,#1
000156  f88d900f          STRB     r9,[sp,#0xf]          ;1221
00015a  f1bc0f01          CMP      r12,#1
00015e  bf88              IT       HI                    ;1158
000160  a904              ADDHI    r1,sp,#0x10           ;1158
000162  d904              BLS      |L2.366|
                  |L2.356|
;;;1233     {
;;;1234       ctr[loopcounter] = blockb0[loopcounter];
000164  5c1a              LDRB     r2,[r3,r0]
000166  540a              STRB     r2,[r1,r0]
000168  1c40              ADDS     r0,r0,#1
00016a  4584              CMP      r12,r0                ;1232
00016c  d8fa              BHI      |L2.356|
                  |L2.366|
;;;1235     }
;;;1236     /* Set the LSB to 1 */
;;;1237     ctr[15] |= 0x01;
00016e  f89d001f          LDRB     r0,[sp,#0x1f]
000172  f0400001          ORR      r0,r0,#1
000176  f88d001f          STRB     r0,[sp,#0x1f]
;;;1238     
;;;1239     /* Crypto structures initialisation*/
;;;1240     CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00017a  a808              ADD      r0,sp,#0x20
00017c  f7fffffe          BL       CRYP_KeyStructInit
;;;1241     
;;;1242     switch(Keysize)
000180  982c              LDR      r0,[sp,#0xb0]
000182  2880              CMP      r0,#0x80
000184  d005              BEQ      |L2.402|
000186  28c0              CMP      r0,#0xc0
000188  d016              BEQ      |L2.440|
00018a  f5b07f80          CMP      r0,#0x100
00018e  d02f              BEQ      |L2.496|
000190  e051              B        |L2.566|
                  |L2.402|
;;;1243     {
;;;1244       case 128:
;;;1245       AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
000192  2000              MOVS     r0,#0
;;;1246       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000194  9019              STR      r0,[sp,#0x64]
000196  f8da0000          LDR      r0,[r10,#0]
00019a  ba00              REV      r0,r0
;;;1247       keyaddr+=4;
;;;1248       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00019c  900c              STR      r0,[sp,#0x30]
00019e  f8da0004          LDR      r0,[r10,#4]
0001a2  ba00              REV      r0,r0
;;;1249       keyaddr+=4;
;;;1250       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0001a4  900d              STR      r0,[sp,#0x34]
0001a6  f8da0008          LDR      r0,[r10,#8]
0001aa  ba00              REV      r0,r0
;;;1251       keyaddr+=4;
;;;1252       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0001ac  900e              STR      r0,[sp,#0x38]
0001ae  f8da000c          LDR      r0,[r10,#0xc]
0001b2  ba00              REV      r0,r0
;;;1253       break;
0001b4  900f              STR      r0,[sp,#0x3c]
0001b6  e03e              B        |L2.566|
                  |L2.440|
;;;1254       case 192:
;;;1255       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
0001b8  f44f7080          MOV      r0,#0x100
;;;1256       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0001bc  9019              STR      r0,[sp,#0x64]
0001be  f8da0000          LDR      r0,[r10,#0]
0001c2  ba00              REV      r0,r0
;;;1257       keyaddr+=4;
;;;1258       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0001c4  900a              STR      r0,[sp,#0x28]
0001c6  f8da0004          LDR      r0,[r10,#4]
0001ca  ba00              REV      r0,r0
;;;1259       keyaddr+=4;
;;;1260       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0001cc  900b              STR      r0,[sp,#0x2c]
0001ce  f8da0008          LDR      r0,[r10,#8]
0001d2  ba00              REV      r0,r0
;;;1261       keyaddr+=4;
;;;1262       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0001d4  900c              STR      r0,[sp,#0x30]
0001d6  f8da000c          LDR      r0,[r10,#0xc]
0001da  ba00              REV      r0,r0
;;;1263       keyaddr+=4;
;;;1264       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0001dc  900d              STR      r0,[sp,#0x34]
0001de  f8da0010          LDR      r0,[r10,#0x10]
0001e2  ba00              REV      r0,r0
;;;1265       keyaddr+=4;
;;;1266       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0001e4  900e              STR      r0,[sp,#0x38]
0001e6  f8da0014          LDR      r0,[r10,#0x14]
0001ea  ba00              REV      r0,r0
;;;1267       break;
0001ec  900f              STR      r0,[sp,#0x3c]
0001ee  e022              B        |L2.566|
                  |L2.496|
;;;1268       case 256:
;;;1269       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
0001f0  f44f7000          MOV      r0,#0x200
;;;1270       AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0001f4  9019              STR      r0,[sp,#0x64]
0001f6  f8da0000          LDR      r0,[r10,#0]
0001fa  ba00              REV      r0,r0
;;;1271       keyaddr+=4;
;;;1272       AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
0001fc  9008              STR      r0,[sp,#0x20]
0001fe  f8da0004          LDR      r0,[r10,#4]
000202  ba00              REV      r0,r0
;;;1273       keyaddr+=4;
;;;1274       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000204  9009              STR      r0,[sp,#0x24]
000206  f8da0008          LDR      r0,[r10,#8]
00020a  ba00              REV      r0,r0
;;;1275       keyaddr+=4;
;;;1276       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00020c  900a              STR      r0,[sp,#0x28]
00020e  f8da000c          LDR      r0,[r10,#0xc]
000212  ba00              REV      r0,r0
;;;1277       keyaddr+=4;
;;;1278       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000214  900b              STR      r0,[sp,#0x2c]
000216  f8da0010          LDR      r0,[r10,#0x10]
00021a  ba00              REV      r0,r0
;;;1279       keyaddr+=4;
;;;1280       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00021c  900c              STR      r0,[sp,#0x30]
00021e  f8da0014          LDR      r0,[r10,#0x14]
000222  ba00              REV      r0,r0
;;;1281       keyaddr+=4;
;;;1282       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000224  900d              STR      r0,[sp,#0x34]
000226  f8da0018          LDR      r0,[r10,#0x18]
00022a  ba00              REV      r0,r0
;;;1283       keyaddr+=4;
;;;1284       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00022c  900e              STR      r0,[sp,#0x38]
00022e  f8da001c          LDR      r0,[r10,#0x1c]
000232  ba00              REV      r0,r0
000234  900f              STR      r0,[sp,#0x3c]
                  |L2.566|
;;;1285       break;
;;;1286       default:
;;;1287       break;
;;;1288     }
;;;1289     
;;;1290     /* CRYP Initialization Vectors */
;;;1291     AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
000236  9810              LDR      r0,[sp,#0x40]
000238  f04f0a80          MOV      r10,#0x80             ;1242
00023c  6800              LDR      r0,[r0,#0]
00023e  ba00              REV      r0,r0
;;;1292     ctraddr+=4;
000240  901a              STR      r0,[sp,#0x68]
;;;1293     AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
000242  9810              LDR      r0,[sp,#0x40]
000244  6841              LDR      r1,[r0,#4]
000246  ba09              REV      r1,r1
;;;1294     ctraddr+=4;
;;;1295     AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
000248  911b              STR      r1,[sp,#0x6c]
00024a  6881              LDR      r1,[r0,#8]
00024c  ba09              REV      r1,r1
;;;1296     ctraddr+=4;
;;;1297     AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
00024e  911c              STR      r1,[sp,#0x70]
000250  68c0              LDR      r0,[r0,#0xc]
000252  ba00              REV      r0,r0
;;;1298     
;;;1299     /*------------------ AES Encryption ------------------*/
;;;1300     if(Mode == MODE_ENCRYPT) /* AES encryption */
000254  901d              STR      r0,[sp,#0x74]
000256  981f              LDR      r0,[sp,#0x7c]
000258  2801              CMP      r0,#1
00025a  d062              BEQ      |L2.802|
;;;1301     {
;;;1302       /* Flush IN/OUT FIFOs */
;;;1303       CRYP_FIFOFlush();
;;;1304       
;;;1305       /* Key Initialisation */
;;;1306       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;1307       
;;;1308       /* CRYP Initialization Vectors */
;;;1309       CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;1310       
;;;1311       /* Crypto Init for Key preparation for decryption process */
;;;1312       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;1313       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
;;;1314       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;1315       CRYP_Init(&AES_CRYP_InitStructure);
;;;1316       
;;;1317       /***************************** Init phase *********************************/
;;;1318       /* Select init phase */
;;;1319       CRYP_PhaseConfig(CRYP_Phase_Init);
;;;1320       
;;;1321       b0addr = (uint32_t)blockb0;
;;;1322       /* Write the blockb0 block in the IN FIFO */
;;;1323       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1324       b0addr+=4;
;;;1325       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1326       b0addr+=4;
;;;1327       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1328       b0addr+=4;
;;;1329       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1330       
;;;1331       /* Enable Crypto processor */
;;;1332       CRYP_Cmd(ENABLE);
;;;1333       
;;;1334       /* Wait for CRYPEN bit to be 0 */
;;;1335       while(CRYP_GetCmdStatus() == ENABLE)
;;;1336       {
;;;1337       }
;;;1338       /***************************** header phase *******************************/
;;;1339       if(headersize != 0)
;;;1340       {
;;;1341         /* Select header phase */
;;;1342         CRYP_PhaseConfig(CRYP_Phase_Header);
;;;1343         
;;;1344         /* Enable Crypto processor */
;;;1345         CRYP_Cmd(ENABLE);
;;;1346         
;;;1347         if(CRYP_GetCmdStatus() == DISABLE)
;;;1348         {
;;;1349            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1350               the CRYP peripheral (please check the device sales type. */
;;;1351            return(ERROR);
;;;1352         }
;;;1353         
;;;1354         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
;;;1355         {
;;;1356           /* Wait until the IFEM flag is reset */
;;;1357           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1358           {
;;;1359           }
;;;1360           
;;;1361           /* Write the Input block in the IN FIFO */
;;;1362           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1363           headeraddr+=4;
;;;1364           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1365           headeraddr+=4;
;;;1366           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1367           headeraddr+=4;
;;;1368           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1369           headeraddr+=4;
;;;1370         }
;;;1371         
;;;1372         /* Wait until the complete message has been processed */
;;;1373         counter = 0;
;;;1374         do
;;;1375         {
;;;1376           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1377           counter++;
;;;1378         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1379   
;;;1380         if (busystatus != RESET)
;;;1381         {
;;;1382           status = ERROR;
;;;1383         }
;;;1384       }
;;;1385       
;;;1386       /**************************** payload phase *******************************/
;;;1387       if(ILength != 0)
;;;1388       {
;;;1389         /* Select payload phase */
;;;1390         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1391         
;;;1392         /* Enable Crypto processor */
;;;1393         CRYP_Cmd(ENABLE);
;;;1394         
;;;1395         if(CRYP_GetCmdStatus() == DISABLE)
;;;1396         {
;;;1397           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1398              the CRYP peripheral (please check the device sales type. */
;;;1399           return(ERROR);
;;;1400         }
;;;1401         
;;;1402         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1403         {
;;;1404           /* Wait until the IFEM flag is reset */
;;;1405           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1406           {
;;;1407           }
;;;1408           
;;;1409           /* Write the Input block in the IN FIFO */
;;;1410           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1411           inputaddr+=4;
;;;1412           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1413           inputaddr+=4;
;;;1414           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1415           inputaddr+=4;
;;;1416           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1417           inputaddr+=4;
;;;1418           
;;;1419           /* Wait until the complete message has been processed */
;;;1420           counter = 0;
;;;1421           do
;;;1422           {
;;;1423             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1424             counter++;
;;;1425           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1426   
;;;1427           if (busystatus != RESET)
;;;1428           {
;;;1429             status = ERROR;
;;;1430           }
;;;1431           else
;;;1432           {
;;;1433             /* Wait until the OFNE flag is reset */
;;;1434             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1435             {
;;;1436             }
;;;1437             
;;;1438             /* Read the Output block from the Output FIFO */
;;;1439             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1440             outputaddr+=4;
;;;1441             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1442             outputaddr+=4;
;;;1443             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1444             outputaddr+=4;
;;;1445             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1446             outputaddr+=4;
;;;1447           }
;;;1448         }
;;;1449       }
;;;1450       
;;;1451       /***************************** final phase ********************************/
;;;1452       /* Select final phase */
;;;1453       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1454       
;;;1455       /* Enable Crypto processor */
;;;1456       CRYP_Cmd(ENABLE);
;;;1457       
;;;1458       if(CRYP_GetCmdStatus() == DISABLE)
;;;1459       {
;;;1460         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1461            the CRYP peripheral (please check the device sales type. */
;;;1462         return(ERROR);
;;;1463       }
;;;1464       
;;;1465       ctraddr = (uint32_t)ctr;
;;;1466       /* Write the counter block in the IN FIFO */
;;;1467       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1468       ctraddr+=4;
;;;1469       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1470       ctraddr+=4;
;;;1471       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1472       ctraddr+=4;
;;;1473       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1474       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
;;;1475       
;;;1476       /* Wait until the OFNE flag is reset */
;;;1477       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1478       {
;;;1479       }
;;;1480       
;;;1481       /* Read the Auth TAG in the IN FIFO */
;;;1482       temptag[0] = CRYP_DataOut();
;;;1483       temptag[1] = CRYP_DataOut();
;;;1484       temptag[2] = CRYP_DataOut();
;;;1485       temptag[3] = CRYP_DataOut();
;;;1486     }
;;;1487     /*------------------ AES Decryption ------------------*/
;;;1488     else /* AES decryption */
;;;1489     {
;;;1490       /* Flush IN/OUT FIFOs */
;;;1491       CRYP_FIFOFlush();
00025c  f7fffffe          BL       CRYP_FIFOFlush
;;;1492       
;;;1493       /* Key Initialisation */
;;;1494       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000260  a808              ADD      r0,sp,#0x20
000262  f7fffffe          BL       CRYP_KeyInit
;;;1495       
;;;1496       /* CRYP Initialization Vectors */
;;;1497       CRYP_IVInit(&AES_CRYP_IVInitStructure);
000266  a81a              ADD      r0,sp,#0x68
000268  f7fffffe          BL       CRYP_IVInit
;;;1498       
;;;1499       /* Crypto Init for Key preparation for decryption process */
;;;1500       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00026c  2004              MOVS     r0,#4
;;;1501       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
00026e  9016              STR      r0,[sp,#0x58]
000270  f04f1008          MOV      r0,#0x80008
000274  e9cd0a17          STRD     r0,r10,[sp,#0x5c]
;;;1502       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;1503       CRYP_Init(&AES_CRYP_InitStructure);
000278  a816              ADD      r0,sp,#0x58
00027a  f7fffffe          BL       CRYP_Init
;;;1504       
;;;1505       /***************************** Init phase *********************************/
;;;1506       /* Select init phase */
;;;1507       CRYP_PhaseConfig(CRYP_Phase_Init);
00027e  2000              MOVS     r0,#0
000280  f7fffffe          BL       CRYP_PhaseConfig
;;;1508       
;;;1509       b0addr = (uint32_t)blockb0;
;;;1510       /* Write the blockb0 block in the IN FIFO */
;;;1511       CRYP_DataIn((*(uint32_t*)(b0addr)));
000284  9800              LDR      r0,[sp,#0]
000286  f7fffffe          BL       CRYP_DataIn
;;;1512       b0addr+=4;
;;;1513       CRYP_DataIn((*(uint32_t*)(b0addr)));
00028a  9801              LDR      r0,[sp,#4]
00028c  f7fffffe          BL       CRYP_DataIn
;;;1514       b0addr+=4;
;;;1515       CRYP_DataIn((*(uint32_t*)(b0addr)));
000290  9802              LDR      r0,[sp,#8]
000292  f7fffffe          BL       CRYP_DataIn
;;;1516       b0addr+=4;
;;;1517       CRYP_DataIn((*(uint32_t*)(b0addr)));
000296  9803              LDR      r0,[sp,#0xc]
000298  f7fffffe          BL       CRYP_DataIn
;;;1518       
;;;1519       /* Enable Crypto processor */
;;;1520       CRYP_Cmd(ENABLE);
00029c  2001              MOVS     r0,#1
00029e  f7fffffe          BL       CRYP_Cmd
                  |L2.674|
;;;1521       
;;;1522       /* Wait for CRYPEN bit to be 0 */
;;;1523       while(CRYP_GetCmdStatus() == ENABLE)
0002a2  f7fffffe          BL       CRYP_GetCmdStatus
0002a6  2801              CMP      r0,#1
0002a8  d0fb              BEQ      |L2.674|
;;;1524       {
;;;1525       }
;;;1526       
;;;1527       /***************************** header phase *******************************/
;;;1528       if(headersize != 0)
0002aa  2c00              CMP      r4,#0
0002ac  f000811b          BEQ.W    |L2.1254|
;;;1529       {
;;;1530         /* Select header phase */
;;;1531         CRYP_PhaseConfig(CRYP_Phase_Header);
0002b0  f44f3080          MOV      r0,#0x10000
0002b4  f7fffffe          BL       CRYP_PhaseConfig
;;;1532         
;;;1533         /* Enable Crypto processor */
;;;1534         CRYP_Cmd(ENABLE);
0002b8  2001              MOVS     r0,#1
0002ba  f7fffffe          BL       CRYP_Cmd
;;;1535         
;;;1536         if(CRYP_GetCmdStatus() == DISABLE)
0002be  f7fffffe          BL       CRYP_GetCmdStatus
0002c2  2800              CMP      r0,#0
;;;1537         {
;;;1538           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1539              the CRYP peripheral (please check the device sales type. */
;;;1540           return(ERROR);
;;;1541         }
;;;1542         
;;;1543         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
;;;1544         {
;;;1545           /* Wait until the IFEM flag is reset */
;;;1546           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1547           {
;;;1548           }
;;;1549           
;;;1550           /* Write the Input block in the IN FIFO */
;;;1551           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1552           headeraddr+=4;
;;;1553           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1554           headeraddr+=4;
;;;1555           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1556           headeraddr+=4;
;;;1557           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1558           headeraddr+=4;
;;;1559         }
;;;1560         
;;;1561         /* Wait until the complete message has been processed */
;;;1562         counter = 0;
;;;1563         do
;;;1564         {
;;;1565           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1566           counter++;
;;;1567         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1568   
;;;1569         if (busystatus != RESET)
;;;1570         {
;;;1571           status = ERROR;
;;;1572         }
;;;1573       }
;;;1574       
;;;1575       /**************************** payload phase *******************************/
;;;1576       if(ILength != 0)
;;;1577       {
;;;1578         /* Select payload phase */
;;;1579         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1580   
;;;1581         /* Enable Crypto processor */
;;;1582         CRYP_Cmd(ENABLE);
;;;1583         
;;;1584         if(CRYP_GetCmdStatus() == DISABLE)
;;;1585         {
;;;1586           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1587              the CRYP peripheral (please check the device sales type. */
;;;1588           return(ERROR);
;;;1589         }
;;;1590         
;;;1591         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1592         {
;;;1593           /* Wait until the IFEM flag is reset */
;;;1594           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1595           {
;;;1596           }
;;;1597           
;;;1598           /* Write the Input block in the IN FIFO */
;;;1599           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1600           inputaddr+=4;
;;;1601           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1602           inputaddr+=4;
;;;1603           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1604           inputaddr+=4;
;;;1605           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1606           inputaddr+=4;
;;;1607           
;;;1608           /* Wait until the complete message has been processed */
;;;1609           counter = 0;
;;;1610           do
;;;1611           {
;;;1612             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1613             counter++;
;;;1614           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1615   
;;;1616           if (busystatus != RESET)
;;;1617           {
;;;1618             status = ERROR;
;;;1619           }
;;;1620           else
;;;1621           {
;;;1622             /* Wait until the OFNE flag is reset */
;;;1623             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1624             {
;;;1625             }
;;;1626             
;;;1627             /* Read the Output block from the Output FIFO */
;;;1628             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1629             outputaddr+=4;
;;;1630             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1631             outputaddr+=4;
;;;1632             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1633             outputaddr+=4;
;;;1634             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1635             outputaddr+=4;
;;;1636           }
;;;1637         }
;;;1638       }
;;;1639       
;;;1640       /***************************** final phase ********************************/
;;;1641       /* Select final phase */
;;;1642       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1643       
;;;1644       /* Enable Crypto processor */
;;;1645       CRYP_Cmd(ENABLE);
;;;1646       
;;;1647       if(CRYP_GetCmdStatus() == DISABLE)
;;;1648       {
;;;1649         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1650            the CRYP peripheral (please check the device sales type. */
;;;1651         return(ERROR);
;;;1652       }
;;;1653       
;;;1654       ctraddr = (uint32_t)ctr;
;;;1655       /* Write the counter block in the IN FIFO */
;;;1656       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1657       ctraddr+=4;
;;;1658       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1659       ctraddr+=4;
;;;1660       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1661       ctraddr+=4;
;;;1662       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1663       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
;;;1664       
;;;1665       /* Wait until the OFNE flag is reset */
;;;1666       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1667       {
;;;1668       }
;;;1669       
;;;1670       /* Read the Authentaication TAG (MAC) in the IN FIFO */
;;;1671       temptag[0] = CRYP_DataOut();
;;;1672       temptag[1] = CRYP_DataOut();
;;;1673       temptag[2] = CRYP_DataOut();
;;;1674       temptag[3] = CRYP_DataOut();
;;;1675     }
;;;1676     
;;;1677     /* Copy temporary authentication TAG in user TAG buffer */
;;;1678     for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
;;;1679     {
;;;1680       /* Set the authentication TAG buffer */
;;;1681       *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
;;;1682     }
;;;1683     
;;;1684     /* Disable Crypto */
;;;1685     CRYP_Cmd(DISABLE);
;;;1686   
;;;1687     return status;
;;;1688   }
0002c4  bf04              ITT      EQ
0002c6  b023              ADDEQ    sp,sp,#0x8c
0002c8  e8bd8ff0          POPEQ    {r4-r11,pc}
0002cc  f04f0a00          MOV      r10,#0                ;1543
0002d0  2c00              CMP      r4,#0                 ;1543
0002d2  d918              BLS      |L2.774|
                  |L2.724|
0002d4  2001              MOVS     r0,#1                 ;1546
0002d6  f7fffffe          BL       CRYP_GetFlagStatus
0002da  2800              CMP      r0,#0                 ;1546
0002dc  d0fa              BEQ      |L2.724|
0002de  6828              LDR      r0,[r5,#0]            ;1551
0002e0  f7fffffe          BL       CRYP_DataIn
0002e4  f8550f04          LDR      r0,[r5,#4]!           ;1553
0002e8  f7fffffe          BL       CRYP_DataIn
0002ec  f8550f04          LDR      r0,[r5,#4]!           ;1555
0002f0  f7fffffe          BL       CRYP_DataIn
0002f4  f8550f04          LDR      r0,[r5,#4]!           ;1557
0002f8  f7fffffe          BL       CRYP_DataIn
0002fc  1d2d              ADDS     r5,r5,#4              ;1557
0002fe  f10a0a10          ADD      r10,r10,#0x10         ;1557
000302  45a2              CMP      r10,r4                ;1543
000304  d3e6              BCC      |L2.724|
                  |L2.774|
000306  2000              MOVS     r0,#0                 ;1562
000308  9010              STR      r0,[sp,#0x40]         ;1562
                  |L2.778|
00030a  2010              MOVS     r0,#0x10              ;1565
00030c  f7fffffe          BL       CRYP_GetFlagStatus
000310  9910              LDR      r1,[sp,#0x40]         ;1566
000312  1c49              ADDS     r1,r1,#1              ;1566
000314  9110              STR      r1,[sp,#0x40]         ;1567
000316  f5b13f80          CMP      r1,#0x10000           ;1567
00031a  d07b              BEQ      |L2.1044|
00031c  2800              CMP      r0,#0                 ;1567
00031e  d1f4              BNE      |L2.778|
000320  e0e1              B        |L2.1254|
                  |L2.802|
000322  f7fffffe          BL       CRYP_FIFOFlush
000326  a808              ADD      r0,sp,#0x20           ;1306
000328  f7fffffe          BL       CRYP_KeyInit
00032c  a81a              ADD      r0,sp,#0x68           ;1309
00032e  f7fffffe          BL       CRYP_IVInit
000332  2000              MOVS     r0,#0                 ;1312
000334  9016              STR      r0,[sp,#0x58]         ;1313
000336  f04f1008          MOV      r0,#0x80008           ;1313
00033a  e9cd0a17          STRD     r0,r10,[sp,#0x5c]     ;1313
00033e  a816              ADD      r0,sp,#0x58           ;1315
000340  f7fffffe          BL       CRYP_Init
000344  2000              MOVS     r0,#0                 ;1319
000346  f7fffffe          BL       CRYP_PhaseConfig
00034a  9800              LDR      r0,[sp,#0]            ;1323
00034c  f7fffffe          BL       CRYP_DataIn
000350  9801              LDR      r0,[sp,#4]            ;1325
000352  f7fffffe          BL       CRYP_DataIn
000356  9802              LDR      r0,[sp,#8]            ;1327
000358  f7fffffe          BL       CRYP_DataIn
00035c  9803              LDR      r0,[sp,#0xc]          ;1329
00035e  f7fffffe          BL       CRYP_DataIn
000362  2001              MOVS     r0,#1                 ;1332
000364  f7fffffe          BL       CRYP_Cmd
                  |L2.872|
000368  f7fffffe          BL       CRYP_GetCmdStatus
00036c  2801              CMP      r0,#1                 ;1335
00036e  d0fb              BEQ      |L2.872|
000370  b3bc              CBZ      r4,|L2.994|
000372  f44f3080          MOV      r0,#0x10000           ;1342
000376  f7fffffe          BL       CRYP_PhaseConfig
00037a  2001              MOVS     r0,#1                 ;1345
00037c  f7fffffe          BL       CRYP_Cmd
000380  f7fffffe          BL       CRYP_GetCmdStatus
000384  2800              CMP      r0,#0                 ;1347
000386  bf04              ITT      EQ
000388  b023              ADDEQ    sp,sp,#0x8c
00038a  e8bd8ff0          POPEQ    {r4-r11,pc}
00038e  f04f0a00          MOV      r10,#0                ;1354
000392  2c00              CMP      r4,#0                 ;1354
000394  d918              BLS      |L2.968|
                  |L2.918|
000396  2001              MOVS     r0,#1                 ;1357
000398  f7fffffe          BL       CRYP_GetFlagStatus
00039c  2800              CMP      r0,#0                 ;1357
00039e  d0fa              BEQ      |L2.918|
0003a0  6828              LDR      r0,[r5,#0]            ;1362
0003a2  f7fffffe          BL       CRYP_DataIn
0003a6  f8550f04          LDR      r0,[r5,#4]!           ;1364
0003aa  f7fffffe          BL       CRYP_DataIn
0003ae  f8550f04          LDR      r0,[r5,#4]!           ;1366
0003b2  f7fffffe          BL       CRYP_DataIn
0003b6  f8550f04          LDR      r0,[r5,#4]!           ;1368
0003ba  f7fffffe          BL       CRYP_DataIn
0003be  1d2d              ADDS     r5,r5,#4              ;1368
0003c0  f10a0a10          ADD      r10,r10,#0x10         ;1368
0003c4  45a2              CMP      r10,r4                ;1354
0003c6  d3e6              BCC      |L2.918|
                  |L2.968|
0003c8  2000              MOVS     r0,#0                 ;1373
0003ca  9010              STR      r0,[sp,#0x40]         ;1373
                  |L2.972|
0003cc  2010              MOVS     r0,#0x10              ;1376
0003ce  f7fffffe          BL       CRYP_GetFlagStatus
0003d2  9910              LDR      r1,[sp,#0x40]         ;1377
0003d4  1c49              ADDS     r1,r1,#1              ;1377
0003d6  9110              STR      r1,[sp,#0x40]         ;1378
0003d8  f5b13f80          CMP      r1,#0x10000           ;1378
0003dc  d002              BEQ      |L2.996|
0003de  2800              CMP      r0,#0                 ;1378
0003e0  d1f4              BNE      |L2.972|
                  |L2.994|
0003e2  e003              B        |L2.1004|
                  |L2.996|
0003e4  2800              CMP      r0,#0                 ;1380
0003e6  bf18              IT       NE                    ;1382
0003e8  f04f0800          MOVNE    r8,#0                 ;1382
                  |L2.1004|
0003ec  f1b90f00          CMP      r9,#0                 ;1387
0003f0  d053              BEQ      |L2.1178|
0003f2  f44f3000          MOV      r0,#0x20000           ;1390
0003f6  f7fffffe          BL       CRYP_PhaseConfig
0003fa  2001              MOVS     r0,#1                 ;1393
0003fc  f7fffffe          BL       CRYP_Cmd
000400  f7fffffe          BL       CRYP_GetCmdStatus
000404  2800              CMP      r0,#0                 ;1395
000406  bf19              ITTEE    NE                    ;1402
000408  2400              MOVNE    r4,#0                 ;1402
00040a  4625              MOVNE    r5,r4                 ;1402
00040c  b023              ADDEQ    sp,sp,#0x8c
00040e  e8bd8ff0          POPEQ    {r4-r11,pc}
000412  e03d              B        |L2.1168|
                  |L2.1044|
000414  e063              B        |L2.1246|
                  |L2.1046|
000416  2001              MOVS     r0,#1                 ;1405
000418  f7fffffe          BL       CRYP_GetFlagStatus
00041c  2800              CMP      r0,#0                 ;1405
00041e  d0fa              BEQ      |L2.1046|
000420  6830              LDR      r0,[r6,#0]            ;1410
000422  f7fffffe          BL       CRYP_DataIn
000426  f8560f04          LDR      r0,[r6,#4]!           ;1412
00042a  f7fffffe          BL       CRYP_DataIn
00042e  f8560f04          LDR      r0,[r6,#4]!           ;1414
000432  f7fffffe          BL       CRYP_DataIn
000436  f8560f04          LDR      r0,[r6,#4]!           ;1416
00043a  f7fffffe          BL       CRYP_DataIn
00043e  1d36              ADDS     r6,r6,#4              ;1420
000440  9510              STR      r5,[sp,#0x40]         ;1420
                  |L2.1090|
000442  2010              MOVS     r0,#0x10              ;1423
000444  f7fffffe          BL       CRYP_GetFlagStatus
000448  9910              LDR      r1,[sp,#0x40]         ;1424
00044a  1c49              ADDS     r1,r1,#1              ;1424
00044c  9110              STR      r1,[sp,#0x40]         ;1425
00044e  f5b13f80          CMP      r1,#0x10000           ;1425
000452  d002              BEQ      |L2.1114|
000454  2800              CMP      r0,#0                 ;1425
000456  d1f4              BNE      |L2.1090|
000458  e004              B        |L2.1124|
                  |L2.1114|
00045a  2800              CMP      r0,#0                 ;1427
00045c  bf18              IT       NE                    ;1429
00045e  f04f0800          MOVNE    r8,#0                 ;1429
000462  d114              BNE      |L2.1166|
                  |L2.1124|
000464  2004              MOVS     r0,#4                 ;1434
000466  f7fffffe          BL       CRYP_GetFlagStatus
00046a  2800              CMP      r0,#0                 ;1434
00046c  d0fa              BEQ      |L2.1124|
00046e  f7fffffe          BL       CRYP_DataOut
000472  f8470b04          STR      r0,[r7],#4            ;1439
000476  f7fffffe          BL       CRYP_DataOut
00047a  f8470b04          STR      r0,[r7],#4            ;1441
00047e  f7fffffe          BL       CRYP_DataOut
000482  f8470b04          STR      r0,[r7],#4            ;1443
000486  f7fffffe          BL       CRYP_DataOut
00048a  f8470b04          STR      r0,[r7],#4            ;1445
                  |L2.1166|
00048e  3410              ADDS     r4,r4,#0x10           ;1445
                  |L2.1168|
000490  454c              CMP      r4,r9                 ;1402
000492  d202              BCS      |L2.1178|
000494  f1b80f00          CMP      r8,#0                 ;1402
000498  d1bd              BNE      |L2.1046|
                  |L2.1178|
00049a  f44f3040          MOV      r0,#0x30000           ;1453
00049e  f7fffffe          BL       CRYP_PhaseConfig
0004a2  2001              MOVS     r0,#1                 ;1456
0004a4  f7fffffe          BL       CRYP_Cmd
0004a8  f7fffffe          BL       CRYP_GetCmdStatus
0004ac  2800              CMP      r0,#0                 ;1458
0004ae  bf04              ITT      EQ
0004b0  b023              ADDEQ    sp,sp,#0x8c
0004b2  e8bd8ff0          POPEQ    {r4-r11,pc}
0004b6  9804              LDR      r0,[sp,#0x10]         ;1467
0004b8  f7fffffe          BL       CRYP_DataIn
0004bc  9805              LDR      r0,[sp,#0x14]         ;1469
0004be  f7fffffe          BL       CRYP_DataIn
0004c2  9806              LDR      r0,[sp,#0x18]         ;1471
0004c4  f7fffffe          BL       CRYP_DataIn
0004c8  9807              LDR      r0,[sp,#0x1c]         ;1474
0004ca  f0207080          BIC      r0,r0,#0x1000000      ;1474
0004ce  f7fffffe          BL       CRYP_DataIn
                  |L2.1234|
0004d2  2004              MOVS     r0,#4                 ;1477
0004d4  f7fffffe          BL       CRYP_GetFlagStatus
0004d8  2800              CMP      r0,#0                 ;1477
0004da  d0fa              BEQ      |L2.1234|
0004dc  e07a              B        |L2.1492|
                  |L2.1246|
0004de  2800              CMP      r0,#0                 ;1569
0004e0  bf18              IT       NE                    ;1571
0004e2  f04f0800          MOVNE    r8,#0                 ;1571
                  |L2.1254|
0004e6  f1b90f00          CMP      r9,#0                 ;1576
0004ea  d052              BEQ      |L2.1426|
0004ec  f44f3000          MOV      r0,#0x20000           ;1579
0004f0  f7fffffe          BL       CRYP_PhaseConfig
0004f4  2001              MOVS     r0,#1                 ;1582
0004f6  f7fffffe          BL       CRYP_Cmd
0004fa  f7fffffe          BL       CRYP_GetCmdStatus
0004fe  2800              CMP      r0,#0                 ;1584
000500  bf19              ITTEE    NE                    ;1591
000502  2400              MOVNE    r4,#0                 ;1591
000504  4625              MOVNE    r5,r4                 ;1591
000506  b023              ADDEQ    sp,sp,#0x8c
000508  e8bd8ff0          POPEQ    {r4-r11,pc}
00050c  e03c              B        |L2.1416|
                  |L2.1294|
00050e  2001              MOVS     r0,#1                 ;1594
000510  f7fffffe          BL       CRYP_GetFlagStatus
000514  2800              CMP      r0,#0                 ;1594
000516  d0fa              BEQ      |L2.1294|
000518  6830              LDR      r0,[r6,#0]            ;1599
00051a  f7fffffe          BL       CRYP_DataIn
00051e  f8560f04          LDR      r0,[r6,#4]!           ;1601
000522  f7fffffe          BL       CRYP_DataIn
000526  f8560f04          LDR      r0,[r6,#4]!           ;1603
00052a  f7fffffe          BL       CRYP_DataIn
00052e  f8560f04          LDR      r0,[r6,#4]!           ;1605
000532  f7fffffe          BL       CRYP_DataIn
000536  1d36              ADDS     r6,r6,#4              ;1609
000538  9510              STR      r5,[sp,#0x40]         ;1609
                  |L2.1338|
00053a  2010              MOVS     r0,#0x10              ;1612
00053c  f7fffffe          BL       CRYP_GetFlagStatus
000540  9910              LDR      r1,[sp,#0x40]         ;1613
000542  1c49              ADDS     r1,r1,#1              ;1613
000544  9110              STR      r1,[sp,#0x40]         ;1614
000546  f5b13f80          CMP      r1,#0x10000           ;1614
00054a  d002              BEQ      |L2.1362|
00054c  2800              CMP      r0,#0                 ;1614
00054e  d1f4              BNE      |L2.1338|
000550  e004              B        |L2.1372|
                  |L2.1362|
000552  2800              CMP      r0,#0                 ;1616
000554  bf18              IT       NE                    ;1618
000556  f04f0800          MOVNE    r8,#0                 ;1618
00055a  d114              BNE      |L2.1414|
                  |L2.1372|
00055c  2004              MOVS     r0,#4                 ;1623
00055e  f7fffffe          BL       CRYP_GetFlagStatus
000562  2800              CMP      r0,#0                 ;1623
000564  d0fa              BEQ      |L2.1372|
000566  f7fffffe          BL       CRYP_DataOut
00056a  f8470b04          STR      r0,[r7],#4            ;1628
00056e  f7fffffe          BL       CRYP_DataOut
000572  f8470b04          STR      r0,[r7],#4            ;1630
000576  f7fffffe          BL       CRYP_DataOut
00057a  f8470b04          STR      r0,[r7],#4            ;1632
00057e  f7fffffe          BL       CRYP_DataOut
000582  f8470b04          STR      r0,[r7],#4            ;1634
                  |L2.1414|
000586  3410              ADDS     r4,r4,#0x10           ;1634
                  |L2.1416|
000588  454c              CMP      r4,r9                 ;1591
00058a  d202              BCS      |L2.1426|
00058c  f1b80f00          CMP      r8,#0                 ;1591
000590  d1bd              BNE      |L2.1294|
                  |L2.1426|
000592  f44f3040          MOV      r0,#0x30000           ;1642
000596  f7fffffe          BL       CRYP_PhaseConfig
00059a  2001              MOVS     r0,#1                 ;1645
00059c  f7fffffe          BL       CRYP_Cmd
0005a0  f7fffffe          BL       CRYP_GetCmdStatus
0005a4  2800              CMP      r0,#0                 ;1647
0005a6  bf04              ITT      EQ
0005a8  b023              ADDEQ    sp,sp,#0x8c
0005aa  e8bd8ff0          POPEQ    {r4-r11,pc}
0005ae  9804              LDR      r0,[sp,#0x10]         ;1656
0005b0  f7fffffe          BL       CRYP_DataIn
0005b4  9805              LDR      r0,[sp,#0x14]         ;1658
0005b6  f7fffffe          BL       CRYP_DataIn
0005ba  9806              LDR      r0,[sp,#0x18]         ;1660
0005bc  f7fffffe          BL       CRYP_DataIn
0005c0  9807              LDR      r0,[sp,#0x1c]         ;1663
0005c2  f0207080          BIC      r0,r0,#0x1000000      ;1663
0005c6  f7fffffe          BL       CRYP_DataIn
                  |L2.1482|
0005ca  2004              MOVS     r0,#4                 ;1666
0005cc  f7fffffe          BL       CRYP_GetFlagStatus
0005d0  2800              CMP      r0,#0                 ;1666
0005d2  d0fa              BEQ      |L2.1482|
                  |L2.1492|
0005d4  f7fffffe          BL       CRYP_DataOut
0005d8  9012              STR      r0,[sp,#0x48]         ;1672
0005da  f7fffffe          BL       CRYP_DataOut
0005de  9013              STR      r0,[sp,#0x4c]         ;1673
0005e0  f7fffffe          BL       CRYP_DataOut
0005e4  9014              STR      r0,[sp,#0x50]         ;1674
0005e6  f7fffffe          BL       CRYP_DataOut
0005ea  9015              STR      r0,[sp,#0x54]         ;1678
0005ec  2000              MOVS     r0,#0                 ;1678
0005ee  f1bb0f00          CMP      r11,#0                ;1678
0005f2  bf88              IT       HI                    ;1159
0005f4  a912              ADDHI    r1,sp,#0x48           ;1159
0005f6  d905              BLS      |L2.1540|
                  |L2.1528|
0005f8  9a11              LDR      r2,[sp,#0x44]         ;1681
0005fa  5c0b              LDRB     r3,[r1,r0]            ;1681
0005fc  5413              STRB     r3,[r2,r0]            ;1681
0005fe  1c40              ADDS     r0,r0,#1              ;1681
000600  4583              CMP      r11,r0                ;1678
000602  d8f9              BHI      |L2.1528|
                  |L2.1540|
000604  2000              MOVS     r0,#0                 ;1685
000606  f7fffffe          BL       CRYP_Cmd
00060a  b023              ADD      sp,sp,#0x8c
00060c  4640              MOV      r0,r8                 ;1687
00060e  e8bd8ff0          POP      {r4-r11,pc}
;;;1689   
                          ENDP


                          AREA ||i.CRYP_AES_CTR||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CTR PROC
;;;495      */
;;;496    ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;497                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;498                             uint8_t *Output)
;;;499    {
000004  b091              SUB      sp,sp,#0x44
;;;500      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;501      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;502      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;503      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  e9dd481e          LDRD     r4,r8,[sp,#0x78]      ;499
00000e  4692              MOV      r10,r2                ;499
000010  468b              MOV      r11,r1                ;499
000012  9d20              LDR      r5,[sp,#0x80]
;;;504      uint32_t busystatus = 0;
;;;505      ErrorStatus status = SUCCESS;
000014  2701              MOVS     r7,#1
;;;506      uint32_t keyaddr    = (uint32_t)Key;
;;;507      uint32_t inputaddr  = (uint32_t)Input;
;;;508      uint32_t outputaddr = (uint32_t)Output;
;;;509      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;510      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;511    
;;;512      /* Crypto structures initialisation*/
;;;513      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9040          STR      r9,[sp,#0x40]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;514    
;;;515      switch(Keysize)
000022  9814              LDR      r0,[sp,#0x50]
000024  2880              CMP      r0,#0x80
000026  d005              BEQ      |L3.52|
000028  28c0              CMP      r0,#0xc0
00002a  d016              BEQ      |L3.90|
00002c  f5b07f80          CMP      r0,#0x100
000030  d02f              BEQ      |L3.146|
000032  e051              B        |L3.216|
                  |L3.52|
;;;516      {
;;;517        case 128:
;;;518        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;519        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000034  f8cd902c          STR      r9,[sp,#0x2c]
000038  f8da0000          LDR      r0,[r10,#0]
00003c  ba00              REV      r0,r0
;;;520        keyaddr+=4;
;;;521        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00003e  9004              STR      r0,[sp,#0x10]
000040  f8da0004          LDR      r0,[r10,#4]
000044  ba00              REV      r0,r0
;;;522        keyaddr+=4;
;;;523        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000046  9005              STR      r0,[sp,#0x14]
000048  f8da0008          LDR      r0,[r10,#8]
00004c  ba00              REV      r0,r0
;;;524        keyaddr+=4;
;;;525        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00004e  9006              STR      r0,[sp,#0x18]
000050  f8da000c          LDR      r0,[r10,#0xc]
000054  ba00              REV      r0,r0
;;;526        break;
000056  9007              STR      r0,[sp,#0x1c]
000058  e03e              B        |L3.216|
                  |L3.90|
;;;527        case 192:
;;;528        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
00005a  f44f7080          MOV      r0,#0x100
;;;529        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00005e  900b              STR      r0,[sp,#0x2c]
000060  f8da0000          LDR      r0,[r10,#0]
000064  ba00              REV      r0,r0
;;;530        keyaddr+=4;
;;;531        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000066  9002              STR      r0,[sp,#8]
000068  f8da0004          LDR      r0,[r10,#4]
00006c  ba00              REV      r0,r0
;;;532        keyaddr+=4;
;;;533        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00006e  9003              STR      r0,[sp,#0xc]
000070  f8da0008          LDR      r0,[r10,#8]
000074  ba00              REV      r0,r0
;;;534        keyaddr+=4;
;;;535        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000076  9004              STR      r0,[sp,#0x10]
000078  f8da000c          LDR      r0,[r10,#0xc]
00007c  ba00              REV      r0,r0
;;;536        keyaddr+=4;
;;;537        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00007e  9005              STR      r0,[sp,#0x14]
000080  f8da0010          LDR      r0,[r10,#0x10]
000084  ba00              REV      r0,r0
;;;538        keyaddr+=4;
;;;539        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000086  9006              STR      r0,[sp,#0x18]
000088  f8da0014          LDR      r0,[r10,#0x14]
00008c  ba00              REV      r0,r0
;;;540        break;
00008e  9007              STR      r0,[sp,#0x1c]
000090  e022              B        |L3.216|
                  |L3.146|
;;;541        case 256:
;;;542        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000092  f44f7000          MOV      r0,#0x200
;;;543        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000096  900b              STR      r0,[sp,#0x2c]
000098  f8da0000          LDR      r0,[r10,#0]
00009c  ba00              REV      r0,r0
;;;544        keyaddr+=4;
;;;545        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00009e  9000              STR      r0,[sp,#0]
0000a0  f8da0004          LDR      r0,[r10,#4]
0000a4  ba00              REV      r0,r0
;;;546        keyaddr+=4;
;;;547        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0000a6  9001              STR      r0,[sp,#4]
0000a8  f8da0008          LDR      r0,[r10,#8]
0000ac  ba00              REV      r0,r0
;;;548        keyaddr+=4;
;;;549        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0000ae  9002              STR      r0,[sp,#8]
0000b0  f8da000c          LDR      r0,[r10,#0xc]
0000b4  ba00              REV      r0,r0
;;;550        keyaddr+=4;
;;;551        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0000b6  9003              STR      r0,[sp,#0xc]
0000b8  f8da0010          LDR      r0,[r10,#0x10]
0000bc  ba00              REV      r0,r0
;;;552        keyaddr+=4;
;;;553        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000be  9004              STR      r0,[sp,#0x10]
0000c0  f8da0014          LDR      r0,[r10,#0x14]
0000c4  ba00              REV      r0,r0
;;;554        keyaddr+=4;
;;;555        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000c6  9005              STR      r0,[sp,#0x14]
0000c8  f8da0018          LDR      r0,[r10,#0x18]
0000cc  ba00              REV      r0,r0
;;;556        keyaddr+=4;
;;;557        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000ce  9006              STR      r0,[sp,#0x18]
0000d0  f8da001c          LDR      r0,[r10,#0x1c]
0000d4  ba00              REV      r0,r0
0000d6  9007              STR      r0,[sp,#0x1c]
                  |L3.216|
;;;558        break;
;;;559        default:
;;;560        break;
;;;561      }
;;;562      /* CRYP Initialization Vectors */
;;;563      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000d8  f8db0000          LDR      r0,[r11,#0]
0000dc  ba00              REV      r0,r0
;;;564      ivaddr+=4;
;;;565      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000de  900c              STR      r0,[sp,#0x30]
0000e0  f8db0004          LDR      r0,[r11,#4]
0000e4  ba00              REV      r0,r0
;;;566      ivaddr+=4;
;;;567      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000e6  900d              STR      r0,[sp,#0x34]
0000e8  f8db0008          LDR      r0,[r11,#8]
0000ec  ba00              REV      r0,r0
;;;568      ivaddr+=4;
;;;569      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000ee  900e              STR      r0,[sp,#0x38]
0000f0  f8db000c          LDR      r0,[r11,#0xc]
0000f4  ba00              REV      r0,r0
;;;570    
;;;571      /* Key Initialisation */
;;;572      CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000f6  900f              STR      r0,[sp,#0x3c]
0000f8  4668              MOV      r0,sp
0000fa  f7fffffe          BL       CRYP_KeyInit
;;;573    
;;;574      /*------------------ AES Decryption ------------------*/
;;;575      if(Mode == MODE_DECRYPT) /* AES decryption */
0000fe  9811              LDR      r0,[sp,#0x44]
000100  2800              CMP      r0,#0
;;;576      {
;;;577        /* Crypto Init for decryption process */
;;;578        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000102  bf06              ITTE     EQ
000104  2004              MOVEQ    r0,#4
000106  9008              STREQ    r0,[sp,#0x20]
;;;579      }
;;;580      /*------------------ AES Encryption ------------------*/
;;;581      else /* AES encryption */
;;;582      {
;;;583        /* Crypto Init for Encryption process */
;;;584        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000108  f8cd9020          STRNE    r9,[sp,#0x20]
;;;585      }
;;;586      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
00010c  2030              MOVS     r0,#0x30
;;;587      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00010e  9009              STR      r0,[sp,#0x24]
000110  2080              MOVS     r0,#0x80
;;;588      CRYP_Init(&AES_CRYP_InitStructure);
000112  900a              STR      r0,[sp,#0x28]
000114  a808              ADD      r0,sp,#0x20
000116  f7fffffe          BL       CRYP_Init
;;;589    
;;;590      /* CRYP Initialization Vectors */
;;;591      CRYP_IVInit(&AES_CRYP_IVInitStructure);
00011a  a80c              ADD      r0,sp,#0x30
00011c  f7fffffe          BL       CRYP_IVInit
;;;592    
;;;593      /* Flush IN/OUT FIFOs */
;;;594      CRYP_FIFOFlush();
000120  f7fffffe          BL       CRYP_FIFOFlush
;;;595    
;;;596      /* Enable Crypto processor */
;;;597      CRYP_Cmd(ENABLE);
000124  2001              MOVS     r0,#1
000126  f7fffffe          BL       CRYP_Cmd
;;;598    
;;;599      if(CRYP_GetCmdStatus() == DISABLE)
00012a  f7fffffe          BL       CRYP_GetCmdStatus
00012e  2800              CMP      r0,#0
;;;600      {
;;;601        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;602           the CRYP peripheral (please check the device sales type. */
;;;603        return(ERROR);
;;;604      }
;;;605      
;;;606      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
;;;607      {
;;;608    
;;;609        /* Write the Input block in the IN FIFO */
;;;610        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;611        inputaddr+=4;
;;;612        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;613        inputaddr+=4;
;;;614        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;615        inputaddr+=4;
;;;616        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;617        inputaddr+=4;
;;;618        /* Wait until the complete message has been processed */
;;;619        counter = 0;
;;;620        do
;;;621        {
;;;622          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;623          counter++;
;;;624        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;625    
;;;626        if (busystatus != RESET)
;;;627       {
;;;628           status = ERROR;
;;;629        }
;;;630        else
;;;631        {
;;;632    
;;;633          /* Read the Output block from the Output FIFO */
;;;634          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;635          outputaddr+=4;
;;;636          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;637          outputaddr+=4;
;;;638          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;639          outputaddr+=4;
;;;640          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;641          outputaddr+=4;
;;;642        }
;;;643      }
;;;644      /* Disable Crypto */
;;;645      CRYP_Cmd(DISABLE);
;;;646    
;;;647      return status;
;;;648    }
000130  bf04              ITT      EQ
000132  b015              ADDEQ    sp,sp,#0x54
000134  e8bd8ff0          POPEQ    {r4-r11,pc}
000138  e032              B        |L3.416|
                  |L3.314|
00013a  6820              LDR      r0,[r4,#0]            ;610
00013c  f7fffffe          BL       CRYP_DataIn
000140  f8540f04          LDR      r0,[r4,#4]!           ;612
000144  f7fffffe          BL       CRYP_DataIn
000148  f8540f04          LDR      r0,[r4,#4]!           ;614
00014c  f7fffffe          BL       CRYP_DataIn
000150  f8540f04          LDR      r0,[r4,#4]!           ;616
000154  f7fffffe          BL       CRYP_DataIn
000158  1d24              ADDS     r4,r4,#4              ;619
00015a  f8cd9040          STR      r9,[sp,#0x40]         ;619
                  |L3.350|
00015e  2010              MOVS     r0,#0x10              ;622
000160  f7fffffe          BL       CRYP_GetFlagStatus
000164  9910              LDR      r1,[sp,#0x40]         ;623
000166  1c49              ADDS     r1,r1,#1              ;623
000168  9110              STR      r1,[sp,#0x40]         ;624
00016a  f5b13f80          CMP      r1,#0x10000           ;624
00016e  d002              BEQ      |L3.374|
000170  2800              CMP      r0,#0                 ;624
000172  d1f4              BNE      |L3.350|
000174  e003              B        |L3.382|
                  |L3.374|
000176  2800              CMP      r0,#0                 ;626
000178  bf18              IT       NE                    ;628
00017a  2700              MOVNE    r7,#0                 ;628
00017c  d10f              BNE      |L3.414|
                  |L3.382|
00017e  f7fffffe          BL       CRYP_DataOut
000182  f8450b04          STR      r0,[r5],#4            ;634
000186  f7fffffe          BL       CRYP_DataOut
00018a  f8450b04          STR      r0,[r5],#4            ;636
00018e  f7fffffe          BL       CRYP_DataOut
000192  f8450b04          STR      r0,[r5],#4            ;638
000196  f7fffffe          BL       CRYP_DataOut
00019a  f8450b04          STR      r0,[r5],#4            ;640
                  |L3.414|
00019e  3610              ADDS     r6,r6,#0x10           ;640
                  |L3.416|
0001a0  4546              CMP      r6,r8                 ;606
0001a2  d201              BCS      |L3.424|
0001a4  2f00              CMP      r7,#0                 ;606
0001a6  d1c8              BNE      |L3.314|
                  |L3.424|
0001a8  2000              MOVS     r0,#0                 ;645
0001aa  f7fffffe          BL       CRYP_Cmd
0001ae  b015              ADD      sp,sp,#0x54
0001b0  4638              MOV      r0,r7                 ;647
0001b2  e8bd8ff0          POP      {r4-r11,pc}
;;;649    
                          ENDP


                          AREA ||i.CRYP_AES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_AES_ECB PROC
;;;105      */
;;;106    ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;107                             uint8_t* Input, uint32_t Ilength, uint8_t* Output)
;;;108    {
000004  b08d              SUB      sp,sp,#0x34
000006  4683              MOV      r11,r0
000008  e9dd8516          LDRD     r8,r5,[sp,#0x58]
;;;109      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;110      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;111      __IO uint32_t counter = 0;
00000c  f04f0900          MOV      r9,#0
000010  461c              MOV      r4,r3                 ;108
000012  4692              MOV      r10,r2                ;108
000014  460e              MOV      r6,r1                 ;108
;;;112      uint32_t busystatus = 0;
;;;113      ErrorStatus status = SUCCESS;
000016  2701              MOVS     r7,#1
;;;114      uint32_t keyaddr    = (uint32_t)Key;
;;;115      uint32_t inputaddr  = (uint32_t)Input;
;;;116      uint32_t outputaddr = (uint32_t)Output;
;;;117      uint32_t i = 0;
;;;118    
;;;119      /* Crypto structures initialisation*/
;;;120      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;121    
;;;122      switch(Keysize)
000022  f1ba0f80          CMP      r10,#0x80
000026  d006              BEQ      |L4.54|
000028  f1ba0fc0          CMP      r10,#0xc0
00002c  d012              BEQ      |L4.84|
00002e  f5ba7f80          CMP      r10,#0x100
000032  d025              BEQ      |L4.128|
000034  e03f              B        |L4.182|
                  |L4.54|
;;;123      {
;;;124        case 128:
;;;125        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;126        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000036  f8cd902c          STR      r9,[sp,#0x2c]
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
;;;127        keyaddr+=4;
;;;128        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00003e  9004              STR      r0,[sp,#0x10]
000040  6870              LDR      r0,[r6,#4]
000042  ba00              REV      r0,r0
;;;129        keyaddr+=4;
;;;130        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000044  9005              STR      r0,[sp,#0x14]
000046  68b0              LDR      r0,[r6,#8]
000048  ba00              REV      r0,r0
;;;131        keyaddr+=4;
;;;132        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00004a  9006              STR      r0,[sp,#0x18]
00004c  68f0              LDR      r0,[r6,#0xc]
00004e  ba00              REV      r0,r0
;;;133        break;
000050  9007              STR      r0,[sp,#0x1c]
000052  e030              B        |L4.182|
                  |L4.84|
;;;134        case 192:
;;;135        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
000054  f44f7080          MOV      r0,#0x100
;;;136        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000058  900b              STR      r0,[sp,#0x2c]
00005a  6830              LDR      r0,[r6,#0]
00005c  ba00              REV      r0,r0
;;;137        keyaddr+=4;
;;;138        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00005e  9002              STR      r0,[sp,#8]
000060  6870              LDR      r0,[r6,#4]
000062  ba00              REV      r0,r0
;;;139        keyaddr+=4;
;;;140        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000064  9003              STR      r0,[sp,#0xc]
000066  68b0              LDR      r0,[r6,#8]
000068  ba00              REV      r0,r0
;;;141        keyaddr+=4;
;;;142        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00006a  9004              STR      r0,[sp,#0x10]
00006c  68f0              LDR      r0,[r6,#0xc]
00006e  ba00              REV      r0,r0
;;;143        keyaddr+=4;
;;;144        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000070  9005              STR      r0,[sp,#0x14]
000072  6930              LDR      r0,[r6,#0x10]
000074  ba00              REV      r0,r0
;;;145        keyaddr+=4;
;;;146        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000076  9006              STR      r0,[sp,#0x18]
000078  6970              LDR      r0,[r6,#0x14]
00007a  ba00              REV      r0,r0
;;;147        break;
00007c  9007              STR      r0,[sp,#0x1c]
00007e  e01a              B        |L4.182|
                  |L4.128|
;;;148        case 256:
;;;149        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000080  f44f7000          MOV      r0,#0x200
;;;150        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000084  900b              STR      r0,[sp,#0x2c]
000086  6830              LDR      r0,[r6,#0]
000088  ba00              REV      r0,r0
;;;151        keyaddr+=4;
;;;152        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00008a  9000              STR      r0,[sp,#0]
00008c  6870              LDR      r0,[r6,#4]
00008e  ba00              REV      r0,r0
;;;153        keyaddr+=4;
;;;154        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000090  9001              STR      r0,[sp,#4]
000092  68b0              LDR      r0,[r6,#8]
000094  ba00              REV      r0,r0
;;;155        keyaddr+=4;
;;;156        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000096  9002              STR      r0,[sp,#8]
000098  68f0              LDR      r0,[r6,#0xc]
00009a  ba00              REV      r0,r0
;;;157        keyaddr+=4;
;;;158        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00009c  9003              STR      r0,[sp,#0xc]
00009e  6930              LDR      r0,[r6,#0x10]
0000a0  ba00              REV      r0,r0
;;;159        keyaddr+=4;
;;;160        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000a2  9004              STR      r0,[sp,#0x10]
0000a4  6970              LDR      r0,[r6,#0x14]
0000a6  ba00              REV      r0,r0
;;;161        keyaddr+=4;
;;;162        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000a8  9005              STR      r0,[sp,#0x14]
0000aa  69b0              LDR      r0,[r6,#0x18]
0000ac  ba00              REV      r0,r0
;;;163        keyaddr+=4;
;;;164        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000ae  9006              STR      r0,[sp,#0x18]
0000b0  69f0              LDR      r0,[r6,#0x1c]
0000b2  ba00              REV      r0,r0
0000b4  9007              STR      r0,[sp,#0x1c]
                  |L4.182|
;;;165        break;
;;;166        default:
;;;167        break;
;;;168      }
;;;169    
;;;170      /*------------------ AES Decryption ------------------*/
;;;171      if(Mode == MODE_DECRYPT) /* AES decryption */
0000b6  f1bb0f00          CMP      r11,#0
0000ba  d019              BEQ      |L4.240|
;;;172      {
;;;173        /* Flush IN/OUT FIFOs */
;;;174        CRYP_FIFOFlush();
;;;175    
;;;176        /* Crypto Init for Key preparation for decryption process */
;;;177        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;178        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;179        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;180        CRYP_Init(&AES_CRYP_InitStructure);
;;;181    
;;;182        /* Key Initialisation */
;;;183        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;184    
;;;185        /* Enable Crypto processor */
;;;186        CRYP_Cmd(ENABLE);
;;;187    
;;;188        /* wait until the Busy flag is RESET */
;;;189        do
;;;190        {
;;;191          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;192          counter++;
;;;193        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;194    
;;;195        if (busystatus != RESET)
;;;196       {
;;;197           status = ERROR;
;;;198        }
;;;199        else
;;;200        {
;;;201          /* Crypto Init for decryption process */  
;;;202          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;203        }
;;;204      }
;;;205      /*------------------ AES Encryption ------------------*/
;;;206      else /* AES encryption */
;;;207      {
;;;208    
;;;209        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000bc  4668              MOV      r0,sp
0000be  f7fffffe          BL       CRYP_KeyInit
;;;210    
;;;211        /* Crypto Init for Encryption process */
;;;212        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0000c2  f8cd9020          STR      r9,[sp,#0x20]
                  |L4.198|
;;;213      }
;;;214    
;;;215      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
0000c6  2020              MOVS     r0,#0x20
;;;216      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000c8  9009              STR      r0,[sp,#0x24]
0000ca  2080              MOVS     r0,#0x80
;;;217      CRYP_Init(&AES_CRYP_InitStructure);
0000cc  900a              STR      r0,[sp,#0x28]
0000ce  a808              ADD      r0,sp,#0x20
0000d0  f7fffffe          BL       CRYP_Init
;;;218    
;;;219      /* Flush IN/OUT FIFOs */
;;;220      CRYP_FIFOFlush();
0000d4  f7fffffe          BL       CRYP_FIFOFlush
;;;221    
;;;222      /* Enable Crypto processor */
;;;223      CRYP_Cmd(ENABLE);
0000d8  2001              MOVS     r0,#1
0000da  f7fffffe          BL       CRYP_Cmd
;;;224    
;;;225      if(CRYP_GetCmdStatus() == DISABLE)
0000de  f7fffffe          BL       CRYP_GetCmdStatus
0000e2  2800              CMP      r0,#0
;;;226      {
;;;227        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;228           the CRYP peripheral (please check the device sales type. */
;;;229        return(ERROR);
;;;230      }
;;;231      
;;;232      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000e4  bf12              ITEE     NE
0000e6  2600              MOVNE    r6,#0
;;;233      {
;;;234    
;;;235        /* Write the Input block in the IN FIFO */
;;;236        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;237        inputaddr+=4;
;;;238        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;239        inputaddr+=4;
;;;240        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;241        inputaddr+=4;
;;;242        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;243        inputaddr+=4;
;;;244    
;;;245        /* Wait until the complete message has been processed */
;;;246        counter = 0;
;;;247        do
;;;248        {
;;;249          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;250          counter++;
;;;251        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;252    
;;;253        if (busystatus != RESET)
;;;254       {
;;;255           status = ERROR;
;;;256        }
;;;257        else
;;;258        {
;;;259    
;;;260          /* Read the Output block from the Output FIFO */
;;;261          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;262          outputaddr+=4;
;;;263          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;264          outputaddr+=4;
;;;265          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;266          outputaddr+=4;
;;;267          *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
;;;268          outputaddr+=4;
;;;269        }
;;;270      }
;;;271    
;;;272      /* Disable Crypto */
;;;273      CRYP_Cmd(DISABLE);
;;;274    
;;;275      return status; 
;;;276    }
0000e8  b00d              ADDEQ    sp,sp,#0x34
0000ea  e8bd8ff0          POPEQ    {r4-r11,pc}
0000ee  e055              B        |L4.412|
                  |L4.240|
0000f0  f7fffffe          BL       CRYP_FIFOFlush
0000f4  2604              MOVS     r6,#4                 ;177
0000f6  2038              MOVS     r0,#0x38              ;178
0000f8  e9cd6008          STRD     r6,r0,[sp,#0x20]      ;179
0000fc  f8cd9028          STR      r9,[sp,#0x28]         ;179
000100  a808              ADD      r0,sp,#0x20           ;180
000102  f7fffffe          BL       CRYP_Init
000106  4668              MOV      r0,sp                 ;183
000108  f7fffffe          BL       CRYP_KeyInit
00010c  2001              MOVS     r0,#1                 ;186
00010e  f7fffffe          BL       CRYP_Cmd
                  |L4.274|
000112  2010              MOVS     r0,#0x10              ;191
000114  f7fffffe          BL       CRYP_GetFlagStatus
000118  990c              LDR      r1,[sp,#0x30]         ;192
00011a  1c49              ADDS     r1,r1,#1              ;192
00011c  910c              STR      r1,[sp,#0x30]         ;193
00011e  f5b13f80          CMP      r1,#0x10000           ;193
000122  d002              BEQ      |L4.298|
000124  2800              CMP      r0,#0                 ;193
000126  d1f4              BNE      |L4.274|
000128  e003              B        |L4.306|
                  |L4.298|
00012a  2800              CMP      r0,#0                 ;195
00012c  bf18              IT       NE                    ;197
00012e  2700              MOVNE    r7,#0                 ;197
000130  d1c9              BNE      |L4.198|
                  |L4.306|
000132  9608              STR      r6,[sp,#0x20]         ;202
000134  e7c7              B        |L4.198|
                  |L4.310|
000136  6820              LDR      r0,[r4,#0]            ;236
000138  f7fffffe          BL       CRYP_DataIn
00013c  f8540f04          LDR      r0,[r4,#4]!           ;238
000140  f7fffffe          BL       CRYP_DataIn
000144  f8540f04          LDR      r0,[r4,#4]!           ;240
000148  f7fffffe          BL       CRYP_DataIn
00014c  f8540f04          LDR      r0,[r4,#4]!           ;242
000150  f7fffffe          BL       CRYP_DataIn
000154  1d24              ADDS     r4,r4,#4              ;246
000156  f8cd9030          STR      r9,[sp,#0x30]         ;246
                  |L4.346|
00015a  2010              MOVS     r0,#0x10              ;249
00015c  f7fffffe          BL       CRYP_GetFlagStatus
000160  990c              LDR      r1,[sp,#0x30]         ;250
000162  1c49              ADDS     r1,r1,#1              ;250
000164  910c              STR      r1,[sp,#0x30]         ;251
000166  f5b13f80          CMP      r1,#0x10000           ;251
00016a  d002              BEQ      |L4.370|
00016c  2800              CMP      r0,#0                 ;251
00016e  d1f4              BNE      |L4.346|
000170  e003              B        |L4.378|
                  |L4.370|
000172  2800              CMP      r0,#0                 ;253
000174  bf18              IT       NE                    ;255
000176  2700              MOVNE    r7,#0                 ;255
000178  d10f              BNE      |L4.410|
                  |L4.378|
00017a  f7fffffe          BL       CRYP_DataOut
00017e  f8450b04          STR      r0,[r5],#4            ;261
000182  f7fffffe          BL       CRYP_DataOut
000186  f8450b04          STR      r0,[r5],#4            ;263
00018a  f7fffffe          BL       CRYP_DataOut
00018e  f8450b04          STR      r0,[r5],#4            ;265
000192  f7fffffe          BL       CRYP_DataOut
000196  f8450b04          STR      r0,[r5],#4            ;267
                  |L4.410|
00019a  3610              ADDS     r6,r6,#0x10           ;267
                  |L4.412|
00019c  4546              CMP      r6,r8                 ;232
00019e  d201              BCS      |L4.420|
0001a0  2f00              CMP      r7,#0                 ;232
0001a2  d1c8              BNE      |L4.310|
                  |L4.420|
0001a4  2000              MOVS     r0,#0                 ;273
0001a6  f7fffffe          BL       CRYP_Cmd
0001aa  b00d              ADD      sp,sp,#0x34
0001ac  4638              MOV      r0,r7                 ;275
0001ae  e8bd8ff0          POP      {r4-r11,pc}
;;;277    
                          ENDP


                          AREA ||i.CRYP_AES_GCM||, CODE, READONLY, ALIGN=1

                  CRYP_AES_GCM PROC
;;;669      */
;;;670    ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;671                             uint8_t *Key, uint16_t Keysize,
;;;672                             uint8_t *Input, uint32_t ILength,
;;;673                             uint8_t *Header, uint32_t HLength,
;;;674                             uint8_t *Output, uint8_t *AuthTAG)
;;;675    {
000004  b097              SUB      sp,sp,#0x5c
;;;676      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;677      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;678      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;679      __IO uint32_t counter = 0;
000006  2000              MOVS     r0,#0
000008  e9dd8527          LDRD     r8,r5,[sp,#0x9c]      ;675
00000c  e9dd4924          LDRD     r4,r9,[sp,#0x90]      ;675
;;;680      uint32_t busystatus = 0;
;;;681      ErrorStatus status = SUCCESS;
;;;682      uint32_t keyaddr    = (uint32_t)Key;
;;;683      uint32_t inputaddr  = (uint32_t)Input;
;;;684      uint32_t outputaddr = (uint32_t)Output;
;;;685      uint32_t ivaddr     = (uint32_t)InitVectors;
000010  9e26              LDR      r6,[sp,#0x98]
;;;686      uint32_t headeraddr = (uint32_t)Header;
;;;687      uint32_t tagaddr = (uint32_t)AuthTAG;
;;;688      uint64_t headerlength = HLength * 8;/* header length in bits */
000012  9108              STR      r1,[sp,#0x20]
000014  f8dda0a4          LDR      r10,[sp,#0xa4]        ;685
000018  ea4f01c8          LSL      r1,r8,#3
00001c  e9cd1014          STRD     r1,r0,[sp,#0x50]
;;;689      uint64_t inputlength = ILength * 8;/* input length in bits */
000020  ea4f01c9          LSL      r1,r9,#3
000024  e9cd1012          STRD     r1,r0,[sp,#0x48]
000028  4693              MOV      r11,r2                ;675
00002a  2701              MOVS     r7,#1                 ;681
;;;690      uint32_t loopcounter = 0;
;;;691    
;;;692      /* Crypto structures initialisation*/
;;;693      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       CRYP_KeyStructInit
;;;694    
;;;695      switch(Keysize)
000032  981a              LDR      r0,[sp,#0x68]
000034  2880              CMP      r0,#0x80
000036  d005              BEQ      |L5.68|
000038  28c0              CMP      r0,#0xc0
00003a  d016              BEQ      |L5.106|
00003c  f5b07f80          CMP      r0,#0x100
000040  d02f              BEQ      |L5.162|
000042  e051              B        |L5.232|
                  |L5.68|
;;;696      {
;;;697        case 128:
;;;698        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
000044  2000              MOVS     r0,#0
;;;699        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000046  900d              STR      r0,[sp,#0x34]
000048  f8db0000          LDR      r0,[r11,#0]
00004c  ba00              REV      r0,r0
;;;700        keyaddr+=4;
;;;701        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00004e  9004              STR      r0,[sp,#0x10]
000050  f8db0004          LDR      r0,[r11,#4]
000054  ba00              REV      r0,r0
;;;702        keyaddr+=4;
;;;703        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000056  9005              STR      r0,[sp,#0x14]
000058  f8db0008          LDR      r0,[r11,#8]
00005c  ba00              REV      r0,r0
;;;704        keyaddr+=4;
;;;705        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005e  9006              STR      r0,[sp,#0x18]
000060  f8db000c          LDR      r0,[r11,#0xc]
000064  ba00              REV      r0,r0
;;;706        break;
000066  9007              STR      r0,[sp,#0x1c]
000068  e03e              B        |L5.232|
                  |L5.106|
;;;707        case 192:
;;;708        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
00006a  f44f7080          MOV      r0,#0x100
;;;709        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00006e  900d              STR      r0,[sp,#0x34]
000070  f8db0000          LDR      r0,[r11,#0]
000074  ba00              REV      r0,r0
;;;710        keyaddr+=4;
;;;711        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000076  9002              STR      r0,[sp,#8]
000078  f8db0004          LDR      r0,[r11,#4]
00007c  ba00              REV      r0,r0
;;;712        keyaddr+=4;
;;;713        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00007e  9003              STR      r0,[sp,#0xc]
000080  f8db0008          LDR      r0,[r11,#8]
000084  ba00              REV      r0,r0
;;;714        keyaddr+=4;
;;;715        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000086  9004              STR      r0,[sp,#0x10]
000088  f8db000c          LDR      r0,[r11,#0xc]
00008c  ba00              REV      r0,r0
;;;716        keyaddr+=4;
;;;717        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00008e  9005              STR      r0,[sp,#0x14]
000090  f8db0010          LDR      r0,[r11,#0x10]
000094  ba00              REV      r0,r0
;;;718        keyaddr+=4;
;;;719        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000096  9006              STR      r0,[sp,#0x18]
000098  f8db0014          LDR      r0,[r11,#0x14]
00009c  ba00              REV      r0,r0
;;;720        break;
00009e  9007              STR      r0,[sp,#0x1c]
0000a0  e022              B        |L5.232|
                  |L5.162|
;;;721        case 256:
;;;722        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
0000a2  f44f7000          MOV      r0,#0x200
;;;723        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0000a6  900d              STR      r0,[sp,#0x34]
0000a8  f8db0000          LDR      r0,[r11,#0]
0000ac  ba00              REV      r0,r0
;;;724        keyaddr+=4;
;;;725        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
0000ae  9000              STR      r0,[sp,#0]
0000b0  f8db0004          LDR      r0,[r11,#4]
0000b4  ba00              REV      r0,r0
;;;726        keyaddr+=4;
;;;727        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0000b6  9001              STR      r0,[sp,#4]
0000b8  f8db0008          LDR      r0,[r11,#8]
0000bc  ba00              REV      r0,r0
;;;728        keyaddr+=4;
;;;729        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0000be  9002              STR      r0,[sp,#8]
0000c0  f8db000c          LDR      r0,[r11,#0xc]
0000c4  ba00              REV      r0,r0
;;;730        keyaddr+=4;
;;;731        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0000c6  9003              STR      r0,[sp,#0xc]
0000c8  f8db0010          LDR      r0,[r11,#0x10]
0000cc  ba00              REV      r0,r0
;;;732        keyaddr+=4;
;;;733        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000ce  9004              STR      r0,[sp,#0x10]
0000d0  f8db0014          LDR      r0,[r11,#0x14]
0000d4  ba00              REV      r0,r0
;;;734        keyaddr+=4;
;;;735        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000d6  9005              STR      r0,[sp,#0x14]
0000d8  f8db0018          LDR      r0,[r11,#0x18]
0000dc  ba00              REV      r0,r0
;;;736        keyaddr+=4;
;;;737        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000de  9006              STR      r0,[sp,#0x18]
0000e0  f8db001c          LDR      r0,[r11,#0x1c]
0000e4  ba00              REV      r0,r0
0000e6  9007              STR      r0,[sp,#0x1c]
                  |L5.232|
;;;738        break;
;;;739        default:
;;;740        break;
;;;741      }
;;;742      
;;;743      /* CRYP Initialization Vectors */
;;;744      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000e8  9808              LDR      r0,[sp,#0x20]
0000ea  f04f0b80          MOV      r11,#0x80             ;675
0000ee  6800              LDR      r0,[r0,#0]
0000f0  ba00              REV      r0,r0
;;;745      ivaddr+=4;
0000f2  900e              STR      r0,[sp,#0x38]
;;;746      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000f4  9808              LDR      r0,[sp,#0x20]
0000f6  6841              LDR      r1,[r0,#4]
0000f8  ba09              REV      r1,r1
;;;747      ivaddr+=4;
;;;748      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000fa  910f              STR      r1,[sp,#0x3c]
0000fc  6881              LDR      r1,[r0,#8]
0000fe  ba09              REV      r1,r1
;;;749      ivaddr+=4;
;;;750      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
000100  9110              STR      r1,[sp,#0x40]
000102  68c0              LDR      r0,[r0,#0xc]
000104  ba00              REV      r0,r0
;;;751      
;;;752      /*------------------ AES Encryption ------------------*/
;;;753      if(Mode == MODE_ENCRYPT) /* AES encryption */
000106  9011              STR      r0,[sp,#0x44]
000108  9817              LDR      r0,[sp,#0x5c]
00010a  2801              CMP      r0,#1
00010c  d057              BEQ      |L5.446|
;;;754      {
;;;755        /* Flush IN/OUT FIFOs */
;;;756        CRYP_FIFOFlush();
;;;757        
;;;758        /* Key Initialisation */
;;;759        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;760        
;;;761        /* CRYP Initialization Vectors */
;;;762        CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;763        
;;;764        /* Crypto Init for Key preparation for decryption process */
;;;765        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;766        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
;;;767        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;768        CRYP_Init(&AES_CRYP_InitStructure);
;;;769        
;;;770        /***************************** Init phase *********************************/
;;;771        /* Select init phase */
;;;772        CRYP_PhaseConfig(CRYP_Phase_Init);
;;;773        
;;;774        /* Enable Crypto processor */
;;;775        CRYP_Cmd(ENABLE);
;;;776        
;;;777        /* Wait for CRYPEN bit to be 0 */
;;;778        while(CRYP_GetCmdStatus() == ENABLE)
;;;779        {
;;;780        }
;;;781        
;;;782        /***************************** header phase *******************************/
;;;783        if(HLength != 0)
;;;784        {
;;;785          /* Select header phase */
;;;786          CRYP_PhaseConfig(CRYP_Phase_Header);
;;;787          
;;;788          /* Enable Crypto processor */
;;;789          CRYP_Cmd(ENABLE);
;;;790          
;;;791          if(CRYP_GetCmdStatus() == DISABLE)
;;;792          {
;;;793             /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;794                the CRYP peripheral (please check the device sales type. */
;;;795             return(ERROR);
;;;796          }
;;;797          
;;;798          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
;;;799          {
;;;800            /* Wait until the IFEM flag is reset */
;;;801            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;802            {
;;;803            }
;;;804            
;;;805            /* Write the Input block in the IN FIFO */
;;;806            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;807            headeraddr+=4;
;;;808            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;809            headeraddr+=4;
;;;810            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;811            headeraddr+=4;
;;;812            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;813            headeraddr+=4;
;;;814          }
;;;815          
;;;816          /* Wait until the complete message has been processed */
;;;817          counter = 0;
;;;818          do
;;;819          {
;;;820            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;821            counter++;
;;;822          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;823    
;;;824          if (busystatus != RESET)
;;;825          {
;;;826            status = ERROR;
;;;827          }
;;;828        }
;;;829        
;;;830        /**************************** payload phase *******************************/
;;;831        if(ILength != 0)
;;;832        {
;;;833          /* Select payload phase */
;;;834          CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;835          
;;;836          /* Enable Crypto processor */
;;;837          CRYP_Cmd(ENABLE);
;;;838          
;;;839          if(CRYP_GetCmdStatus() == DISABLE)
;;;840          {
;;;841            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;842               the CRYP peripheral (please check the device sales type. */
;;;843            return(ERROR);
;;;844          }
;;;845          
;;;846          for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;847          {
;;;848            /* Wait until the IFEM flag is reset */
;;;849            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;850            {
;;;851            }
;;;852            /* Write the Input block in the IN FIFO */
;;;853            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;854            inputaddr+=4;
;;;855            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;856            inputaddr+=4;
;;;857            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;858            inputaddr+=4;
;;;859            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;860            inputaddr+=4;
;;;861            
;;;862            /* Wait until the complete message has been processed */
;;;863            counter = 0;
;;;864            do
;;;865            {
;;;866              busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;867              counter++;
;;;868            }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;869    
;;;870            if (busystatus != RESET)
;;;871            {
;;;872              status = ERROR;
;;;873            }
;;;874            else
;;;875            {
;;;876              /* Wait until the OFNE flag is reset */
;;;877              while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;878              {
;;;879              }
;;;880              
;;;881              /* Read the Output block from the Output FIFO */
;;;882              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;883              outputaddr+=4;
;;;884              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;885              outputaddr+=4;
;;;886              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;887              outputaddr+=4;
;;;888              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;889              outputaddr+=4;
;;;890            }
;;;891          }
;;;892        }
;;;893        
;;;894        /***************************** final phase ********************************/
;;;895        /* Select final phase */
;;;896        CRYP_PhaseConfig(CRYP_Phase_Final);
;;;897        
;;;898        /* Enable Crypto processor */
;;;899        CRYP_Cmd(ENABLE);
;;;900        
;;;901        if(CRYP_GetCmdStatus() == DISABLE)
;;;902        {
;;;903          /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;904             the CRYP peripheral (please check the device sales type. */
;;;905          return(ERROR);
;;;906        }
;;;907        
;;;908        /* Write number of bits concatenated with header in the IN FIFO */
;;;909        CRYP_DataIn(__REV(headerlength>>32));
;;;910        CRYP_DataIn(__REV(headerlength));
;;;911        CRYP_DataIn(__REV(inputlength>>32));
;;;912        CRYP_DataIn(__REV(inputlength));
;;;913        /* Wait until the OFNE flag is reset */
;;;914        while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;915        {
;;;916        }
;;;917        
;;;918        tagaddr = (uint32_t)AuthTAG;
;;;919        /* Read the Auth TAG in the IN FIFO */
;;;920        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;921        tagaddr+=4;
;;;922        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;923        tagaddr+=4;
;;;924        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;925        tagaddr+=4;
;;;926        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;927        tagaddr+=4;
;;;928      }
;;;929      /*------------------ AES Decryption ------------------*/
;;;930      else /* AES decryption */
;;;931      {
;;;932        /* Flush IN/OUT FIFOs */
;;;933        CRYP_FIFOFlush();
00010e  f7fffffe          BL       CRYP_FIFOFlush
;;;934        
;;;935        /* Key Initialisation */
;;;936        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000112  4668              MOV      r0,sp
000114  f7fffffe          BL       CRYP_KeyInit
;;;937        
;;;938        /* CRYP Initialization Vectors */
;;;939        CRYP_IVInit(&AES_CRYP_IVInitStructure);
000118  a80e              ADD      r0,sp,#0x38
00011a  f7fffffe          BL       CRYP_IVInit
;;;940        
;;;941        /* Crypto Init for Key preparation for decryption process */
;;;942        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00011e  2004              MOVS     r0,#4
;;;943        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
000120  900a              STR      r0,[sp,#0x28]
000122  0440              LSLS     r0,r0,#17
000124  e9cd0b0b          STRD     r0,r11,[sp,#0x2c]
;;;944        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;945        CRYP_Init(&AES_CRYP_InitStructure);
000128  a80a              ADD      r0,sp,#0x28
00012a  f7fffffe          BL       CRYP_Init
;;;946        
;;;947        /***************************** Init phase *********************************/
;;;948        /* Select init phase */
;;;949        CRYP_PhaseConfig(CRYP_Phase_Init);
00012e  2000              MOVS     r0,#0
000130  f7fffffe          BL       CRYP_PhaseConfig
;;;950        
;;;951        /* Enable Crypto processor */
;;;952        CRYP_Cmd(ENABLE);
000134  2001              MOVS     r0,#1
000136  f7fffffe          BL       CRYP_Cmd
                  |L5.314|
;;;953        
;;;954        /* Wait for CRYPEN bit to be 0 */
;;;955        while(CRYP_GetCmdStatus() == ENABLE)
00013a  f7fffffe          BL       CRYP_GetCmdStatus
00013e  2801              CMP      r0,#1
000140  d0fb              BEQ      |L5.314|
;;;956        {
;;;957        }
;;;958        
;;;959        /***************************** header phase *******************************/
;;;960        if(HLength != 0)
000142  f1b80f00          CMP      r8,#0
000146  f0008112          BEQ.W    |L5.878|
;;;961        {
;;;962          /* Select header phase */
;;;963          CRYP_PhaseConfig(CRYP_Phase_Header);
00014a  f44f3080          MOV      r0,#0x10000
00014e  f7fffffe          BL       CRYP_PhaseConfig
;;;964          
;;;965          /* Enable Crypto processor */
;;;966          CRYP_Cmd(ENABLE);
000152  2001              MOVS     r0,#1
000154  f7fffffe          BL       CRYP_Cmd
;;;967          
;;;968          if(CRYP_GetCmdStatus() == DISABLE)
000158  f7fffffe          BL       CRYP_GetCmdStatus
00015c  2800              CMP      r0,#0
;;;969          {
;;;970            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;971               the CRYP peripheral (please check the device sales type. */
;;;972            return(ERROR);
;;;973          }
;;;974          
;;;975          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
;;;976          {
;;;977            /* Wait until the IFEM flag is reset */
;;;978            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;979            {
;;;980            }
;;;981            
;;;982            /* Write the Input block in the IN FIFO */
;;;983            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;984            headeraddr+=4;
;;;985            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;986            headeraddr+=4;
;;;987            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;988            headeraddr+=4;
;;;989            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;990            headeraddr+=4;
;;;991          }
;;;992          
;;;993          /* Wait until the complete message has been processed */
;;;994          counter = 0;
;;;995          do
;;;996          {
;;;997            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;998            counter++;
;;;999          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1000   
;;;1001         if (busystatus != RESET)
;;;1002         {
;;;1003           status = ERROR;
;;;1004         }
;;;1005       }
;;;1006       
;;;1007       /**************************** payload phase *******************************/
;;;1008       if(ILength != 0)
;;;1009       {
;;;1010         /* Select payload phase */
;;;1011         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1012   
;;;1013         /* Enable Crypto processor */
;;;1014         CRYP_Cmd(ENABLE);
;;;1015         
;;;1016         if(CRYP_GetCmdStatus() == DISABLE)
;;;1017         {
;;;1018           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1019              the CRYP peripheral (please check the device sales type. */
;;;1020           return(ERROR);
;;;1021         }
;;;1022         
;;;1023         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1024         {
;;;1025           /* Wait until the IFEM flag is reset */
;;;1026           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1027           {
;;;1028           }
;;;1029           /* Write the Input block in the IN FIFO */
;;;1030           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1031           inputaddr+=4;
;;;1032           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1033           inputaddr+=4;
;;;1034           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1035           inputaddr+=4;
;;;1036           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1037           inputaddr+=4;
;;;1038           
;;;1039           /* Wait until the complete message has been processed */
;;;1040           counter = 0;
;;;1041           do
;;;1042           {
;;;1043             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1044             counter++;
;;;1045           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1046   
;;;1047           if (busystatus != RESET)
;;;1048           {
;;;1049             status = ERROR;
;;;1050           }
;;;1051           else
;;;1052           {
;;;1053             /* Wait until the OFNE flag is reset */
;;;1054             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1055             {
;;;1056             }
;;;1057             
;;;1058             /* Read the Output block from the Output FIFO */
;;;1059             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1060             outputaddr+=4;
;;;1061             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1062             outputaddr+=4;
;;;1063             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1064             outputaddr+=4;
;;;1065             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1066             outputaddr+=4;
;;;1067           }
;;;1068         }
;;;1069       }
;;;1070       
;;;1071       /***************************** final phase ********************************/
;;;1072       /* Select final phase */
;;;1073       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1074   
;;;1075       /* Enable Crypto processor */
;;;1076       CRYP_Cmd(ENABLE);
;;;1077       
;;;1078       if(CRYP_GetCmdStatus() == DISABLE)
;;;1079       {
;;;1080         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1081            the CRYP peripheral (please check the device sales type. */
;;;1082         return(ERROR);
;;;1083       }
;;;1084       
;;;1085       /* Write number of bits concatenated with header in the IN FIFO */
;;;1086       CRYP_DataIn(__REV(headerlength>>32));
;;;1087       CRYP_DataIn(__REV(headerlength));
;;;1088       CRYP_DataIn(__REV(inputlength>>32));
;;;1089       CRYP_DataIn(__REV(inputlength));
;;;1090       /* Wait until the OFNE flag is reset */
;;;1091       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1092       {
;;;1093       }
;;;1094       
;;;1095       tagaddr = (uint32_t)AuthTAG;
;;;1096       /* Read the Auth TAG in the IN FIFO */
;;;1097       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1098       tagaddr+=4;
;;;1099       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1100       tagaddr+=4;
;;;1101       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1102       tagaddr+=4;
;;;1103       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1104       tagaddr+=4;
;;;1105     }
;;;1106     /* Disable Crypto */
;;;1107     CRYP_Cmd(DISABLE);
;;;1108   
;;;1109     return status;
;;;1110   }
00015e  bf04              ITT      EQ
000160  b01b              ADDEQ    sp,sp,#0x6c
000162  e8bd8ff0          POPEQ    {r4-r11,pc}
000166  f04f0b00          MOV      r11,#0                ;975
00016a  f1b80f00          CMP      r8,#0                 ;975
00016e  d918              BLS      |L5.418|
                  |L5.368|
000170  2001              MOVS     r0,#1                 ;978
000172  f7fffffe          BL       CRYP_GetFlagStatus
000176  2800              CMP      r0,#0                 ;978
000178  d0fa              BEQ      |L5.368|
00017a  6830              LDR      r0,[r6,#0]            ;983
00017c  f7fffffe          BL       CRYP_DataIn
000180  f8560f04          LDR      r0,[r6,#4]!           ;985
000184  f7fffffe          BL       CRYP_DataIn
000188  f8560f04          LDR      r0,[r6,#4]!           ;987
00018c  f7fffffe          BL       CRYP_DataIn
000190  f8560f04          LDR      r0,[r6,#4]!           ;989
000194  f7fffffe          BL       CRYP_DataIn
000198  1d36              ADDS     r6,r6,#4              ;989
00019a  f10b0b10          ADD      r11,r11,#0x10         ;989
00019e  45c3              CMP      r11,r8                ;975
0001a0  d3e6              BCC      |L5.368|
                  |L5.418|
0001a2  2000              MOVS     r0,#0                 ;994
0001a4  9008              STR      r0,[sp,#0x20]         ;994
                  |L5.422|
0001a6  2010              MOVS     r0,#0x10              ;997
0001a8  f7fffffe          BL       CRYP_GetFlagStatus
0001ac  9908              LDR      r1,[sp,#0x20]         ;998
0001ae  1c49              ADDS     r1,r1,#1              ;998
0001b0  9108              STR      r1,[sp,#0x20]         ;999
0001b2  f5b13f80          CMP      r1,#0x10000           ;999
0001b6  d071              BEQ      |L5.668|
0001b8  2800              CMP      r0,#0                 ;999
0001ba  d1f4              BNE      |L5.422|
0001bc  e0d7              B        |L5.878|
                  |L5.446|
0001be  f7fffffe          BL       CRYP_FIFOFlush
0001c2  4668              MOV      r0,sp                 ;759
0001c4  f7fffffe          BL       CRYP_KeyInit
0001c8  a80e              ADD      r0,sp,#0x38           ;762
0001ca  f7fffffe          BL       CRYP_IVInit
0001ce  2000              MOVS     r0,#0                 ;765
0001d0  900a              STR      r0,[sp,#0x28]         ;766
0001d2  f44f2000          MOV      r0,#0x80000           ;766
0001d6  e9cd0b0b          STRD     r0,r11,[sp,#0x2c]     ;766
0001da  a80a              ADD      r0,sp,#0x28           ;768
0001dc  f7fffffe          BL       CRYP_Init
0001e0  2000              MOVS     r0,#0                 ;772
0001e2  f7fffffe          BL       CRYP_PhaseConfig
0001e6  2001              MOVS     r0,#1                 ;775
0001e8  f7fffffe          BL       CRYP_Cmd
                  |L5.492|
0001ec  f7fffffe          BL       CRYP_GetCmdStatus
0001f0  2801              CMP      r0,#1                 ;778
0001f2  d0fb              BEQ      |L5.492|
0001f4  f1b80f00          CMP      r8,#0                 ;783
0001f8  d03c              BEQ      |L5.628|
0001fa  f44f3080          MOV      r0,#0x10000           ;786
0001fe  f7fffffe          BL       CRYP_PhaseConfig
000202  2001              MOVS     r0,#1                 ;789
000204  f7fffffe          BL       CRYP_Cmd
000208  f7fffffe          BL       CRYP_GetCmdStatus
00020c  2800              CMP      r0,#0                 ;791
00020e  bf04              ITT      EQ
000210  b01b              ADDEQ    sp,sp,#0x6c
000212  e8bd8ff0          POPEQ    {r4-r11,pc}
000216  f04f0b00          MOV      r11,#0                ;798
00021a  f1b80f00          CMP      r8,#0                 ;798
00021e  d918              BLS      |L5.594|
                  |L5.544|
000220  2001              MOVS     r0,#1                 ;801
000222  f7fffffe          BL       CRYP_GetFlagStatus
000226  2800              CMP      r0,#0                 ;801
000228  d0fa              BEQ      |L5.544|
00022a  6830              LDR      r0,[r6,#0]            ;806
00022c  f7fffffe          BL       CRYP_DataIn
000230  f8560f04          LDR      r0,[r6,#4]!           ;808
000234  f7fffffe          BL       CRYP_DataIn
000238  f8560f04          LDR      r0,[r6,#4]!           ;810
00023c  f7fffffe          BL       CRYP_DataIn
000240  f8560f04          LDR      r0,[r6,#4]!           ;812
000244  f7fffffe          BL       CRYP_DataIn
000248  1d36              ADDS     r6,r6,#4              ;812
00024a  f10b0b10          ADD      r11,r11,#0x10         ;812
00024e  45c3              CMP      r11,r8                ;798
000250  d3e6              BCC      |L5.544|
                  |L5.594|
000252  2000              MOVS     r0,#0                 ;817
000254  9008              STR      r0,[sp,#0x20]         ;817
                  |L5.598|
000256  2010              MOVS     r0,#0x10              ;820
000258  f7fffffe          BL       CRYP_GetFlagStatus
00025c  9908              LDR      r1,[sp,#0x20]         ;821
00025e  1c49              ADDS     r1,r1,#1              ;821
000260  9108              STR      r1,[sp,#0x20]         ;822
000262  f5b13f80          CMP      r1,#0x10000           ;822
000266  d002              BEQ      |L5.622|
000268  2800              CMP      r0,#0                 ;822
00026a  d1f4              BNE      |L5.598|
00026c  e002              B        |L5.628|
                  |L5.622|
00026e  2800              CMP      r0,#0                 ;824
000270  bf18              IT       NE                    ;826
000272  2700              MOVNE    r7,#0                 ;826
                  |L5.628|
000274  f1b90f00          CMP      r9,#0                 ;831
000278  d052              BEQ      |L5.800|
00027a  f44f3000          MOV      r0,#0x20000           ;834
00027e  f7fffffe          BL       CRYP_PhaseConfig
000282  2001              MOVS     r0,#1                 ;837
000284  f7fffffe          BL       CRYP_Cmd
000288  f7fffffe          BL       CRYP_GetCmdStatus
00028c  2800              CMP      r0,#0                 ;839
00028e  bf19              ITTEE    NE                    ;846
000290  2600              MOVNE    r6,#0                 ;846
000292  46b0              MOVNE    r8,r6                 ;846
000294  b01b              ADDEQ    sp,sp,#0x6c
000296  e8bd8ff0          POPEQ    {r4-r11,pc}
00029a  e03d              B        |L5.792|
                  |L5.668|
00029c  e064              B        |L5.872|
                  |L5.670|
00029e  2001              MOVS     r0,#1                 ;849
0002a0  f7fffffe          BL       CRYP_GetFlagStatus
0002a4  2800              CMP      r0,#0                 ;849
0002a6  d0fa              BEQ      |L5.670|
0002a8  6820              LDR      r0,[r4,#0]            ;853
0002aa  f7fffffe          BL       CRYP_DataIn
0002ae  f8540f04          LDR      r0,[r4,#4]!           ;855
0002b2  f7fffffe          BL       CRYP_DataIn
0002b6  f8540f04          LDR      r0,[r4,#4]!           ;857
0002ba  f7fffffe          BL       CRYP_DataIn
0002be  f8540f04          LDR      r0,[r4,#4]!           ;859
0002c2  f7fffffe          BL       CRYP_DataIn
0002c6  1d24              ADDS     r4,r4,#4              ;863
0002c8  f8cd8020          STR      r8,[sp,#0x20]         ;863
                  |L5.716|
0002cc  2010              MOVS     r0,#0x10              ;866
0002ce  f7fffffe          BL       CRYP_GetFlagStatus
0002d2  9908              LDR      r1,[sp,#0x20]         ;867
0002d4  1c49              ADDS     r1,r1,#1              ;867
0002d6  9108              STR      r1,[sp,#0x20]         ;868
0002d8  f5b13f80          CMP      r1,#0x10000           ;868
0002dc  d002              BEQ      |L5.740|
0002de  2800              CMP      r0,#0                 ;868
0002e0  d1f4              BNE      |L5.716|
0002e2  e003              B        |L5.748|
                  |L5.740|
0002e4  2800              CMP      r0,#0                 ;870
0002e6  bf18              IT       NE                    ;872
0002e8  2700              MOVNE    r7,#0                 ;872
0002ea  d114              BNE      |L5.790|
                  |L5.748|
0002ec  2004              MOVS     r0,#4                 ;877
0002ee  f7fffffe          BL       CRYP_GetFlagStatus
0002f2  2800              CMP      r0,#0                 ;877
0002f4  d0fa              BEQ      |L5.748|
0002f6  f7fffffe          BL       CRYP_DataOut
0002fa  f8450b04          STR      r0,[r5],#4            ;882
0002fe  f7fffffe          BL       CRYP_DataOut
000302  f8450b04          STR      r0,[r5],#4            ;884
000306  f7fffffe          BL       CRYP_DataOut
00030a  f8450b04          STR      r0,[r5],#4            ;886
00030e  f7fffffe          BL       CRYP_DataOut
000312  f8450b04          STR      r0,[r5],#4            ;888
                  |L5.790|
000316  3610              ADDS     r6,r6,#0x10           ;888
                  |L5.792|
000318  454e              CMP      r6,r9                 ;846
00031a  d201              BCS      |L5.800|
00031c  2f00              CMP      r7,#0                 ;846
00031e  d1be              BNE      |L5.670|
                  |L5.800|
000320  f44f3040          MOV      r0,#0x30000           ;896
000324  f7fffffe          BL       CRYP_PhaseConfig
000328  2001              MOVS     r0,#1                 ;899
00032a  f7fffffe          BL       CRYP_Cmd
00032e  f7fffffe          BL       CRYP_GetCmdStatus
000332  2800              CMP      r0,#0                 ;901
000334  bf04              ITT      EQ
000336  b01b              ADDEQ    sp,sp,#0x6c
000338  e8bd8ff0          POPEQ    {r4-r11,pc}
00033c  9815              LDR      r0,[sp,#0x54]         ;909
00033e  ba00              REV      r0,r0                 ;909
000340  f7fffffe          BL       CRYP_DataIn
000344  9814              LDR      r0,[sp,#0x50]         ;910
000346  ba00              REV      r0,r0                 ;910
000348  f7fffffe          BL       CRYP_DataIn
00034c  9813              LDR      r0,[sp,#0x4c]         ;911
00034e  ba00              REV      r0,r0                 ;911
000350  f7fffffe          BL       CRYP_DataIn
000354  9812              LDR      r0,[sp,#0x48]         ;912
000356  ba00              REV      r0,r0                 ;912
000358  f7fffffe          BL       CRYP_DataIn
                  |L5.860|
00035c  2004              MOVS     r0,#4                 ;914
00035e  f7fffffe          BL       CRYP_GetFlagStatus
000362  2800              CMP      r0,#0                 ;914
000364  d0fa              BEQ      |L5.860|
000366  e07a              B        |L5.1118|
                  |L5.872|
000368  2800              CMP      r0,#0                 ;1001
00036a  bf18              IT       NE                    ;1003
00036c  2700              MOVNE    r7,#0                 ;1003
                  |L5.878|
00036e  f1b90f00          CMP      r9,#0                 ;1008
000372  d051              BEQ      |L5.1048|
000374  f44f3000          MOV      r0,#0x20000           ;1011
000378  f7fffffe          BL       CRYP_PhaseConfig
00037c  2001              MOVS     r0,#1                 ;1014
00037e  f7fffffe          BL       CRYP_Cmd
000382  f7fffffe          BL       CRYP_GetCmdStatus
000386  2800              CMP      r0,#0                 ;1016
000388  bf19              ITTEE    NE                    ;1023
00038a  2600              MOVNE    r6,#0                 ;1023
00038c  46b0              MOVNE    r8,r6                 ;1023
00038e  b01b              ADDEQ    sp,sp,#0x6c
000390  e8bd8ff0          POPEQ    {r4-r11,pc}
000394  e03c              B        |L5.1040|
                  |L5.918|
000396  2001              MOVS     r0,#1                 ;1026
000398  f7fffffe          BL       CRYP_GetFlagStatus
00039c  2800              CMP      r0,#0                 ;1026
00039e  d0fa              BEQ      |L5.918|
0003a0  6820              LDR      r0,[r4,#0]            ;1030
0003a2  f7fffffe          BL       CRYP_DataIn
0003a6  f8540f04          LDR      r0,[r4,#4]!           ;1032
0003aa  f7fffffe          BL       CRYP_DataIn
0003ae  f8540f04          LDR      r0,[r4,#4]!           ;1034
0003b2  f7fffffe          BL       CRYP_DataIn
0003b6  f8540f04          LDR      r0,[r4,#4]!           ;1036
0003ba  f7fffffe          BL       CRYP_DataIn
0003be  1d24              ADDS     r4,r4,#4              ;1040
0003c0  f8cd8020          STR      r8,[sp,#0x20]         ;1040
                  |L5.964|
0003c4  2010              MOVS     r0,#0x10              ;1043
0003c6  f7fffffe          BL       CRYP_GetFlagStatus
0003ca  9908              LDR      r1,[sp,#0x20]         ;1044
0003cc  1c49              ADDS     r1,r1,#1              ;1044
0003ce  9108              STR      r1,[sp,#0x20]         ;1045
0003d0  f5b13f80          CMP      r1,#0x10000           ;1045
0003d4  d002              BEQ      |L5.988|
0003d6  2800              CMP      r0,#0                 ;1045
0003d8  d1f4              BNE      |L5.964|
0003da  e003              B        |L5.996|
                  |L5.988|
0003dc  2800              CMP      r0,#0                 ;1047
0003de  bf18              IT       NE                    ;1049
0003e0  2700              MOVNE    r7,#0                 ;1049
0003e2  d114              BNE      |L5.1038|
                  |L5.996|
0003e4  2004              MOVS     r0,#4                 ;1054
0003e6  f7fffffe          BL       CRYP_GetFlagStatus
0003ea  2800              CMP      r0,#0                 ;1054
0003ec  d0fa              BEQ      |L5.996|
0003ee  f7fffffe          BL       CRYP_DataOut
0003f2  f8450b04          STR      r0,[r5],#4            ;1059
0003f6  f7fffffe          BL       CRYP_DataOut
0003fa  f8450b04          STR      r0,[r5],#4            ;1061
0003fe  f7fffffe          BL       CRYP_DataOut
000402  f8450b04          STR      r0,[r5],#4            ;1063
000406  f7fffffe          BL       CRYP_DataOut
00040a  f8450b04          STR      r0,[r5],#4            ;1065
                  |L5.1038|
00040e  3610              ADDS     r6,r6,#0x10           ;1065
                  |L5.1040|
000410  454e              CMP      r6,r9                 ;1023
000412  d201              BCS      |L5.1048|
000414  2f00              CMP      r7,#0                 ;1023
000416  d1be              BNE      |L5.918|
                  |L5.1048|
000418  f44f3040          MOV      r0,#0x30000           ;1073
00041c  f7fffffe          BL       CRYP_PhaseConfig
000420  2001              MOVS     r0,#1                 ;1076
000422  f7fffffe          BL       CRYP_Cmd
000426  f7fffffe          BL       CRYP_GetCmdStatus
00042a  2800              CMP      r0,#0                 ;1078
00042c  bf04              ITT      EQ
00042e  b01b              ADDEQ    sp,sp,#0x6c
000430  e8bd8ff0          POPEQ    {r4-r11,pc}
000434  9815              LDR      r0,[sp,#0x54]         ;1086
000436  ba00              REV      r0,r0                 ;1086
000438  f7fffffe          BL       CRYP_DataIn
00043c  9814              LDR      r0,[sp,#0x50]         ;1087
00043e  ba00              REV      r0,r0                 ;1087
000440  f7fffffe          BL       CRYP_DataIn
000444  9813              LDR      r0,[sp,#0x4c]         ;1088
000446  ba00              REV      r0,r0                 ;1088
000448  f7fffffe          BL       CRYP_DataIn
00044c  9812              LDR      r0,[sp,#0x48]         ;1089
00044e  ba00              REV      r0,r0                 ;1089
000450  f7fffffe          BL       CRYP_DataIn
                  |L5.1108|
000454  2004              MOVS     r0,#4                 ;1091
000456  f7fffffe          BL       CRYP_GetFlagStatus
00045a  2800              CMP      r0,#0                 ;1091
00045c  d0fa              BEQ      |L5.1108|
                  |L5.1118|
00045e  f7fffffe          BL       CRYP_DataOut
000462  f8ca0000          STR      r0,[r10,#0]           ;1099
000466  f7fffffe          BL       CRYP_DataOut
00046a  f8ca0004          STR      r0,[r10,#4]           ;1101
00046e  f7fffffe          BL       CRYP_DataOut
000472  f8ca0008          STR      r0,[r10,#8]           ;1103
000476  f7fffffe          BL       CRYP_DataOut
00047a  f8ca000c          STR      r0,[r10,#0xc]         ;1107
00047e  2000              MOVS     r0,#0                 ;1107
000480  f7fffffe          BL       CRYP_Cmd
000484  b01b              ADD      sp,sp,#0x6c
000486  4638              MOV      r0,r7                 ;1109
000488  e8bd8ff0          POP      {r4-r11,pc}
;;;1111   
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_cryp_aes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH|
#line 144
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
