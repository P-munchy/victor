; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_cryp_des.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_cryp_des.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_cryp_des.crf arm_hal\lib\stm32f4xx_cryp_des.c]
                          THUMB

                          AREA ||i.CRYP_DES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_DES_CBC PROC
;;;199      */
;;;200    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;201                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;202    {
000004  b093              SUB      sp,sp,#0x4c
;;;203      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;204      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;205      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;206      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  e9dd8520          LDRD     r8,r5,[sp,#0x80]      ;202
00000e  461c              MOV      r4,r3                 ;202
000010  4693              MOV      r11,r2                ;202
000012  468a              MOV      r10,r1                ;202
;;;207      uint32_t busystatus = 0;
;;;208      ErrorStatus status = SUCCESS;
000014  2701              MOVS     r7,#1
;;;209      uint32_t keyaddr    = (uint32_t)Key;
;;;210      uint32_t inputaddr  = (uint32_t)Input;
;;;211      uint32_t outputaddr = (uint32_t)Output;
;;;212      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;213      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;214    
;;;215      /* Crypto structures initialisation*/
;;;216      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;217    
;;;218      /* Crypto Init for Encryption process */
;;;219      if(Mode == MODE_ENCRYPT) /* DES encryption */
000022  9813              LDR      r0,[sp,#0x4c]
000024  2801              CMP      r0,#1
;;;220      {
;;;221         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000026  bf0e              ITEE     EQ
000028  f8cd9020          STREQ    r9,[sp,#0x20]
;;;222      }
;;;223      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;224      {
;;;225         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
00002c  2004              MOVNE    r0,#4
00002e  9008              STRNE    r0,[sp,#0x20]
;;;226      }
;;;227    
;;;228      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
000030  2018              MOVS     r0,#0x18
;;;229      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000032  9009              STR      r0,[sp,#0x24]
000034  2080              MOVS     r0,#0x80
;;;230      CRYP_Init(&DES_CRYP_InitStructure);
000036  900a              STR      r0,[sp,#0x28]
000038  a808              ADD      r0,sp,#0x20
00003a  f7fffffe          BL       CRYP_Init
;;;231    
;;;232      /* Key Initialisation */
;;;233      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003e  f8da0000          LDR      r0,[r10,#0]
000042  ba00              REV      r0,r0
;;;234      keyaddr+=4;
;;;235      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000044  9002              STR      r0,[sp,#8]
000046  f8da0004          LDR      r0,[r10,#4]
00004a  ba00              REV      r0,r0
;;;236      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00004c  9003              STR      r0,[sp,#0xc]
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       CRYP_KeyInit
;;;237    
;;;238      /* Initialization Vectors */
;;;239      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000054  f8db0000          LDR      r0,[r11,#0]
000058  ba00              REV      r0,r0
;;;240      ivaddr+=4;
;;;241      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00005a  900e              STR      r0,[sp,#0x38]
00005c  f8db0004          LDR      r0,[r11,#4]
000060  ba00              REV      r0,r0
;;;242      CRYP_IVInit(&DES_CRYP_IVInitStructure);
000062  900f              STR      r0,[sp,#0x3c]
000064  a80e              ADD      r0,sp,#0x38
000066  f7fffffe          BL       CRYP_IVInit
;;;243    
;;;244      /* Flush IN/OUT FIFO */
;;;245      CRYP_FIFOFlush();
00006a  f7fffffe          BL       CRYP_FIFOFlush
;;;246      
;;;247      /* Enable Crypto processor */
;;;248      CRYP_Cmd(ENABLE);
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       CRYP_Cmd
;;;249    
;;;250      if(CRYP_GetCmdStatus() == DISABLE)
000074  f7fffffe          BL       CRYP_GetCmdStatus
000078  2800              CMP      r0,#0
;;;251      {
;;;252        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;253           the CRYP peripheral (please check the device sales type. */
;;;254        return(ERROR);
;;;255      }
;;;256      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;257      {
;;;258        /* Write the Input block in the Input FIFO */
;;;259        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;260        inputaddr+=4;
;;;261        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;262        inputaddr+=4;
;;;263    
;;;264        /* Wait until the complete message has been processed */
;;;265        counter = 0;
;;;266        do
;;;267        {
;;;268          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;269          counter++;
;;;270        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
;;;271    
;;;272        if (busystatus != RESET)
;;;273       {
;;;274           status = ERROR;
;;;275        }
;;;276        else
;;;277        {
;;;278          /* Read the Output block from the Output FIFO */
;;;279          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;280          outputaddr+=4;
;;;281          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;282          outputaddr+=4;
;;;283        }
;;;284      }
;;;285    
;;;286      /* Disable Crypto */
;;;287      CRYP_Cmd(DISABLE);
;;;288    
;;;289      return status; 
;;;290    }
00007a  bf04              ITT      EQ
00007c  b017              ADDEQ    sp,sp,#0x5c
00007e  e8bd8ff0          POPEQ    {r4-r11,pc}
000082  e022              B        |L1.202|
                  |L1.132|
000084  6820              LDR      r0,[r4,#0]            ;259
000086  f7fffffe          BL       CRYP_DataIn
00008a  f8540f04          LDR      r0,[r4,#4]!           ;261
00008e  f7fffffe          BL       CRYP_DataIn
000092  1d24              ADDS     r4,r4,#4              ;265
000094  f8cd9030          STR      r9,[sp,#0x30]         ;265
                  |L1.152|
000098  2010              MOVS     r0,#0x10              ;268
00009a  f7fffffe          BL       CRYP_GetFlagStatus
00009e  990c              LDR      r1,[sp,#0x30]         ;269
0000a0  1c49              ADDS     r1,r1,#1              ;269
0000a2  910c              STR      r1,[sp,#0x30]         ;270
0000a4  f5b13f80          CMP      r1,#0x10000           ;270
0000a8  d002              BEQ      |L1.176|
0000aa  2800              CMP      r0,#0                 ;270
0000ac  d1f4              BNE      |L1.152|
0000ae  e003              B        |L1.184|
                  |L1.176|
0000b0  2800              CMP      r0,#0                 ;272
0000b2  bf18              IT       NE                    ;274
0000b4  2700              MOVNE    r7,#0                 ;274
0000b6  d107              BNE      |L1.200|
                  |L1.184|
0000b8  f7fffffe          BL       CRYP_DataOut
0000bc  f8450b04          STR      r0,[r5],#4            ;279
0000c0  f7fffffe          BL       CRYP_DataOut
0000c4  f8450b04          STR      r0,[r5],#4            ;281
                  |L1.200|
0000c8  3608              ADDS     r6,r6,#8              ;281
                  |L1.202|
0000ca  4546              CMP      r6,r8                 ;256
0000cc  d201              BCS      |L1.210|
0000ce  2f00              CMP      r7,#0                 ;256
0000d0  d1d8              BNE      |L1.132|
                  |L1.210|
0000d2  2000              MOVS     r0,#0                 ;287
0000d4  f7fffffe          BL       CRYP_Cmd
0000d8  b017              ADD      sp,sp,#0x5c
0000da  4638              MOV      r0,r7                 ;289
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;291    
                          ENDP


                          AREA ||i.CRYP_DES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;98       */
;;;99     ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;100                             uint32_t Ilength, uint8_t *Output)
;;;101    {
000004  b08d              SUB      sp,sp,#0x34
;;;102      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;103      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;104      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  4683              MOV      r11,r0                ;101
00000c  9d16              LDR      r5,[sp,#0x58]
00000e  4698              MOV      r8,r3                 ;101
000010  4614              MOV      r4,r2                 ;101
000012  468a              MOV      r10,r1                ;101
;;;105      uint32_t busystatus = 0;
;;;106      ErrorStatus status = SUCCESS;
000014  2701              MOVS     r7,#1
;;;107      uint32_t keyaddr    = (uint32_t)Key;
;;;108      uint32_t inputaddr  = (uint32_t)Input;
;;;109      uint32_t outputaddr = (uint32_t)Output;
;;;110      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;111    
;;;112      /* Crypto structures initialisation*/
;;;113      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;114    
;;;115      /* Crypto Init for Encryption process */
;;;116      if( Mode == MODE_ENCRYPT ) /* DES encryption */
000022  f1bb0f01          CMP      r11,#1
;;;117      {
;;;118         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000026  bf0e              ITEE     EQ
000028  f8cd9020          STREQ    r9,[sp,#0x20]
;;;119      }
;;;120      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;121      {      
;;;122         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
00002c  2004              MOVNE    r0,#4
00002e  9008              STRNE    r0,[sp,#0x20]
;;;123      }
;;;124    
;;;125      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
000030  2010              MOVS     r0,#0x10
;;;126      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000032  9009              STR      r0,[sp,#0x24]
000034  2080              MOVS     r0,#0x80
;;;127      CRYP_Init(&DES_CRYP_InitStructure);
000036  900a              STR      r0,[sp,#0x28]
000038  a808              ADD      r0,sp,#0x20
00003a  f7fffffe          BL       CRYP_Init
;;;128    
;;;129      /* Key Initialisation */
;;;130      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003e  f8da0000          LDR      r0,[r10,#0]
000042  ba00              REV      r0,r0
;;;131      keyaddr+=4;
;;;132      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000044  9002              STR      r0,[sp,#8]
000046  f8da0004          LDR      r0,[r10,#4]
00004a  ba00              REV      r0,r0
;;;133      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00004c  9003              STR      r0,[sp,#0xc]
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       CRYP_KeyInit
;;;134    
;;;135      /* Flush IN/OUT FIFO */
;;;136      CRYP_FIFOFlush();
000054  f7fffffe          BL       CRYP_FIFOFlush
;;;137    
;;;138      /* Enable Crypto processor */
;;;139      CRYP_Cmd(ENABLE);
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       CRYP_Cmd
;;;140    
;;;141      if(CRYP_GetCmdStatus() == DISABLE)
00005e  f7fffffe          BL       CRYP_GetCmdStatus
000062  2800              CMP      r0,#0
;;;142      {
;;;143        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;144           the CRYP peripheral (please check the device sales type. */
;;;145        return(ERROR);
;;;146      }
;;;147      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;148      {
;;;149    
;;;150        /* Write the Input block in the Input FIFO */
;;;151        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;152        inputaddr+=4;
;;;153        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;154        inputaddr+=4;
;;;155    
;;;156    /* Wait until the complete message has been processed */
;;;157        counter = 0;
;;;158        do
;;;159        {
;;;160          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;161          counter++;
;;;162        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
;;;163    
;;;164        if (busystatus != RESET)
;;;165       {
;;;166           status = ERROR;
;;;167        }
;;;168        else
;;;169        {
;;;170    
;;;171          /* Read the Output block from the Output FIFO */
;;;172          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;173          outputaddr+=4;
;;;174          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;175          outputaddr+=4;
;;;176        }
;;;177      }
;;;178    
;;;179      /* Disable Crypto */
;;;180      CRYP_Cmd(DISABLE);
;;;181    
;;;182      return status; 
;;;183    }
000064  bf04              ITT      EQ
000066  b00d              ADDEQ    sp,sp,#0x34
000068  e8bd8ff0          POPEQ    {r4-r11,pc}
00006c  e022              B        |L2.180|
                  |L2.110|
00006e  6820              LDR      r0,[r4,#0]            ;151
000070  f7fffffe          BL       CRYP_DataIn
000074  f8540f04          LDR      r0,[r4,#4]!           ;153
000078  f7fffffe          BL       CRYP_DataIn
00007c  1d24              ADDS     r4,r4,#4              ;157
00007e  f8cd9030          STR      r9,[sp,#0x30]         ;157
                  |L2.130|
000082  2010              MOVS     r0,#0x10              ;160
000084  f7fffffe          BL       CRYP_GetFlagStatus
000088  990c              LDR      r1,[sp,#0x30]         ;161
00008a  1c49              ADDS     r1,r1,#1              ;161
00008c  910c              STR      r1,[sp,#0x30]         ;162
00008e  f5b13f80          CMP      r1,#0x10000           ;162
000092  d002              BEQ      |L2.154|
000094  2800              CMP      r0,#0                 ;162
000096  d1f4              BNE      |L2.130|
000098  e003              B        |L2.162|
                  |L2.154|
00009a  2800              CMP      r0,#0                 ;164
00009c  bf18              IT       NE                    ;166
00009e  2700              MOVNE    r7,#0                 ;166
0000a0  d107              BNE      |L2.178|
                  |L2.162|
0000a2  f7fffffe          BL       CRYP_DataOut
0000a6  f8450b04          STR      r0,[r5],#4            ;172
0000aa  f7fffffe          BL       CRYP_DataOut
0000ae  f8450b04          STR      r0,[r5],#4            ;174
                  |L2.178|
0000b2  3608              ADDS     r6,r6,#8              ;174
                  |L2.180|
0000b4  4546              CMP      r6,r8                 ;147
0000b6  d201              BCS      |L2.188|
0000b8  2f00              CMP      r7,#0                 ;147
0000ba  d1d8              BNE      |L2.110|
                  |L2.188|
0000bc  2000              MOVS     r0,#0                 ;180
0000be  f7fffffe          BL       CRYP_Cmd
0000c2  b00d              ADD      sp,sp,#0x34
0000c4  4638              MOV      r0,r7                 ;182
0000c6  e8bd8ff0          POP      {r4-r11,pc}
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_cryp_des.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH|
#line 144
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
