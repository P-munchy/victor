; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_cryp_tdes.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_cryp_tdes.crf arm_hal\lib\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;207      */
;;;208    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;209                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;210    {
000004  b093              SUB      sp,sp,#0x4c
;;;211      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;212      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;213      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;214      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  e9dd8520          LDRD     r8,r5,[sp,#0x80]      ;210
00000e  461c              MOV      r4,r3                 ;210
000010  4693              MOV      r11,r2                ;210
000012  468a              MOV      r10,r1                ;210
;;;215      uint32_t busystatus = 0;
;;;216      ErrorStatus status = SUCCESS;
000014  2701              MOVS     r7,#1
;;;217      uint32_t keyaddr    = (uint32_t)Key;
;;;218      uint32_t inputaddr  = (uint32_t)Input;
;;;219      uint32_t outputaddr = (uint32_t)Output;
;;;220      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;221      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;222    
;;;223      /* Crypto structures initialisation*/
;;;224      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;225    
;;;226      /* Crypto Init for Encryption process */
;;;227      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000022  9813              LDR      r0,[sp,#0x4c]
000024  2801              CMP      r0,#1
;;;228      {
;;;229        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000026  bf0e              ITEE     EQ
000028  f8cd9020          STREQ    r9,[sp,#0x20]
;;;230      }
;;;231      else
;;;232      {
;;;233        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00002c  2004              MOVNE    r0,#4
00002e  9008              STRNE    r0,[sp,#0x20]
;;;234      }
;;;235      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
000030  2008              MOVS     r0,#8
;;;236      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000032  9009              STR      r0,[sp,#0x24]
000034  2080              MOVS     r0,#0x80
;;;237    
;;;238      CRYP_Init(&TDES_CRYP_InitStructure);
000036  900a              STR      r0,[sp,#0x28]
000038  a808              ADD      r0,sp,#0x20
00003a  f7fffffe          BL       CRYP_Init
;;;239    
;;;240      /* Key Initialisation */
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003e  f8da0000          LDR      r0,[r10,#0]
000042  ba00              REV      r0,r0
;;;242      keyaddr+=4;
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000044  9002              STR      r0,[sp,#8]
000046  f8da0004          LDR      r0,[r10,#4]
00004a  ba00              REV      r0,r0
;;;244      keyaddr+=4;
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004c  9003              STR      r0,[sp,#0xc]
00004e  f8da0008          LDR      r0,[r10,#8]
000052  ba00              REV      r0,r0
;;;246      keyaddr+=4;
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000054  9004              STR      r0,[sp,#0x10]
000056  f8da000c          LDR      r0,[r10,#0xc]
00005a  ba00              REV      r0,r0
;;;248      keyaddr+=4;
;;;249      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005c  9005              STR      r0,[sp,#0x14]
00005e  f8da0010          LDR      r0,[r10,#0x10]
000062  ba00              REV      r0,r0
;;;250      keyaddr+=4;
;;;251      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000064  9006              STR      r0,[sp,#0x18]
000066  f8da0014          LDR      r0,[r10,#0x14]
00006a  ba00              REV      r0,r0
;;;252      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00006c  9007              STR      r0,[sp,#0x1c]
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       CRYP_KeyInit
;;;253    
;;;254      /* Initialization Vectors */
;;;255      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000074  f8db0000          LDR      r0,[r11,#0]
000078  ba00              REV      r0,r0
;;;256      ivaddr+=4;
;;;257      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00007a  900e              STR      r0,[sp,#0x38]
00007c  f8db0004          LDR      r0,[r11,#4]
000080  ba00              REV      r0,r0
;;;258      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
000082  900f              STR      r0,[sp,#0x3c]
000084  a80e              ADD      r0,sp,#0x38
000086  f7fffffe          BL       CRYP_IVInit
;;;259    
;;;260      /* Flush IN/OUT FIFO */
;;;261      CRYP_FIFOFlush();
00008a  f7fffffe          BL       CRYP_FIFOFlush
;;;262    
;;;263      /* Enable Crypto processor */
;;;264      CRYP_Cmd(ENABLE);
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       CRYP_Cmd
;;;265    
;;;266      if(CRYP_GetCmdStatus() == DISABLE)
000094  f7fffffe          BL       CRYP_GetCmdStatus
000098  2800              CMP      r0,#0
;;;267      {
;;;268        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;269           the CRYP peripheral (please check the device sales type. */
;;;270        return(ERROR);
;;;271      }
;;;272      
;;;273      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;274      {
;;;275        /* Write the Input block in the Input FIFO */
;;;276        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;277        inputaddr+=4;
;;;278        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;279        inputaddr+=4;
;;;280    
;;;281        /* Wait until the complete message has been processed */
;;;282        counter = 0;
;;;283        do
;;;284        {
;;;285          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;286          counter++;
;;;287        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
;;;288    
;;;289        if (busystatus != RESET)
;;;290       {
;;;291           status = ERROR;
;;;292        }
;;;293        else
;;;294        {
;;;295    
;;;296          /* Read the Output block from the Output FIFO */
;;;297          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;298          outputaddr+=4;
;;;299          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;300          outputaddr+=4;
;;;301        }
;;;302      }
;;;303    
;;;304      /* Disable Crypto */
;;;305      CRYP_Cmd(DISABLE);
;;;306    
;;;307      return status; 
;;;308    }
00009a  bf04              ITT      EQ
00009c  b017              ADDEQ    sp,sp,#0x5c
00009e  e8bd8ff0          POPEQ    {r4-r11,pc}
0000a2  e022              B        |L1.234|
                  |L1.164|
0000a4  6820              LDR      r0,[r4,#0]            ;276
0000a6  f7fffffe          BL       CRYP_DataIn
0000aa  f8540f04          LDR      r0,[r4,#4]!           ;278
0000ae  f7fffffe          BL       CRYP_DataIn
0000b2  1d24              ADDS     r4,r4,#4              ;282
0000b4  f8cd9030          STR      r9,[sp,#0x30]         ;282
                  |L1.184|
0000b8  2010              MOVS     r0,#0x10              ;285
0000ba  f7fffffe          BL       CRYP_GetFlagStatus
0000be  990c              LDR      r1,[sp,#0x30]         ;286
0000c0  1c49              ADDS     r1,r1,#1              ;286
0000c2  910c              STR      r1,[sp,#0x30]         ;287
0000c4  f5b13f80          CMP      r1,#0x10000           ;287
0000c8  d002              BEQ      |L1.208|
0000ca  2800              CMP      r0,#0                 ;287
0000cc  d1f4              BNE      |L1.184|
0000ce  e003              B        |L1.216|
                  |L1.208|
0000d0  2800              CMP      r0,#0                 ;289
0000d2  bf18              IT       NE                    ;291
0000d4  2700              MOVNE    r7,#0                 ;291
0000d6  d107              BNE      |L1.232|
                  |L1.216|
0000d8  f7fffffe          BL       CRYP_DataOut
0000dc  f8450b04          STR      r0,[r5],#4            ;297
0000e0  f7fffffe          BL       CRYP_DataOut
0000e4  f8450b04          STR      r0,[r5],#4            ;299
                  |L1.232|
0000e8  3608              ADDS     r6,r6,#8              ;299
                  |L1.234|
0000ea  4546              CMP      r6,r8                 ;273
0000ec  d201              BCS      |L1.242|
0000ee  2f00              CMP      r7,#0                 ;273
0000f0  d1d8              BNE      |L1.164|
                  |L1.242|
0000f2  2000              MOVS     r0,#0                 ;305
0000f4  f7fffffe          BL       CRYP_Cmd
0000f8  b017              ADD      sp,sp,#0x5c
0000fa  4638              MOV      r0,r7                 ;307
0000fc  e8bd8ff0          POP      {r4-r11,pc}
;;;309    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;101                              uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b08d              SUB      sp,sp,#0x34
;;;103      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  4683              MOV      r11,r0                ;102
00000c  9d16              LDR      r5,[sp,#0x58]
00000e  4698              MOV      r8,r3                 ;102
000010  4614              MOV      r4,r2                 ;102
000012  468a              MOV      r10,r1                ;102
;;;106      uint32_t busystatus = 0;
;;;107      ErrorStatus status = SUCCESS;
000014  2701              MOVS     r7,#1
;;;108      uint32_t keyaddr    = (uint32_t)Key;
;;;109      uint32_t inputaddr  = (uint32_t)Input;
;;;110      uint32_t outputaddr = (uint32_t)Output;
;;;111      uint32_t i = 0;
000016  464e              MOV      r6,r9
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f8cd9030          STR      r9,[sp,#0x30]
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000022  f1bb0f01          CMP      r11,#1
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000026  bf0e              ITEE     EQ
000028  f8cd9020          STREQ    r9,[sp,#0x20]
;;;120      }
;;;121      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;122      {
;;;123         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00002c  2004              MOVNE    r0,#4
00002e  9008              STRNE    r0,[sp,#0x20]
;;;124      }
;;;125    
;;;126      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
;;;127      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000030  2080              MOVS     r0,#0x80
000032  e9cd9009          STRD     r9,r0,[sp,#0x24]
;;;128      CRYP_Init(&TDES_CRYP_InitStructure);
000036  a808              ADD      r0,sp,#0x20
000038  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003c  f8da0000          LDR      r0,[r10,#0]
000040  ba00              REV      r0,r0
;;;132      keyaddr+=4;
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000042  9002              STR      r0,[sp,#8]
000044  f8da0004          LDR      r0,[r10,#4]
000048  ba00              REV      r0,r0
;;;134      keyaddr+=4;
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004a  9003              STR      r0,[sp,#0xc]
00004c  f8da0008          LDR      r0,[r10,#8]
000050  ba00              REV      r0,r0
;;;136      keyaddr+=4;
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000052  9004              STR      r0,[sp,#0x10]
000054  f8da000c          LDR      r0,[r10,#0xc]
000058  ba00              REV      r0,r0
;;;138      keyaddr+=4;
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005a  9005              STR      r0,[sp,#0x14]
00005c  f8da0010          LDR      r0,[r10,#0x10]
000060  ba00              REV      r0,r0
;;;140      keyaddr+=4;
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000062  9006              STR      r0,[sp,#0x18]
000064  f8da0014          LDR      r0,[r10,#0x14]
000068  ba00              REV      r0,r0
;;;142      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00006a  9007              STR      r0,[sp,#0x1c]
00006c  4668              MOV      r0,sp
00006e  f7fffffe          BL       CRYP_KeyInit
;;;143    
;;;144      /* Flush IN/OUT FIFO */
;;;145      CRYP_FIFOFlush();
000072  f7fffffe          BL       CRYP_FIFOFlush
;;;146    
;;;147      /* Enable Crypto processor */
;;;148      CRYP_Cmd(ENABLE);
000076  2001              MOVS     r0,#1
000078  f7fffffe          BL       CRYP_Cmd
;;;149    
;;;150      if(CRYP_GetCmdStatus() == DISABLE)
00007c  f7fffffe          BL       CRYP_GetCmdStatus
000080  2800              CMP      r0,#0
;;;151      {
;;;152        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;153           the CRYP peripheral (please check the device sales type. */
;;;154        return(ERROR);
;;;155      }
;;;156      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;157      {
;;;158        /* Write the Input block in the Input FIFO */
;;;159        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;160        inputaddr+=4;
;;;161        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;162        inputaddr+=4;
;;;163    
;;;164        /* Wait until the complete message has been processed */
;;;165        counter = 0;
;;;166        do
;;;167        {
;;;168          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;169          counter++;
;;;170        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
;;;171    
;;;172        if (busystatus != RESET)
;;;173        {
;;;174           status = ERROR;
;;;175        }
;;;176        else
;;;177        {
;;;178    
;;;179          /* Read the Output block from the Output FIFO */
;;;180          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;181          outputaddr+=4;
;;;182          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;183          outputaddr+=4;
;;;184        }
;;;185      }
;;;186    
;;;187      /* Disable Crypto */
;;;188      CRYP_Cmd(DISABLE);
;;;189    
;;;190      return status; 
;;;191    }
000082  bf04              ITT      EQ
000084  b00d              ADDEQ    sp,sp,#0x34
000086  e8bd8ff0          POPEQ    {r4-r11,pc}
00008a  e022              B        |L2.210|
                  |L2.140|
00008c  6820              LDR      r0,[r4,#0]            ;159
00008e  f7fffffe          BL       CRYP_DataIn
000092  f8540f04          LDR      r0,[r4,#4]!           ;161
000096  f7fffffe          BL       CRYP_DataIn
00009a  1d24              ADDS     r4,r4,#4              ;165
00009c  f8cd9030          STR      r9,[sp,#0x30]         ;165
                  |L2.160|
0000a0  2010              MOVS     r0,#0x10              ;168
0000a2  f7fffffe          BL       CRYP_GetFlagStatus
0000a6  990c              LDR      r1,[sp,#0x30]         ;169
0000a8  1c49              ADDS     r1,r1,#1              ;169
0000aa  910c              STR      r1,[sp,#0x30]         ;170
0000ac  f5b13f80          CMP      r1,#0x10000           ;170
0000b0  d002              BEQ      |L2.184|
0000b2  2800              CMP      r0,#0                 ;170
0000b4  d1f4              BNE      |L2.160|
0000b6  e003              B        |L2.192|
                  |L2.184|
0000b8  2800              CMP      r0,#0                 ;172
0000ba  bf18              IT       NE                    ;174
0000bc  2700              MOVNE    r7,#0                 ;174
0000be  d107              BNE      |L2.208|
                  |L2.192|
0000c0  f7fffffe          BL       CRYP_DataOut
0000c4  f8450b04          STR      r0,[r5],#4            ;180
0000c8  f7fffffe          BL       CRYP_DataOut
0000cc  f8450b04          STR      r0,[r5],#4            ;182
                  |L2.208|
0000d0  3608              ADDS     r6,r6,#8              ;182
                  |L2.210|
0000d2  4546              CMP      r6,r8                 ;156
0000d4  d201              BCS      |L2.218|
0000d6  2f00              CMP      r7,#0                 ;156
0000d8  d1d8              BNE      |L2.140|
                  |L2.218|
0000da  2000              MOVS     r0,#0                 ;188
0000dc  f7fffffe          BL       CRYP_Cmd
0000e0  b00d              ADD      sp,sp,#0x34
0000e2  4638              MOV      r0,r7                 ;190
0000e4  e8bd8ff0          POP      {r4-r11,pc}
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 144
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
