; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_dma2d.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_dma2d.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_dma2d.crf arm_hal\lib\stm32f4xx_dma2d.c]
                          THUMB

                          AREA ||i.DMA2D_AbortTransfer||, CODE, READONLY, ALIGN=2

                  DMA2D_AbortTransfer PROC
;;;253    
;;;254    void DMA2D_AbortTransfer(void)
000000  4802              LDR      r0,|L1.12|
;;;255    {
;;;256        /* Start DMA2D transfer by setting START bit */
;;;257        DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;258    
;;;259    }
00000a  4770              BX       lr
;;;260    
                          ENDP

                  |L1.12|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_BGConfig||, CODE, READONLY, ALIGN=2

                  DMA2D_BGConfig PROC
;;;388      */
;;;389    void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
000000  b430              PUSH     {r4,r5}
;;;390    {
;;;391    
;;;392      uint32_t bg_clutcolormode = 0;
;;;393      uint32_t bg_clutsize = 0;
;;;394      uint32_t bg_alpha_mode = 0;
;;;395      uint32_t bg_alphavalue = 0;
;;;396      uint32_t bg_colorgreen = 0;
;;;397      uint32_t bg_colorred = 0;
;;;398    
;;;399      assert_param(IS_DMA2D_BGO(DMA2D_BG_InitStruct->DMA2D_BGO));
;;;400      assert_param(IS_DMA2D_BGCM(DMA2D_BG_InitStruct->DMA2D_BGCM));
;;;401      assert_param(IS_DMA2D_BG_CLUT_CM(DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM));
;;;402      assert_param(IS_DMA2D_BG_CLUT_SIZE(DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE));
;;;403      assert_param(IS_DMA2D_BG_ALPHA_MODE(DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE));
;;;404      assert_param(IS_DMA2D_BG_ALPHA_VALUE(DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE));
;;;405      assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
;;;406      assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
;;;407      assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));
;;;408    
;;;409      /* Configures the BG memory address */
;;;410      DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
000002  491b              LDR      r1,|L2.112|
000004  6802              LDR      r2,[r0,#0]
000006  614a              STR      r2,[r1,#0x14]
;;;411    
;;;412      /* Configures the BG offset */
;;;413      DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
000008  698a              LDR      r2,[r1,#0x18]
00000a  f36f020d          BFC      r2,#0,#14
00000e  618a              STR      r2,[r1,#0x18]
;;;414      DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
000010  698a              LDR      r2,[r1,#0x18]
000012  6843              LDR      r3,[r0,#4]
000014  431a              ORRS     r2,r2,r3
000016  618a              STR      r2,[r1,#0x18]
;;;415    
;;;416      /* Configures background Pixel Format Convertor */
;;;417      DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
000018  6a4a              LDR      r2,[r1,#0x24]
00001a  4b16              LDR      r3,|L2.116|
00001c  401a              ANDS     r2,r2,r3
00001e  624a              STR      r2,[r1,#0x24]
;;;418      bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
000020  68c2              LDR      r2,[r0,#0xc]
;;;419      bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
;;;420      bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
;;;421      bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
;;;422      DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
000022  6885              LDR      r5,[r0,#8]
000024  0114              LSLS     r4,r2,#4              ;418
000026  6902              LDR      r2,[r0,#0x10]         ;419
000028  432c              ORRS     r4,r4,r5
00002a  ea4f2c02          LSL      r12,r2,#8             ;419
00002e  8a82              LDRH     r2,[r0,#0x14]         ;420
000030  0413              LSLS     r3,r2,#16             ;420
000032  7e02              LDRB     r2,[r0,#0x18]         ;421
000034  ea4c0303          ORR      r3,r12,r3
000038  4323              ORRS     r3,r3,r4
00003a  ea436202          ORR      r2,r3,r2,LSL #24
00003e  6a4b              LDR      r3,[r1,#0x24]
000040  431a              ORRS     r2,r2,r3
000042  624a              STR      r2,[r1,#0x24]
;;;423                        bg_alpha_mode | bg_alphavalue);
;;;424    
;;;425      /* Configures background color */
;;;426      DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
000044  6a8a              LDR      r2,[r1,#0x28]
000046  f002427f          AND      r2,r2,#0xff000000
00004a  628a              STR      r2,[r1,#0x28]
;;;427      bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
00004c  6a02              LDR      r2,[r0,#0x20]
;;;428      bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
;;;429      DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
00004e  f8d1c028          LDR      r12,[r1,#0x28]
000052  0213              LSLS     r3,r2,#8              ;427
000054  8c82              LDRH     r2,[r0,#0x24]         ;428
000056  69c4              LDR      r4,[r0,#0x1c]
000058  ea434202          ORR      r2,r3,r2,LSL #16
00005c  ea4c0c04          ORR      r12,r12,r4
000060  ea4c0202          ORR      r2,r12,r2
000064  628a              STR      r2,[r1,#0x28]
;;;430      
;;;431      /* Configures background CLUT memory address */
;;;432      DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
000066  6a80              LDR      r0,[r0,#0x28]
000068  6308              STR      r0,[r1,#0x30]
;;;433    
;;;434    }
00006a  bc30              POP      {r4,r5}
00006c  4770              BX       lr
;;;435    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x4002b000
                  |L2.116|
                          DCD      0x00fc00c0

                          AREA ||i.DMA2D_BGStart||, CODE, READONLY, ALIGN=2

                  DMA2D_BGStart PROC
;;;508      
;;;509    void DMA2D_BGStart(FunctionalState NewState) 
000000  4904              LDR      r1,|L3.20|
;;;510    {
;;;511      /* Check the parameters */
;;;512      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;513      
;;;514      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;515      {
;;;516        /* Start the automatic loading of the CLUT */
;;;517        DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
;;;518      }
;;;519      else
;;;520      {
;;;521        /* abort the transfer */
;;;522        DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
000004  6a48              LDR      r0,[r1,#0x24]
000006  bf14              ITE      NE                    ;517
000008  f0400020          ORRNE    r0,r0,#0x20           ;517
00000c  f0200020          BICEQ    r0,r0,#0x20
000010  6248              STR      r0,[r1,#0x24]         ;517
;;;523      }
;;;524    }
000012  4770              BX       lr
;;;525    
                          ENDP

                  |L3.20|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_BG_StructInit||, CODE, READONLY, ALIGN=1

                  DMA2D_BG_StructInit PROC
;;;441      */
;;;442    void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
000000  2100              MOVS     r1,#0
;;;443    {
;;;444      /*!< Initialize the DMA2D background memory address */
;;;445      DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
;;;446    
;;;447      /*!< Initialize the DMA2D background offset */
;;;448      DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;449    
;;;450      /*!< Initialize the DMA2D background color mode */
;;;451      DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
000004  6041              STR      r1,[r0,#4]
;;;452    
;;;453      /*!< Initialize the DMA2D background CLUT color mode */
;;;454      DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
000006  6081              STR      r1,[r0,#8]
;;;455    
;;;456      /*!< Initialize the DMA2D background CLUT size */
;;;457      DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
000008  60c1              STR      r1,[r0,#0xc]
;;;458    
;;;459      /*!< Initialize the DMA2D background alpha mode */
;;;460      DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
00000a  6101              STR      r1,[r0,#0x10]
;;;461    
;;;462      /*!< Initialize the DMA2D background alpha value */
;;;463      DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
00000c  6141              STR      r1,[r0,#0x14]
;;;464    
;;;465      /*!< Initialize the DMA2D background blue value */
;;;466      DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
00000e  6181              STR      r1,[r0,#0x18]
;;;467    
;;;468      /*!< Initialize the DMA2D background green value */
;;;469      DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
000010  61c1              STR      r1,[r0,#0x1c]
;;;470    
;;;471      /*!< Initialize the DMA2D background red value */
;;;472      DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
000012  6201              STR      r1,[r0,#0x20]
;;;473    
;;;474      /*!< Initialize the DMA2D background CLUT memory address */
;;;475      DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;476    }
000018  4770              BX       lr
;;;477    
                          ENDP


                          AREA ||i.DMA2D_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA2D_ClearFlag PROC
;;;690      */
;;;691    void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
000000  4901              LDR      r1,|L5.8|
;;;692    {
;;;693      /* Check the parameters */
;;;694      assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
;;;695        
;;;696      /* Clear the corresponding DMA2D flag */
;;;697      DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
000002  6088              STR      r0,[r1,#8]
;;;698    }
000004  4770              BX       lr
;;;699    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA2D_ClearITPendingBit PROC
;;;751      */
;;;752    void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
000000  4901              LDR      r1,|L6.8|
;;;753    {
;;;754      /* Check the parameters */
;;;755      assert_param(IS_DMA2D_IT(DMA2D_IT));
;;;756      DMA2D_IT = DMA2D_IT >> 8;
000002  0a00              LSRS     r0,r0,#8
;;;757        
;;;758      /* Clear the corresponding DMA2D Interrupt */
;;;759      DMA2D->IFCR = (uint32_t)DMA2D_IT;
000004  6088              STR      r0,[r1,#8]
;;;760    }
000006  4770              BX       lr
;;;761    
                          ENDP

                  |L6.8|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_DeInit||, CODE, READONLY, ALIGN=1

                  DMA2D_DeInit PROC
;;;104    
;;;105    void DMA2D_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;106    {
;;;107      /* Enable DMA2D reset state */
;;;108      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
000002  2101              MOVS     r1,#1
000004  05c8              LSLS     r0,r1,#23
000006  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;109      /* Release DMA2D from reset state */
;;;110      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f44f0000          MOV      r0,#0x800000
000014  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
;;;111    }
;;;112    
                          ENDP


                          AREA ||i.DMA2D_DeadTimeConfig||, CODE, READONLY, ALIGN=2

                  DMA2D_DeadTimeConfig PROC
;;;531      */
;;;532    void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
000000  4a09              LDR      r2,|L8.40|
;;;533    {
;;;534       uint32_t DeadTime;
;;;535    
;;;536      /* Check the parameters */
;;;537      assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
;;;538      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;539    
;;;540      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;541      {
;;;542        /* Enable and Configures the dead time */
;;;543        DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
;;;544        DeadTime = DMA2D_DeadTime << 8;
;;;545        DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
;;;546      }
;;;547      else
;;;548      {
;;;549         DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
000004  bf04              ITT      EQ
000006  6cd0              LDREQ    r0,[r2,#0x4c]
000008  f0200001          BICEQ    r0,r0,#1
00000c  d00a              BEQ      |L8.36|
00000e  6cd1              LDR      r1,[r2,#0x4c]         ;543
000010  f0210101          BIC      r1,r1,#1              ;543
000014  f421417f          BIC      r1,r1,#0xff00         ;543
000018  64d1              STR      r1,[r2,#0x4c]         ;543
00001a  6cd1              LDR      r1,[r2,#0x4c]         ;545
00001c  0200              LSLS     r0,r0,#8              ;544
00001e  f0400001          ORR      r0,r0,#1              ;545
000022  4308              ORRS     r0,r0,r1              ;545
                  |L8.36|
000024  64d0              STR      r0,[r2,#0x4c]         ;545
;;;550      }
;;;551    }
000026  4770              BX       lr
;;;552    
                          ENDP

                  |L8.40|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_FGConfig||, CODE, READONLY, ALIGN=2

                  DMA2D_FGConfig PROC
;;;291      */
;;;292    void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
000000  b430              PUSH     {r4,r5}
;;;293    {
;;;294    
;;;295      uint32_t fg_clutcolormode = 0;
;;;296      uint32_t fg_clutsize = 0;
;;;297      uint32_t fg_alpha_mode = 0;
;;;298      uint32_t fg_alphavalue = 0;
;;;299      uint32_t fg_colorgreen = 0;
;;;300      uint32_t fg_colorred = 0;
;;;301    
;;;302      assert_param(IS_DMA2D_FGO(DMA2D_FG_InitStruct->DMA2D_FGO));
;;;303      assert_param(IS_DMA2D_FGCM(DMA2D_FG_InitStruct->DMA2D_FGCM));
;;;304      assert_param(IS_DMA2D_FG_CLUT_CM(DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM));
;;;305      assert_param(IS_DMA2D_FG_CLUT_SIZE(DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE));
;;;306      assert_param(IS_DMA2D_FG_ALPHA_MODE(DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE));
;;;307      assert_param(IS_DMA2D_FG_ALPHA_VALUE(DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE));
;;;308      assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
;;;309      assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
;;;310      assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));
;;;311    
;;;312      /* Configures the FG memory address */
;;;313      DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
000002  491b              LDR      r1,|L9.112|
000004  6802              LDR      r2,[r0,#0]
000006  60ca              STR      r2,[r1,#0xc]
;;;314    
;;;315      /* Configures the FG offset */
;;;316      DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
000008  690a              LDR      r2,[r1,#0x10]
00000a  f36f020d          BFC      r2,#0,#14
00000e  610a              STR      r2,[r1,#0x10]
;;;317      DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
000010  690a              LDR      r2,[r1,#0x10]
000012  6843              LDR      r3,[r0,#4]
000014  431a              ORRS     r2,r2,r3
000016  610a              STR      r2,[r1,#0x10]
;;;318    
;;;319      /* Configures foreground Pixel Format Convertor */
;;;320      DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
000018  69ca              LDR      r2,[r1,#0x1c]
00001a  4b16              LDR      r3,|L9.116|
00001c  401a              ANDS     r2,r2,r3
00001e  61ca              STR      r2,[r1,#0x1c]
;;;321      fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
000020  68c2              LDR      r2,[r0,#0xc]
;;;322      fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
;;;323      fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
;;;324      fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
;;;325      DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
000022  6885              LDR      r5,[r0,#8]
000024  0114              LSLS     r4,r2,#4              ;321
000026  6902              LDR      r2,[r0,#0x10]         ;322
000028  432c              ORRS     r4,r4,r5
00002a  ea4f2c02          LSL      r12,r2,#8             ;322
00002e  8a82              LDRH     r2,[r0,#0x14]         ;323
000030  0413              LSLS     r3,r2,#16             ;323
000032  7e02              LDRB     r2,[r0,#0x18]         ;324
000034  ea4c0303          ORR      r3,r12,r3
000038  4323              ORRS     r3,r3,r4
00003a  ea436202          ORR      r2,r3,r2,LSL #24
00003e  69cb              LDR      r3,[r1,#0x1c]
000040  431a              ORRS     r2,r2,r3
000042  61ca              STR      r2,[r1,#0x1c]
;;;326                        fg_alpha_mode | fg_alphavalue);
;;;327    
;;;328      /* Configures foreground color */
;;;329      DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
000044  6a0a              LDR      r2,[r1,#0x20]
000046  f002427f          AND      r2,r2,#0xff000000
00004a  620a              STR      r2,[r1,#0x20]
;;;330      fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
00004c  6a02              LDR      r2,[r0,#0x20]
;;;331      fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
;;;332      DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
00004e  f8d1c020          LDR      r12,[r1,#0x20]
000052  0213              LSLS     r3,r2,#8              ;330
000054  8c82              LDRH     r2,[r0,#0x24]         ;331
000056  69c4              LDR      r4,[r0,#0x1c]
000058  ea434202          ORR      r2,r3,r2,LSL #16
00005c  ea4c0c04          ORR      r12,r12,r4
000060  ea4c0202          ORR      r2,r12,r2
000064  620a              STR      r2,[r1,#0x20]
;;;333    
;;;334      /* Configures foreground CLUT memory address */
;;;335      DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
000066  6a80              LDR      r0,[r0,#0x28]
000068  62c8              STR      r0,[r1,#0x2c]
;;;336    }
00006a  bc30              POP      {r4,r5}
00006c  4770              BX       lr
;;;337    
                          ENDP

00006e  0000              DCW      0x0000
                  |L9.112|
                          DCD      0x4002b000
                  |L9.116|
                          DCD      0x00fc00c0

                          AREA ||i.DMA2D_FGStart||, CODE, READONLY, ALIGN=2

                  DMA2D_FGStart PROC
;;;484    
;;;485    void DMA2D_FGStart(FunctionalState NewState) 
000000  4904              LDR      r1,|L10.20|
;;;486    {
;;;487      /* Check the parameters */
;;;488      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;489    
;;;490      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;491      {
;;;492        /* Start the automatic loading of the CLUT */
;;;493        DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
;;;494      }
;;;495      else
;;;496      {
;;;497        /* abort the transfer */
;;;498        DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
000004  69c8              LDR      r0,[r1,#0x1c]
000006  bf14              ITE      NE                    ;493
000008  f0400020          ORRNE    r0,r0,#0x20           ;493
00000c  f0200020          BICEQ    r0,r0,#0x20
000010  61c8              STR      r0,[r1,#0x1c]         ;493
;;;499      }
;;;500    }
000012  4770              BX       lr
;;;501    
                          ENDP

                  |L10.20|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_FG_StructInit||, CODE, READONLY, ALIGN=1

                  DMA2D_FG_StructInit PROC
;;;343      */
;;;344    void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
000000  2100              MOVS     r1,#0
;;;345    {
;;;346      /*!< Initialize the DMA2D foreground memory address */
;;;347      DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
;;;348    
;;;349      /*!< Initialize the DMA2D foreground offset */
;;;350      DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;351    
;;;352      /*!< Initialize the DMA2D foreground color mode */
;;;353      DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
000004  6041              STR      r1,[r0,#4]
;;;354    
;;;355      /*!< Initialize the DMA2D foreground CLUT color mode */
;;;356      DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
000006  6081              STR      r1,[r0,#8]
;;;357    
;;;358      /*!< Initialize the DMA2D foreground CLUT size */
;;;359      DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
000008  60c1              STR      r1,[r0,#0xc]
;;;360    
;;;361      /*!< Initialize the DMA2D foreground alpha mode */
;;;362      DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
00000a  6101              STR      r1,[r0,#0x10]
;;;363    
;;;364      /*!< Initialize the DMA2D foreground alpha value */
;;;365      DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
00000c  6141              STR      r1,[r0,#0x14]
;;;366    
;;;367      /*!< Initialize the DMA2D foreground blue value */
;;;368      DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
00000e  6181              STR      r1,[r0,#0x18]
;;;369    
;;;370      /*!< Initialize the DMA2D foreground green value */
;;;371      DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
000010  61c1              STR      r1,[r0,#0x1c]
;;;372    
;;;373      /*!< Initialize the DMA2D foreground red value */
;;;374      DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
000012  6201              STR      r1,[r0,#0x20]
;;;375    
;;;376      /*!< Initialize the DMA2D foreground CLUT memory address */
;;;377      DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;378    }
000018  4770              BX       lr
;;;379    
                          ENDP


                          AREA ||i.DMA2D_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA2D_GetFlagStatus PROC
;;;656    
;;;657    FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
000000  4a03              LDR      r2,|L12.16|
;;;658    {
000002  4601              MOV      r1,r0
;;;659      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;660      
;;;661      /* Check the parameters */
;;;662      assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
;;;663      
;;;664      /* Check the status of the specified DMA2D flag */
;;;665      if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
000006  6852              LDR      r2,[r2,#4]
000008  420a              TST      r2,r1
;;;666      {
;;;667        /* DMA2D_FLAG is set */
;;;668        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;669      }
;;;670      else
;;;671      {
;;;672        /* DMA2D_FLAG is reset */
;;;673        bitstatus = RESET;
;;;674      }
;;;675      /* Return the DMA2D_FLAG status */
;;;676      return bitstatus;
;;;677    }
00000e  4770              BX       lr
;;;678    
                          ENDP

                  |L12.16|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA2D_GetITStatus PROC
;;;711      */
;;;712    ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
000000  4b07              LDR      r3,|L13.32|
;;;713    {
;;;714      ITStatus bitstatus = RESET;
000002  2100              MOVS     r1,#0
;;;715      uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
;;;716      
;;;717      /* Check the parameters */
;;;718      assert_param(IS_DMA2D_IT(DMA2D_IT));
;;;719    
;;;720      if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
000004  f8d3c004          LDR      r12,[r3,#4]
000008  ea1c2f10          TST      r12,r0,LSR #8
;;;721      {
;;;722        bitstatus = SET;
00000c  bf18              IT       NE
00000e  2101              MOVNE    r1,#1
;;;723      }
;;;724      else
;;;725      {
;;;726        bitstatus = RESET;
;;;727      }
;;;728      
;;;729      if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
000010  681a              LDR      r2,[r3,#0]
000012  4202              TST      r2,r0
000014  bf16              ITET     NE
000016  2900              CMPNE    r1,#0
;;;730      {
;;;731        bitstatus = SET;
;;;732      }
;;;733      else
;;;734      {
;;;735        bitstatus = RESET;
000018  2000              MOVEQ    r0,#0
00001a  2001              MOVNE    r0,#1                 ;731
;;;736      }
;;;737      return bitstatus;
;;;738    }
00001c  4770              BX       lr
;;;739    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_ITConfig||, CODE, READONLY, ALIGN=2

                  DMA2D_ITConfig PROC
;;;625    
;;;626    void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L14.20|
;;;627    {
;;;628      /* Check the parameters */
;;;629      assert_param(IS_DMA2D_IT(DMA2D_IT));
;;;630      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;631    
;;;632      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;633      {
;;;634        /* Enable the selected DMA2D interrupts */
;;;635        DMA2D->CR |= DMA2D_IT;
;;;636      }
;;;637      else
;;;638      {
;;;639        /* Disable the selected DMA2D interrupts */
;;;640        DMA2D->CR &= (uint32_t)~DMA2D_IT;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;635
000008  4308              ORRNE    r0,r0,r1              ;635
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;635
;;;641      }
;;;642    }
000010  4770              BX       lr
;;;643    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_Init||, CODE, READONLY, ALIGN=2

                  DMA2D_Init PROC
;;;121      */
;;;122    void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
000000  f8dfc0d4          LDR      r12,|L15.216|
;;;123    {
000004  b410              PUSH     {r4}
;;;124    
;;;125      uint32_t outgreen = 0;
;;;126      uint32_t outred   = 0;
;;;127      uint32_t outalpha = 0;
;;;128      uint32_t pixline  = 0;
;;;129    
;;;130      /* Check the parameters */
;;;131      assert_param(IS_DMA2D_MODE(DMA2D_InitStruct->DMA2D_Mode));
;;;132      assert_param(IS_DMA2D_CMODE(DMA2D_InitStruct->DMA2D_CMode));
;;;133      assert_param(IS_DMA2D_OGREEN(DMA2D_InitStruct->DMA2D_OutputGreen));
;;;134      assert_param(IS_DMA2D_ORED(DMA2D_InitStruct->DMA2D_OutputRed));
;;;135      assert_param(IS_DMA2D_OBLUE(DMA2D_InitStruct->DMA2D_OutputBlue));
;;;136      assert_param(IS_DMA2D_OALPHA(DMA2D_InitStruct->DMA2D_OutputAlpha));
;;;137      assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
;;;138      assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
;;;139      assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));
;;;140    
;;;141      /* Configures the DMA2D operation mode */
;;;142      DMA2D->CR &= (uint32_t)CR_MASK;
000006  f8dc1000          LDR      r1,[r12,#0]
00000a  2300              MOVS     r3,#0                 ;127
00000c  4a33              LDR      r2,|L15.220|
00000e  4011              ANDS     r1,r1,r2
000010  f8cc1000          STR      r1,[r12,#0]
;;;143      DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
000014  f8dc1000          LDR      r1,[r12,#0]
000018  6802              LDR      r2,[r0,#0]
00001a  4311              ORRS     r1,r1,r2
00001c  f8cc1000          STR      r1,[r12,#0]
;;;144    
;;;145      /* Configures the color mode of the output image */
;;;146      DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
000020  f8dc1034          LDR      r1,[r12,#0x34]
000024  f0210107          BIC      r1,r1,#7
000028  f8cc1034          STR      r1,[r12,#0x34]
;;;147      DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
00002c  f8dc1034          LDR      r1,[r12,#0x34]
000030  6842              LDR      r2,[r0,#4]
000032  4311              ORRS     r1,r1,r2
000034  f8cc1034          STR      r1,[r12,#0x34]
;;;148    
;;;149      /* Configures the output color */
;;;150    
;;;151      if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
000038  6841              LDR      r1,[r0,#4]
00003a  2900              CMP      r1,#0
00003c  d034              BEQ      |L15.168|
;;;152      {
;;;153        outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
;;;154        outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
;;;155        outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
;;;156      }
;;;157      else
;;;158      
;;;159        if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
00003e  2901              CMP      r1,#1
000040  d039              BEQ      |L15.182|
;;;160        {
;;;161          outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
;;;162          outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
;;;163          outalpha = (uint32_t)0x00000000;
;;;164        }
;;;165         
;;;166      else
;;;167    
;;;168        if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
000042  2902              CMP      r1,#2
000044  d03c              BEQ      |L15.192|
;;;169        {
;;;170          outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
;;;171          outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
;;;172          outalpha = (uint32_t)0x00000000;
;;;173        }
;;;174    
;;;175      else
;;;176    
;;;177        if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
000046  2903              CMP      r1,#3
000048  68c1              LDR      r1,[r0,#0xc]
00004a  d03e              BEQ      |L15.202|
;;;178        {  
;;;179          outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
;;;180          outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
;;;181          outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
;;;182        }
;;;183    
;;;184      else /* DMA2D_CMode = DMA2D_ARGB4444 */
;;;185      {
;;;186        outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
00004c  010a              LSLS     r2,r1,#4
;;;187        outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
00004e  6901              LDR      r1,[r0,#0x10]
;;;188        outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
000050  6943              LDR      r3,[r0,#0x14]
000052  0209              LSLS     r1,r1,#8              ;187
000054  031b              LSLS     r3,r3,#12
                  |L15.86|
;;;189      }  
;;;190      DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
000056  6884              LDR      r4,[r0,#8]
000058  4319              ORRS     r1,r1,r3
00005a  4322              ORRS     r2,r2,r4
00005c  4311              ORRS     r1,r1,r2
00005e  f8dc2038          LDR      r2,[r12,#0x38]
000062  4311              ORRS     r1,r1,r2
000064  f8cc1038          STR      r1,[r12,#0x38]
;;;191    
;;;192      /* Configures the output memory address */
;;;193      DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
000068  6981              LDR      r1,[r0,#0x18]
00006a  f8cc103c          STR      r1,[r12,#0x3c]
;;;194    
;;;195      /* Configure  the line Offset */
;;;196      DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
00006e  f8dc1040          LDR      r1,[r12,#0x40]
000072  f36f010d          BFC      r1,#0,#14
000076  f8cc1040          STR      r1,[r12,#0x40]
;;;197      DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
00007a  f8dc1040          LDR      r1,[r12,#0x40]
00007e  69c2              LDR      r2,[r0,#0x1c]
000080  4311              ORRS     r1,r1,r2
000082  f8cc1040          STR      r1,[r12,#0x40]
;;;198    
;;;199      /* Configure the number of line and pixel per line */
;;;200      pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
000086  8c81              LDRH     r1,[r0,#0x24]
;;;201      DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
000088  f8dc2044          LDR      r2,[r12,#0x44]
00008c  f0024240          AND      r2,r2,#0xc0000000
000090  f8cc2044          STR      r2,[r12,#0x44]
;;;202      DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
000094  f8dc2044          LDR      r2,[r12,#0x44]
000098  6a00              LDR      r0,[r0,#0x20]
00009a  4310              ORRS     r0,r0,r2
00009c  ea404001          ORR      r0,r0,r1,LSL #16
0000a0  f8cc0044          STR      r0,[r12,#0x44]
;;;203    
;;;204    /**
;;;205      * @brief  Fills each DMA2D_InitStruct member with its default value.
;;;206      * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
;;;207      *         be initialized.
;;;208      * @retval None
;;;209      */
;;;210    }
0000a4  bc10              POP      {r4}
0000a6  4770              BX       lr
                  |L15.168|
0000a8  68c1              LDR      r1,[r0,#0xc]          ;153
0000aa  7d03              LDRB     r3,[r0,#0x14]         ;155
0000ac  020a              LSLS     r2,r1,#8              ;153
0000ae  8a01              LDRH     r1,[r0,#0x10]         ;154
0000b0  0409              LSLS     r1,r1,#16             ;154
0000b2  061b              LSLS     r3,r3,#24             ;155
0000b4  e7cf              B        |L15.86|
                  |L15.182|
0000b6  68c1              LDR      r1,[r0,#0xc]          ;161
0000b8  020a              LSLS     r2,r1,#8              ;161
0000ba  8a01              LDRH     r1,[r0,#0x10]         ;162
0000bc  0409              LSLS     r1,r1,#16             ;162
0000be  e7ca              B        |L15.86|
                  |L15.192|
0000c0  68c1              LDR      r1,[r0,#0xc]          ;170
0000c2  014a              LSLS     r2,r1,#5              ;170
0000c4  6901              LDR      r1,[r0,#0x10]         ;171
0000c6  02c9              LSLS     r1,r1,#11             ;171
0000c8  e7c5              B        |L15.86|
                  |L15.202|
0000ca  014a              LSLS     r2,r1,#5              ;179
0000cc  6901              LDR      r1,[r0,#0x10]         ;180
0000ce  6943              LDR      r3,[r0,#0x14]         ;181
0000d0  0289              LSLS     r1,r1,#10             ;180
0000d2  03db              LSLS     r3,r3,#15             ;181
0000d4  e7bf              B        |L15.86|
;;;211    void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
                          ENDP

0000d6  0000              DCW      0x0000
                  |L15.216|
                          DCD      0x4002b000
                  |L15.220|
                          DCD      0xfffce0fc

                          AREA ||i.DMA2D_LineWatermarkConfig||, CODE, READONLY, ALIGN=2

                  DMA2D_LineWatermarkConfig PROC
;;;558    
;;;559    void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
000000  4901              LDR      r1,|L16.8|
;;;560    {
;;;561      /* Check the parameters */
;;;562      assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));
;;;563    
;;;564      /* Sets the Line watermark configuration */
;;;565      DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
000002  6488              STR      r0,[r1,#0x48]
;;;566    }
000004  4770              BX       lr
;;;567    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_StartTransfer||, CODE, READONLY, ALIGN=2

                  DMA2D_StartTransfer PROC
;;;241    
;;;242    void DMA2D_StartTransfer(void)
000000  4802              LDR      r0,|L17.12|
;;;243    {
;;;244        /* Start DMA2D transfer by setting START bit */
;;;245        DMA2D->CR |= (uint32_t)DMA2D_CR_START;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;246    }
00000a  4770              BX       lr
;;;247    
                          ENDP

                  |L17.12|
                          DCD      0x4002b000

                          AREA ||i.DMA2D_StructInit||, CODE, READONLY, ALIGN=1

                  DMA2D_StructInit PROC
;;;210    }
;;;211    void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
000000  2100              MOVS     r1,#0
;;;212    {
;;;213      /* Initialize the transfer mode member */
;;;214      DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
;;;215    
;;;216      /* Initialize the output color mode members */
;;;217      DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
000002  6001              STR      r1,[r0,#0]
;;;218    
;;;219      /* Initialize the alpha and RGB values */
;;;220      DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;221      DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
000006  60c1              STR      r1,[r0,#0xc]
;;;222      DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
000008  6081              STR      r1,[r0,#8]
;;;223      DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
00000a  6101              STR      r1,[r0,#0x10]
;;;224    
;;;225      /* Initialize the output memory address */
;;;226      DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
00000c  6141              STR      r1,[r0,#0x14]
;;;227    
;;;228      /* Initialize the output offset */
;;;229      DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
00000e  6181              STR      r1,[r0,#0x18]
;;;230    
;;;231      /* Initialize the number of line and the number of pixel per line */
;;;232      DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
000010  61c1              STR      r1,[r0,#0x1c]
;;;233      DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
000012  6201              STR      r1,[r0,#0x20]
000014  6241              STR      r1,[r0,#0x24]
;;;234    }
000016  4770              BX       lr
;;;235    
                          ENDP


                          AREA ||i.DMA2D_Suspend||, CODE, READONLY, ALIGN=2

                  DMA2D_Suspend PROC
;;;266      */
;;;267    void DMA2D_Suspend(FunctionalState NewState)
000000  4904              LDR      r1,|L19.20|
;;;268    {
;;;269      /* Check the parameters */
;;;270      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;271    
;;;272      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;273      {
;;;274        /* Suspend DMA2D transfer by setting STOP bit */
;;;275        DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
;;;276      }
;;;277      else
;;;278      {
;;;279        /* Continue DMA2D transfer by clearing STOP bit */
;;;280        DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
000004  6808              LDR      r0,[r1,#0]
000006  bf14              ITE      NE                    ;275
000008  f0400002          ORRNE    r0,r0,#2              ;275
00000c  f0200002          BICEQ    r0,r0,#2
000010  6008              STR      r0,[r1,#0]            ;275
;;;281      }
;;;282    }
000012  4770              BX       lr
;;;283    
                          ENDP

                  |L19.20|
                          DCD      0x4002b000

;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_dma2d.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_dma2d_c_de80eb9a____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___17_stm32f4xx_dma2d_c_de80eb9a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_dma2d_c_de80eb9a____REVSH|
#line 144
|__asm___17_stm32f4xx_dma2d_c_de80eb9a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
