; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_exti.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_exti.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_exti.crf arm_hal\lib\stm32f4xx_exti.c]
                          THUMB

                          AREA ||i.EXTI_ClearFlag||, CODE, READONLY, ALIGN=2

                  EXTI_ClearFlag PROC
;;;249      */
;;;250    void EXTI_ClearFlag(uint32_t EXTI_Line)
000000  4901              LDR      r1,|L1.8|
;;;251    {
;;;252      /* Check the parameters */
;;;253      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;254      
;;;255      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;256    }
000004  4770              BX       lr
;;;257    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40013c14

                          AREA ||i.EXTI_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  EXTI_ClearITPendingBit PROC
;;;287      */
;;;288    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
000000  4901              LDR      r1,|L2.8|
;;;289    {
;;;290      /* Check the parameters */
;;;291      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;292      
;;;293      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;294    }
000004  4770              BX       lr
;;;295    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40013c14

                          AREA ||i.EXTI_DeInit||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;109      */
;;;110    void EXTI_DeInit(void)
000000  4906              LDR      r1,|L3.28|
;;;111    {
;;;112      EXTI->IMR = 0x00000000;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;113      EXTI->EMR = 0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;114      EXTI->RTSR = 0x00000000;
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;115      EXTI->FTSR = 0x00000000;
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;116      EXTI->PR = 0x007FFFFF;
000012  4904              LDR      r1,|L3.36|
000014  4802              LDR      r0,|L3.32|
000016  6008              STR      r0,[r1,#0]
;;;117    }
000018  4770              BX       lr
;;;118    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40013c00
                  |L3.32|
                          DCD      0x007fffff
                  |L3.36|
                          DCD      0x40013c14

                          AREA ||i.EXTI_GenerateSWInterrupt||, CODE, READONLY, ALIGN=2

                  EXTI_GenerateSWInterrupt PROC
;;;196      */
;;;197    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
000000  4902              LDR      r1,|L4.12|
;;;198    {
;;;199      /* Check the parameters */
;;;200      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;201      
;;;202      EXTI->SWIER |= EXTI_Line;
000002  680a              LDR      r2,[r1,#0]
000004  4310              ORRS     r0,r0,r2
000006  6008              STR      r0,[r1,#0]
;;;203    }
000008  4770              BX       lr
;;;204    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40013c10

                          AREA ||i.EXTI_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetFlagStatus PROC
;;;226      */
;;;227    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
000000  4a03              LDR      r2,|L5.16|
;;;228    {
000002  4601              MOV      r1,r0
;;;229      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;230      /* Check the parameters */
;;;231      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;232      
;;;233      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
;;;234      {
;;;235        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;236      }
;;;237      else
;;;238      {
;;;239        bitstatus = RESET;
;;;240      }
;;;241      return bitstatus;
;;;242    }
00000e  4770              BX       lr
;;;243    
                          ENDP

                  |L5.16|
                          DCD      0x40013c14

                          AREA ||i.EXTI_GetITStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetITStatus PROC
;;;263      */
;;;264    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000000  4a03              LDR      r2,|L6.16|
;;;265    {
000002  4601              MOV      r1,r0
;;;266      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;267      /* Check the parameters */
;;;268      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;269      
;;;270      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
;;;271      {
;;;272        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;273      }
;;;274      else
;;;275      {
;;;276        bitstatus = RESET;
;;;277      }
;;;278      return bitstatus;
;;;279      
;;;280    }
00000e  4770              BX       lr
;;;281    
                          ENDP

                  |L6.16|
                          DCD      0x40013c14

                          AREA ||i.EXTI_Init||, CODE, READONLY, ALIGN=2

                  EXTI_Init PROC
;;;125      */
;;;126    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000000  7983              LDRB     r3,[r0,#6]
;;;127    {
;;;128      uint32_t tmp = 0;
;;;129    
;;;130      /* Check the parameters */
;;;131      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;132      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;133      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;134      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;135    
;;;136      tmp = (uint32_t)EXTI_BASE;
000002  4a21              LDR      r2,|L7.136|
;;;137         
;;;138      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
000004  6801              LDR      r1,[r0,#0]
000006  2b00              CMP      r3,#0
000008  d034              BEQ      |L7.116|
;;;139      {
;;;140        /* Clear EXTI line configuration */
;;;141        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
00000a  6813              LDR      r3,[r2,#0]
00000c  ea230101          BIC      r1,r3,r1
000010  6011              STR      r1,[r2,#0]
;;;142        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
000012  1d11              ADDS     r1,r2,#4
000014  680a              LDR      r2,[r1,#0]
000016  6803              LDR      r3,[r0,#0]
000018  439a              BICS     r2,r2,r3
00001a  600a              STR      r2,[r1,#0]
;;;143        
;;;144        tmp += EXTI_InitStruct->EXTI_Mode;
00001c  7901              LDRB     r1,[r0,#4]
00001e  f1014180          ADD      r1,r1,#0x40000000
000022  f501319e          ADD      r1,r1,#0x13c00
;;;145    
;;;146        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000026  680a              LDR      r2,[r1,#0]
000028  6803              LDR      r3,[r0,#0]
00002a  431a              ORRS     r2,r2,r3
00002c  600a              STR      r2,[r1,#0]
;;;147    
;;;148        /* Clear Rising Falling edge configuration */
;;;149        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
00002e  4a17              LDR      r2,|L7.140|
000030  6811              LDR      r1,[r2,#0]
000032  6803              LDR      r3,[r0,#0]
000034  4399              BICS     r1,r1,r3
000036  6011              STR      r1,[r2,#0]
;;;150        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
000038  1d13              ADDS     r3,r2,#4
00003a  6819              LDR      r1,[r3,#0]
00003c  f8d0c000          LDR      r12,[r0,#0]
000040  ea21010c          BIC      r1,r1,r12
000044  6019              STR      r1,[r3,#0]
;;;151        
;;;152        /* Select the trigger for the selected external interrupts */
;;;153        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
000046  7941              LDRB     r1,[r0,#5]
000048  2910              CMP      r1,#0x10
00004a  d008              BEQ      |L7.94|
00004c  f1014180          ADD      r1,r1,#0x40000000
000050  f501319e          ADD      r1,r1,#0x13c00
;;;154        {
;;;155          /* Rising Falling edge */
;;;156          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
;;;157          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
;;;158        }
;;;159        else
;;;160        {
;;;161          tmp = (uint32_t)EXTI_BASE;
;;;162          tmp += EXTI_InitStruct->EXTI_Trigger;
;;;163    
;;;164          *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000054  680a              LDR      r2,[r1,#0]
000056  6800              LDR      r0,[r0,#0]
000058  4310              ORRS     r0,r0,r2
00005a  6008              STR      r0,[r1,#0]
;;;165        }
;;;166      }
;;;167      else
;;;168      {
;;;169        tmp += EXTI_InitStruct->EXTI_Mode;
;;;170    
;;;171        /* Disable the selected external lines */
;;;172        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
;;;173      }
;;;174    }
00005c  4770              BX       lr
                  |L7.94|
00005e  6811              LDR      r1,[r2,#0]            ;156
000060  f8d0c000          LDR      r12,[r0,#0]           ;156
000064  ea41010c          ORR      r1,r1,r12             ;156
000068  6011              STR      r1,[r2,#0]            ;156
00006a  6819              LDR      r1,[r3,#0]            ;157
00006c  6800              LDR      r0,[r0,#0]            ;157
00006e  4308              ORRS     r0,r0,r1              ;157
000070  6018              STR      r0,[r3,#0]            ;157
000072  4770              BX       lr
                  |L7.116|
000074  7900              LDRB     r0,[r0,#4]            ;169
000076  f1004080          ADD      r0,r0,#0x40000000     ;169
00007a  f500309e          ADD      r0,r0,#0x13c00        ;169
00007e  6802              LDR      r2,[r0,#0]            ;172
000080  ea220101          BIC      r1,r2,r1              ;172
000084  6001              STR      r1,[r0,#0]            ;172
000086  4770              BX       lr
;;;175    
                          ENDP

                  |L7.136|
                          DCD      0x40013c00
                  |L7.140|
                          DCD      0x40013c08

                          AREA ||i.EXTI_StructInit||, CODE, READONLY, ALIGN=1

                  EXTI_StructInit PROC
;;;181      */
;;;182    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
000000  2100              MOVS     r1,#0
;;;183    {
;;;184      EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
;;;185      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
000002  6001              STR      r1,[r0,#0]
000004  7101              STRB     r1,[r0,#4]
;;;186      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
000006  220c              MOVS     r2,#0xc
000008  7142              STRB     r2,[r0,#5]
;;;187      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
00000a  7181              STRB     r1,[r0,#6]
;;;188    }
00000c  4770              BX       lr
;;;189    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_exti.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_exti_c_28b3b60e____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___16_stm32f4xx_exti_c_28b3b60e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_exti_c_28b3b60e____REVSH|
#line 144
|__asm___16_stm32f4xx_exti_c_28b3b60e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
