; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_gpio.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_gpio.crf arm_hal\lib\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=1

                  GPIO_DeInit PROC
;;;126      */
;;;127    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129      /* Check the parameters */
;;;130      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;131    
;;;132      if (GPIOx == GPIOA)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13100          SUBS     r1,r1,#0x20000
00000a  d029              BEQ      |L1.96|
;;;133      {
;;;134        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
;;;135        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
;;;136      }
;;;137      else if (GPIOx == GPIOB)
00000c  f5b16180          SUBS     r1,r1,#0x400
000010  d030              BEQ      |L1.116|
;;;138      {
;;;139        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;140        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
;;;141      }
;;;142      else if (GPIOx == GPIOC)
000012  f5b16180          SUBS     r1,r1,#0x400
000016  d037              BEQ      |L1.136|
;;;143      {
;;;144        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
;;;145        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
;;;146      }
;;;147      else if (GPIOx == GPIOD)
000018  f5b16180          SUBS     r1,r1,#0x400
00001c  d03e              BEQ      |L1.156|
;;;148      {
;;;149        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
;;;150        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
;;;151      }
;;;152      else if (GPIOx == GPIOE)
00001e  f5b16180          SUBS     r1,r1,#0x400
000022  d045              BEQ      |L1.176|
;;;153      {
;;;154        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
;;;155        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
;;;156      }
;;;157      else if (GPIOx == GPIOF)
000024  f5b16180          SUBS     r1,r1,#0x400
000028  d04c              BEQ      |L1.196|
;;;158      {
;;;159        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
;;;160        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
;;;161      }
;;;162      else if (GPIOx == GPIOG)
00002a  f5b16180          SUBS     r1,r1,#0x400
00002e  d053              BEQ      |L1.216|
;;;163      {
;;;164        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
;;;165        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
;;;166      }
;;;167      else if (GPIOx == GPIOH)
000030  f5b16180          SUBS     r1,r1,#0x400
000034  d05a              BEQ      |L1.236|
;;;168      {
;;;169        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
;;;170        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
;;;171      }
;;;172    
;;;173      else if (GPIOx == GPIOI)
000036  f5b16180          SUBS     r1,r1,#0x400
00003a  d061              BEQ      |L1.256|
;;;174      {
;;;175        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
;;;176        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
;;;177      }
;;;178      else if (GPIOx == GPIOJ)
00003c  f5b16180          SUBS     r1,r1,#0x400
000040  d069              BEQ      |L1.278|
;;;179      {
;;;180        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
;;;181        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
;;;182      }
;;;183      else
;;;184      {
;;;185        if (GPIOx == GPIOK)
000042  f5b16180          SUBS     r1,r1,#0x400
;;;186        {
;;;187          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
;;;188          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
;;;189        }
;;;190      }
;;;191    }
000046  bf18              IT       NE
000048  bd10              POPNE    {r4,pc}
00004a  2101              MOVS     r1,#1                 ;187
00004c  0288              LSLS     r0,r1,#10             ;187
00004e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000052  e8bd4010          POP      {r4,lr}               ;188
000056  2100              MOVS     r1,#0                 ;188
000058  f44f6080          MOV      r0,#0x400             ;188
00005c  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.96|
000060  2101              MOVS     r1,#1                 ;134
000062  4608              MOV      r0,r1                 ;134
000064  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000068  2100              MOVS     r1,#0                 ;135
00006a  e8bd4010          POP      {r4,lr}               ;135
00006e  2001              MOVS     r0,#1                 ;135
000070  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.116|
000074  2101              MOVS     r1,#1                 ;139
000076  2002              MOVS     r0,#2                 ;139
000078  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00007c  2100              MOVS     r1,#0                 ;140
00007e  e8bd4010          POP      {r4,lr}               ;140
000082  2002              MOVS     r0,#2                 ;140
000084  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.136|
000088  2101              MOVS     r1,#1                 ;144
00008a  2004              MOVS     r0,#4                 ;144
00008c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000090  2100              MOVS     r1,#0                 ;145
000092  e8bd4010          POP      {r4,lr}               ;145
000096  2004              MOVS     r0,#4                 ;145
000098  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.156|
00009c  2101              MOVS     r1,#1                 ;149
00009e  2008              MOVS     r0,#8                 ;149
0000a0  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000a4  2100              MOVS     r1,#0                 ;150
0000a6  e8bd4010          POP      {r4,lr}               ;150
0000aa  2008              MOVS     r0,#8                 ;150
0000ac  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.176|
0000b0  2101              MOVS     r1,#1                 ;154
0000b2  2010              MOVS     r0,#0x10              ;154
0000b4  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000b8  2100              MOVS     r1,#0                 ;155
0000ba  e8bd4010          POP      {r4,lr}               ;155
0000be  2010              MOVS     r0,#0x10              ;155
0000c0  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.196|
0000c4  2101              MOVS     r1,#1                 ;159
0000c6  2020              MOVS     r0,#0x20              ;159
0000c8  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000cc  2100              MOVS     r1,#0                 ;160
0000ce  e8bd4010          POP      {r4,lr}               ;160
0000d2  2020              MOVS     r0,#0x20              ;160
0000d4  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.216|
0000d8  2101              MOVS     r1,#1                 ;164
0000da  2040              MOVS     r0,#0x40              ;164
0000dc  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000e0  2100              MOVS     r1,#0                 ;165
0000e2  e8bd4010          POP      {r4,lr}               ;165
0000e6  2040              MOVS     r0,#0x40              ;165
0000e8  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.236|
0000ec  2101              MOVS     r1,#1                 ;169
0000ee  2080              MOVS     r0,#0x80              ;169
0000f0  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000f4  2100              MOVS     r1,#0                 ;170
0000f6  e8bd4010          POP      {r4,lr}               ;170
0000fa  2080              MOVS     r0,#0x80              ;170
0000fc  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.256|
000100  2101              MOVS     r1,#1                 ;175
000102  0208              LSLS     r0,r1,#8              ;175
000104  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000108  e8bd4010          POP      {r4,lr}               ;176
00010c  2100              MOVS     r1,#0                 ;176
00010e  f44f7080          MOV      r0,#0x100             ;176
000112  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.278|
000116  2101              MOVS     r1,#1                 ;180
000118  0248              LSLS     r0,r1,#9              ;180
00011a  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00011e  e8bd4010          POP      {r4,lr}               ;181
000122  2100              MOVS     r1,#0                 ;181
000124  f44f7000          MOV      r0,#0x200             ;181
000128  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
;;;192    
                          ENDP


                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;201      */
;;;202    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d01f0          PUSH     {r4-r8}
;;;203    {
;;;204      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000004  2200              MOVS     r2,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;208      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;209      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;210      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;211    
;;;212      /* ------------------------- Configure the port pins ---------------- */
;;;213      /*-- GPIO Mode Configuration --*/
;;;214      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;215      {
;;;216        pos = ((uint32_t)0x01) << pinpos;
000006  2601              MOVS     r6,#1
;;;217        /* Get the port pins position */
;;;218        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;219    
;;;220        if (currentpin == pos)
;;;221        {
;;;222          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000008  2703              MOVS     r7,#3
                  |L2.10|
00000a  680b              LDR      r3,[r1,#0]            ;218
00000c  fa06fc02          LSL      r12,r6,r2             ;216
000010  ea03030c          AND      r3,r3,r12             ;218
000014  4563              CMP      r3,r12                ;220
000016  d138              BNE      |L2.138|
000018  6805              LDR      r5,[r0,#0]
00001a  0053              LSLS     r3,r2,#1
00001c  fa07f403          LSL      r4,r7,r3
000020  43a5              BICS     r5,r5,r4
000022  6005              STR      r5,[r0,#0]
;;;223          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000024  790d              LDRB     r5,[r1,#4]
000026  f8d08000          LDR      r8,[r0,#0]
00002a  409d              LSLS     r5,r5,r3
00002c  ea450508          ORR      r5,r5,r8
000030  6005              STR      r5,[r0,#0]
;;;224    
;;;225          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000032  790d              LDRB     r5,[r1,#4]
000034  2d01              CMP      r5,#1
000036  bf18              IT       NE
000038  2d02              CMPNE    r5,#2
00003a  d117              BNE      |L2.108|
;;;226          {
;;;227            /* Check Speed mode parameters */
;;;228            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;229    
;;;230            /* Speed mode configuration */
;;;231            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
00003c  6885              LDR      r5,[r0,#8]
00003e  43a5              BICS     r5,r5,r4
000040  6085              STR      r5,[r0,#8]
;;;232            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
000042  794d              LDRB     r5,[r1,#5]
000044  f8d08008          LDR      r8,[r0,#8]
000048  409d              LSLS     r5,r5,r3
00004a  ea450508          ORR      r5,r5,r8
00004e  6085              STR      r5,[r0,#8]
;;;233    
;;;234            /* Check Output mode parameters */
;;;235            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;236    
;;;237            /* Output mode configuration*/
;;;238            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
000050  6845              LDR      r5,[r0,#4]
000052  ea250c0c          BIC      r12,r5,r12
000056  f8c0c004          STR      r12,[r0,#4]
;;;239            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
00005a  f8d0c004          LDR      r12,[r0,#4]
00005e  798d              LDRB     r5,[r1,#6]
000060  4095              LSLS     r5,r5,r2
000062  b2ad              UXTH     r5,r5
000064  ea4c0c05          ORR      r12,r12,r5
000068  f8c0c004          STR      r12,[r0,#4]
                  |L2.108|
;;;240          }
;;;241    
;;;242          /* Pull-up Pull down resistor configuration*/
;;;243          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
00006c  f8d0c00c          LDR      r12,[r0,#0xc]
000070  ea2c0c04          BIC      r12,r12,r4
000074  f8c0c00c          STR      r12,[r0,#0xc]
;;;244          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
000078  f891c007          LDRB     r12,[r1,#7]
00007c  fa0cf303          LSL      r3,r12,r3
000080  f8d0c00c          LDR      r12,[r0,#0xc]
000084  ea43030c          ORR      r3,r3,r12
000088  60c3              STR      r3,[r0,#0xc]
                  |L2.138|
00008a  1c52              ADDS     r2,r2,#1
00008c  2a10              CMP      r2,#0x10              ;214
00008e  d3bc              BCC      |L2.10|
;;;245        }
;;;246      }
;;;247    }
000090  e8bd01f0          POP      {r4-r8}
000094  4770              BX       lr
;;;248    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;578      */
;;;579    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  074b              LSLS     r3,r1,#29
;;;580    {
;;;581      uint32_t temp = 0x00;
;;;582      uint32_t temp_2 = 0x00;
;;;583      
;;;584      /* Check the parameters */
;;;585      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;586      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;587      assert_param(IS_GPIO_AF(GPIO_AF));
;;;588      
;;;589      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;590      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  08c9              LSRS     r1,r1,#3
000008  eb000081          ADD      r0,r0,r1,LSL #2
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  f04f0c0f          MOV      r12,#0xf
000012  fa0cf303          LSL      r3,r12,r3
000016  4399              BICS     r1,r1,r3
000018  6201              STR      r1,[r0,#0x20]
;;;591      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00001a  6a01              LDR      r1,[r0,#0x20]
00001c  4311              ORRS     r1,r1,r2
;;;592      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00001e  6201              STR      r1,[r0,#0x20]
;;;593    }
000020  4770              BX       lr
;;;594    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;276      */
;;;277    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b081              SUB      sp,sp,#4
;;;278    {
;;;279      __IO uint32_t tmp = 0x00010000;
;;;280    
;;;281      /* Check the parameters */
;;;282      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;283      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;284    
;;;285      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;286      /* Set LCKK bit */
;;;287      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;288      /* Reset LCKK bit */
;;;289      GPIOx->LCKR =  GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;290      /* Set LCKK bit */
;;;291      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;292      /* Read LCKK bit*/
;;;293      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;294      /* Read LCKK bit*/
;;;295      tmp = GPIOx->LCKR;
000012  69c0              LDR      r0,[r0,#0x1c]
000014  9000              STR      r0,[sp,#0]
;;;296    }
000016  b001              ADD      sp,sp,#4
000018  4770              BX       lr
;;;297    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;348      */
;;;349    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6900              LDR      r0,[r0,#0x10]
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;353    
;;;354      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;355    }
000004  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;322      */
;;;323    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;324    {
;;;325      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;326    
;;;327      /* Check the parameters */
;;;328      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;329      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;330    
;;;331      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6912              LDR      r2,[r2,#0x10]
000006  420a              TST      r2,r1
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;334      }
;;;335      else
;;;336      {
;;;337        bitstatus = (uint8_t)Bit_RESET;
;;;338      }
;;;339      return bitstatus;
;;;340    }
00000c  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;391      */
;;;392    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  6940              LDR      r0,[r0,#0x14]
;;;393    {
;;;394      /* Check the parameters */
;;;395      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;396    
;;;397      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;398    }
000004  4770              BX       lr
;;;399    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;365      */
;;;366    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;367    {
;;;368      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;369    
;;;370      /* Check the parameters */
;;;371      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;372      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;373    
;;;374      if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6952              LDR      r2,[r2,#0x14]
000006  420a              TST      r2,r1
;;;375      {
;;;376        bitstatus = (uint8_t)Bit_SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;377      }
;;;378      else
;;;379      {
;;;380        bitstatus = (uint8_t)Bit_RESET;
;;;381      }
;;;382      return bitstatus;
;;;383    }
00000c  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;432      */
;;;433    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;434    {
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438    
;;;439      GPIOx->BSRRH = GPIO_Pin;
;;;440    }
000002  4770              BX       lr
;;;441    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;411      */
;;;412    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;413    {
;;;414      /* Check the parameters */
;;;415      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;416      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;417    
;;;418      GPIOx->BSRRL = GPIO_Pin;
;;;419    }
000002  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;253      */
;;;254    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;255    {
;;;256      /* Reset GPIO init structure parameters values */
;;;257      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;258      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;259      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
00000a  7141              STRB     r1,[r0,#5]
;;;260      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000c  7181              STRB     r1,[r0,#6]
;;;261      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000e  71c1              STRB     r1,[r0,#7]
;;;262    }
000010  4770              BX       lr
;;;263    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;495      */
;;;496    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;497    {
;;;498      /* Check the parameters */
;;;499      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;500    
;;;501      GPIOx->ODR ^= GPIO_Pin;
000002  4051              EORS     r1,r1,r2
000004  6141              STR      r1,[r0,#0x14]
;;;502    }
000006  4770              BX       lr
;;;503    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;479      */
;;;480    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  6141              STR      r1,[r0,#0x14]
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;484    
;;;485      GPIOx->ODR = PortVal;
;;;486    }
000002  4770              BX       lr
;;;487    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;454      */
;;;455    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  2a00              CMP      r2,#0
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;459      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;460      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;461    
;;;462      if (BitVal != Bit_RESET)
;;;463      {
;;;464        GPIOx->BSRRL = GPIO_Pin;
000002  bf14              ITE      NE
000004  8301              STRHNE   r1,[r0,#0x18]
;;;465      }
;;;466      else
;;;467      {
;;;468        GPIOx->BSRRH = GPIO_Pin ;
000006  8341              STRHEQ   r1,[r0,#0x1a]
;;;469      }
;;;470    }
000008  4770              BX       lr
;;;471    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 144
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
