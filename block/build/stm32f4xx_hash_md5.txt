; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_hash_md5.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_hash_md5.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_hash_md5.crf arm_hal\lib\stm32f4xx_hash_md5.c]
                          THUMB

                          AREA ||i.HASH_MD5||, CODE, READONLY, ALIGN=1

                  HASH_MD5 PROC
;;;92       */
;;;93     ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;94     {
000004  b08f              SUB      sp,sp,#0x3c
;;;95       HASH_InitTypeDef MD5_HASH_InitStructure;
;;;96       HASH_MsgDigest MD5_MessageDigest;
;;;97       __IO uint16_t nbvalidbitsdata = 0;
000006  f04f0900          MOV      r9,#0
00000a  4617              MOV      r7,r2                 ;94
00000c  460e              MOV      r6,r1                 ;94
00000e  4604              MOV      r4,r0                 ;94
000010  f8ad9034          STRH     r9,[sp,#0x34]
;;;98       uint32_t i = 0;
;;;99       __IO uint32_t counter = 0;
;;;100      uint32_t busystatus = 0;
;;;101      ErrorStatus status = SUCCESS;
;;;102      uint32_t inputaddr  = (uint32_t)Input;
;;;103      uint32_t outputaddr = (uint32_t)Output;
;;;104    
;;;105    
;;;106      /* Number of valid bits in last word of the Input data */
;;;107      nbvalidbitsdata = 8 * (Ilen % 4);
000014  0788              LSLS     r0,r1,#30
000016  0ec0              LSRS     r0,r0,#27
000018  464d              MOV      r5,r9                 ;98
00001a  f04f0801          MOV      r8,#1                 ;101
00001e  f8cd9030          STR      r9,[sp,#0x30]
000022  f8ad0034          STRH     r0,[sp,#0x34]
;;;108    
;;;109      /* HASH peripheral initialization */
;;;110      HASH_DeInit();
000026  f7fffffe          BL       HASH_DeInit
;;;111    
;;;112      /* HASH Configuration */
;;;113      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
00002a  2080              MOVS     r0,#0x80
00002c  e9cd0908          STRD     r0,r9,[sp,#0x20]
;;;114      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
;;;115      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000030  2020              MOVS     r0,#0x20
;;;116      HASH_Init(&MD5_HASH_InitStructure);
000032  900a              STR      r0,[sp,#0x28]
000034  a808              ADD      r0,sp,#0x20
000036  f7fffffe          BL       HASH_Init
;;;117    
;;;118      /* Configure the number of valid bits in last word of the data */
;;;119      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00003a  f8bd0034          LDRH     r0,[sp,#0x34]
00003e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;120    
;;;121      /* Write the Input block in the IN FIFO */
;;;122      for(i=0; i<Ilen; i+=4)
000042  2e00              CMP      r6,#0
000044  d906              BLS      |L1.84|
                  |L1.70|
;;;123      {
;;;124        HASH_DataIn(*(uint32_t*)inputaddr);
000046  6820              LDR      r0,[r4,#0]
000048  f7fffffe          BL       HASH_DataIn
00004c  1d24              ADDS     r4,r4,#4
00004e  1d2d              ADDS     r5,r5,#4
000050  42ae              CMP      r6,r5                 ;122
000052  d8f8              BHI      |L1.70|
                  |L1.84|
;;;125        inputaddr+=4;
;;;126      }
;;;127    
;;;128      /* Start the HASH processor */
;;;129      HASH_StartDigest();
000054  f7fffffe          BL       HASH_StartDigest
                  |L1.88|
;;;130    
;;;131      /* wait until the Busy flag is RESET */
;;;132      do
;;;133      {
;;;134        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000058  2008              MOVS     r0,#8
00005a  f7fffffe          BL       HASH_GetFlagStatus
;;;135        counter++;
00005e  990c              LDR      r1,[sp,#0x30]
000060  1c49              ADDS     r1,r1,#1
;;;136      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000062  910c              STR      r1,[sp,#0x30]
000064  f5b13f80          CMP      r1,#0x10000
000068  d002              BEQ      |L1.112|
00006a  2800              CMP      r0,#0
00006c  d1f4              BNE      |L1.88|
00006e  e004              B        |L1.122|
                  |L1.112|
;;;137    
;;;138      if (busystatus != RESET)
000070  2800              CMP      r0,#0
;;;139      {
;;;140         status = ERROR;
000072  bf18              IT       NE
000074  f04f0800          MOVNE    r8,#0
000078  d10e              BNE      |L1.152|
                  |L1.122|
;;;141      }
;;;142      else
;;;143      {
;;;144        /* Read the message digest */
;;;145        HASH_GetDigest(&MD5_MessageDigest);
00007a  4668              MOV      r0,sp
00007c  f7fffffe          BL       HASH_GetDigest
;;;146        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
000080  9800              LDR      r0,[sp,#0]
000082  ba00              REV      r0,r0
;;;147        outputaddr+=4;
;;;148        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000084  6038              STR      r0,[r7,#0]
000086  9801              LDR      r0,[sp,#4]
000088  ba00              REV      r0,r0
;;;149        outputaddr+=4;
;;;150        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
00008a  6078              STR      r0,[r7,#4]
00008c  9802              LDR      r0,[sp,#8]
00008e  ba00              REV      r0,r0
;;;151        outputaddr+=4;
;;;152        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
000090  60b8              STR      r0,[r7,#8]
000092  9803              LDR      r0,[sp,#0xc]
000094  ba00              REV      r0,r0
000096  60f8              STR      r0,[r7,#0xc]
                  |L1.152|
;;;153      }
;;;154      return status; 
;;;155    }
000098  b00f              ADD      sp,sp,#0x3c
00009a  4640              MOV      r0,r8                 ;154
00009c  e8bd83f0          POP      {r4-r9,pc}
;;;156    
                          ENDP


                          AREA ||i.HMAC_MD5||, CODE, READONLY, ALIGN=1

                  HMAC_MD5 PROC
;;;167      */
;;;168    ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;169                         uint32_t Ilen, uint8_t Output[16])
;;;170    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4606              MOV      r6,r0
;;;171      HASH_InitTypeDef MD5_HASH_InitStructure;
;;;172      HASH_MsgDigest MD5_MessageDigest;
;;;173      __IO uint16_t nbvalidbitsdata = 0;
000008  2000              MOVS     r0,#0
00000a  f8ddb060          LDR      r11,[sp,#0x60]
00000e  4699              MOV      r9,r3                 ;170
000010  4617              MOV      r7,r2                 ;170
000012  460c              MOV      r4,r1                 ;170
000014  f8ad0038          STRH     r0,[sp,#0x38]
;;;174      __IO uint16_t nbvalidbitskey = 0;
000018  f8ad0004          STRH     r0,[sp,#4]
;;;175      uint32_t i = 0;
00001c  4680              MOV      r8,r0
;;;176      __IO uint32_t counter = 0;
;;;177      uint32_t busystatus = 0;
;;;178      ErrorStatus status = SUCCESS;
;;;179      uint32_t keyaddr    = (uint32_t)Key;
;;;180      uint32_t inputaddr  = (uint32_t)Input;
;;;181      uint32_t outputaddr = (uint32_t)Output;
;;;182    
;;;183      /* Number of valid bits in last word of the Input data */
;;;184      nbvalidbitsdata = 8 * (Ilen % 4);
00001e  9000              STR      r0,[sp,#0]
000020  0798              LSLS     r0,r3,#30
000022  0ec0              LSRS     r0,r0,#27
000024  f04f0a01          MOV      r10,#1                ;178
000028  4635              MOV      r5,r6                 ;179
00002a  f8ad0038          STRH     r0,[sp,#0x38]
;;;185    
;;;186      /* Number of valid bits in last word of the Key */
;;;187      nbvalidbitskey = 8 * (Keylen % 4);
00002e  0788              LSLS     r0,r1,#30
000030  0ec0              LSRS     r0,r0,#27
000032  f8ad0004          STRH     r0,[sp,#4]
;;;188       
;;;189      /* HASH peripheral initialization */
;;;190      HASH_DeInit();
000036  f7fffffe          BL       HASH_DeInit
;;;191    
;;;192      /* HASH Configuration */
;;;193      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
00003a  2080              MOVS     r0,#0x80
;;;194      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00003c  900a              STR      r0,[sp,#0x28]
00003e  2040              MOVS     r0,#0x40
;;;195      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000040  900b              STR      r0,[sp,#0x2c]
000042  2020              MOVS     r0,#0x20
;;;196      if(Keylen > 64)
000044  900c              STR      r0,[sp,#0x30]
000046  2c40              CMP      r4,#0x40
;;;197      {
;;;198        /* HMAC long Key */
;;;199        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
000048  bf8c              ITE      HI
00004a  f44f3080          MOVHI    r0,#0x10000
;;;200      }
;;;201      else
;;;202      {
;;;203        /* HMAC short Key */
;;;204        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
00004e  2000              MOVLS    r0,#0
;;;205      }
;;;206      HASH_Init(&MD5_HASH_InitStructure);
000050  900d              STR      r0,[sp,#0x34]
000052  a80a              ADD      r0,sp,#0x28
000054  f7fffffe          BL       HASH_Init
;;;207    
;;;208      /* Configure the number of valid bits in last word of the Key */
;;;209      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
000058  f8bd0004          LDRH     r0,[sp,#4]
00005c  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;210    
;;;211      /* Write the Key */
;;;212      for(i=0; i<Keylen; i+=4)
000060  2c00              CMP      r4,#0
000062  d907              BLS      |L2.116|
                  |L2.100|
;;;213      {
;;;214        HASH_DataIn(*(uint32_t*)keyaddr);
000064  6828              LDR      r0,[r5,#0]
000066  f7fffffe          BL       HASH_DataIn
00006a  1d2d              ADDS     r5,r5,#4
00006c  f1080804          ADD      r8,r8,#4
000070  4544              CMP      r4,r8                 ;212
000072  d8f7              BHI      |L2.100|
                  |L2.116|
;;;215        keyaddr+=4;
;;;216      }
;;;217      
;;;218      /* Start the HASH processor */
;;;219      HASH_StartDigest();
000074  f7fffffe          BL       HASH_StartDigest
                  |L2.120|
;;;220    
;;;221      /* wait until the Busy flag is RESET */
;;;222      do
;;;223      {
;;;224        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000078  2008              MOVS     r0,#8
00007a  f7fffffe          BL       HASH_GetFlagStatus
;;;225        counter++;
00007e  9900              LDR      r1,[sp,#0]
000080  1c49              ADDS     r1,r1,#1
;;;226      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000082  9100              STR      r1,[sp,#0]
000084  f5b13f80          CMP      r1,#0x10000
000088  d002              BEQ      |L2.144|
00008a  2800              CMP      r0,#0
00008c  d1f4              BNE      |L2.120|
00008e  e001              B        |L2.148|
                  |L2.144|
;;;227    
;;;228      if (busystatus != RESET)
000090  2800              CMP      r0,#0
000092  d13d              BNE      |L2.272|
                  |L2.148|
;;;229      {
;;;230         status = ERROR;
;;;231      }
;;;232      else
;;;233      {
;;;234        /* Configure the number of valid bits in last word of the Input data */
;;;235        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
000094  f8bd0038          LDRH     r0,[sp,#0x38]
000098  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;236    
;;;237        /* Write the Input block in the IN FIFO */
;;;238        for(i=0; i<Ilen; i+=4)
00009c  2500              MOVS     r5,#0
00009e  f1b90f00          CMP      r9,#0
0000a2  d906              BLS      |L2.178|
                  |L2.164|
;;;239        {
;;;240          HASH_DataIn(*(uint32_t*)inputaddr);
0000a4  6838              LDR      r0,[r7,#0]
0000a6  f7fffffe          BL       HASH_DataIn
0000aa  1d2d              ADDS     r5,r5,#4
0000ac  1d3f              ADDS     r7,r7,#4
0000ae  45a9              CMP      r9,r5                 ;238
0000b0  d8f8              BHI      |L2.164|
                  |L2.178|
;;;241          inputaddr+=4;
;;;242        }
;;;243    
;;;244        /* Start the HASH processor */
;;;245        HASH_StartDigest();
0000b2  f7fffffe          BL       HASH_StartDigest
;;;246    
;;;247        /* wait until the Busy flag is RESET */
;;;248        counter =0;
0000b6  2700              MOVS     r7,#0
0000b8  9700              STR      r7,[sp,#0]
                  |L2.186|
;;;249        do
;;;250        {
;;;251           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000ba  2008              MOVS     r0,#8
0000bc  f7fffffe          BL       HASH_GetFlagStatus
;;;252           counter++;
0000c0  9900              LDR      r1,[sp,#0]
0000c2  1c49              ADDS     r1,r1,#1
;;;253        }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0000c4  9100              STR      r1,[sp,#0]
0000c6  f5b13f80          CMP      r1,#0x10000
0000ca  d002              BEQ      |L2.210|
0000cc  2800              CMP      r0,#0
0000ce  d1f4              BNE      |L2.186|
0000d0  e000              B        |L2.212|
                  |L2.210|
;;;254    
;;;255        if (busystatus != RESET)
0000d2  b9e8              CBNZ     r0,|L2.272|
                  |L2.212|
;;;256        {
;;;257          status = ERROR;
;;;258        }
;;;259        else
;;;260        {  
;;;261          /* Configure the number of valid bits in last word of the Key */
;;;262          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0000d4  f8bd0004          LDRH     r0,[sp,#4]
0000d8  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;263    
;;;264          /* Write the Key */
;;;265          keyaddr = (uint32_t)Key;
;;;266          for(i=0; i<Keylen; i+=4)
0000dc  2500              MOVS     r5,#0
0000de  2c00              CMP      r4,#0
0000e0  d906              BLS      |L2.240|
                  |L2.226|
;;;267          {
;;;268            HASH_DataIn(*(uint32_t*)keyaddr);
0000e2  6830              LDR      r0,[r6,#0]
0000e4  f7fffffe          BL       HASH_DataIn
0000e8  1d2d              ADDS     r5,r5,#4
0000ea  1d36              ADDS     r6,r6,#4
0000ec  42ac              CMP      r4,r5                 ;266
0000ee  d8f8              BHI      |L2.226|
                  |L2.240|
;;;269            keyaddr+=4;
;;;270          }
;;;271      
;;;272           /* Start the HASH processor */
;;;273           HASH_StartDigest();
0000f0  f7fffffe          BL       HASH_StartDigest
;;;274    
;;;275           /* wait until the Busy flag is RESET */
;;;276           counter =0;
0000f4  9700              STR      r7,[sp,#0]
                  |L2.246|
;;;277           do
;;;278           {
;;;279              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000f6  2008              MOVS     r0,#8
0000f8  f7fffffe          BL       HASH_GetFlagStatus
;;;280              counter++;
0000fc  9900              LDR      r1,[sp,#0]
0000fe  1c49              ADDS     r1,r1,#1
;;;281          }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000100  9100              STR      r1,[sp,#0]
000102  f5b13f80          CMP      r1,#0x10000
000106  d002              BEQ      |L2.270|
000108  2800              CMP      r0,#0
00010a  d1f4              BNE      |L2.246|
00010c  e003              B        |L2.278|
                  |L2.270|
;;;282    
;;;283          if (busystatus != RESET)
00010e  b110              CBZ      r0,|L2.278|
                  |L2.272|
;;;284          {
;;;285             status = ERROR;
000110  f04f0a00          MOV      r10,#0
000114  e012              B        |L2.316|
                  |L2.278|
;;;286          }
;;;287          else
;;;288          {
;;;289             /* Read the message digest */
;;;290             HASH_GetDigest(&MD5_MessageDigest);
000116  a802              ADD      r0,sp,#8
000118  f7fffffe          BL       HASH_GetDigest
;;;291             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
00011c  9802              LDR      r0,[sp,#8]
00011e  ba00              REV      r0,r0
;;;292             outputaddr+=4;
;;;293             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000120  f8cb0000          STR      r0,[r11,#0]
000124  9803              LDR      r0,[sp,#0xc]
000126  ba00              REV      r0,r0
;;;294             outputaddr+=4;
;;;295             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
000128  f8cb0004          STR      r0,[r11,#4]
00012c  9804              LDR      r0,[sp,#0x10]
00012e  ba00              REV      r0,r0
;;;296             outputaddr+=4;
;;;297             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
000130  f8cb0008          STR      r0,[r11,#8]
000134  9805              LDR      r0,[sp,#0x14]
000136  ba00              REV      r0,r0
000138  f8cb000c          STR      r0,[r11,#0xc]
                  |L2.316|
;;;298          }
;;;299        }
;;;300      }
;;;301      return status;  
;;;302    }
00013c  b00f              ADD      sp,sp,#0x3c
00013e  4650              MOV      r0,r10                ;301
000140  e8bd8ff0          POP      {r4-r11,pc}
;;;303    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_hash_md5.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH|
#line 144
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
