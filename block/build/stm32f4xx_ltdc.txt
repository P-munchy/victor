; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_ltdc.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_ltdc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_ltdc.crf arm_hal\lib\stm32f4xx_ltdc.c]
                          THUMB

                          AREA ||i.LTDC_CLUTCmd||, CODE, READONLY, ALIGN=2

                  LTDC_CLUTCmd PROC
;;;624    
;;;625    void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;626    {
;;;627      /* Check the parameters */
;;;628      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;629    
;;;630      if (NewState != DISABLE)
;;;631      {
;;;632        /* Enable CLUT by setting CLUTEN bit */
;;;633        LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
;;;634      }
;;;635      else
;;;636      {
;;;637        /* Disable CLUT by clearing CLUTEN bit */
;;;638        LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
000002  6801              LDR      r1,[r0,#0]
000004  bf14              ITE      NE                    ;633
000006  f0410110          ORRNE    r1,r1,#0x10           ;633
00000a  f0210110          BICEQ    r1,r1,#0x10
00000e  6001              STR      r1,[r0,#0]
;;;639      }
;;;640      
;;;641      /* Reload shadow register */
;;;642      LTDC->SRCR = LTDC_IMReload;
000010  4901              LDR      r1,|L1.24|
000012  2001              MOVS     r0,#1
000014  6008              STR      r0,[r1,#0]
;;;643    }
000016  4770              BX       lr
;;;644    
                          ENDP

                  |L1.24|
                          DCD      0x40016824

                          AREA ||i.LTDC_CLUTInit||, CODE, READONLY, ALIGN=1

                  LTDC_CLUTInit PROC
;;;653    
;;;654    void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
000000  688a              LDR      r2,[r1,#8]
;;;655    {  
;;;656      uint32_t green = 0;
;;;657      uint32_t red = 0;
;;;658      uint32_t clutadd = 0;
;;;659    
;;;660      /* Check the parameters */
;;;661      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_CLUTAdress));
;;;662      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
;;;663      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
;;;664      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
;;;665        
;;;666      /* Specifies the CLUT address and RGB value */
;;;667      green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
;;;668      red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
;;;669      clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
000002  f891c000          LDRB     r12,[r1,#0]
000006  0213              LSLS     r3,r2,#8              ;667
000008  898a              LDRH     r2,[r1,#0xc]          ;668
;;;670      LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
00000a  6849              LDR      r1,[r1,#4]
00000c  ea434202          ORR      r2,r3,r2,LSL #16
000010  ea41610c          ORR      r1,r1,r12,LSL #24
000014  4311              ORRS     r1,r1,r2
000016  6401              STR      r1,[r0,#0x40]
;;;671                                  green | red);
;;;672    }
000018  4770              BX       lr
;;;673    
                          ENDP


                          AREA ||i.LTDC_CLUTStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_CLUTStructInit PROC
;;;680    
;;;681    void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
000000  2100              MOVS     r1,#0
;;;682    {
;;;683      /*!< Initialize the CLUT adress and RGB values */
;;;684      LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
;;;685      LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;686      LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;687      LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;688    }
00000a  4770              BX       lr
;;;689    
                          ENDP


                          AREA ||i.LTDC_ClearFlag||, CODE, READONLY, ALIGN=2

                  LTDC_ClearFlag PROC
;;;1022     */
;;;1023   void LTDC_ClearFlag(uint32_t LTDC_FLAG)
000000  4901              LDR      r1,|L4.8|
;;;1024   {
;;;1025     /* Check the parameters */
;;;1026     assert_param(IS_LTDC_FLAG(LTDC_FLAG));
;;;1027   
;;;1028     /* Clear the corresponding LTDC flag */
;;;1029     LTDC->ICR = (uint32_t)LTDC_FLAG;
000002  6008              STR      r0,[r1,#0]
;;;1030   }
000004  4770              BX       lr
;;;1031   
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x4001683c

                          AREA ||i.LTDC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  LTDC_ClearITPendingBit PROC
;;;1079     */
;;;1080   void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
000000  4901              LDR      r1,|L5.8|
;;;1081   {
;;;1082     /* Check the parameters */
;;;1083     assert_param(IS_LTDC_IT(LTDC_IT));
;;;1084   
;;;1085     /* Clear the corresponding LTDC Interrupt */
;;;1086     LTDC->ICR = (uint32_t)LTDC_IT;
000002  6008              STR      r0,[r1,#0]
;;;1087   }
000004  4770              BX       lr
;;;1088   /**
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x4001683c

                          AREA ||i.LTDC_Cmd||, CODE, READONLY, ALIGN=2

                  LTDC_Cmd PROC
;;;231    
;;;232    void LTDC_Cmd(FunctionalState NewState)
000000  4904              LDR      r1,|L6.20|
;;;233    {
;;;234      /* Check the parameters */
;;;235      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;236    
;;;237      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;238      {
;;;239        /* Enable LTDC by setting LTDCEN bit */
;;;240        LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
;;;241      }
;;;242      else
;;;243      {
;;;244        /* Disable LTDC by clearing LTDCEN bit */
;;;245        LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
000004  6808              LDR      r0,[r1,#0]
000006  bf14              ITE      NE                    ;240
000008  f0400001          ORRNE    r0,r0,#1              ;240
00000c  f0200001          BICEQ    r0,r0,#1
000010  6008              STR      r0,[r1,#0]            ;240
;;;246      }
;;;247    }
000012  4770              BX       lr
;;;248    
                          ENDP

                  |L6.20|
                          DCD      0x40016818

                          AREA ||i.LTDC_ColorKeyingConfig||, CODE, READONLY, ALIGN=2

                  LTDC_ColorKeyingConfig PROC
;;;567    
;;;568    void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
000000  b1b2              CBZ      r2,|L7.48|
;;;569    { 
;;;570      uint32_t ckgreen = 0;
;;;571      uint32_t ckred = 0;
;;;572    
;;;573      /* Check the parameters */
;;;574      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;575      assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
;;;576      assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
;;;577      assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
;;;578      
;;;579      if (NewState != DISABLE)
;;;580      {
;;;581        /* Enable LTDC color keying by setting COLKEN bit */
;;;582        LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
000002  6802              LDR      r2,[r0,#0]
000004  f0420202          ORR      r2,r2,#2
000008  6002              STR      r2,[r0,#0]
;;;583        
;;;584        /* Sets the color keying values */
;;;585        ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
00000a  684a              LDR      r2,[r1,#4]
;;;586        ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
;;;587        LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
00000c  f8d0c00c          LDR      r12,[r0,#0xc]
000010  0213              LSLS     r3,r2,#8              ;585
000012  890a              LDRH     r2,[r1,#8]            ;586
000014  f00c4c7f          AND      r12,r12,#0xff000000
000018  f8c0c00c          STR      r12,[r0,#0xc]
;;;588        LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
00001c  f8d0c00c          LDR      r12,[r0,#0xc]
000020  6809              LDR      r1,[r1,#0]
000022  ea434202          ORR      r2,r3,r2,LSL #16
000026  ea4c0101          ORR      r1,r12,r1
00002a  4311              ORRS     r1,r1,r2
00002c  60c1              STR      r1,[r0,#0xc]
00002e  e003              B        |L7.56|
                  |L7.48|
;;;589      }
;;;590      else
;;;591      {
;;;592        /* Disable LTDC color keying by clearing COLKEN bit */
;;;593        LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
000030  6801              LDR      r1,[r0,#0]
000032  f0210102          BIC      r1,r1,#2
000036  6001              STR      r1,[r0,#0]
                  |L7.56|
;;;594      }
;;;595      
;;;596      /* Reload shadow register */
;;;597      LTDC->SRCR = LTDC_IMReload;
000038  4901              LDR      r1,|L7.64|
00003a  2001              MOVS     r0,#1
00003c  6008              STR      r0,[r1,#0]
;;;598    }
00003e  4770              BX       lr
;;;599    
                          ENDP

                  |L7.64|
                          DCD      0x40016824

                          AREA ||i.LTDC_ColorKeyingStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_ColorKeyingStructInit PROC
;;;606    
;;;607    void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
000000  2100              MOVS     r1,#0
;;;608    {
;;;609      /*!< Initialize the color keying values */
;;;610      LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
;;;611      LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;612      LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
000004  6041              STR      r1,[r0,#4]
000006  6081              STR      r1,[r0,#8]
;;;613    }
000008  4770              BX       lr
;;;614    
                          ENDP


                          AREA ||i.LTDC_DeInit||, CODE, READONLY, ALIGN=1

                  LTDC_DeInit PROC
;;;122    
;;;123    void LTDC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125      /* Enable LTDC reset state */
;;;126      RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0688              LSLS     r0,r1,#26
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;127      /* Release LTDC from reset state */
;;;128      RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f04f6080          MOV      r0,#0x4000000
000014  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;129    }
;;;130    
                          ENDP


                          AREA ||i.LTDC_DitherCmd||, CODE, READONLY, ALIGN=2

                  LTDC_DitherCmd PROC
;;;255    
;;;256    void LTDC_DitherCmd(FunctionalState NewState)
000000  4904              LDR      r1,|L10.20|
;;;257    {
;;;258      /* Check the parameters */
;;;259      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;260    
;;;261      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;262      {
;;;263        /* Enable Dither by setting DTEN bit */
;;;264        LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
;;;265      }
;;;266      else
;;;267      {
;;;268        /* Disable Dither by clearing DTEN bit */
;;;269        LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
000004  6808              LDR      r0,[r1,#0]
000006  bf14              ITE      NE                    ;264
000008  f4403080          ORRNE    r0,r0,#0x10000        ;264
00000c  f4203080          BICEQ    r0,r0,#0x10000
000010  6008              STR      r0,[r1,#0]            ;264
;;;270      }
;;;271    }
000012  4770              BX       lr
;;;272    
                          ENDP

                  |L10.20|
                          DCD      0x40016818

                          AREA ||i.LTDC_GetCDStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetCDStatus PROC
;;;540    
;;;541    FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
000000  4902              LDR      r1,|L11.12|
;;;542    {
;;;543      FlagStatus bitstatus;
;;;544    
;;;545      /* Check the parameters */
;;;546      assert_param(IS_LTDC_GET_CD(LTDC_CD));
;;;547    
;;;548      if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
000002  6809              LDR      r1,[r1,#0]
000004  4008              ANDS     r0,r0,r1
;;;549      {
;;;550        bitstatus = SET;
000006  bf18              IT       NE
000008  2001              MOVNE    r0,#1
;;;551      }
;;;552      else
;;;553      {
;;;554        bitstatus = RESET;
;;;555      }
;;;556      return bitstatus;
;;;557    }
00000a  4770              BX       lr
;;;558    
                          ENDP

                  |L11.12|
                          DCD      0x40016848

                          AREA ||i.LTDC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetFlagStatus PROC
;;;994      */
;;;995    FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
000000  4a03              LDR      r2,|L12.16|
;;;996    {
000002  4601              MOV      r1,r0
;;;997      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;998    
;;;999      /* Check the parameters */
;;;1000     assert_param(IS_LTDC_FLAG(LTDC_FLAG));
;;;1001   
;;;1002     if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
;;;1003     {
;;;1004       bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;1005     }
;;;1006     else
;;;1007     {
;;;1008       bitstatus = RESET;
;;;1009     }
;;;1010     return bitstatus;
;;;1011   }
00000e  4770              BX       lr
;;;1012   
                          ENDP

                  |L12.16|
                          DCD      0x40016838

                          AREA ||i.LTDC_GetITStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetITStatus PROC
;;;1041     */
;;;1042   ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
000000  4a06              LDR      r2,|L13.28|
;;;1043   {
;;;1044     ITStatus bitstatus = RESET;
000002  2100              MOVS     r1,#0
;;;1045   
;;;1046     /* Check the parameters */
;;;1047     assert_param(IS_LTDC_IT(LTDC_IT));
;;;1048   
;;;1049     if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
000004  6812              LDR      r2,[r2,#0]
000006  4202              TST      r2,r0
;;;1050     {
;;;1051       bitstatus = SET;
000008  bf18              IT       NE
00000a  2101              MOVNE    r1,#1
;;;1052     }
;;;1053     else
;;;1054     {
;;;1055       bitstatus = RESET;
;;;1056     }
;;;1057   
;;;1058     if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
00000c  4a04              LDR      r2,|L13.32|
00000e  6812              LDR      r2,[r2,#0]
000010  4202              TST      r2,r0
000012  bf16              ITET     NE
000014  2900              CMPNE    r1,#0
;;;1059     {
;;;1060       bitstatus = SET;
;;;1061     }
;;;1062     else
;;;1063     {
;;;1064       bitstatus = RESET;
000016  2000              MOVEQ    r0,#0
000018  2001              MOVNE    r0,#1                 ;1060
;;;1065     }
;;;1066     return bitstatus;
;;;1067   }
00001a  4770              BX       lr
;;;1068   
                          ENDP

                  |L13.28|
                          DCD      0x40016838
                  |L13.32|
                          DCD      0x40016834

                          AREA ||i.LTDC_GetPosStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetPosStatus PROC
;;;504    
;;;505    LTDC_PosTypeDef LTDC_GetPosStatus(void)
000000  4905              LDR      r1,|L14.24|
;;;506    {
;;;507      LTDC_PosTypeDef LTDC_Pos_InitStruct;
;;;508    
;;;509      LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
000002  680a              LDR      r2,[r1,#0]
000004  2200              MOVS     r2,#0
000006  600a              STR      r2,[r1,#0]
;;;510    
;;;511      LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
000008  680a              LDR      r2,[r1,#0]
;;;512      LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
00000a  6809              LDR      r1,[r1,#0]
00000c  0c12              LSRS     r2,r2,#16             ;511
00000e  b289              UXTH     r1,r1
000010  e9c02100          STRD     r2,r1,[r0,#0]
;;;513    
;;;514      return LTDC_Pos_InitStruct;
;;;515    }
000014  4770              BX       lr
;;;516    
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      0x40016844

                          AREA ||i.LTDC_GetRGBWidth||, CODE, READONLY, ALIGN=2

                  LTDC_GetRGBWidth PROC
;;;279    
;;;280    LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
000000  4908              LDR      r1,|L15.36|
;;;281    {
;;;282      LTDC_RGBTypeDef LTDC_RGB_InitStruct;
;;;283    
;;;284      LTDC->GCR &= (uint32_t)GCR_MASK;
000002  680a              LDR      r2,[r1,#0]
000004  4b08              LDR      r3,|L15.40|
000006  401a              ANDS     r2,r2,r3
000008  600a              STR      r2,[r1,#0]
;;;285    
;;;286      LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
00000a  680a              LDR      r2,[r1,#0]
;;;287      LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
00000c  680b              LDR      r3,[r1,#0]
00000e  f3c21202          UBFX     r2,r2,#4,#3           ;286
;;;288      LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
000012  6809              LDR      r1,[r1,#0]
000014  f3c32302          UBFX     r3,r3,#8,#3           ;287
000018  f3c13102          UBFX     r1,r1,#12,#3
;;;289    
;;;290      return LTDC_RGB_InitStruct;
00001c  6002              STR      r2,[r0,#0]
00001e  e9c03101          STRD     r3,r1,[r0,#4]
;;;291    }
000022  4770              BX       lr
;;;292    
                          ENDP

                  |L15.36|
                          DCD      0x40016818
                  |L15.40|
                          DCD      0x0ffe888f

                          AREA ||i.LTDC_ITConfig||, CODE, READONLY, ALIGN=2

                  LTDC_ITConfig PROC
;;;968      */
;;;969    void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L16.20|
;;;970    {
;;;971      /* Check the parameters */
;;;972      assert_param(IS_LTDC_IT(LTDC_IT));
;;;973      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;974    
;;;975      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;976      {
;;;977        LTDC->IER |= LTDC_IT;
;;;978      }
;;;979      else
;;;980      {
;;;981        LTDC->IER &= (uint32_t)~LTDC_IT;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;977
000008  4308              ORRNE    r0,r0,r1              ;977
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;977
;;;982      }
;;;983    }
000010  4770              BX       lr
;;;984    
                          ENDP

000012  0000              DCW      0x0000
                  |L16.20|
                          DCD      0x40016834

                          AREA ||i.LTDC_Init||, CODE, READONLY, ALIGN=2

                  LTDC_Init PROC
;;;139    
;;;140    void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
000000  4a2d              LDR      r2,|L17.184|
;;;141    {
000002  b410              PUSH     {r4}
;;;142      uint32_t horizontalsync = 0;
;;;143      uint32_t accumulatedHBP = 0;
;;;144      uint32_t accumulatedactiveW = 0;
;;;145      uint32_t totalwidth = 0;
;;;146      uint32_t backgreen = 0;
;;;147      uint32_t backred = 0;
;;;148    
;;;149      /* Check function parameters */
;;;150      assert_param(IS_LTDC_HSYNC(LTDC_InitStruct->LTDC_HorizontalSync));
;;;151      assert_param(IS_LTDC_VSYNC(LTDC_InitStruct->LTDC_VerticalSync));
;;;152      assert_param(IS_LTDC_AHBP(LTDC_InitStruct->LTDC_AccumulatedHBP));
;;;153      assert_param(IS_LTDC_AVBP(LTDC_InitStruct->LTDC_AccumulatedVBP));
;;;154      assert_param(IS_LTDC_AAH(LTDC_InitStruct->LTDC_AccumulatedActiveH));
;;;155      assert_param(IS_LTDC_AAW(LTDC_InitStruct->LTDC_AccumulatedActiveW));
;;;156      assert_param(IS_LTDC_TOTALH(LTDC_InitStruct->LTDC_TotalHeigh));
;;;157      assert_param(IS_LTDC_TOTALW(LTDC_InitStruct->LTDC_TotalWidth));
;;;158      assert_param(IS_LTDC_HSPOL(LTDC_InitStruct->LTDC_HSPolarity));
;;;159      assert_param(IS_LTDC_VSPOL(LTDC_InitStruct->LTDC_VSPolarity));
;;;160      assert_param(IS_LTDC_DEPOL(LTDC_InitStruct->LTDC_DEPolarity));
;;;161      assert_param(IS_LTDC_PCPOL(LTDC_InitStruct->LTDC_PCPolarity));
;;;162      assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
;;;163      assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
;;;164      assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));
;;;165    
;;;166      /* Sets Synchronization size */
;;;167      LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
000004  6813              LDR      r3,[r2,#0]
000006  492d              LDR      r1,|L17.188|
000008  400b              ANDS     r3,r3,r1
00000a  6013              STR      r3,[r2,#0]
;;;168      horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
00000c  8a03              LDRH     r3,[r0,#0x10]
;;;169      LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
00000e  f8d2c000          LDR      r12,[r2,#0]
000012  6944              LDR      r4,[r0,#0x14]
000014  ea4c0c04          ORR      r12,r12,r4
000018  ea4c4303          ORR      r3,r12,r3,LSL #16
00001c  6013              STR      r3,[r2,#0]
;;;170    
;;;171      /* Sets Accumulated Back porch */
;;;172      LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
00001e  1d12              ADDS     r2,r2,#4
000020  6813              LDR      r3,[r2,#0]
000022  400b              ANDS     r3,r3,r1
000024  6013              STR      r3,[r2,#0]
;;;173      accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
000026  8b03              LDRH     r3,[r0,#0x18]
;;;174      LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
000028  f8d2c000          LDR      r12,[r2,#0]
00002c  69c4              LDR      r4,[r0,#0x1c]
00002e  ea4c0c04          ORR      r12,r12,r4
000032  ea4c4303          ORR      r3,r12,r3,LSL #16
000036  6013              STR      r3,[r2,#0]
;;;175    
;;;176      /* Sets Accumulated Active Width */
;;;177      LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
000038  1d12              ADDS     r2,r2,#4
00003a  6813              LDR      r3,[r2,#0]
00003c  400b              ANDS     r3,r3,r1
00003e  6013              STR      r3,[r2,#0]
;;;178      accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
000040  8c03              LDRH     r3,[r0,#0x20]
;;;179      LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
000042  f8d2c000          LDR      r12,[r2,#0]
000046  6a44              LDR      r4,[r0,#0x24]
000048  ea4c0c04          ORR      r12,r12,r4
00004c  ea4c4303          ORR      r3,r12,r3,LSL #16
000050  6013              STR      r3,[r2,#0]
;;;180    
;;;181      /* Sets Total Width */
;;;182      LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
000052  1d12              ADDS     r2,r2,#4
000054  6813              LDR      r3,[r2,#0]
000056  4019              ANDS     r1,r1,r3
000058  6011              STR      r1,[r2,#0]
;;;183      totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
00005a  8d01              LDRH     r1,[r0,#0x28]
;;;184      LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
00005c  6813              LDR      r3,[r2,#0]
00005e  f8d0c02c          LDR      r12,[r0,#0x2c]
000062  ea43030c          ORR      r3,r3,r12
000066  ea434101          ORR      r1,r3,r1,LSL #16
00006a  6011              STR      r1,[r2,#0]
;;;185    
;;;186      LTDC->GCR &= (uint32_t)GCR_MASK;
00006c  1d11              ADDS     r1,r2,#4
00006e  680a              LDR      r2,[r1,#0]
000070  4b13              LDR      r3,|L17.192|
000072  401a              ANDS     r2,r2,r3
000074  600a              STR      r2,[r1,#0]
000076  e9d02300          LDRD     r2,r3,[r0,#0]
;;;187      LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
00007a  431a              ORRS     r2,r2,r3
00007c  e9d03c02          LDRD     r3,r12,[r0,#8]
000080  ea43030c          ORR      r3,r3,r12
000084  431a              ORRS     r2,r2,r3
000086  680b              LDR      r3,[r1,#0]
000088  431a              ORRS     r2,r2,r3
00008a  600a              STR      r2,[r1,#0]
;;;188                               LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
;;;189    
;;;190      /* sets the background color value */
;;;191      backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
00008c  6b41              LDR      r1,[r0,#0x34]
00008e  020b              LSLS     r3,r1,#8
;;;192      backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
000090  8e01              LDRH     r1,[r0,#0x30]
000092  040a              LSLS     r2,r1,#16
;;;193    
;;;194      LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
000094  490b              LDR      r1,|L17.196|
000096  f8d1c000          LDR      r12,[r1,#0]
00009a  f00c4c7f          AND      r12,r12,#0xff000000
00009e  f8c1c000          STR      r12,[r1,#0]
;;;195      LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
0000a2  f8d1c000          LDR      r12,[r1,#0]
0000a6  6b80              LDR      r0,[r0,#0x38]
0000a8  431a              ORRS     r2,r2,r3
0000aa  ea4c0000          ORR      r0,r12,r0
0000ae  4310              ORRS     r0,r0,r2
0000b0  6008              STR      r0,[r1,#0]
;;;196    }
0000b2  bc10              POP      {r4}
0000b4  4770              BX       lr
;;;197    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L17.184|
                          DCD      0x40016808
                  |L17.188|
                          DCD      0xf000f800
                  |L17.192|
                          DCD      0x0ffe888f
                  |L17.196|
                          DCD      0x4001682c

                          AREA ||i.LTDC_LIPConfig||, CODE, READONLY, ALIGN=2

                  LTDC_LIPConfig PROC
;;;313    
;;;314    void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
000000  4901              LDR      r1,|L18.8|
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));
;;;318    
;;;319      /* Sets the Line Interrupt position */
;;;320      LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
000002  6008              STR      r0,[r1,#0]
;;;321    }
000004  4770              BX       lr
;;;322    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x40016840

                          AREA ||i.LTDC_LayerAddress||, CODE, READONLY, ALIGN=1

                  LTDC_LayerAddress PROC
;;;776    
;;;777    void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
000000  6281              STR      r1,[r0,#0x28]
;;;778    {
;;;779      /* Reconfigures the color frame buffer start address */
;;;780      LTDC_Layerx->CFBAR = Address;
;;;781    }
000002  4770              BX       lr
;;;782      
                          ENDP


                          AREA ||i.LTDC_LayerAlpha||, CODE, READONLY, ALIGN=1

                  LTDC_LayerAlpha PROC
;;;761    
;;;762    void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
000000  6141              STR      r1,[r0,#0x14]
;;;763    {  
;;;764      /* reconfigure the constant alpha value */      
;;;765      LTDC_Layerx->CACR = ConstantAlpha;
;;;766    }
000002  4770              BX       lr
;;;767    
                          ENDP


                          AREA ||i.LTDC_LayerCmd||, CODE, READONLY, ALIGN=1

                  LTDC_LayerCmd PROC
;;;479    
;;;480    void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;484    
;;;485      if (NewState != DISABLE)
;;;486      {
;;;487        /* Enable LTDC_Layer by setting LEN bit */
;;;488        LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
;;;489      }
;;;490      else
;;;491      {
;;;492        /* Disable LTDC_Layer by clearing LEN bit */
;;;493        LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
000002  6801              LDR      r1,[r0,#0]
000004  bf14              ITE      NE                    ;488
000006  f0410101          ORRNE    r1,r1,#1              ;488
00000a  f0210101          BICEQ    r1,r1,#1
00000e  6001              STR      r1,[r0,#0]            ;488
;;;494      }
;;;495    }
000010  4770              BX       lr
;;;496    
                          ENDP


                          AREA ||i.LTDC_LayerInit||, CODE, READONLY, ALIGN=1

                  LTDC_LayerInit PROC
;;;352    
;;;353    void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
000000  b430              PUSH     {r4,r5}
;;;354    {
;;;355    
;;;356      uint32_t whsppos = 0;
;;;357      uint32_t wvsppos = 0;
;;;358      uint32_t dcgreen = 0;
;;;359      uint32_t dcred = 0;
;;;360      uint32_t dcalpha = 0;
;;;361      uint32_t cfbp = 0;
;;;362    
;;;363    /* Check the parameters */
;;;364      assert_param(IS_LTDC_Pixelformat(LTDC_Layer_InitStruct->LTDC_PixelFormat));
;;;365      assert_param(IS_LTDC_BlendingFactor1(LTDC_Layer_InitStruct->LTDC_BlendingFactor_1));
;;;366      assert_param(IS_LTDC_BlendingFactor2(LTDC_Layer_InitStruct->LTDC_BlendingFactor_2));
;;;367      assert_param(IS_LTDC_HCONFIGST(LTDC_Layer_InitStruct->LTDC_HorizontalStart));
;;;368      assert_param(IS_LTDC_HCONFIGSP(LTDC_Layer_InitStruct->LTDC_HorizontalStop));
;;;369      assert_param(IS_LTDC_VCONFIGST(LTDC_Layer_InitStruct->LTDC_VerticalStart));
;;;370      assert_param(IS_LTDC_VCONFIGSP(LTDC_Layer_InitStruct->LTDC_VerticalStop));  
;;;371      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorBlue));
;;;372      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorGreen));
;;;373      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorRed));
;;;374      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha));
;;;375      assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
;;;376      assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
;;;377      assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));
;;;378    
;;;379      /* Configures the horizontal start and stop position */
;;;380      whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
000002  888a              LDRH     r2,[r1,#4]
;;;381      LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
000004  6843              LDR      r3,[r0,#4]
000006  f4034370          AND      r3,r3,#0xf000
00000a  6043              STR      r3,[r0,#4]
;;;382      LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
00000c  680b              LDR      r3,[r1,#0]
00000e  ea434202          ORR      r2,r3,r2,LSL #16
000012  6042              STR      r2,[r0,#4]
;;;383    
;;;384      /* Configures the vertical start and stop position */
;;;385      wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
000014  898a              LDRH     r2,[r1,#0xc]
;;;386      LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
000016  6883              LDR      r3,[r0,#8]
000018  f4034370          AND      r3,r3,#0xf000
00001c  6083              STR      r3,[r0,#8]
;;;387      LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
00001e  688b              LDR      r3,[r1,#8]
000020  ea434202          ORR      r2,r3,r2,LSL #16
000024  6082              STR      r2,[r0,#8]
;;;388    
;;;389      /* Specifies the pixel format */
;;;390      LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
000026  6902              LDR      r2,[r0,#0x10]
000028  f0220207          BIC      r2,r2,#7
00002c  6102              STR      r2,[r0,#0x10]
;;;391      LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
00002e  690a              LDR      r2,[r1,#0x10]
000030  6102              STR      r2,[r0,#0x10]
;;;392    
;;;393      /* Configures the default color values */
;;;394      dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
000032  69ca              LDR      r2,[r1,#0x1c]
;;;395      dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
;;;396      dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
;;;397      LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
000034  6984              LDR      r4,[r0,#0x18]
000036  ea4f2c02          LSL      r12,r2,#8             ;394
00003a  8c0a              LDRH     r2,[r1,#0x20]         ;395
00003c  0413              LSLS     r3,r2,#16             ;395
00003e  f8912024          LDRB     r2,[r1,#0x24]         ;396
000042  2400              MOVS     r4,#0
000044  6184              STR      r4,[r0,#0x18]
;;;398      LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
000046  698d              LDR      r5,[r1,#0x18]
000048  ea436202          ORR      r2,r3,r2,LSL #24
00004c  ea450c0c          ORR      r12,r5,r12
000050  ea4c0202          ORR      r2,r12,r2
000054  6182              STR      r2,[r0,#0x18]
;;;399                            dcred | dcalpha);
;;;400    
;;;401      /* Specifies the constant alpha value */      
;;;402      LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
000056  6942              LDR      r2,[r0,#0x14]
000058  f02202ff          BIC      r2,r2,#0xff
00005c  6142              STR      r2,[r0,#0x14]
;;;403      LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
00005e  694a              LDR      r2,[r1,#0x14]
000060  6142              STR      r2,[r0,#0x14]
;;;404    
;;;405      /* Specifies the blending factors */
;;;406      LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
000062  69c2              LDR      r2,[r0,#0x1c]
000064  f0220207          BIC      r2,r2,#7
000068  f42262e0          BIC      r2,r2,#0x700
00006c  61c2              STR      r2,[r0,#0x1c]
00006e  e9d1230a          LDRD     r2,r3,[r1,#0x28]
;;;407      LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
000072  431a              ORRS     r2,r2,r3
000074  61c2              STR      r2,[r0,#0x1c]
;;;408    
;;;409      /* Configures the color frame buffer start address */
;;;410      LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
000076  6a82              LDR      r2,[r0,#0x28]
000078  6284              STR      r4,[r0,#0x28]
;;;411      LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
00007a  6b0a              LDR      r2,[r1,#0x30]
00007c  6282              STR      r2,[r0,#0x28]
;;;412    
;;;413      /* Configures the color frame buffer pitch in byte */
;;;414      cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
00007e  8f0a              LDRH     r2,[r1,#0x38]
;;;415      LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
000080  6ac3              LDR      r3,[r0,#0x2c]
000082  f00323e0          AND      r3,r3,#0xe000e000
000086  62c3              STR      r3,[r0,#0x2c]
;;;416      LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
000088  6b4b              LDR      r3,[r1,#0x34]
00008a  ea434202          ORR      r2,r3,r2,LSL #16
00008e  62c2              STR      r2,[r0,#0x2c]
;;;417    
;;;418      /* Configures the frame buffer line number */
;;;419      LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
000090  6b02              LDR      r2,[r0,#0x30]
000092  f36f020a          BFC      r2,#0,#11
000096  6302              STR      r2,[r0,#0x30]
;;;420      LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
000098  6bc9              LDR      r1,[r1,#0x3c]
00009a  6301              STR      r1,[r0,#0x30]
;;;421    
;;;422    }
00009c  bc30              POP      {r4,r5}
00009e  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.LTDC_LayerPixelFormat||, CODE, READONLY, ALIGN=1

                  LTDC_LayerPixelFormat PROC
;;;854    
;;;855    void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
000000  6902              LDR      r2,[r0,#0x10]
;;;856    {
;;;857    
;;;858      uint8_t temp;
;;;859      uint32_t tempreg;
;;;860      
;;;861      tempreg = LTDC_Layerx->PFCR;
;;;862      
;;;863      if (tempreg == LTDC_Pixelformat_ARGB8888)
000002  2a00              CMP      r2,#0
;;;864      {
;;;865        temp = 4;
000004  bf08              IT       EQ
000006  2204              MOVEQ    r2,#4
000008  d00c              BEQ      |L23.36|
;;;866      }
;;;867      else if (tempreg == LTDC_Pixelformat_RGB888)
00000a  2a01              CMP      r2,#1
;;;868      {
;;;869        temp = 3;
00000c  bf08              IT       EQ
00000e  2203              MOVEQ    r2,#3
000010  d008              BEQ      |L23.36|
;;;870      }
;;;871      else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
000012  2a04              CMP      r2,#4
;;;872              (tempreg == LTDC_Pixelformat_RGB565)    || \
000014  bf18              IT       NE
000016  2a02              CMPNE    r2,#2
000018  d020              BEQ      |L23.92|
;;;873              (tempreg == LTDC_Pixelformat_ARGB1555)  || \
00001a  2a03              CMP      r2,#3
;;;874              (tempreg == LTDC_Pixelformat_AL88))  
00001c  bf1c              ITT      NE
00001e  2a07              CMPNE    r2,#7
;;;875      {
;;;876        temp = 2;  
;;;877      }
;;;878      else
;;;879      {
;;;880        temp = 1;
000020  2201              MOVNE    r2,#1
000022  d01b              BEQ      |L23.92|
                  |L23.36|
;;;881      }
;;;882      
;;;883      tempreg = (LTDC_Layerx->CFBLR >> 16);
000024  6ac3              LDR      r3,[r0,#0x2c]
000026  0c1b              LSRS     r3,r3,#16
;;;884      tempreg = (tempreg / temp); 
000028  fbb3f3f2          UDIV     r3,r3,r2
;;;885      
;;;886      if (PixelFormat == LTDC_Pixelformat_ARGB8888)
00002c  2900              CMP      r1,#0
;;;887      {
;;;888        temp = 4;
00002e  bf08              IT       EQ
000030  2204              MOVEQ    r2,#4
000032  d00c              BEQ      |L23.78|
;;;889      }
;;;890      else if (PixelFormat == LTDC_Pixelformat_RGB888)
000034  2901              CMP      r1,#1
;;;891      {
;;;892        temp = 3;
000036  bf08              IT       EQ
000038  2203              MOVEQ    r2,#3
00003a  d008              BEQ      |L23.78|
;;;893      }
;;;894      else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
00003c  2904              CMP      r1,#4
;;;895              (PixelFormat == LTDC_Pixelformat_RGB565)    || \
00003e  bf18              IT       NE
000040  2902              CMPNE    r1,#2
000042  d00d              BEQ      |L23.96|
;;;896              (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
000044  2903              CMP      r1,#3
;;;897              (PixelFormat == LTDC_Pixelformat_AL88))
000046  bf1c              ITT      NE
000048  2907              CMPNE    r1,#7
;;;898      {
;;;899        temp = 2;  
;;;900      }
;;;901      else
;;;902      {
;;;903        temp = 1;
00004a  2201              MOVNE    r2,#1
00004c  d008              BEQ      |L23.96|
                  |L23.78|
;;;904      }
;;;905      
;;;906      /* Reconfigures the color frame buffer pitch in byte */
;;;907      LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
00004e  435a              MULS     r2,r3,r2
000050  1cd3              ADDS     r3,r2,#3
000052  ea434202          ORR      r2,r3,r2,LSL #16
000056  62c2              STR      r2,[r0,#0x2c]
;;;908    
;;;909      /* Reconfigures the color frame buffer start address */
;;;910      LTDC_Layerx->PFCR = PixelFormat;
000058  6101              STR      r1,[r0,#0x10]
;;;911        
;;;912    }
00005a  4770              BX       lr
                  |L23.92|
00005c  2202              MOVS     r2,#2                 ;876
00005e  e7e1              B        |L23.36|
                  |L23.96|
000060  2202              MOVS     r2,#2                 ;899
000062  e7f4              B        |L23.78|
;;;913        
                          ENDP


                          AREA ||i.LTDC_LayerPosition||, CODE, READONLY, ALIGN=2

                  LTDC_LayerPosition PROC
;;;700    
;;;701    void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
000000  6843              LDR      r3,[r0,#4]
;;;702    {
;;;703      
;;;704      uint32_t tempreg, temp;
;;;705      uint32_t horizontal_start;
;;;706      uint32_t horizontal_stop;
;;;707      uint32_t vertical_start;
;;;708      uint32_t vertical_stop;
;;;709      
;;;710      LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
000002  f4034370          AND      r3,r3,#0xf000
000006  6043              STR      r3,[r0,#4]
;;;711      LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
000008  6883              LDR      r3,[r0,#8]
00000a  f4034370          AND      r3,r3,#0xf000
00000e  6083              STR      r3,[r0,#8]
;;;712      
;;;713      /* Reconfigures the horizontal and vertical start position */
;;;714      tempreg = LTDC->BPCR;
000010  4b19              LDR      r3,|L24.120|
000012  f8d3c000          LDR      r12,[r3,#0]
;;;715      horizontal_start = (tempreg >> 16) + 1 + OffsetX;
000016  eb01411c          ADD      r1,r1,r12,LSR #16
00001a  1c4b              ADDS     r3,r1,#1
;;;716      vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
;;;717      
;;;718      /* Reconfigures the horizontal and vertical stop position */
;;;719      /* Get the number of byte per pixel */
;;;720      
;;;721      tempreg = LTDC_Layerx->PFCR;
;;;722      
;;;723      if (tempreg == LTDC_Pixelformat_ARGB8888)
;;;724      {
;;;725        temp = 4;
;;;726      }
;;;727      else if (tempreg == LTDC_Pixelformat_RGB888)
;;;728      {
;;;729        temp = 3;
;;;730      }
;;;731      else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
;;;732              (tempreg == LTDC_Pixelformat_RGB565)    ||  
;;;733              (tempreg == LTDC_Pixelformat_ARGB1555)  ||
;;;734              (tempreg == LTDC_Pixelformat_AL88))
;;;735      {
;;;736        temp = 2;  
;;;737      }
;;;738      else
;;;739      {
;;;740        temp = 1;
;;;741      }  
;;;742        
;;;743      tempreg = LTDC_Layerx->CFBLR;
;;;744      horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
;;;745      
;;;746      tempreg = LTDC_Layerx->CFBLNR;
;;;747      vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
;;;748      
;;;749      LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
;;;750      LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
;;;751    }
00001c  fa12f18c          UXTAH    r1,r2,r12
000020  1c4a              ADDS     r2,r1,#1              ;716
000022  6901              LDR      r1,[r0,#0x10]         ;721
000024  2900              CMP      r1,#0                 ;723
000026  bf08              IT       EQ                    ;725
000028  2104              MOVEQ    r1,#4                 ;725
00002a  d00c              BEQ      |L24.70|
00002c  2901              CMP      r1,#1                 ;727
00002e  bf08              IT       EQ                    ;729
000030  2103              MOVEQ    r1,#3                 ;729
000032  d008              BEQ      |L24.70|
000034  2904              CMP      r1,#4                 ;731
000036  bf18              IT       NE                    ;732
000038  2902              CMPNE    r1,#2                 ;732
00003a  d01b              BEQ      |L24.116|
00003c  2903              CMP      r1,#3                 ;733
00003e  bf1c              ITT      NE                    ;734
000040  2907              CMPNE    r1,#7                 ;734
000042  2101              MOVNE    r1,#1                 ;740
000044  d016              BEQ      |L24.116|
                  |L24.70|
000046  f8d0c02c          LDR      r12,[r0,#0x2c]        ;743
00004a  f3cc0c0c          UBFX     r12,r12,#0,#13        ;744
00004e  f1ac0c03          SUB      r12,r12,#3            ;744
000052  fbbcf1f1          UDIV     r1,r12,r1             ;744
000056  4419              ADD      r1,r1,r3              ;744
000058  f1a10c01          SUB      r12,r1,#1             ;744
00005c  6b01              LDR      r1,[r0,#0x30]         ;746
00005e  ea43430c          ORR      r3,r3,r12,LSL #16     ;749
000062  f3c1010a          UBFX     r1,r1,#0,#11          ;747
000066  4411              ADD      r1,r1,r2              ;747
000068  6043              STR      r3,[r0,#4]            ;749
00006a  1e49              SUBS     r1,r1,#1              ;749
00006c  ea424101          ORR      r1,r2,r1,LSL #16      ;750
000070  6081              STR      r1,[r0,#8]            ;750
000072  4770              BX       lr
                  |L24.116|
000074  2102              MOVS     r1,#2                 ;736
000076  e7e6              B        |L24.70|
;;;752      
                          ENDP

                  |L24.120|
                          DCD      0x4001680c

                          AREA ||i.LTDC_LayerSize||, CODE, READONLY, ALIGN=1

                  LTDC_LayerSize PROC
;;;792    
;;;793    void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
000000  b470              PUSH     {r4-r6}
;;;794    {
;;;795    
;;;796      uint8_t temp;
;;;797      uint32_t tempreg;
;;;798      uint32_t horizontal_start;
;;;799      uint32_t horizontal_stop;
;;;800      uint32_t vertical_start;
;;;801      uint32_t vertical_stop;  
;;;802      
;;;803      tempreg = LTDC_Layerx->PFCR;
000002  6903              LDR      r3,[r0,#0x10]
;;;804      
;;;805      if (tempreg == LTDC_Pixelformat_ARGB8888)
000004  2b00              CMP      r3,#0
;;;806      {
;;;807        temp = 4;
000006  bf08              IT       EQ
000008  2304              MOVEQ    r3,#4
00000a  d00c              BEQ      |L25.38|
;;;808      }
;;;809      else if (tempreg == LTDC_Pixelformat_RGB888)
00000c  2b01              CMP      r3,#1
;;;810      {
;;;811        temp = 3;
00000e  bf08              IT       EQ
000010  2303              MOVEQ    r3,#3
000012  d008              BEQ      |L25.38|
;;;812      }
;;;813      else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
000014  2b04              CMP      r3,#4
;;;814              (tempreg == LTDC_Pixelformat_RGB565)    || \
000016  bf18              IT       NE
000018  2b02              CMPNE    r3,#2
00001a  d022              BEQ      |L25.98|
;;;815              (tempreg == LTDC_Pixelformat_ARGB1555)  || \
00001c  2b03              CMP      r3,#3
;;;816              (tempreg == LTDC_Pixelformat_AL88))
00001e  bf1c              ITT      NE
000020  2b07              CMPNE    r3,#7
;;;817      {
;;;818        temp = 2;  
;;;819      }
;;;820      else
;;;821      {
;;;822        temp = 1;
000022  2301              MOVNE    r3,#1
000024  d01d              BEQ      |L25.98|
                  |L25.38|
;;;823      }
;;;824    
;;;825      /* update horizontal and vertical stop */
;;;826      tempreg = LTDC_Layerx->WHPCR;
000026  f8d0c004          LDR      r12,[r0,#4]
;;;827      horizontal_start = (tempreg & 0x1FFF);
00002a  f3cc040c          UBFX     r4,r12,#0,#13
;;;828      horizontal_stop = Width + horizontal_start - 1;  
00002e  eb010c04          ADD      r12,r1,r4
000032  f1ac0501          SUB      r5,r12,#1
;;;829    
;;;830      tempreg = LTDC_Layerx->WVPCR;
000036  f8d0c008          LDR      r12,[r0,#8]
;;;831      vertical_start = (tempreg & 0x1FFF);
;;;832      vertical_stop = Height + vertical_start - 1;  
;;;833      
;;;834      LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
00003a  ea444405          ORR      r4,r4,r5,LSL #16
00003e  f3cc0c0c          UBFX     r12,r12,#0,#13        ;831
000042  eb02060c          ADD      r6,r2,r12             ;832
000046  6044              STR      r4,[r0,#4]
000048  1e76              SUBS     r6,r6,#1
;;;835      LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
00004a  ea4c4c06          ORR      r12,r12,r6,LSL #16
00004e  f8c0c008          STR      r12,[r0,#8]
;;;836    
;;;837      /* Reconfigures the color frame buffer pitch in byte */
;;;838      LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
000052  4359              MULS     r1,r3,r1
000054  1ccb              ADDS     r3,r1,#3
000056  ea434101          ORR      r1,r3,r1,LSL #16
00005a  62c1              STR      r1,[r0,#0x2c]
;;;839    
;;;840      /* Reconfigures the frame buffer line number */
;;;841      LTDC_Layerx->CFBLNR  = Height;  
00005c  6302              STR      r2,[r0,#0x30]
;;;842      
;;;843    }
00005e  bc70              POP      {r4-r6}
000060  4770              BX       lr
                  |L25.98|
000062  2302              MOVS     r3,#2                 ;818
000064  e7df              B        |L25.38|
;;;844    
                          ENDP


                          AREA ||i.LTDC_LayerStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_LayerStructInit PROC
;;;430    
;;;431    void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
000000  2100              MOVS     r1,#0
;;;432    {
;;;433      /*--------------- Reset Layer structure parameters values -------------------*/
;;;434    
;;;435      /*!< Initialize the horizontal limit member */
;;;436      LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
;;;437      LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;438    
;;;439      /*!< Initialize the vertical limit member */
;;;440      LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;441      LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
000006  6081              STR      r1,[r0,#8]
;;;442    
;;;443      /*!< Initialize the pixel format member */
;;;444      LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
;;;445    
;;;446      /*!< Initialize the constant alpha value */
;;;447      LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
000008  22ff              MOVS     r2,#0xff
00000a  60c1              STR      r1,[r0,#0xc]
00000c  e9c01204          STRD     r1,r2,[r0,#0x10]
;;;448    
;;;449      /*!< Initialize the default color values */
;;;450      LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
;;;451      LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
000010  6181              STR      r1,[r0,#0x18]
;;;452      LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
000012  61c1              STR      r1,[r0,#0x1c]
;;;453      LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
;;;454    
;;;455      /*!< Initialize the blending factors */
;;;456      LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
000014  f44f62c0          MOV      r2,#0x600
000018  6201              STR      r1,[r0,#0x20]
00001a  e9c01209          STRD     r1,r2,[r0,#0x24]
;;;457      LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
00001e  2207              MOVS     r2,#7
000020  e9c0210b          STRD     r2,r1,[r0,#0x2c]
;;;458    
;;;459      /*!< Initialize the frame buffer start address */
;;;460      LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
;;;461    
;;;462      /*!< Initialize the frame buffer pitch and line length */
;;;463      LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
;;;464      LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
000024  6341              STR      r1,[r0,#0x34]
;;;465    
;;;466      /*!< Initialize the frame buffer line number */
;;;467      LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
000026  6381              STR      r1,[r0,#0x38]
000028  63c1              STR      r1,[r0,#0x3c]
;;;468    }
00002a  4770              BX       lr
;;;469    
                          ENDP


                          AREA ||i.LTDC_PosStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_PosStructInit PROC
;;;523    
;;;524    void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
000000  2100              MOVS     r1,#0
;;;525    {
;;;526      LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
;;;527      LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
000002  6001              STR      r1,[r0,#0]
000004  6041              STR      r1,[r0,#4]
;;;528    }
000006  4770              BX       lr
;;;529    
                          ENDP


                          AREA ||i.LTDC_RGBStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_RGBStructInit PROC
;;;299    
;;;300    void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
000000  2102              MOVS     r1,#2
;;;301    {
;;;302      LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
;;;303      LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
000002  6001              STR      r1,[r0,#0]
;;;304      LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
000004  6041              STR      r1,[r0,#4]
000006  6081              STR      r1,[r0,#8]
;;;305    }
000008  4770              BX       lr
;;;306    
                          ENDP


                          AREA ||i.LTDC_ReloadConfig||, CODE, READONLY, ALIGN=2

                  LTDC_ReloadConfig PROC
;;;331    
;;;332    void LTDC_ReloadConfig(uint32_t LTDC_Reload)
000000  4901              LDR      r1,|L29.8|
;;;333    {
;;;334      /* Check the parameters */
;;;335      assert_param(IS_LTDC_RELOAD(LTDC_Reload));
;;;336    
;;;337      /* Sets the Reload type */
;;;338      LTDC->SRCR = (uint32_t)LTDC_Reload;
000002  6008              STR      r0,[r1,#0]
;;;339    }
000004  4770              BX       lr
;;;340    
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      0x40016824

                          AREA ||i.LTDC_StructInit||, CODE, READONLY, ALIGN=1

                  LTDC_StructInit PROC
;;;204    
;;;205    void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
000000  2100              MOVS     r1,#0
;;;206    {
;;;207      /*--------------- Reset LTDC init structure parameters values ----------------*/
;;;208      LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
;;;209      LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
000002  6001              STR      r1,[r0,#0]
;;;210      LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
000004  6041              STR      r1,[r0,#4]
;;;211      LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
000006  6081              STR      r1,[r0,#8]
;;;212      LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
000008  60c1              STR      r1,[r0,#0xc]
;;;213      LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
00000a  6101              STR      r1,[r0,#0x10]
;;;214      LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
00000c  6141              STR      r1,[r0,#0x14]
;;;215      LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
00000e  6181              STR      r1,[r0,#0x18]
;;;216      LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
000010  61c1              STR      r1,[r0,#0x1c]
;;;217      LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
000012  6201              STR      r1,[r0,#0x20]
;;;218      LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
000014  6241              STR      r1,[r0,#0x24]
;;;219      LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
000016  6281              STR      r1,[r0,#0x28]
;;;220      LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
000018  62c1              STR      r1,[r0,#0x2c]
;;;221      LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
00001a  6301              STR      r1,[r0,#0x30]
;;;222      LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
00001c  6341              STR      r1,[r0,#0x34]
00001e  6381              STR      r1,[r0,#0x38]
;;;223    }
000020  4770              BX       lr
;;;224    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_ltdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_ltdc_c_74c236bc____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___16_stm32f4xx_ltdc_c_74c236bc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_ltdc_c_74c236bc____REVSH|
#line 144
|__asm___16_stm32f4xx_ltdc_c_74c236bc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
