; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_rcc.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_rcc.crf arm_hal\lib\stm32f4xx_rcc.c]
                          THUMB

                          AREA ||i.RCC_AHB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockCmd PROC
;;;1459     */
;;;1460   void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L1.20|
;;;1461   {
;;;1462     /* Check the parameters */
;;;1463     assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
;;;1464   
;;;1465     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1466     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1467     {
;;;1468       RCC->AHB1ENR |= RCC_AHB1Periph;
;;;1469     }
;;;1470     else
;;;1471     {
;;;1472       RCC->AHB1ENR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1468
000008  4308              ORRNE    r0,r0,r1              ;1468
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1468
;;;1473     }
;;;1474   }
000010  4770              BX       lr
;;;1475   
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40023830

                          AREA ||i.RCC_AHB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockLPModeCmd PROC
;;;1851     */
;;;1852   void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L2.20|
;;;1853   {
;;;1854     /* Check the parameters */
;;;1855     assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
;;;1856     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1857     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1858     {
;;;1859       RCC->AHB1LPENR |= RCC_AHB1Periph;
;;;1860     }
;;;1861     else
;;;1862     {
;;;1863       RCC->AHB1LPENR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1859
000008  4308              ORRNE    r0,r0,r1              ;1859
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1859
;;;1864     }
;;;1865   }
000010  4770              BX       lr
;;;1866   
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40023850

                          AREA ||i.RCC_AHB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphResetCmd PROC
;;;1658     */
;;;1659   void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L3.20|
;;;1660   {
;;;1661     /* Check the parameters */
;;;1662     assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
;;;1663     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1664   
;;;1665     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1666     {
;;;1667       RCC->AHB1RSTR |= RCC_AHB1Periph;
;;;1668     }
;;;1669     else
;;;1670     {
;;;1671       RCC->AHB1RSTR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1667
000008  4308              ORRNE    r0,r0,r1              ;1667
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1667
;;;1672     }
;;;1673   }
000010  4770              BX       lr
;;;1674   
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40023810

                          AREA ||i.RCC_AHB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockCmd PROC
;;;1491     */
;;;1492   void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;1493   {
;;;1494     /* Check the parameters */
;;;1495     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1496     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1497   
;;;1498     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1499     {
;;;1500       RCC->AHB2ENR |= RCC_AHB2Periph;
;;;1501     }
;;;1502     else
;;;1503     {
;;;1504       RCC->AHB2ENR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1500
000008  4308              ORRNE    r0,r0,r1              ;1500
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1500
;;;1505     }
;;;1506   }
000010  4770              BX       lr
;;;1507   
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40023834

                          AREA ||i.RCC_AHB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockLPModeCmd PROC
;;;1883     */
;;;1884   void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L5.20|
;;;1885   {
;;;1886     /* Check the parameters */
;;;1887     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1888     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1889     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1890     {
;;;1891       RCC->AHB2LPENR |= RCC_AHB2Periph;
;;;1892     }
;;;1893     else
;;;1894     {
;;;1895       RCC->AHB2LPENR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1891
000008  4308              ORRNE    r0,r0,r1              ;1891
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1891
;;;1896     }
;;;1897   }
000010  4770              BX       lr
;;;1898   
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40023854

                          AREA ||i.RCC_AHB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphResetCmd PROC
;;;1687     */
;;;1688   void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L6.20|
;;;1689   {
;;;1690     /* Check the parameters */
;;;1691     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1692     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1693   
;;;1694     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1695     {
;;;1696       RCC->AHB2RSTR |= RCC_AHB2Periph;
;;;1697     }
;;;1698     else
;;;1699     {
;;;1700       RCC->AHB2RSTR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1696
000008  4308              ORRNE    r0,r0,r1              ;1696
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1696
;;;1701     }
;;;1702   }
000010  4770              BX       lr
;;;1703   
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40023814

                          AREA ||i.RCC_AHB3PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockCmd PROC
;;;1519     */
;;;1520   void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L7.20|
;;;1521   {
;;;1522     /* Check the parameters */
;;;1523     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
;;;1524     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1525   
;;;1526     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1527     {
;;;1528       RCC->AHB3ENR |= RCC_AHB3Periph;
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       RCC->AHB3ENR &= ~RCC_AHB3Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1528
000008  4308              ORRNE    r0,r0,r1              ;1528
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1528
;;;1533     }
;;;1534   }
000010  4770              BX       lr
;;;1535   
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40023838

                          AREA ||i.RCC_AHB3PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockLPModeCmd PROC
;;;1911     */
;;;1912   void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L8.20|
;;;1913   {
;;;1914     /* Check the parameters */
;;;1915     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1916     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1917     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1918     {
;;;1919       RCC->AHB3LPENR |= RCC_AHB3Periph;
;;;1920     }
;;;1921     else
;;;1922     {
;;;1923       RCC->AHB3LPENR &= ~RCC_AHB3Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1919
000008  4308              ORRNE    r0,r0,r1              ;1919
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1919
;;;1924     }
;;;1925   }
000010  4770              BX       lr
;;;1926   
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40023858

                          AREA ||i.RCC_AHB3PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphResetCmd PROC
;;;1712     */
;;;1713   void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L9.20|
;;;1714   {
;;;1715     /* Check the parameters */
;;;1716     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1717     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1718   
;;;1719     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1720     {
;;;1721       RCC->AHB3RSTR |= RCC_AHB3Periph;
;;;1722     }
;;;1723     else
;;;1724     {
;;;1725       RCC->AHB3RSTR &= ~RCC_AHB3Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1721
000008  4308              ORRNE    r0,r0,r1              ;1721
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1721
;;;1726     }
;;;1727   }
000010  4770              BX       lr
;;;1728   
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40023818

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;1571     */
;;;1572   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L10.20|
;;;1573   {
;;;1574     /* Check the parameters */
;;;1575     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
;;;1576     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1577   
;;;1578     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1579     {
;;;1580       RCC->APB1ENR |= RCC_APB1Periph;
;;;1581     }
;;;1582     else
;;;1583     {
;;;1584       RCC->APB1ENR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1580
000008  4308              ORRNE    r0,r0,r1              ;1580
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1580
;;;1585     }
;;;1586   }
000010  4770              BX       lr
;;;1587   
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40023840

                          AREA ||i.RCC_APB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockLPModeCmd PROC
;;;1963     */
;;;1964   void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L11.20|
;;;1965   {
;;;1966     /* Check the parameters */
;;;1967     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1968     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1969     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1970     {
;;;1971       RCC->APB1LPENR |= RCC_APB1Periph;
;;;1972     }
;;;1973     else
;;;1974     {
;;;1975       RCC->APB1LPENR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1971
000008  4308              ORRNE    r0,r0,r1              ;1971
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1971
;;;1976     }
;;;1977   }
000010  4770              BX       lr
;;;1978   
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40023860

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;1761     */
;;;1762   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L12.20|
;;;1763   {
;;;1764     /* Check the parameters */
;;;1765     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1766     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1767     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1768     {
;;;1769       RCC->APB1RSTR |= RCC_APB1Periph;
;;;1770     }
;;;1771     else
;;;1772     {
;;;1773       RCC->APB1RSTR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1769
000008  4308              ORRNE    r0,r0,r1              ;1769
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1769
;;;1774     }
;;;1775   }
000010  4770              BX       lr
;;;1776   
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x40023820

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;1616     */
;;;1617   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L13.20|
;;;1618   {
;;;1619     /* Check the parameters */
;;;1620     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1621     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1622   
;;;1623     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1624     {
;;;1625       RCC->APB2ENR |= RCC_APB2Periph;
;;;1626     }
;;;1627     else
;;;1628     {
;;;1629       RCC->APB2ENR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1625
000008  4308              ORRNE    r0,r0,r1              ;1625
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1625
;;;1630     }
;;;1631   }
000010  4770              BX       lr
;;;1632   
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0x40023844

                          AREA ||i.RCC_APB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockLPModeCmd PROC
;;;2008     */
;;;2009   void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L14.20|
;;;2010   {
;;;2011     /* Check the parameters */
;;;2012     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;2013     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2014     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2015     {
;;;2016       RCC->APB2LPENR |= RCC_APB2Periph;
;;;2017     }
;;;2018     else
;;;2019     {
;;;2020       RCC->APB2LPENR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;2016
000008  4308              ORRNE    r0,r0,r1              ;2016
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;2016
;;;2021     }
;;;2022   }
000010  4770              BX       lr
;;;2023   
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40023864

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;1802     */
;;;1803   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L15.20|
;;;1804   {
;;;1805     /* Check the parameters */
;;;1806     assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
;;;1807     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1808     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1809     {
;;;1810       RCC->APB2RSTR |= RCC_APB2Periph;
;;;1811     }
;;;1812     else
;;;1813     {
;;;1814       RCC->APB2RSTR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;1810
000008  4308              ORRNE    r0,r0,r1              ;1810
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;1810
;;;1815     }
;;;1816   }
000010  4770              BX       lr
;;;1817   
                          ENDP

000012  0000              DCW      0x0000
                  |L15.20|
                          DCD      0x40023824

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;318      */
;;;319    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4a03              LDR      r2,|L16.16|
;;;320    {
;;;321      uint32_t tmpreg = 0;
;;;322      /* Check the parameters */
;;;323      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;324    
;;;325      tmpreg = RCC->CR;
000002  6811              LDR      r1,[r2,#0]
;;;326    
;;;327      /* Clear HSITRIM[4:0] bits */
;;;328      tmpreg &= ~RCC_CR_HSITRIM;
000004  f02101f8          BIC      r1,r1,#0xf8
;;;329    
;;;330      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;331      tmpreg |= (uint32_t)HSICalibrationValue << 3;
000008  ea4100c0          ORR      r0,r1,r0,LSL #3
;;;332    
;;;333      /* Store the new value */
;;;334      RCC->CR = tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;335    }
00000e  4770              BX       lr
;;;336    
                          ENDP

                  |L16.16|
                          DCD      0x40023800

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;1204     */
;;;1205   void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L17.8|
;;;1206   {
;;;1207     /* Check the parameters */
;;;1208     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1209     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1210   }
000004  4770              BX       lr
;;;1211   
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x42470e40

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;2136     */
;;;2137   void RCC_ClearFlag(void)
000000  4802              LDR      r0,|L18.12|
;;;2138   {
;;;2139     /* Set RMVF bit to clear the reset flags */
;;;2140     RCC->CSR |= RCC_CSR_RMVF;
000002  6801              LDR      r1,[r0,#0]
000004  f0417180          ORR      r1,r1,#0x1000000
000008  6001              STR      r1,[r0,#0]
;;;2141   }
00000a  4770              BX       lr
;;;2142   
                          ENDP

                  |L18.12|
                          DCD      0x40023874

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;2190     */
;;;2191   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L19.8|
;;;2192   {
;;;2193     /* Check the parameters */
;;;2194     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;2195   
;;;2196     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;2197        pending bits */
;;;2198     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7008              STRB     r0,[r1,#0]
;;;2199   }
000004  4770              BX       lr
;;;2200   
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x4002380e

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;633      */
;;;634    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L20.8|
;;;635    {
;;;636      /* Check the parameters */
;;;637      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;638      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;639    }
000004  4770              BX       lr
;;;640    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x42470000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;212      */
;;;213    void RCC_DeInit(void)
000000  480f              LDR      r0,|L21.64|
;;;214    {
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;217    
;;;218      /* Reset CFGR register */
;;;219      RCC->CFGR = 0x00000000;
00000a  4a0e              LDR      r2,|L21.68|
00000c  2100              MOVS     r1,#0
00000e  6011              STR      r1,[r2,#0]
;;;220    
;;;221      /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
;;;222      RCC->CR &= (uint32_t)0xEAF6FFFF;
000010  6802              LDR      r2,[r0,#0]
000012  f4222210          BIC      r2,r2,#0x90000
000016  f02252a8          BIC      r2,r2,#0x15000000
00001a  6002              STR      r2,[r0,#0]
;;;223    
;;;224      /* Reset PLLCFGR register */
;;;225      RCC->PLLCFGR = 0x24003010;
00001c  1d03              ADDS     r3,r0,#4
00001e  4a0a              LDR      r2,|L21.72|
000020  601a              STR      r2,[r3,#0]
;;;226    
;;;227      /* Reset PLLI2SCFGR register */
;;;228      RCC->PLLI2SCFGR = 0x20003000;
000022  4b0b              LDR      r3,|L21.80|
000024  4a09              LDR      r2,|L21.76|
000026  601a              STR      r2,[r3,#0]
;;;229    
;;;230      /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
;;;231      RCC->PLLSAICFGR = 0x24003000;
000028  1d1b              ADDS     r3,r3,#4
00002a  4a0a              LDR      r2,|L21.84|
00002c  601a              STR      r2,[r3,#0]
;;;232     
;;;233      /* Reset HSEBYP bit */
;;;234      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002e  6802              LDR      r2,[r0,#0]
000030  f4222280          BIC      r2,r2,#0x40000
000034  6002              STR      r2,[r0,#0]
;;;235    
;;;236      /* Disable all interrupts */
;;;237      RCC->CIR = 0x00000000;
000036  4808              LDR      r0,|L21.88|
000038  6001              STR      r1,[r0,#0]
;;;238    
;;;239      /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
;;;240      RCC->DCKCFGR = 0x00000000; 
00003a  1d18              ADDS     r0,r3,#4
00003c  6001              STR      r1,[r0,#0]
;;;241    
;;;242    }
00003e  4770              BX       lr
;;;243    
                          ENDP

                  |L21.64|
                          DCD      0x40023800
                  |L21.68|
                          DCD      0x40023808
                  |L21.72|
                          DCD      0x24003010
                  |L21.76|
                          DCD      0x20003000
                  |L21.80|
                          DCD      0x40023884
                  |L21.84|
                          DCD      0x24003000
                  |L21.88|
                          DCD      0x4002380c

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;1030     */
;;;1031   void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  f8dfc08c          LDR      r12,|L22.144|
;;;1032   {
000004  b430              PUSH     {r4,r5}
;;;1033     uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;1034   
;;;1035     /* Get SYSCLK source -------------------------------------------------------*/
;;;1036     tmp = RCC->CFGR & RCC_CFGR_SWS;
000006  f8dc1000          LDR      r1,[r12,#0]
;;;1037   
;;;1038     switch (tmp)
;;;1039     {
;;;1040       case 0x00:  /* HSI used as system clock source */
;;;1041         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
00000a  4d22              LDR      r5,|L22.148|
00000c  f011010c          ANDS     r1,r1,#0xc            ;1036
000010  d006              BEQ      |L22.32|
;;;1042         break;
;;;1043       case 0x04:  /* HSE used as system clock  source */
;;;1044         RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
000012  4c21              LDR      r4,|L22.152|
000014  2904              CMP      r1,#4                 ;1038
000016  bf08              IT       EQ
000018  6004              STREQ    r4,[r0,#0]
00001a  d002              BEQ      |L22.34|
00001c  2908              CMP      r1,#8                 ;1038
00001e  d01d              BEQ      |L22.92|
                  |L22.32|
000020  6005              STR      r5,[r0,#0]            ;1041
                  |L22.34|
;;;1045         break;
;;;1046       case 0x08:  /* PLL used as system clock  source */
;;;1047   
;;;1048         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1049            SYSCLK = PLL_VCO / PLLP
;;;1050            */    
;;;1051         pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;1052         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;1053         
;;;1054         if (pllsource != 0)
;;;1055         {
;;;1056           /* HSE used as PLL clock source */
;;;1057           pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;1058         }
;;;1059         else
;;;1060         {
;;;1061           /* HSI used as PLL clock source */
;;;1062           pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;1063         }
;;;1064   
;;;1065         pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
;;;1066         RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
;;;1067         break;
;;;1068       default:
;;;1069         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
;;;1070         break;
;;;1071     }
;;;1072     /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
;;;1073   
;;;1074     /* Get HCLK prescaler */
;;;1075     tmp = RCC->CFGR & RCC_CFGR_HPRE;
000022  f8dc1000          LDR      r1,[r12,#0]
;;;1076     tmp = tmp >> 4;
;;;1077     presc = APBAHBPrescTable[tmp];
;;;1078     /* HCLK clock frequency */
;;;1079     RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
;;;1080   
;;;1081     /* Get PCLK1 prescaler */
;;;1082     tmp = RCC->CFGR & RCC_CFGR_PPRE1;
;;;1083     tmp = tmp >> 10;
;;;1084     presc = APBAHBPrescTable[tmp];
;;;1085     /* PCLK1 clock frequency */
;;;1086     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
;;;1087   
;;;1088     /* Get PCLK2 prescaler */
;;;1089     tmp = RCC->CFGR & RCC_CFGR_PPRE2;
;;;1090     tmp = tmp >> 13;
;;;1091     presc = APBAHBPrescTable[tmp];
;;;1092     /* PCLK2 clock frequency */
;;;1093     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
;;;1094   }
000026  220f              MOVS     r2,#0xf
000028  4b1c              LDR      r3,|L22.156|
00002a  ea021111          AND      r1,r2,r1,LSR #4
00002e  5c59              LDRB     r1,[r3,r1]            ;1077
000030  6802              LDR      r2,[r0,#0]            ;1079
000032  fa22f101          LSR      r1,r2,r1              ;1079
000036  6041              STR      r1,[r0,#4]            ;1082
000038  f8dc2000          LDR      r2,[r12,#0]           ;1082
00003c  2407              MOVS     r4,#7
00003e  ea042292          AND      r2,r4,r2,LSR #10
000042  5c9a              LDRB     r2,[r3,r2]            ;1084
000044  fa21f202          LSR      r2,r1,r2              ;1086
000048  6082              STR      r2,[r0,#8]            ;1089
00004a  f8dc2000          LDR      r2,[r12,#0]           ;1089
00004e  ea043252          AND      r2,r4,r2,LSR #13
000052  5c9a              LDRB     r2,[r3,r2]            ;1091
000054  40d1              LSRS     r1,r1,r2              ;1093
000056  60c1              STR      r1,[r0,#0xc]
000058  bc30              POP      {r4,r5}
00005a  4770              BX       lr
                  |L22.92|
00005c  4a10              LDR      r2,|L22.160|
00005e  6811              LDR      r1,[r2,#0]            ;1051
000060  f3c15380          UBFX     r3,r1,#22,#1          ;1051
000064  6811              LDR      r1,[r2,#0]            ;1052
000066  2b00              CMP      r3,#0                 ;1054
000068  f001013f          AND      r1,r1,#0x3f           ;1052
00006c  bf14              ITE      NE                    ;1057
00006e  fbb4f1f1          UDIVNE   r1,r4,r1              ;1057
000072  fbb5f1f1          UDIVEQ   r1,r5,r1              ;1062
000076  6813              LDR      r3,[r2,#0]            ;1062
000078  6812              LDR      r2,[r2,#0]            ;1065
00007a  f3c31388          UBFX     r3,r3,#6,#9           ;1062
00007e  4359              MULS     r1,r3,r1              ;1062
000080  f3c24201          UBFX     r2,r2,#16,#2          ;1065
000084  1c52              ADDS     r2,r2,#1              ;1065
000086  0052              LSLS     r2,r2,#1              ;1065
000088  fbb1f1f2          UDIV     r1,r1,r2              ;1066
00008c  6001              STR      r1,[r0,#0]            ;1054
00008e  e7c8              B        |L22.34|
;;;1095   
                          ENDP

                  |L22.144|
                          DCD      0x40023808
                  |L22.148|
                          DCD      0x00f42400
                  |L22.152|
                          DCD      0x017d7840
                  |L22.156|
                          DCD      ||.data||
                  |L22.160|
                          DCD      0x40023804

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;2091     */
;;;2092   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  2200              MOVS     r2,#0
;;;2093   {
;;;2094     uint32_t tmp = 0;
;;;2095     uint32_t statusreg = 0;
;;;2096     FlagStatus bitstatus = RESET;
;;;2097   
;;;2098     /* Check the parameters */
;;;2099     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;2100   
;;;2101     /* Get the RCC register index */
;;;2102     tmp = RCC_FLAG >> 5;
000002  0941              LSRS     r1,r0,#5
;;;2103     if (tmp == 1)               /* The flag to check is in CR register */
000004  2901              CMP      r1,#1
;;;2104     {
;;;2105       statusreg = RCC->CR;
000006  bf04              ITT      EQ
000008  4908              LDREQ    r1,|L23.44|
00000a  6809              LDREQ    r1,[r1,#0]
00000c  d004              BEQ      |L23.24|
;;;2106     }
;;;2107     else if (tmp == 2)          /* The flag to check is in BDCR register */
00000e  2902              CMP      r1,#2
;;;2108     {
;;;2109       statusreg = RCC->BDCR;
000010  bf0c              ITE      EQ
000012  4907              LDREQ    r1,|L23.48|
;;;2110     }
;;;2111     else                       /* The flag to check is in CSR register */
;;;2112     {
;;;2113       statusreg = RCC->CSR;
000014  4907              LDRNE    r1,|L23.52|
000016  6809              LDR      r1,[r1,#0]
                  |L23.24|
;;;2114     }
;;;2115   
;;;2116     /* Get the flag position */
;;;2117     tmp = RCC_FLAG & FLAG_MASK;
000018  f000001f          AND      r0,r0,#0x1f
;;;2118     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
00001c  2301              MOVS     r3,#1
00001e  fa03f000          LSL      r0,r3,r0
000022  4208              TST      r0,r1
;;;2119     {
;;;2120       bitstatus = SET;
000024  bf18              IT       NE
000026  2201              MOVNE    r2,#1
;;;2121     }
;;;2122     else
;;;2123     {
;;;2124       bitstatus = RESET;
;;;2125     }
;;;2126     /* Return the flag status */
;;;2127     return bitstatus;
000028  4610              MOV      r0,r2
;;;2128   }
00002a  4770              BX       lr
;;;2129   
                          ENDP

                  |L23.44|
                          DCD      0x40023800
                  |L23.48|
                          DCD      0x40023870
                  |L23.52|
                          DCD      0x40023874

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;2156     */
;;;2157   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4a03              LDR      r2,|L24.16|
;;;2158   {
000002  4601              MOV      r1,r0
;;;2159     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;2160   
;;;2161     /* Check the parameters */
;;;2162     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;2163   
;;;2164     /* Check the status of the specified RCC interrupt */
;;;2165     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
;;;2166     {
;;;2167       bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;2168     }
;;;2169     else
;;;2170     {
;;;2171       bitstatus = RESET;
;;;2172     }
;;;2173     /* Return the RCC_IT status */
;;;2174     return  bitstatus;
;;;2175   }
00000e  4770              BX       lr
;;;2176   
                          ENDP

                  |L24.16|
                          DCD      0x4002380c

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;890      */
;;;891    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L25.12|
;;;892    {
;;;893      return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
000002  6800              LDR      r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;894    }
000008  4770              BX       lr
;;;895    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x40023808

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;915      */
;;;916    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4a03              LDR      r2,|L26.16|
;;;917    {
;;;918      uint32_t tmpreg = 0;
;;;919      
;;;920      /* Check the parameters */
;;;921      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;922    
;;;923      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;924    
;;;925      /* Clear HPRE[3:0] bits */
;;;926      tmpreg &= ~RCC_CFGR_HPRE;
000004  f02101f0          BIC      r1,r1,#0xf0
;;;927    
;;;928      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;929      tmpreg |= RCC_SYSCLK;
000008  4308              ORRS     r0,r0,r1
;;;930    
;;;931      /* Store the new value */
;;;932      RCC->CFGR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;933    }
00000c  4770              BX       lr
;;;934    
                          ENDP

00000e  0000              DCW      0x0000
                  |L26.16|
                          DCD      0x40023808

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;263      */
;;;264    void RCC_HSEConfig(uint8_t RCC_HSE)
000000  4902              LDR      r1,|L27.12|
;;;265    {
;;;266      /* Check the parameters */
;;;267      assert_param(IS_RCC_HSE(RCC_HSE));
;;;268    
;;;269      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;270      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;271    
;;;272      /* Set the new HSE configuration -------------------------------------------*/
;;;273      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
000006  7008              STRB     r0,[r1,#0]
;;;274    }
000008  4770              BX       lr
;;;275    
                          ENDP

00000a  0000              DCW      0x0000
                  |L27.12|
                          DCD      0x40023802

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;354      */
;;;355    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;356    {
;;;357      /* Check the parameters */
;;;358      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;359    
;;;360      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;361    }
000004  4770              BX       lr
;;;362    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x42470000

                          AREA ||i.RCC_I2SCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_I2SCLKConfig PROC
;;;1221     */
;;;1222   void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
000000  4901              LDR      r1,|L29.8|
;;;1223   {
;;;1224     /* Check the parameters */
;;;1225     assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
;;;1226   
;;;1227     *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
000002  f8c1015c          STR      r0,[r1,#0x15c]
;;;1228   }
000006  4770              BX       lr
;;;1229   
                          ENDP

                  |L29.8|
                          DCD      0x42470000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;2054     */
;;;2055   void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L30.20|
;;;2056   {
;;;2057     /* Check the parameters */
;;;2058     assert_param(IS_RCC_IT(RCC_IT));
;;;2059     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2060     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2061     {
;;;2062       /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
;;;2063       *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
;;;2064     }
;;;2065     else
;;;2066     {
;;;2067       /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
;;;2068       *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000004  7811              LDRB     r1,[r2,#0]
000006  bf14              ITE      NE                    ;2063
000008  4308              ORRNE    r0,r0,r1              ;2063
00000a  ea210000          BICEQ    r0,r1,r0
00000e  7010              STRB     r0,[r2,#0]            ;2063
;;;2069     }
;;;2070   }
000010  4770              BX       lr
;;;2071   
                          ENDP

000012  0000              DCW      0x0000
                  |L30.20|
                          DCD      0x4002380d

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;379      */
;;;380    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  4905              LDR      r1,|L31.24|
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_RCC_LSE(RCC_LSE));
;;;384    
;;;385      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;386      /* Reset LSEON bit */
;;;387      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;388    
;;;389      /* Reset LSEBYP bit */
;;;390      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  700a              STRB     r2,[r1,#0]
;;;391    
;;;392      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;393      switch (RCC_LSE)
000008  2801              CMP      r0,#1
00000a  d003              BEQ      |L31.20|
00000c  2804              CMP      r0,#4
;;;394      {
;;;395        case RCC_LSE_ON:
;;;396          /* Set LSEON bit */
;;;397          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
;;;398          break;
;;;399        case RCC_LSE_Bypass:
;;;400          /* Set LSEBYP and LSEON bits */
;;;401          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
00000e  bf0c              ITE      EQ
000010  2005              MOVEQ    r0,#5
;;;402          break;
;;;403        default:
;;;404          break;
;;;405      }
;;;406    }
000012  4770              BXNE     lr
                  |L31.20|
000014  7008              STRB     r0,[r1,#0]            ;401
000016  4770              BX       lr
;;;407    
                          ENDP

                  |L31.24|
                          DCD      0x40023870

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;419      */
;;;420    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L32.8|
;;;421    {
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;424    
;;;425      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;426    }
000004  4770              BX       lr
;;;427    
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      0x42470e80

                          AREA ||i.RCC_LTDCCLKDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_LTDCCLKDivConfig PROC
;;;1379     */
;;;1380   void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
000000  4a03              LDR      r2,|L33.16|
;;;1381   {
;;;1382     uint32_t tmpreg = 0;
;;;1383     
;;;1384     /* Check the parameters */
;;;1385     assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
;;;1386     
;;;1387     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1388   
;;;1389     /* Clear PLLSAIDIVR[2:0] bits */
;;;1390     tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
000004  f4213140          BIC      r1,r1,#0x30000
;;;1391   
;;;1392     /* Set PLLSAIDIVR values */
;;;1393     tmpreg |= RCC_PLLSAIDivR;
000008  4308              ORRS     r0,r0,r1
;;;1394   
;;;1395     /* Store the new value */
;;;1396     RCC->DCKCFGR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;1397   }
00000c  4770              BX       lr
;;;1398   
                          ENDP

00000e  0000              DCW      0x0000
                  |L33.16|
                          DCD      0x4002388c

                          AREA ||i.RCC_MCO1Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO1Config PROC
;;;658      */
;;;659    void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
000000  4b03              LDR      r3,|L34.16|
;;;660    {
;;;661      uint32_t tmpreg = 0;
;;;662      
;;;663      /* Check the parameters */
;;;664      assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
;;;665      assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
;;;666    
;;;667      tmpreg = RCC->CFGR;
000002  681a              LDR      r2,[r3,#0]
;;;668    
;;;669      /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
;;;670      tmpreg &= CFGR_MCO1_RESET_MASK;
;;;671    
;;;672      /* Select MCO1 clock source and prescaler */
;;;673      tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
000004  4308              ORRS     r0,r0,r1
000006  f02262ec          BIC      r2,r2,#0x7600000      ;670
00000a  4310              ORRS     r0,r0,r2
;;;674    
;;;675      /* Store the new value */
;;;676      RCC->CFGR = tmpreg;  
00000c  6018              STR      r0,[r3,#0]
;;;677    }
00000e  4770              BX       lr
;;;678    
                          ENDP

                  |L34.16|
                          DCD      0x40023808

                          AREA ||i.RCC_MCO2Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO2Config PROC
;;;696      */
;;;697    void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
000000  4b03              LDR      r3,|L35.16|
;;;698    {
;;;699      uint32_t tmpreg = 0;
;;;700      
;;;701      /* Check the parameters */
;;;702      assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
;;;703      assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
;;;704      
;;;705      tmpreg = RCC->CFGR;
000002  681a              LDR      r2,[r3,#0]
;;;706      
;;;707      /* Clear MCO2 and MCO2PRE[2:0] bits */
;;;708      tmpreg &= CFGR_MCO2_RESET_MASK;
;;;709    
;;;710      /* Select MCO2 clock source and prescaler */
;;;711      tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
000004  4308              ORRS     r0,r0,r1
000006  f0224278          BIC      r2,r2,#0xf8000000     ;708
00000a  4310              ORRS     r0,r0,r2
;;;712    
;;;713      /* Store the new value */
;;;714      RCC->CFGR = tmpreg;  
00000c  6018              STR      r0,[r3,#0]
;;;715    }
00000e  4770              BX       lr
;;;716    
                          ENDP

                  |L35.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;947      */
;;;948    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4a03              LDR      r2,|L36.16|
;;;949    {
;;;950      uint32_t tmpreg = 0;
;;;951    
;;;952      /* Check the parameters */
;;;953      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;954    
;;;955      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;956    
;;;957      /* Clear PPRE1[2:0] bits */
;;;958      tmpreg &= ~RCC_CFGR_PPRE1;
000004  f42151e0          BIC      r1,r1,#0x1c00
;;;959    
;;;960      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;961      tmpreg |= RCC_HCLK;
000008  4308              ORRS     r0,r0,r1
;;;962    
;;;963      /* Store the new value */
;;;964      RCC->CFGR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;965    }
00000c  4770              BX       lr
;;;966    
                          ENDP

00000e  0000              DCW      0x0000
                  |L36.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;978      */
;;;979    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4a03              LDR      r2,|L37.16|
;;;980    {
;;;981      uint32_t tmpreg = 0;
;;;982    
;;;983      /* Check the parameters */
;;;984      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;985    
;;;986      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;987    
;;;988      /* Clear PPRE2[2:0] bits */
;;;989      tmpreg &= ~RCC_CFGR_PPRE2;
000004  f4214160          BIC      r1,r1,#0xe000
;;;990    
;;;991      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;992      tmpreg |= RCC_HCLK << 3;
000008  ea4100c0          ORR      r0,r1,r0,LSL #3
;;;993    
;;;994      /* Store the new value */
;;;995      RCC->CFGR = tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;996    }
00000e  4770              BX       lr
;;;997    
                          ENDP

                  |L37.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;485      */
;;;486    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L38.8|
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;490      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;491    }
000004  4770              BX       lr
;;;492    
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;462      */
;;;463    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
000000  ea411182          ORR      r1,r1,r2,LSL #6
;;;464    {
;;;465      /* Check the parameters */
;;;466      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;467      assert_param(IS_RCC_PLLM_VALUE(PLLM));
;;;468      assert_param(IS_RCC_PLLN_VALUE(PLLN));
;;;469      assert_param(IS_RCC_PLLP_VALUE(PLLP));
;;;470      assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
;;;471    
;;;472      RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
000004  085a              LSRS     r2,r3,#1
000006  4b06              LDR      r3,|L39.32|
000008  f8ddc000          LDR      r12,[sp,#0]
00000c  eb034202          ADD      r2,r3,r2,LSL #16
000010  4311              ORRS     r1,r1,r2
000012  4308              ORRS     r0,r0,r1
000014  4903              LDR      r1,|L39.36|
000016  ea40600c          ORR      r0,r0,r12,LSL #24
00001a  6008              STR      r0,[r1,#0]
;;;473                     (PLLQ << 24);
;;;474    }
00001c  4770              BX       lr
;;;475    
                          ENDP

00001e  0000              DCW      0x0000
                  |L39.32|
                          DCD      0xffff0000
                  |L39.36|
                          DCD      0x40023804

                          AREA ||i.RCC_PLLI2SCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SCmd PROC
;;;568      */
;;;569    void RCC_PLLI2SCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L40.8|
;;;570    {
;;;571      /* Check the parameters */
;;;572      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;573      *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
000002  6688              STR      r0,[r1,#0x68]
;;;574    }
000004  4770              BX       lr
;;;575    
                          ENDP

000006  0000              DCW      0x0000
                  |L40.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLI2SConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SConfig PROC
;;;515      */
;;;516    void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
000000  0180              LSLS     r0,r0,#6
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
;;;520      assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
;;;521    
;;;522      RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
000002  ea407001          ORR      r0,r0,r1,LSL #28
000006  4901              LDR      r1,|L41.12|
000008  6008              STR      r0,[r1,#0]
;;;523    }
00000a  4770              BX       lr
;;;524    #endif /* STM32F40_41xxx || STM32F401xx */
                          ENDP

                  |L41.12|
                          DCD      0x40023884

                          AREA ||i.RCC_PLLSAICmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAICmd PROC
;;;615      */
;;;616    void RCC_PLLSAICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L42.8|
;;;617    {
;;;618      /* Check the parameters */
;;;619      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;620      *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
000002  6708              STR      r0,[r1,#0x70]
;;;621    }
000004  4770              BX       lr
;;;622    
                          ENDP

000006  0000              DCW      0x0000
                  |L42.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLSAIConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAIConfig PROC
;;;597      */
;;;598    void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
000000  0180              LSLS     r0,r0,#6
;;;599    {
;;;600      /* Check the parameters */
;;;601      assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
;;;602      assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
;;;603    
;;;604      RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
000002  ea406001          ORR      r0,r0,r1,LSL #24
000006  4902              LDR      r1,|L43.16|
000008  ea407002          ORR      r0,r0,r2,LSL #28
00000c  6008              STR      r0,[r1,#0]
;;;605    }
00000e  4770              BX       lr
;;;606    
                          ENDP

                  |L43.16|
                          DCD      0x40023888

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;1187     */
;;;1188   void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L44.8|
;;;1189   {
;;;1190     /* Check the parameters */
;;;1191     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1192   
;;;1193     *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1194   }
000004  4770              BX       lr
;;;1195   
                          ENDP

000006  0000              DCW      0x0000
                  |L44.8|
                          DCD      0x42470e3c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;1155     */
;;;1156   void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  f44f7140          MOV      r1,#0x300
;;;1157   {
;;;1158     uint32_t tmpreg = 0;
;;;1159   
;;;1160     /* Check the parameters */
;;;1161     assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;1162   
;;;1163     if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
000004  4381              BICS     r1,r1,r0
000006  d109              BNE      |L45.28|
;;;1164     { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
;;;1165       tmpreg = RCC->CFGR;
000008  4a08              LDR      r2,|L45.44|
00000a  6811              LDR      r1,[r2,#0]
;;;1166   
;;;1167       /* Clear RTCPRE[4:0] bits */
;;;1168       tmpreg &= ~RCC_CFGR_RTCPRE;
;;;1169   
;;;1170       /* Configure HSE division factor for RTC clock */
;;;1171       tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
00000c  f4207340          BIC      r3,r0,#0x300
000010  f42111f8          BIC      r1,r1,#0x1f0000       ;1168
000014  f0234370          BIC      r3,r3,#0xf0000000
000018  4319              ORRS     r1,r1,r3
;;;1172   
;;;1173       /* Store the new value */
;;;1174       RCC->CFGR = tmpreg;
00001a  6011              STR      r1,[r2,#0]
                  |L45.28|
;;;1175     }
;;;1176       
;;;1177     /* Select the RTC clock source */
;;;1178     RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
00001c  4904              LDR      r1,|L45.48|
00001e  680a              LDR      r2,[r1,#0]
000020  f3c0000b          UBFX     r0,r0,#0,#12
000024  4310              ORRS     r0,r0,r2
000026  6008              STR      r0,[r1,#0]
;;;1179   }
000028  4770              BX       lr
;;;1180   
                          ENDP

00002a  0000              DCW      0x0000
                  |L45.44|
                          DCD      0x40023808
                  |L45.48|
                          DCD      0x40023870

                          AREA ||i.RCC_SAIBlockACLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIBlockACLKConfig PROC
;;;1310     */
;;;1311   void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
000000  4a03              LDR      r2,|L46.16|
;;;1312   {
;;;1313     uint32_t tmpreg = 0;
;;;1314     
;;;1315     /* Check the parameters */
;;;1316     assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
;;;1317     
;;;1318     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1319   
;;;1320     /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
;;;1321     tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
000004  f4211140          BIC      r1,r1,#0x300000
;;;1322   
;;;1323     /* Set SAI Block A source selection value */
;;;1324     tmpreg |= RCC_SAIBlockACLKSource;
000008  4308              ORRS     r0,r0,r1
;;;1325   
;;;1326     /* Store the new value */
;;;1327     RCC->DCKCFGR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;1328   }
00000c  4770              BX       lr
;;;1329   
                          ENDP

00000e  0000              DCW      0x0000
                  |L46.16|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIBlockBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIBlockBCLKConfig PROC
;;;1346     */
;;;1347   void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
000000  4a03              LDR      r2,|L47.16|
;;;1348   {
;;;1349     uint32_t tmpreg = 0;
;;;1350     
;;;1351     /* Check the parameters */
;;;1352     assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
;;;1353     
;;;1354     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1355   
;;;1356     /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
;;;1357     tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
000004  f4210140          BIC      r1,r1,#0xc00000
;;;1358   
;;;1359     /* Set SAI Block B source selection value */
;;;1360     tmpreg |= RCC_SAIBlockBCLKSource;
000008  4308              ORRS     r0,r0,r1
;;;1361   
;;;1362     /* Store the new value */
;;;1363     RCC->DCKCFGR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;1364   }
00000c  4770              BX       lr
;;;1365   
                          ENDP

00000e  0000              DCW      0x0000
                  |L47.16|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLI2SClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLI2SClkDivConfig PROC
;;;1242     */
;;;1243   void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
000000  4a03              LDR      r2,|L48.16|
;;;1244   {
;;;1245     uint32_t tmpreg = 0;
;;;1246     
;;;1247     /* Check the parameters */
;;;1248     assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
;;;1249     
;;;1250     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1251   
;;;1252     /* Clear PLLI2SDIVQ[4:0] bits */
;;;1253     tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
000004  1e40              SUBS     r0,r0,#1
000006  f021011f          BIC      r1,r1,#0x1f
;;;1254   
;;;1255     /* Set PLLI2SDIVQ values */
;;;1256     tmpreg |= (RCC_PLLI2SDivQ - 1);
00000a  4308              ORRS     r0,r0,r1
;;;1257   
;;;1258     /* Store the new value */
;;;1259     RCC->DCKCFGR = tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;1260   }
00000e  4770              BX       lr
;;;1261   
                          ENDP

                  |L48.16|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLSAIClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLSAIClkDivConfig PROC
;;;1274     */
;;;1275   void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
000000  4a05              LDR      r2,|L49.24|
;;;1276   {
;;;1277     uint32_t tmpreg = 0;
;;;1278     
;;;1279     /* Check the parameters */
;;;1280     assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
;;;1281     
;;;1282     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1283   
;;;1284     /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
;;;1285     tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
;;;1286   
;;;1287     /* Set PLLSAIDIVQ values */
;;;1288     tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
000004  f06f03ff          MVN      r3,#0xff
000008  f42151f8          BIC      r1,r1,#0x1f00         ;1285
00000c  eb032000          ADD      r0,r3,r0,LSL #8
000010  4308              ORRS     r0,r0,r1
;;;1289   
;;;1290     /* Store the new value */
;;;1291     RCC->DCKCFGR = tmpreg;
000012  6010              STR      r0,[r2,#0]
;;;1292   }
000014  4770              BX       lr
;;;1293   
                          ENDP

000016  0000              DCW      0x0000
                  |L49.24|
                          DCD      0x4002388c

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;862      */
;;;863    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4a03              LDR      r2,|L50.16|
;;;864    {
;;;865      uint32_t tmpreg = 0;
;;;866    
;;;867      /* Check the parameters */
;;;868      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;869    
;;;870      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;871    
;;;872      /* Clear SW[1:0] bits */
;;;873      tmpreg &= ~RCC_CFGR_SW;
000004  f0210103          BIC      r1,r1,#3
;;;874    
;;;875      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;876      tmpreg |= RCC_SYSCLKSource;
000008  4308              ORRS     r0,r0,r1
;;;877    
;;;878      /* Store the new value */
;;;879      RCC->CFGR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;880    }
00000c  4770              BX       lr
;;;881    
                          ENDP

00000e  0000              DCW      0x0000
                  |L50.16|
                          DCD      0x40023808

                          AREA ||i.RCC_TIMCLKPresConfig||, CODE, READONLY, ALIGN=2

                  RCC_TIMCLKPresConfig PROC
;;;1416     */
;;;1417   void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
000000  4901              LDR      r1,|L51.8|
;;;1418   {
;;;1419     /* Check the parameters */
;;;1420     assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
;;;1421   
;;;1422     *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
000002  f8c101e0          STR      r0,[r1,#0x1e0]
;;;1423     
;;;1424   }
000006  4770              BX       lr
;;;1425   
                          ENDP

                  |L51.8|
                          DCD      0x42471000

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=2

                  RCC_WaitForHSEStartUp PROC
;;;287      */
;;;288    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b508              PUSH     {r3,lr}
;;;289    {
;;;290      __IO uint32_t startupcounter = 0;
000002  2000              MOVS     r0,#0
000004  4a0b              LDR      r2,|L52.52|
000006  9000              STR      r0,[sp,#0]
                  |L52.8|
000008  2000              MOVS     r0,#0
00000a  6811              LDR      r1,[r2,#0]
00000c  f4113f00          TST      r1,#0x20000
000010  bf18              IT       NE
000012  2001              MOVNE    r0,#1
;;;291      ErrorStatus status = ERROR;
;;;292      FlagStatus hsestatus = RESET;
;;;293      /* Wait till HSE is ready and if Time out is reached exit */
;;;294      do
;;;295      {
;;;296        hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
;;;297        startupcounter++;
000014  9900              LDR      r1,[sp,#0]
000016  1c49              ADDS     r1,r1,#1
;;;298      } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
000018  9100              STR      r1,[sp,#0]
00001a  f5b14fa0          CMP      r1,#0x5000
00001e  d001              BEQ      |L52.36|
000020  2800              CMP      r0,#0
000022  d0f1              BEQ      |L52.8|
                  |L52.36|
;;;299    
;;;300      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000024  2031              MOVS     r0,#0x31
000026  f7fffffe          BL       RCC_GetFlagStatus
00002a  2800              CMP      r0,#0
;;;301      {
;;;302        status = SUCCESS;
00002c  bf18              IT       NE
00002e  2001              MOVNE    r0,#1
;;;303      }
;;;304      else
;;;305      {
;;;306        status = ERROR;
;;;307      }
;;;308      return (status);
;;;309    }
000030  bd08              POP      {r3,pc}
;;;310    
                          ENDP

000032  0000              DCW      0x0000
                  |L52.52|
                          DCD      0x40023800

                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___15_stm32f4xx_rcc_c_49e27980____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REVSH|
#line 144
|__asm___15_stm32f4xx_rcc_c_49e27980____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
