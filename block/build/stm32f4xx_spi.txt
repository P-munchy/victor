; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\stm32f4xx_spi.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f4xx_spi.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\stm32f4xx_spi.crf arm_hal\lib\stm32f4xx_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;561      */
;;;562    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
;;;566      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;567      
;;;568      if (NewState != DISABLE)
;;;569      {
;;;570        /* Enable the selected SPI peripheral (in I2S mode) */
;;;571        SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
;;;572      }
;;;573      else
;;;574      {
;;;575        /* Disable the selected SPI peripheral in I2S mode */
;;;576        SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
000002  8b81              LDRH     r1,[r0,#0x1c]
000004  bf14              ITE      NE                    ;571
000006  f4416180          ORRNE    r1,r1,#0x400          ;571
00000a  f4216180          BICEQ    r1,r1,#0x400
00000e  8381              STRH     r1,[r0,#0x1c]         ;571
;;;577      }
;;;578    }
000010  4770              BX       lr
;;;579    
                          ENDP


                          AREA ||i.I2S_FullDuplexConfig||, CODE, READONLY, ALIGN=1

                  I2S_FullDuplexConfig PROC
;;;726      */
;;;727    void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
000000  b410              PUSH     {r4}
;;;728    {
;;;729      uint16_t tmpreg = 0, tmp = 0;
;;;730      
;;;731      /* Check the I2S parameters */
;;;732      assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
;;;733      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;734      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;735      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;736      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;737    
;;;738    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;739      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;740      I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  2300              MOVS     r3,#0                 ;729
000006  f02202bf          BIC      r2,r2,#0xbf
00000a  f4226270          BIC      r2,r2,#0xf00
00000e  8382              STRH     r2,[r0,#0x1c]
;;;741      I2Sxext->I2SPR = 0x0002;
000010  2202              MOVS     r2,#2
000012  8402              STRH     r2,[r0,#0x20]
;;;742      
;;;743      /* Get the I2SCFGR register value */
;;;744      tmpreg = I2Sxext->I2SCFGR;
000014  f8b0c01c          LDRH     r12,[r0,#0x1c]
;;;745      
;;;746      /* Get the mode to be configured for the extended I2S */
;;;747      if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
000018  880a              LDRH     r2,[r1,#0]
00001a  f5b27f00          CMP      r2,#0x200
00001e  bf14              ITE      NE
000020  2a00              CMPNE    r2,#0
;;;748      {
;;;749        tmp = I2S_Mode_SlaveRx;
000022  f44f7380          MOVEQ    r3,#0x100
;;;750      }
;;;751      else
;;;752      {
;;;753        if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
;;;754        {
;;;755          tmp = I2S_Mode_SlaveTx;
;;;756        }
;;;757      }
;;;758    
;;;759     
;;;760      /* Configure the I2S with the SPI_InitStruct values */
;;;761      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
000026  884a              LDRH     r2,[r1,#2]
000028  888c              LDRH     r4,[r1,#4]
00002a  8989              LDRH     r1,[r1,#0xc]
00002c  4322              ORRS     r2,r2,r4
00002e  4319              ORRS     r1,r1,r3
000030  4311              ORRS     r1,r1,r2
000032  ea41010c          ORR      r1,r1,r12
000036  f4416100          ORR      r1,r1,#0x800
;;;762                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;763                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;764     
;;;765      /* Write to SPIx I2SCFGR */  
;;;766      I2Sxext->I2SCFGR = tmpreg;
00003a  8381              STRH     r1,[r0,#0x1c]
;;;767    }
00003c  bc10              POP      {r4}
00003e  4770              BX       lr
;;;768    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;347      */
;;;348    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  b470              PUSH     {r4-r6}
;;;349    {
;;;350      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000002  2202              MOVS     r2,#2
;;;351      uint32_t tmp = 0, i2sclk = 0;
;;;352    #ifndef I2S_EXTERNAL_CLOCK_VAL
;;;353      uint32_t pllm = 0, plln = 0, pllr = 0;
;;;354    #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;355      
;;;356      /* Check the I2S parameters */
;;;357      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;358      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;359      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;360      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;361      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;362      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;363      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;364    
;;;365    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;366      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;367      SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000004  8b84              LDRH     r4,[r0,#0x1c]
000006  2300              MOVS     r3,#0                 ;350
000008  f04f0c01          MOV      r12,#1                ;350
00000c  f02404bf          BIC      r4,r4,#0xbf
000010  f4246470          BIC      r4,r4,#0xf00
000014  8384              STRH     r4,[r0,#0x1c]
;;;368      SPIx->I2SPR = 0x0002;
000016  8402              STRH     r2,[r0,#0x20]
;;;369      
;;;370      /* Get the I2SCFGR register value */
;;;371      tmpreg = SPIx->I2SCFGR;
000018  8b84              LDRH     r4,[r0,#0x1c]
;;;372      
;;;373      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;374      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00001a  688d              LDR      r5,[r1,#8]
00001c  2d02              CMP      r5,#2
00001e  d03b              BEQ      |L3.152|
;;;375      {
;;;376        i2sodd = (uint16_t)0;
;;;377        i2sdiv = (uint16_t)2;   
;;;378      }
;;;379      /* If the requested audio frequency is not the default, compute the prescaler */
;;;380      else
;;;381      {
;;;382        /* Check the frame length (For the Prescaler computing) *******************/
;;;383        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000020  888a              LDRH     r2,[r1,#4]
000022  2a00              CMP      r2,#0
;;;384        {
;;;385          /* Packet length is 16 bits */
;;;386          packetlength = 1;
;;;387        }
;;;388        else
;;;389        {
;;;390          /* Packet length is 32 bits */
;;;391          packetlength = 2;
000024  bf18              IT       NE
000026  f04f0c02          MOVNE    r12,#2
;;;392        }
;;;393    
;;;394        /* Get I2S source Clock frequency  ****************************************/
;;;395          
;;;396        /* If an external I2S clock has to be used, this define should be set  
;;;397           in the project configuration or in the stm32f4xx_conf.h file */
;;;398      #ifdef I2S_EXTERNAL_CLOCK_VAL     
;;;399        /* Set external clock as I2S clock source */
;;;400        if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
;;;401        {
;;;402          RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
;;;403        }
;;;404        
;;;405        /* Set the I2S clock to the external clock  value */
;;;406        i2sclk = I2S_EXTERNAL_CLOCK_VAL;
;;;407    
;;;408      #else /* There is no define for External I2S clock source */
;;;409        /* Set PLLI2S as I2S clock source */
;;;410        if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
00002a  4a2d              LDR      r2,|L3.224|
00002c  6813              LDR      r3,[r2,#0]
00002e  f4130f00          TST      r3,#0x800000
000032  d003              BEQ      |L3.60|
;;;411        {
;;;412          RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
000034  6813              LDR      r3,[r2,#0]
000036  f4230300          BIC      r3,r3,#0x800000
00003a  6013              STR      r3,[r2,#0]
                  |L3.60|
;;;413        }    
;;;414        
;;;415        /* Get the PLLI2SN value */
;;;416        plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
00003c  4b29              LDR      r3,|L3.228|
00003e  681a              LDR      r2,[r3,#0]
;;;417                          (RCC_PLLI2SCFGR_PLLI2SN >> 6));
;;;418        
;;;419        /* Get the PLLI2SR value */
;;;420        pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
000040  681b              LDR      r3,[r3,#0]
000042  f3c21288          UBFX     r2,r2,#6,#9           ;416
;;;421                          (RCC_PLLI2SCFGR_PLLI2SR >> 28));
;;;422        
;;;423        /* Get the PLLM value */
;;;424        pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
000046  4d28              LDR      r5,|L3.232|
000048  f3c37302          UBFX     r3,r3,#28,#3          ;420
00004c  682d              LDR      r5,[r5,#0]
;;;425    
;;;426        /* Get the I2S source clock value */
;;;427        i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
00004e  4e27              LDR      r6,|L3.236|
000050  f005053f          AND      r5,r5,#0x3f           ;424
000054  fbb6f5f5          UDIV     r5,r6,r5
000058  436a              MULS     r2,r5,r2
00005a  fbb2f2f3          UDIV     r2,r2,r3
;;;428      #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;429        
;;;430        /* Compute the Real divider depending on the MCLK output state, with a floating point */
;;;431        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00005e  88cb              LDRH     r3,[r1,#6]
000060  f5b37f00          CMP      r3,#0x200
000064  d032              BEQ      |L3.204|
;;;432        {
;;;433          /* MCLK output is enabled */
;;;434          tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;435        }
;;;436        else
;;;437        {
;;;438          /* MCLK output is disabled */
;;;439          tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000066  ea4f134c          LSL      r3,r12,#5
00006a  fbb2f2f3          UDIV     r2,r2,r3
00006e  eb020282          ADD      r2,r2,r2,LSL #2
000072  688b              LDR      r3,[r1,#8]
000074  0052              LSLS     r2,r2,#1
000076  fbb2f2f3          UDIV     r2,r2,r3
00007a  1d52              ADDS     r2,r2,#5
00007c  b292              UXTH     r2,r2
                  |L3.126|
;;;440        }
;;;441        
;;;442        /* Remove the flatting point */
;;;443        tmp = tmp / 10;  
00007e  4b1c              LDR      r3,|L3.240|
;;;444          
;;;445        /* Check the parity of the divider */
;;;446        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
;;;447       
;;;448        /* Compute the i2sdiv prescaler */
;;;449        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
;;;450       
;;;451        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;452        i2sodd = (uint16_t) (i2sodd << 8);
000080  f64f7cff          MOV      r12,#0xffff
000084  fba33202          UMULL    r3,r2,r3,r2           ;443
000088  08d2              LSRS     r2,r2,#3              ;443
00008a  f0020301          AND      r3,r2,#1              ;446
00008e  1ad2              SUBS     r2,r2,r3              ;449
000090  f3c2024f          UBFX     r2,r2,#1,#16          ;449
000094  ea0c2303          AND      r3,r12,r3,LSL #8
                  |L3.152|
;;;453      }
;;;454    
;;;455      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;456      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000098  f1a20c02          SUB      r12,r2,#2
00009c  f1bc0ffe          CMP      r12,#0xfe
;;;457      {
;;;458        /* Set the default values */
;;;459        i2sdiv = 2;
0000a0  bf24              ITT      CS
0000a2  2202              MOVCS    r2,#2
;;;460        i2sodd = 0;
0000a4  2300              MOVCS    r3,#0
;;;461      }
;;;462    
;;;463      /* Write to SPIx I2SPR register the computed value */
;;;464      SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
0000a6  f8b1c006          LDRH     r12,[r1,#6]
0000aa  431a              ORRS     r2,r2,r3
0000ac  ea4c0202          ORR      r2,r12,r2
0000b0  8402              STRH     r2,[r0,#0x20]
;;;465     
;;;466      /* Configure the I2S with the SPI_InitStruct values */
;;;467      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
0000b2  880a              LDRH     r2,[r1,#0]
0000b4  884b              LDRH     r3,[r1,#2]
0000b6  431a              ORRS     r2,r2,r3
0000b8  888b              LDRH     r3,[r1,#4]
0000ba  8989              LDRH     r1,[r1,#0xc]
0000bc  4319              ORRS     r1,r1,r3
0000be  4311              ORRS     r1,r1,r2
0000c0  4321              ORRS     r1,r1,r4
0000c2  f4416100          ORR      r1,r1,#0x800
;;;468                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;469                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;470     
;;;471      /* Write to SPIx I2SCFGR */  
;;;472      SPIx->I2SCFGR = tmpreg;
0000c6  8381              STRH     r1,[r0,#0x1c]
;;;473    }
0000c8  bc70              POP      {r4-r6}
0000ca  4770              BX       lr
                  |L3.204|
0000cc  0a12              LSRS     r2,r2,#8              ;434
0000ce  eb020282          ADD      r2,r2,r2,LSL #2       ;434
0000d2  688b              LDR      r3,[r1,#8]            ;434
0000d4  0052              LSLS     r2,r2,#1              ;434
0000d6  fbb2f2f3          UDIV     r2,r2,r3              ;434
0000da  1d52              ADDS     r2,r2,#5              ;434
0000dc  b292              UXTH     r2,r2                 ;434
0000de  e7ce              B        |L3.126|
;;;474    
                          ENDP

                  |L3.224|
                          DCD      0x40023808
                  |L3.228|
                          DCD      0x40023884
                  |L3.232|
                          DCD      0x40023804
                  |L3.236|
                          DCD      0x017d7840
                  |L3.240|
                          DCD      0xcccccccd

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;507      */
;;;508    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;509    {
;;;510    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;511      /* Initialize the I2S_Mode member */
;;;512      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;513      
;;;514      /* Initialize the I2S_Standard member */
;;;515      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;516      
;;;517      /* Initialize the I2S_DataFormat member */
;;;518      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;519      
;;;520      /* Initialize the I2S_MCLKOutput member */
;;;521      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;522      
;;;523      /* Initialize the I2S_AudioFreq member */
;;;524      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2202              MOVS     r2,#2
;;;525      
;;;526      /* Initialize the I2S_CPOL member */
;;;527      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000c  6082              STR      r2,[r0,#8]
00000e  8181              STRH     r1,[r0,#0xc]
;;;528    }
000010  4770              BX       lr
;;;529    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;608      */
;;;609    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;610    {
;;;611      /* Check the parameters */
;;;612      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;613      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;614      if (SPI_Direction == SPI_Direction_Tx)
;;;615      {
;;;616        /* Set the Tx only mode */
;;;617        SPIx->CR1 |= SPI_Direction_Tx;
;;;618      }
;;;619      else
;;;620      {
;;;621        /* Set the Rx only mode */
;;;622        SPIx->CR1 &= SPI_Direction_Rx;
000004  8801              LDRH     r1,[r0,#0]
000006  bf0c              ITE      EQ                    ;617
000008  f4414180          ORREQ    r1,r1,#0x4000         ;617
00000c  f4214180          BICNE    r1,r1,#0x4000
000010  8001              STRH     r1,[r0,#0]            ;617
;;;623      }
;;;624    }
000012  4770              BX       lr
;;;625    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;906      */
;;;907    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;908    {
;;;909      /* Check the parameters */
;;;910      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;911      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;912      if (NewState != DISABLE)
;;;913      {
;;;914        /* Enable the selected SPI CRC calculation */
;;;915        SPIx->CR1 |= SPI_CR1_CRCEN;
;;;916      }
;;;917      else
;;;918      {
;;;919        /* Disable the selected SPI CRC calculation */
;;;920        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
000002  8801              LDRH     r1,[r0,#0]
000004  bf14              ITE      NE                    ;915
000006  f4415100          ORRNE    r1,r1,#0x2000         ;915
00000a  f4215100          BICEQ    r1,r1,#0x2000
00000e  8001              STRH     r1,[r0,#0]            ;915
;;;921      }
;;;922    }
000010  4770              BX       lr
;;;923    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;536      */
;;;537    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;538    {
;;;539      /* Check the parameters */
;;;540      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;541      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the selected SPI peripheral */
;;;545        SPIx->CR1 |= SPI_CR1_SPE;
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the selected SPI peripheral */
;;;550        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
000002  8801              LDRH     r1,[r0,#0]
000004  bf14              ITE      NE                    ;545
000006  f0410140          ORRNE    r1,r1,#0x40           ;545
00000a  f0210140          BICEQ    r1,r1,#0x40
00000e  8001              STRH     r1,[r0,#0]            ;545
;;;551      }
;;;552    }
000010  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;588      */
;;;589    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;590    {
;;;591      /* Check the parameters */
;;;592      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;593      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;594      /* Clear DFF bit */
;;;595      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f4226200          BIC      r2,r2,#0x800
000006  8002              STRH     r2,[r0,#0]
;;;596      /* Set new DFF bit value */
;;;597      SPIx->CR1 |= SPI_DataSize;
000008  8802              LDRH     r2,[r0,#0]
00000a  4311              ORRS     r1,r1,r2
00000c  8001              STRH     r1,[r0,#0]
;;;598    }
00000e  4770              BX       lr
;;;599    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;946      */
;;;947    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  2901              CMP      r1,#1
;;;948    {
;;;949      uint16_t crcreg = 0;
;;;950      /* Check the parameters */
;;;951      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;952      assert_param(IS_SPI_CRC(SPI_CRC));
;;;953      if (SPI_CRC != SPI_CRC_Rx)
;;;954      {
;;;955        /* Get the Tx CRC register */
;;;956        crcreg = SPIx->TXCRCR;
000002  bf14              ITE      NE
000004  8b00              LDRHNE   r0,[r0,#0x18]
;;;957      }
;;;958      else
;;;959      {
;;;960        /* Get the Rx CRC register */
;;;961        crcreg = SPIx->RXCRCR;
000006  8a80              LDRHEQ   r0,[r0,#0x14]
;;;962      }
;;;963      /* Return the selected CRC register */
;;;964      return crcreg;
;;;965    }
000008  4770              BX       lr
;;;966    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;971      */
;;;972    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;973    {
;;;974      /* Check the parameters */
;;;975      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;976      
;;;977      /* Return the CRC polynomial register */
;;;978      return SPIx->CRCPR;
;;;979    }
000002  4770              BX       lr
;;;980    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;1201     */
;;;1202   void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43c9              MVNS     r1,r1
;;;1203   {
;;;1204     /* Check the parameters */
;;;1205     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1206     assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;1207       
;;;1208     /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;1209     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8101              STRH     r1,[r0,#8]
;;;1210   }
000004  4770              BX       lr
;;;1211   
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;1281     */
;;;1282   void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  f001010f          AND      r1,r1,#0xf
;;;1283   {
;;;1284     uint16_t itpos = 0;
;;;1285     /* Check the parameters */
;;;1286     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1287     assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;1288   
;;;1289     /* Get the SPI_I2S IT index */
;;;1290     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  2201              MOVS     r2,#1
000006  fa02f101          LSL      r1,r2,r1
;;;1291   
;;;1292     /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;1293     SPIx->SR = (uint16_t)~itpos;
00000a  43c9              MVNS     r1,r1
00000c  8101              STRH     r1,[r0,#8]
;;;1294   }
00000e  4770              BX       lr
;;;1295   
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;1008     */
;;;1009   void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;1010   {
;;;1011     /* Check the parameters */
;;;1012     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1013     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1014     assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;1015   
;;;1016     if (NewState != DISABLE)
;;;1017     {
;;;1018       /* Enable the selected SPI DMA requests */
;;;1019       SPIx->CR2 |= SPI_I2S_DMAReq;
;;;1020     }
;;;1021     else
;;;1022     {
;;;1023       /* Disable the selected SPI DMA requests */
;;;1024       SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000002  8882              LDRH     r2,[r0,#4]
000004  bf14              ITE      NE                    ;1019
000006  4311              ORRNE    r1,r1,r2              ;1019
000008  ea220101          BICEQ    r1,r2,r1
00000c  8081              STRH     r1,[r0,#4]            ;1019
;;;1025     }
;;;1026   }
00000e  4770              BX       lr
;;;1027   
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DeInit PROC
;;;223      */
;;;224    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;225    {
;;;226      /* Check the parameters */
;;;227      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;228    
;;;229      if (SPIx == SPI1)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13198          SUBS     r1,r1,#0x13000
00000a  d01a              BEQ      |L14.66|
;;;230      {
;;;231        /* Enable SPI1 reset state */
;;;232        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
;;;233        /* Release SPI1 from reset state */
;;;234        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
;;;235      }
;;;236      else if (SPIx == SPI2)
00000c  f5114178          ADDS     r1,r1,#0xf800
000010  d022              BEQ      |L14.88|
;;;237      {
;;;238        /* Enable SPI2 reset state */
;;;239        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
;;;240        /* Release SPI2 from reset state */
;;;241        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
;;;242      }
;;;243      else if (SPIx == SPI3)
000012  f5b16180          SUBS     r1,r1,#0x400
000016  d02a              BEQ      |L14.110|
;;;244      {
;;;245        /* Enable SPI3 reset state */
;;;246        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
;;;247        /* Release SPI3 from reset state */
;;;248        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
;;;249      }
;;;250      else if (SPIx == SPI4)
000018  f5b14178          SUBS     r1,r1,#0xf800
00001c  d032              BEQ      |L14.132|
;;;251      {
;;;252        /* Enable SPI4 reset state */
;;;253        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
;;;254        /* Release SPI4 from reset state */
;;;255        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
;;;256      }
;;;257      else if (SPIx == SPI5)
00001e  f5b151e0          SUBS     r1,r1,#0x1c00
000022  d03a              BEQ      |L14.154|
;;;258      {
;;;259        /* Enable SPI5 reset state */
;;;260        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
;;;261        /* Release SPI5 from reset state */
;;;262        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
;;;263      }
;;;264      else 
;;;265      {
;;;266        if (SPIx == SPI6)
000024  f5b16180          SUBS     r1,r1,#0x400
;;;267        {
;;;268          /* Enable SPI6 reset state */
;;;269          RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
;;;270          /* Release SPI6 from reset state */
;;;271          RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
;;;272        }
;;;273      }
;;;274    }
000028  bf18              IT       NE
00002a  bd10              POPNE    {r4,pc}
00002c  2101              MOVS     r1,#1                 ;269
00002e  0548              LSLS     r0,r1,#21             ;269
000030  f7fffffe          BL       RCC_APB2PeriphResetCmd
000034  e8bd4010          POP      {r4,lr}               ;271
000038  2100              MOVS     r1,#0                 ;271
00003a  f44f1000          MOV      r0,#0x200000          ;271
00003e  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L14.66|
000042  2101              MOVS     r1,#1                 ;232
000044  0308              LSLS     r0,r1,#12             ;232
000046  f7fffffe          BL       RCC_APB2PeriphResetCmd
00004a  e8bd4010          POP      {r4,lr}               ;234
00004e  2100              MOVS     r1,#0                 ;234
000050  f44f5080          MOV      r0,#0x1000            ;234
000054  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L14.88|
000058  2101              MOVS     r1,#1                 ;239
00005a  0388              LSLS     r0,r1,#14             ;239
00005c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000060  e8bd4010          POP      {r4,lr}               ;241
000064  2100              MOVS     r1,#0                 ;241
000066  f44f4080          MOV      r0,#0x4000            ;241
00006a  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L14.110|
00006e  2101              MOVS     r1,#1                 ;246
000070  03c8              LSLS     r0,r1,#15             ;246
000072  f7fffffe          BL       RCC_APB1PeriphResetCmd
000076  e8bd4010          POP      {r4,lr}               ;248
00007a  2100              MOVS     r1,#0                 ;248
00007c  f44f4000          MOV      r0,#0x8000            ;248
000080  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L14.132|
000084  2101              MOVS     r1,#1                 ;253
000086  0348              LSLS     r0,r1,#13             ;253
000088  f7fffffe          BL       RCC_APB2PeriphResetCmd
00008c  e8bd4010          POP      {r4,lr}               ;255
000090  2100              MOVS     r1,#0                 ;255
000092  f44f5000          MOV      r0,#0x2000            ;255
000096  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L14.154|
00009a  2101              MOVS     r1,#1                 ;260
00009c  0508              LSLS     r0,r1,#20             ;260
00009e  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000a2  e8bd4010          POP      {r4,lr}               ;262
0000a6  2100              MOVS     r1,#0                 ;262
0000a8  f44f1080          MOV      r0,#0x100000          ;262
0000ac  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;275    
                          ENDP


                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;1160     */
;;;1161   FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;1162   {
;;;1163     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1164     /* Check the parameters */
;;;1165     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1166     assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;1167     
;;;1168     /* Check the status of the specified SPI flag */
;;;1169     if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8912              LDRH     r2,[r2,#8]
000006  420a              TST      r2,r1
;;;1170     {
;;;1171       /* SPI_I2S_FLAG is set */
;;;1172       bitstatus = SET;
000008  bf18              IT       NE
00000a  2001              MOVNE    r0,#1
;;;1173     }
;;;1174     else
;;;1175     {
;;;1176       /* SPI_I2S_FLAG is reset */
;;;1177       bitstatus = RESET;
;;;1178     }
;;;1179     /* Return the SPI_I2S_FLAG status */
;;;1180     return  bitstatus;
;;;1181   }
00000c  4770              BX       lr
;;;1182   
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;1226     */
;;;1227   ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  f001030f          AND      r3,r1,#0xf
;;;1228   {
;;;1229     ITStatus bitstatus = RESET;
;;;1230     uint16_t itpos = 0, itmask = 0, enablestatus = 0;
;;;1231   
;;;1232     /* Check the parameters */
;;;1233     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1234     assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;1235   
;;;1236     /* Get the SPI_I2S_IT index */
;;;1237     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  f04f0c01          MOV      r12,#1
000008  fa0cf303          LSL      r3,r12,r3
00000c  2200              MOVS     r2,#0                 ;1229
;;;1238   
;;;1239     /* Get the SPI_I2S_IT IT mask */
;;;1240     itmask = SPI_I2S_IT >> 4;
00000e  0909              LSRS     r1,r1,#4
;;;1241   
;;;1242     /* Set the IT mask */
;;;1243     itmask = 0x01 << itmask;
000010  fa0cf101          LSL      r1,r12,r1
;;;1244   
;;;1245     /* Get the SPI_I2S_IT enable bit status */
;;;1246     enablestatus = (SPIx->CR2 & itmask) ;
000014  f8b0c004          LDRH     r12,[r0,#4]
000018  b29b              UXTH     r3,r3                 ;1237
00001a  b289              UXTH     r1,r1                 ;1243
;;;1247   
;;;1248     /* Check the status of the specified SPI interrupt */
;;;1249     if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
00001c  8900              LDRH     r0,[r0,#8]
00001e  ea0c0101          AND      r1,r12,r1             ;1246
000022  4218              TST      r0,r3
000024  bf1c              ITT      NE
000026  2900              CMPNE    r1,#0
;;;1250     {
;;;1251       /* SPI_I2S_IT is set */
;;;1252       bitstatus = SET;
000028  2201              MOVNE    r2,#1
;;;1253     }
;;;1254     else
;;;1255     {
;;;1256       /* SPI_I2S_IT is reset */
;;;1257       bitstatus = RESET;
;;;1258     }
;;;1259     /* Return the SPI_I2S_IT status */
;;;1260     return bitstatus;
00002a  4610              MOV      r0,r2
;;;1261   }
00002c  4770              BX       lr
;;;1262   
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;1116     */
;;;1117   void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  0909              LSRS     r1,r1,#4
;;;1118   {
;;;1119     uint16_t itpos = 0, itmask = 0 ;
;;;1120     
;;;1121     /* Check the parameters */
;;;1122     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1123     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1124     assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;1125   
;;;1126     /* Get the SPI IT index */
;;;1127     itpos = SPI_I2S_IT >> 4;
;;;1128   
;;;1129     /* Set the IT mask */
;;;1130     itmask = (uint16_t)1 << (uint16_t)itpos;
000002  2301              MOVS     r3,#1
000004  fa03f101          LSL      r1,r3,r1
;;;1131   
;;;1132     if (NewState != DISABLE)
000008  2a00              CMP      r2,#0
;;;1133     {
;;;1134       /* Enable the selected SPI interrupt */
;;;1135       SPIx->CR2 |= itmask;
;;;1136     }
;;;1137     else
;;;1138     {
;;;1139       /* Disable the selected SPI interrupt */
;;;1140       SPIx->CR2 &= (uint16_t)~itmask;
00000a  8882              LDRH     r2,[r0,#4]
00000c  b289              UXTH     r1,r1                 ;1130
00000e  bf14              ITE      NE                    ;1135
000010  4311              ORRNE    r1,r1,r2              ;1135
000012  ea220101          BICEQ    r1,r2,r1
000016  8081              STRH     r1,[r0,#4]            ;1135
;;;1141     }
;;;1142   }
000018  4770              BX       lr
;;;1143   
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;800      */
;;;801    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  8980              LDRH     r0,[r0,#0xc]
;;;802    {
;;;803      /* Check the parameters */
;;;804      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;805      
;;;806      /* Return the data in the DR register */
;;;807      return SPIx->DR;
;;;808    }
000002  4770              BX       lr
;;;809    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;816      */
;;;817    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;818    {
;;;819      /* Check the parameters */
;;;820      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;821      
;;;822      /* Write in the DR register the data to be sent */
;;;823      SPIx->DR = Data;
;;;824    }
000002  4770              BX       lr
;;;825    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;283      */
;;;284    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b410              PUSH     {r4}
;;;285    {
;;;286      uint16_t tmpreg = 0;
;;;287      
;;;288      /* check the parameters */
;;;289      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;290      
;;;291      /* Check the SPI parameters */
;;;292      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;293      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;294      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;295      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;296      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;297      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;298      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;299      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;300      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;301    
;;;302    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;303      /* Get the SPIx CR1 value */
;;;304      tmpreg = SPIx->CR1;
000002  8802              LDRH     r2,[r0,#0]
;;;305      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;306      tmpreg &= CR1_CLEAR_MASK;
;;;307      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;308         master/salve mode, CPOL and CPHA */
;;;309      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;310      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;311      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;312      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;313      /* Set CPOL bit according to SPI_CPOL value */
;;;314      /* Set CPHA bit according to SPI_CPHA value */
;;;315      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000004  880b              LDRH     r3,[r1,#0]
000006  f8b1c002          LDRH     r12,[r1,#2]
00000a  88cc              LDRH     r4,[r1,#6]
00000c  ea43030c          ORR      r3,r3,r12
000010  f8b1c004          LDRH     r12,[r1,#4]
000014  f4025241          AND      r2,r2,#0x3040         ;306
000018  ea4c0c04          ORR      r12,r12,r4
00001c  ea43030c          ORR      r3,r3,r12
000020  f8b1c008          LDRH     r12,[r1,#8]
000024  ea43030c          ORR      r3,r3,r12
000028  f8b1c00a          LDRH     r12,[r1,#0xa]
00002c  ea43030c          ORR      r3,r3,r12
000030  f8b1c00c          LDRH     r12,[r1,#0xc]
000034  ea43030c          ORR      r3,r3,r12
000038  f8b1c00e          LDRH     r12,[r1,#0xe]
00003c  ea43030c          ORR      r3,r3,r12
000040  431a              ORRS     r2,r2,r3
;;;316                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;317                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;318                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;319      /* Write to SPIx CR1 */
;;;320      SPIx->CR1 = tmpreg;
000042  8002              STRH     r2,[r0,#0]
;;;321    
;;;322      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;323      SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
000044  8b82              LDRH     r2,[r0,#0x1c]
000046  f4226200          BIC      r2,r2,#0x800
00004a  8382              STRH     r2,[r0,#0x1c]
;;;324    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;325      /* Write to SPIx CRCPOLY */
;;;326      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
00004c  8a09              LDRH     r1,[r1,#0x10]
00004e  8201              STRH     r1,[r0,#0x10]
;;;327    }
000050  bc10              POP      {r4}
000052  4770              BX       lr
;;;328    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;634      */
;;;635    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;636    {
;;;637      /* Check the parameters */
;;;638      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;639      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;640      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
;;;641      {
;;;642        /* Set NSS pin internally by software */
;;;643        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
;;;644      }
;;;645      else
;;;646      {
;;;647        /* Reset NSS pin internally by software */
;;;648        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000004  8801              LDRH     r1,[r0,#0]
000006  3aff              SUBS     r2,r2,#0xff           ;640
000008  bf14              ITE      NE                    ;643
00000a  f4417180          ORRNE    r1,r1,#0x100          ;643
00000e  f4217180          BICEQ    r1,r1,#0x100
000012  8001              STRH     r1,[r0,#0]            ;643
;;;649      }
;;;650    }
000014  4770              BX       lr
;;;651    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;658      */
;;;659    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;660    {
;;;661      /* Check the parameters */
;;;662      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;663      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;664      if (NewState != DISABLE)
;;;665      {
;;;666        /* Enable the selected SPI SS output */
;;;667        SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
;;;668      }
;;;669      else
;;;670      {
;;;671        /* Disable the selected SPI SS output */
;;;672        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
000002  8881              LDRH     r1,[r0,#4]
000004  bf14              ITE      NE                    ;667
000006  f0410104          ORRNE    r1,r1,#4              ;667
00000a  f0210104          BICEQ    r1,r1,#4
00000e  8081              STRH     r1,[r0,#4]            ;667
;;;673      }
;;;674    }
000010  4770              BX       lr
;;;675    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;479      */
;;;480    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;481    {
;;;482    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;483      /* Initialize the SPI_Direction member */
;;;484      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;485      /* initialize the SPI_Mode member */
;;;486      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;487      /* initialize the SPI_DataSize member */
;;;488      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;489      /* Initialize the SPI_CPOL member */
;;;490      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;491      /* Initialize the SPI_CPHA member */
;;;492      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;493      /* Initialize the SPI_NSS member */
;;;494      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;495      /* Initialize the SPI_BaudRatePrescaler member */
;;;496      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;497      /* Initialize the SPI_FirstBit member */
;;;498      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;499      /* Initialize the SPI_CRCPolynomial member */
;;;500      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;501    }
000016  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.SPI_TIModeCmd||, CODE, READONLY, ALIGN=1

                  SPI_TIModeCmd PROC
;;;689      */
;;;690    void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;691    {
;;;692      /* Check the parameters */
;;;693      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;694      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;695    
;;;696      if (NewState != DISABLE)
;;;697      {
;;;698        /* Enable the TI mode for the selected SPI peripheral */
;;;699        SPIx->CR2 |= SPI_CR2_FRF;
;;;700      }
;;;701      else
;;;702      {
;;;703        /* Disable the TI mode for the selected SPI peripheral */
;;;704        SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
000002  8881              LDRH     r1,[r0,#4]
000004  bf14              ITE      NE                    ;699
000006  f0410110          ORRNE    r1,r1,#0x10           ;699
00000a  f0210110          BICEQ    r1,r1,#0x10
00000e  8081              STRH     r1,[r0,#4]            ;699
;;;705      }
;;;706    }
000010  4770              BX       lr
;;;707    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;928      */
;;;929    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;930    {
;;;931      /* Check the parameters */
;;;932      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;933      
;;;934      /* Enable the selected SPI CRC transmission */
;;;935      SPIx->CR1 |= SPI_CR1_CRCNEXT;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;936    }
000008  4770              BX       lr
;;;937    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\stm32f4xx_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___15_stm32f4xx_spi_c_2b928927____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____REVSH|
#line 144
|__asm___15_stm32f4xx_spi_c_2b928927____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
