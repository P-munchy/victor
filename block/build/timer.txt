; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\timer.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\timer.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\timer.crf arm_hal\hal\timer.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo3HAL15GetMicroCounterEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL15GetMicroCounterEv PROC ; Anki::Cozmo::HAL::GetMicroCounter()
;;;40           // Get the number of microseconds since boot
;;;41           u32 GetMicroCounter(void)
000000  b672              CPSID    i
;;;42           {
;;;43             // The code below turns the 16-bit TIM10 into a 32-bit timer
;;;44             volatile static u16 high = 0;	// Supply the missing high bits of TIM10
;;;45             volatile static u16 last = 0;	// Last read of TIM10
;;;46             
;;;47             // NOTE:  This must be interrupt-safe for encoder code, so take care below
;;;48             __disable_irq();
;;;49             u32 now = TIM10->CNT;
000002  4807              LDR      r0,|L1.32|
000004  6800              LDR      r0,[r0,#0]
;;;50             
;;;51             if (now < last)				// Each time we wrap TIM10, increase the high part by 1
000006  4907              LDR      r1,|L1.36|
000008  884a              LDRH     r2,[r1,#2]  ; last
00000a  4290              CMP      r0,r2
00000c  d202              BCS      |L1.20|
;;;52               high++;	
00000e  880a              LDRH     r2,[r1,#0]  ; high
000010  1c52              ADDS     r2,r2,#1
000012  800a              STRH     r2,[r1,#0]
                  |L1.20|
;;;53             
;;;54             last = now;
000014  8048              STRH     r0,[r1,#2]
;;;55             now |= (high << 16);
000016  8809              LDRH     r1,[r1,#0]  ; high
000018  ea404001          ORR      r0,r0,r1,LSL #16
;;;56             __enable_irq();
00001c  b662              CPSIE    i
;;;57             
;;;58             return now;
;;;59           }
00001e  4770              BX       lr
;;;60         }
                          ENDP

                  |L1.32|
                          DCD      0x40014424
                  |L1.36|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL9MicroWaitEj||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL9MicroWaitEj PROC ; Anki::Cozmo::HAL::MicroWait(unsigned)
;;;29           // Wait the specified number of microseconds
;;;30           void MicroWait(u32 us)
000000  b410              PUSH     {r4}
000002  b672              CPSID    i
000004  4b13              LDR      r3,|L2.84|
000006  6819              LDR      r1,[r3,#0]
000008  4a13              LDR      r2,|L2.88|
00000a  f8b2c002          LDRH     r12,[r2,#2]  ; last
00000e  4561              CMP      r1,r12
;;;31           {
000010  d205              BCS      |L2.30|
000012  f8b2c000          LDRH     r12,[r2,#0]  ; high
000016  f10c0c01          ADD      r12,r12,#1
00001a  f8a2c000          STRH     r12,[r2,#0]
                  |L2.30|
00001e  8051              STRH     r1,[r2,#2]
000020  f8b2c000          LDRH     r12,[r2,#0]  ; high
000024  ea414c0c          ORR      r12,r1,r12,LSL #16
000028  b662              CPSIE    i
;;;32             u32 start = GetMicroCounter();
;;;33             us++;   // Wait 1 tick longer, in case we are midway through start tick
00002a  1c44              ADDS     r4,r0,#1
                  |L2.44|
00002c  b672              CPSID    i
00002e  6818              LDR      r0,[r3,#0]
000030  8851              LDRH     r1,[r2,#2]  ; last
000032  4288              CMP      r0,r1
000034  d202              BCS      |L2.60|
000036  8811              LDRH     r1,[r2,#0]  ; high
000038  1c49              ADDS     r1,r1,#1
00003a  8011              STRH     r1,[r2,#0]
                  |L2.60|
00003c  8050              STRH     r0,[r2,#2]
00003e  8811              LDRH     r1,[r2,#0]  ; high
000040  ea404001          ORR      r0,r0,r1,LSL #16
000044  b662              CPSIE    i
;;;34     
;;;35             // Note: The below handles wrapping with unsigned subtraction
;;;36             while (GetMicroCounter()-start < us)
000046  eba0000c          SUB      r0,r0,r12
00004a  42a0              CMP      r0,r4
00004c  d3ee              BCC      |L2.44|
;;;37               ;
;;;38           }
00004e  bc10              POP      {r4}
000050  4770              BX       lr
;;;39     
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40014424
                  |L2.88|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL9TimerInitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL9TimerInitEv PROC ; Anki::Cozmo::HAL::TimerInit()
;;;13           // This must run first in main()
;;;14           void TimerInit(void)
000000  b510              PUSH     {r4,lr}
;;;15           {
;;;16             TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;17     
;;;18             // Initialize the 1 microsecond timer
;;;19             RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
000002  2101              MOVS     r1,#1
000004  b084              SUB      sp,sp,#0x10           ;15
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;20             TIM_TimeBaseStructure.TIM_Prescaler = (ABP2_CLOCK_MHZ) - 1;  // APB1 clock is not system clock
00000c  2059              MOVS     r0,#0x59
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;21             TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000012  2000              MOVS     r0,#0
;;;22             TIM_TimeBaseStructure.TIM_Period = 0xffff;
000014  f64f71ff          MOV      r1,#0xffff
;;;23             TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000018  f8ad0008          STRH     r0,[sp,#8]
;;;24             TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
;;;25             TIM_TimeBaseInit(TIM10, &TIM_TimeBaseStructure);
00001c  4c07              LDR      r4,|L3.60|
00001e  f8ad0002          STRH     r0,[sp,#2]            ;21
000022  9101              STR      r1,[sp,#4]            ;23
000024  f88d000a          STRB     r0,[sp,#0xa]          ;24
000028  4669              MOV      r1,sp
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       TIM_TimeBaseInit
;;;26             TIM_Cmd(TIM10, ENABLE);
000030  2101              MOVS     r1,#1
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       TIM_Cmd
;;;27           }
000038  b004              ADD      sp,sp,#0x10
00003a  bd10              POP      {r4,pc}
;;;28     
                          ENDP

                  |L3.60|
                          DCD      0x40014400

                          AREA ||i.__sti___9_timer_cpp_03dbb631||, CODE, READONLY, ALIGN=2

                  __sti___9_timer_cpp_03dbb631 PROC
000000  4803              LDR      r0,|L4.16|
000002  ed9f0a02          VLDR     s0,|L4.12|
000006  ed800a01          VSTR     s0,[r0,#4]
00000a  4770              BX       lr
                          ENDP

                  |L4.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L4.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo3HAL9TimerInitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL9TimerInitEv||
                          DCD      0x00000001

                          AREA ||area_number.6||, LINKORDER=||i._ZN4Anki5Cozmo3HAL15GetMicroCounterEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL15GetMicroCounterEv||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Anki5Cozmo3HAL9MicroWaitEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL9MicroWaitEj||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i.__sti___9_timer_cpp_03dbb631||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___9_timer_cpp_03dbb631||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  high
000000  0000              DCW      0x0000
                  last
000002  0000              DCW      0x0000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___9_timer_cpp_03dbb631

;*** Start embedded assembler ***

#line 1 "arm_hal\\hal\\timer.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_timer_cpp_03dbb631___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___9_timer_cpp_03dbb631___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_timer_cpp_03dbb631___Z7__REVSHi|
#line 144
|__asm___9_timer_cpp_03dbb631___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
