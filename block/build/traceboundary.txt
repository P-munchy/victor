; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\traceboundary.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\traceboundary.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\traceboundary.crf ..\coretech\vision\robot\src\traceBoundary.cpp]
                          THUMB

                          AREA ||i._ZN4Anki8Embedded25TraceNextExteriorBoundaryERKNS0_19ConnectedComponentsEiRNS0_15FixedLengthListINS0_5PointIsEEEERiNS0_11MemoryStackE||, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded25TraceNextExteriorBoundaryERKNS0_19ConnectedComponentsEiRNS0_15FixedLengthListINS0_5PointIsEEEERiNS0_11MemoryStackE PROC ; Anki::Embedded::TraceNextExteriorBoundary(const Anki::Embedded::ConnectedComponents&, int, Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>&, int&, Anki::Embedded::MemoryStack)
;;;25         // Requires sizeof(s16)*(2*componentWidth + 2*componentHeight) bytes of scratch
;;;26         Result TraceNextExteriorBoundary(const ConnectedComponents &components, const s32 startComponentIndex, FixedLengthList<Point<s16> > &extractedBoundary, s32 &endComponentIndex, MemoryStack scratch)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;27         {
000004  b089              SUB      sp,sp,#0x24
000006  469a              MOV      r10,r3
000008  4614              MOV      r4,r2
00000a  4689              MOV      r9,r1
00000c  4606              MOV      r6,r0
;;;28           const s32 numComponents = components.get_size();
00000e  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents8get_sizeEv ; Anki::Embedded::ConnectedComponents::get_size() const
000012  4605              MOV      r5,r0
;;;29     
;;;30           AnkiConditionalErrorAndReturnValue(components.IsValid(),
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents7IsValidEv ; Anki::Embedded::ConnectedComponents::IsValid() const
00001a  f8df83dc          LDR      r8,|L1.1016|
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L1.130|
000022  4620              MOV      r0,r4
000024  68e7              LDR      r7,[r4,#0xc]
000026  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
00002a  4287              CMP      r7,r0
00002c  dc37              BGT      |L1.158|
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b130              CBZ      r0,|L1.64|
000032  69a0              LDR      r0,[r4,#0x18]
000034  2800              CMP      r0,#0
000036  bfa3              ITTTE    GE
000038  69e0              LDRGE    r0,[r4,#0x1c]
00003a  2800              CMPGE    r0,#0
00003c  2001              MOVGE    r0,#1
00003e  2000              MOVLT    r0,#0
                  |L1.64|
;;;31             RESULT_FAIL_INVALID_OBJECT, "ComputeQuadrilateralsFromConnectedComponents", "components is not valid");
;;;32     
;;;33           AnkiConditionalErrorAndReturnValue(extractedBoundary.IsValid(),
000040  2800              CMP      r0,#0
000042  d02c              BEQ      |L1.158|
;;;34             RESULT_FAIL_INVALID_OBJECT, "ComputeQuadrilateralsFromConnectedComponents", "extractedBoundary is not valid");
;;;35     
;;;36           AnkiConditionalErrorAndReturnValue(scratch.IsValid(),
000044  9812              LDR      r0,[sp,#0x48]
000046  f7fffffe          BL       _ZNK4Anki8Embedded11MemoryStack7IsValidEv ; Anki::Embedded::MemoryStack::IsValid() const
00004a  2800              CMP      r0,#0
00004c  d035              BEQ      |L1.186|
;;;37             RESULT_FAIL_INVALID_OBJECT, "ComputeQuadrilateralsFromConnectedComponents", "scratch is not valid");
;;;38     
;;;39           AnkiConditionalErrorAndReturnValue(components.get_isSortedInId(),
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents16get_isSortedInIdEv ; Anki::Embedded::ConnectedComponents::get_isSortedInId() const
000054  2800              CMP      r0,#0
000056  f000803e          BEQ.W    |L1.214|
;;;40             RESULT_FAIL_INVALID_PARAMETER, "ComputeQuadrilateralsFromConnectedComponents", "components must be sorted in id");
;;;41     
;;;42           AnkiConditionalErrorAndReturnValue(startComponentIndex >= 0 && startComponentIndex < numComponents,
00005a  f1b90f00          CMP      r9,#0
00005e  bfa8              IT       GE
000060  454d              CMPGE    r5,r9
000062  f3008046          BGT.W    |L1.242|
000066  202a              MOVS     r0,#0x2a
000068  e9cd8000          STRD     r8,r0,[sp,#0]
00006c  a3e3              ADR      r3,|L1.1020|
00006e  a2ef              ADR      r2,|L1.1068|
000070  a1f7              ADR      r1,|L1.1104|
000072  2005              MOVS     r0,#5
000074  f7fffffe          BL       _Anki_Log
;;;43             RESULT_FAIL_INVALID_PARAMETER, "ComputeQuadrilateralsFromConnectedComponents", "startComponentIndex is not in range");
;;;44     
;;;45           const bool useU16 = components.get_useU16();
;;;46           const ConnectedComponentsTemplate<u16>* componentsU16 = components.get_componentsU16();
;;;47           const ConnectedComponentsTemplate<s32>* componentsS32 = components.get_componentsS32();
;;;48     
;;;49           u16 componentIdU16 = 0;
;;;50           s32 componentIdS32 = 0;
;;;51     
;;;52           if(useU16) {
;;;53             componentIdU16 = (*componentsU16)[startComponentIndex].id;
;;;54     
;;;55             AnkiConditionalErrorAndReturnValue(componentIdU16 > 0,
;;;56               RESULT_FAIL, "ComputeQuadrilateralsFromConnectedComponents", "componentId is not valid.");
;;;57           } else {
;;;58             componentIdS32 = (*componentsS32)[startComponentIndex].id;
;;;59     
;;;60             AnkiConditionalErrorAndReturnValue(componentIdS32 > 0,
;;;61               RESULT_FAIL, "ComputeQuadrilateralsFromConnectedComponents", "componentId is not valid.");
;;;62           }
;;;63     
;;;64           extractedBoundary.Clear();
;;;65     
;;;66           // Compute the bounding box of the current component
;;;67     
;;;68           //coordinate_top = min(component(:,1), [], 1);
;;;69           //coordinate_bottom = max(component(:,1), [], 1);
;;;70           //coordinate_left = min(component(:,2), [], 1);
;;;71           //coordinate_right = max(component(:,3), [], 1);
;;;72           Rectangle<s16> boundingBox(s16_MAX, s16_MIN, s16_MAX, s16_MIN);
;;;73           endComponentIndex = numComponents - 1;
;;;74     
;;;75           if(useU16) {
;;;76             for(s32 i=startComponentIndex; i<numComponents; i++) {
;;;77               if((*componentsU16)[i].id != componentIdU16) {
;;;78                 endComponentIndex = i-1;
;;;79                 break;
;;;80               }
;;;81     
;;;82               const s16 xStart = (*componentsU16)[i].xStart;
;;;83               const s16 xEnd = (*componentsU16)[i].xEnd;
;;;84               const s16 y = (*componentsU16)[i].y;
;;;85     
;;;86               boundingBox.left = MIN(boundingBox.left, xStart);
;;;87               boundingBox.right = MAX(boundingBox.right, xEnd+1); // +1, because the coorindate we want is the crack after the right pixel
;;;88               boundingBox.top = MIN(boundingBox.top, y);
;;;89               boundingBox.bottom = MAX(boundingBox.bottom, y+1); // +1, because the coorindate we want is the crack after the bottom pixel
;;;90             }
;;;91           } else { // if(useU16)
;;;92             for(s32 i=startComponentIndex; i<numComponents; i++) {
;;;93               if((*componentsS32)[i].id != componentIdS32) {
;;;94                 endComponentIndex = i-1;
;;;95                 break;
;;;96               }
;;;97     
;;;98               const s16 xStart = (*componentsS32)[i].xStart;
;;;99               const s16 xEnd = (*componentsS32)[i].xEnd;
;;;100              const s16 y = (*componentsS32)[i].y;
;;;101    
;;;102              boundingBox.left = MIN(boundingBox.left, xStart);
;;;103              boundingBox.right = MAX(boundingBox.right, xEnd+1); // +1, because the coorindate we want is the crack after the right pixel
;;;104              boundingBox.top = MIN(boundingBox.top, y);
;;;105              boundingBox.bottom = MAX(boundingBox.bottom, y+1); // +1, because the coorindate we want is the crack after the bottom pixel
;;;106            }
;;;107          } // if(useU16) ... else
;;;108    
;;;109          if(boundingBox.left == s16_MAX || boundingBox.right == s16_MIN || boundingBox.top == s16_MAX || boundingBox.bottom == s16_MIN) {
;;;110            AnkiWarn("ComputeQuadrilateralsFromConnectedComponents", "Something was corrupted with the input component");
;;;111            return RESULT_FAIL;
;;;112          }
;;;113    
;;;114          const s16 boxWidth = boundingBox.get_width();
;;;115          const s16 boxHeight = boundingBox.get_height();
;;;116    
;;;117          s16 * edge_left = reinterpret_cast<s16*>(scratch.Allocate(sizeof(s16)*boxHeight));
;;;118          s16 * edge_right = reinterpret_cast<s16*>(scratch.Allocate(sizeof(s16)*boxHeight));
;;;119          s16 * edge_top = reinterpret_cast<s16*>(scratch.Allocate(sizeof(s16)*boxWidth));
;;;120          s16 * edge_bottom = reinterpret_cast<s16*>(scratch.Allocate(sizeof(s16)*boxWidth));
;;;121    
;;;122          // Set the right away, in case a buggy component is missing a row or column
;;;123          for(s32 i=0; i<boxHeight;i++){
;;;124            edge_left[i] = s16_MAX;
;;;125            edge_right[i] = s16_MIN;
;;;126          }
;;;127    
;;;128          for(s32 i=0; i<boxWidth;i++){
;;;129            edge_top[i] = s16_MAX;
;;;130            edge_bottom[i] = s16_MIN;
;;;131          }
;;;132    
;;;133          //% 1. Compute the extreme pixels of the components, on each edge
;;;134          if(useU16) {
;;;135            for(s32 iSegment=startComponentIndex; iSegment<=endComponentIndex; iSegment++) {
;;;136              //component(:, 1) = component(:, 1) - coordinate_top + 1;
;;;137              //component(:, 2:3) = component(:, 2:3) - coordinate_left + 1;
;;;138              //xStart = component(iSubComponent, 2);
;;;139              //xEnd = component(iSubComponent, 3);
;;;140              //y = component(iSubComponent, 1);
;;;141              ConnectedComponentSegment<u16> currentSegment = (*componentsU16)[iSegment];
;;;142              currentSegment.xEnd -= boundingBox.left;
;;;143              currentSegment.xStart -= boundingBox.left;
;;;144              currentSegment.y -= boundingBox.top;
;;;145    
;;;146              AnkiAssert(currentSegment.xStart >= 0);
;;;147              for(s32 x=currentSegment.xStart; x<=currentSegment.xEnd; x++) {
;;;148                edge_top[x] = MIN(edge_top[x], currentSegment.y);
;;;149                edge_bottom[x] = MAX(edge_bottom[x], currentSegment.y);
;;;150    
;;;151                edge_left[currentSegment.y] = MIN(edge_left[currentSegment.y], currentSegment.xStart);
;;;152                edge_right[currentSegment.y] = MAX(edge_right[currentSegment.y], currentSegment.xEnd);
;;;153              } // for(s32 x=currentSegment.xStart; x<=currentSegment.xEnd; x++)
;;;154            } // for(s32 iSegment=startComponentIndex; iSegment<=endComponentIndex; iSegment++)
;;;155          } else { // if(useU16)
;;;156            for(s32 iSegment=startComponentIndex; iSegment<=endComponentIndex; iSegment++) {
;;;157              //component(:, 1) = component(:, 1) - coordinate_top + 1;
;;;158              //component(:, 2:3) = component(:, 2:3) - coordinate_left + 1;
;;;159              //xStart = component(iSubComponent, 2);
;;;160              //xEnd = component(iSubComponent, 3);
;;;161              //y = component(iSubComponent, 1);
;;;162              ConnectedComponentSegment<s32> currentSegment = (*componentsS32)[iSegment];
;;;163              currentSegment.xEnd -= boundingBox.left;
;;;164              currentSegment.xStart -= boundingBox.left;
;;;165              currentSegment.y -= boundingBox.top;
;;;166    
;;;167              AnkiAssert(currentSegment.xStart >= 0);
;;;168              for(s32 x=currentSegment.xStart; x<=currentSegment.xEnd; x++) {
;;;169                edge_top[x] = MIN(edge_top[x], currentSegment.y);
;;;170                edge_bottom[x] = MAX(edge_bottom[x], currentSegment.y);
;;;171    
;;;172                edge_left[currentSegment.y] = MIN(edge_left[currentSegment.y], currentSegment.xStart);
;;;173                edge_right[currentSegment.y] = MAX(edge_right[currentSegment.y], currentSegment.xEnd);
;;;174              } // for(s32 x=currentSegment.xStart; x<=currentSegment.xEnd; x++)
;;;175            } // for(s32 iSegment=startComponentIndex; iSegment<=endComponentIndex; iSegment++)
;;;176          } // if(useU16) ... else
;;;177    
;;;178          //#define PRINT_OUT_EDGE_LIMITS
;;;179    #ifdef PRINT_OUT_EDGE_LIMITS
;;;180          CoreTechPrint("  ");
;;;181          for(s32 i=0; i<boxWidth;i++){
;;;182            CoreTechPrint("%d ", edge_top[i]);
;;;183          }
;;;184          CoreTechPrint("\n");
;;;185    
;;;186          for(s32 i=0; i<boxHeight;i++){
;;;187            CoreTechPrint("%d                    %d\n", edge_left[i], edge_right[i]);
;;;188          }
;;;189          CoreTechPrint("\n");
;;;190    
;;;191          for(s32 i=0; i<boxWidth;i++){
;;;192            CoreTechPrint("%d ", edge_bottom[i]);
;;;193          }
;;;194    
;;;195          CoreTechPrint("\n");
;;;196    #endif // #ifdef PRINT_OUT_EDGE_LIMITS
;;;197    
;;;198          // The components are computed with an approximate method. This means that for complex shapes,
;;;199          // it is possible to have non-contiguous components. These checks are for such non-contiguous components.
;;;200          //
;;;201          // It is possible to use a heuristic to compute the boundary of non-continguous components,
;;;202          // but I think they will generally not occur with good, non-occluded fiducial markers.
;;;203          bool isNonContiguous = false;
;;;204    
;;;205          for(s32 y=0; y<boxHeight; y++) {
;;;206            if(edge_left[y] == s16_MAX || edge_right[y] == s16_MIN) {
;;;207              //CoreTechPrint("edge_left[%d]=%d edge_right[%d]=%d\n", y, static_cast<s32>(edge_left[y]), y, static_cast<s32>(edge_right[y]));
;;;208              //AnkiWarn("TraceNextExteriorBoundary", "Bad edge");
;;;209              isNonContiguous = true;
;;;210            }
;;;211          }
;;;212    
;;;213          for(s32 x=0; x<boxWidth; x++) {
;;;214            if(edge_top[x] == s16_MAX || edge_bottom[x] == s16_MIN) {
;;;215              //CoreTechPrint("edge_top[%d]=%d edge_bottom[%d]=%d\n", x, static_cast<s32>(edge_left[x]), x, static_cast<s32>(edge_right[x]));
;;;216              //AnkiWarn("TraceNextExteriorBoundary", "Bad edge");
;;;217              isNonContiguous = true;
;;;218            }
;;;219          }
;;;220    
;;;221          if(isNonContiguous) {
;;;222            return RESULT_OK;
;;;223          }
;;;224    
;;;225          //boundary = zeros(0, 2);
;;;226    
;;;227          //% 2. Go through the right edge, from top to bottom. Add each to the
;;;228          //% boundary. If two right edge pixels are not adjacent, draw a line between
;;;229          //% them. The boundary will be Manhattan (4-connected) style
;;;230    
;;;231          //boundary(end+1, :) = [edge_right(1), 1];
;;;232          extractedBoundary.PushBack(Point<s16>(edge_right[0], 0));
;;;233    
;;;234          //for y = 2:height
;;;235          for(s16 y=1; y<boxHeight; y++) {
;;;236            //% Draw the horizontal line between the previous and current right edge
;;;237    
;;;238            //if edge_right(y) > edge_right(y-1)
;;;239            if(edge_right[y] > edge_right[y-1]) {
;;;240              //  lineWidth = edge_right(y) - edge_right(y-1);
;;;241              //  newBoundary = zeros(lineWidth, 2);
;;;242              //  newBoundary(:,1) = edge_right(y-1):(edge_right(y)-1);
;;;243              //  newBoundary(:,2) = y;
;;;244              //  boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;245              for(s16 x=edge_right[y-1]; x<=(edge_right[y]-1); x++) {
;;;246                extractedBoundary.PushBack(Point<s16>(x,y));
;;;247              }
;;;248            } else if(edge_right[y-1] > edge_right[y]) {
;;;249              //  lineWidth = edge_right(y-1) - edge_right(y);
;;;250              //  newBoundary = zeros(lineWidth, 2);
;;;251              //  newBoundary(:,1) = (edge_right(y-1)-1):-1:edge_right(y);
;;;252              //  newBoundary(:,2) = y-1;
;;;253              //  boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;254              for(s16 x=edge_right[y-1]-1; x>=edge_right[y]; x--) {
;;;255                extractedBoundary.PushBack(Point<s16>(x,y-1));
;;;256              }
;;;257            } // if(edge_right[y] > edge_right[y-1]) ... elseif
;;;258    
;;;259            //boundary(end+1, :) = [edge_right(y), y];
;;;260            extractedBoundary.PushBack(Point<s16>(edge_right[y],y));
;;;261          } // for(s16 y=1; y<boxHeight; y++)
;;;262    
;;;263          //% 3. Make a bridge from the bottomost right to the bottomost left. Make the
;;;264          //% bridge using the bottom edge pixels. Note that this this loop should by
;;;265          //% definition start at a pixel that is both a bottom and a right (I don't see a way this can't be true).
;;;266          //for x = edge_right(end):-1:(edge_left(end)+1)
;;;267          for(s16 x=edge_right[boxHeight-1]; x>=(edge_left[boxHeight-1]+1); x--) {
;;;268            //if edge_bottom(x) > edge_bottom(x-1)
;;;269            if(edge_bottom[x] > edge_bottom[x-1]) {
;;;270              //    lineHeight = edge_bottom(x) - edge_bottom(x-1);
;;;271              //    newBoundary = zeros(lineHeight, 2);
;;;272              //    newBoundary(:,1) = x;
;;;273              //    newBoundary(:,2) = (edge_bottom(x)-1):-1:edge_bottom(x-1);
;;;274              //    boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;275              for(s16 y=edge_bottom[x]-1; y>=edge_bottom[x-1]; y--) {
;;;276                extractedBoundary.PushBack(Point<s16>(x,y));
;;;277              }
;;;278    
;;;279              //elseif edge_bottom(x-1) > edge_bottom(x)
;;;280            } else if(edge_bottom[x-1] > edge_bottom[x]) {
;;;281              //    lineHeight = edge_bottom(x-1) - edge_bottom(x);
;;;282              //    newBoundary = zeros(lineHeight, 2);
;;;283              //    newBoundary(:,1) = x-1;
;;;284              //    newBoundary(:,2) = edge_bottom(x):(edge_bottom(x-1)-1);
;;;285              //    boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;286              for(s16 y=edge_bottom[x]; y<=(edge_bottom[x-1]-1); y++) {
;;;287                extractedBoundary.PushBack(Point<s16>(x-1,y));
;;;288              }
;;;289            }
;;;290    
;;;291            //boundary(end+1, :) = [x-1, edge_bottom(x-1)];
;;;292            extractedBoundary.PushBack(Point<s16>(x-1, edge_bottom[x-1]));
;;;293          } // for(s16 x=edge_right[boxHeight-1]; x>=(edge_left[boxHeight-1]+1); x--)
;;;294    
;;;295          //% 4. Go through the left edge, from bottom to top.
;;;296          //for y = (height-1):-1:1
;;;297          for(s16 y=boxHeight-2; y>=0; y--) {
;;;298            //% Draw the horizontal line between the previous and current left edge
;;;299            //if edge_left(y) > edge_left(y+1)
;;;300            if(edge_left[y] > edge_left[y+1]) {
;;;301              //    lineWidth = edge_left(y) - edge_left(y+1);
;;;302              //    newBoundary = zeros(lineWidth, 2);
;;;303              //    newBoundary(:,1) = (edge_left(y+1)+1):(edge_left(y));
;;;304              //    newBoundary(:,2) = y+1;
;;;305              //    boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;306              for(s16 x=edge_left[y+1]+1; x<=edge_left[y]; x++) {
;;;307                extractedBoundary.PushBack(Point<s16>(x,y+1));
;;;308              }
;;;309              //elseif edge_left(y+1) > edge_left(y)
;;;310            } else if(edge_left[y+1] > edge_left[y]) {
;;;311              //    lineWidth = edge_left(y+1) - edge_left(y);
;;;312              //    newBoundary = zeros(lineWidth, 2);
;;;313              //    newBoundary(:,1) = edge_left(y+1):-1:(edge_left(y)+1);
;;;314              //    newBoundary(:,2) = y;
;;;315              //    boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;316              for(s16 x=edge_left[y+1]; x>=(edge_left[y]+1); x--) {
;;;317                extractedBoundary.PushBack(Point<s16>(x,y));
;;;318              }
;;;319            }
;;;320    
;;;321            //boundary(end+1, :) = [edge_left(y), y];
;;;322            extractedBoundary.PushBack(Point<s16>(edge_left[y],y));
;;;323          } // for(s16 y=boxHeight-2; y>=0; y--)
;;;324    
;;;325          //% 5. Make a bridge from the topmost left pixel to the topmost right.
;;;326          //for x = (edge_left(1)+1):edge_right(1)
;;;327          for(s16 x=(edge_left[0]+1); x<=edge_right[0]; x++) {
;;;328            //if edge_top(x) > edge_top(x-1)
;;;329            if(edge_top[x] > edge_top[x-1]) {
;;;330              //    lineHeight = edge_top(x) - edge_top(x-1);
;;;331              //    newBoundary = zeros(lineHeight, 2);
;;;332              //    newBoundary(:,1) = x-1;
;;;333              //    newBoundary(:,2) = (edge_top(x-1)+1):edge_top(x);
;;;334              //    boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;335              for(s16 y=edge_top[x-1]+1; y<=edge_top[x]; y++) {
;;;336                extractedBoundary.PushBack(Point<s16>(x-1,y));
;;;337              }
;;;338    
;;;339              //elseif edge_top(x-1) > edge_top(x)
;;;340            } else if(edge_top[x-1] > edge_top[x]) {
;;;341              //    lineHeight = edge_top(x-1) - edge_top(x);
;;;342              //    newBoundary = zeros(lineHeight, 2);
;;;343              //    newBoundary(:,1) = x;
;;;344              //    newBoundary(:,2) = edge_top(x-1):-1:(edge_top(x)+1);
;;;345              //    boundary((end+1):(end+size(newBoundary,1)), :) = newBoundary;
;;;346              for(s16 y=edge_top[x-1]; y>=(edge_top[x]+1); y--) {
;;;347                extractedBoundary.PushBack(Point<s16>(x,y));
;;;348              }
;;;349            }
;;;350    
;;;351            //boundary(end+1, :) = [x, edge_top(x)];
;;;352            extractedBoundary.PushBack(Point<s16>(x,edge_top[x]));
;;;353          }
;;;354    
;;;355          // Shift back the coordinate frame
;;;356          //boundary(:,1) = boundary(:,1) + coordinate_left - 1;
;;;357          //boundary(:,2) = boundary(:,2) + coordinate_top - 1;
;;;358          {
;;;359            Point<s16> * restrict pExtractedBoundary = extractedBoundary.Pointer(0);
;;;360            const s32 lengthExtractedBoundary = extractedBoundary.get_size();
;;;361            for(s32 i=0; i<lengthExtractedBoundary; i++) {
;;;362              pExtractedBoundary[i].x += boundingBox.left;
;;;363              pExtractedBoundary[i].y += boundingBox.top;
;;;364            }
;;;365          }
;;;366    
;;;367          return RESULT_OK;
;;;368        }
000078  b009              ADD      sp,sp,#0x24
00007a  f04f7040          MOV      r0,#0x3000000         ;42
00007e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.130|
000082  201e              MOVS     r0,#0x1e              ;30
000084  e9cd8000          STRD     r8,r0,[sp,#0]         ;30
000088  a3dc              ADR      r3,|L1.1020|
00008a  a2fd              ADR      r2,|L1.1152|
00008c  a1f0              ADR      r1,|L1.1104|
00008e  2005              MOVS     r0,#5                 ;30
000090  f7fffffe          BL       _Anki_Log
000094  b009              ADD      sp,sp,#0x24
000096  f04f6080          MOV      r0,#0x4000000         ;30
00009a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.158|
00009e  2021              MOVS     r0,#0x21              ;33
0000a0  e9cd8000          STRD     r8,r0,[sp,#0]         ;33
0000a4  a3d5              ADR      r3,|L1.1020|
0000a6  a2fc              ADR      r2,|L1.1176|
0000a8  a1e9              ADR      r1,|L1.1104|
0000aa  2005              MOVS     r0,#5                 ;33
0000ac  f7fffffe          BL       _Anki_Log
0000b0  b009              ADD      sp,sp,#0x24
0000b2  f04f6080          MOV      r0,#0x4000000         ;33
0000b6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.186|
0000ba  2024              MOVS     r0,#0x24              ;36
0000bc  e9cd8000          STRD     r8,r0,[sp,#0]         ;36
0000c0  a3ce              ADR      r3,|L1.1020|
0000c2  a2fd              ADR      r2,|L1.1208|
0000c4  a1e2              ADR      r1,|L1.1104|
0000c6  2005              MOVS     r0,#5                 ;36
0000c8  f7fffffe          BL       _Anki_Log
0000cc  b009              ADD      sp,sp,#0x24
0000ce  f04f6080          MOV      r0,#0x4000000         ;36
0000d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.214|
0000d6  2027              MOVS     r0,#0x27              ;39
0000d8  e9cd8000          STRD     r8,r0,[sp,#0]         ;39
0000dc  a3c7              ADR      r3,|L1.1020|
0000de  a2fc              ADR      r2,|L1.1232|
0000e0  a1db              ADR      r1,|L1.1104|
0000e2  2005              MOVS     r0,#5                 ;39
0000e4  f7fffffe          BL       _Anki_Log
0000e8  b009              ADD      sp,sp,#0x24
0000ea  f04f7040          MOV      r0,#0x3000000         ;39
0000ee  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.242|
0000f2  4630              MOV      r0,r6                 ;45
0000f4  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents10get_useU16Ev ; Anki::Embedded::ConnectedComponents::get_useU16() const
0000f8  9003              STR      r0,[sp,#0xc]          ;46
0000fa  4630              MOV      r0,r6                 ;46
0000fc  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents17get_componentsU16Ev ; Anki::Embedded::ConnectedComponents::get_componentsU16() const
000100  9000              STR      r0,[sp,#0]            ;47
000102  4630              MOV      r0,r6                 ;47
000104  f7fffffe          BL       _ZNK4Anki8Embedded19ConnectedComponents17get_componentsS32Ev ; Anki::Embedded::ConnectedComponents::get_componentsS32() const
000108  9002              STR      r0,[sp,#8]            ;52
00010a  2700              MOVS     r7,#0                 ;49
00010c  9803              LDR      r0,[sp,#0xc]          ;52
00010e  463e              MOV      r6,r7                 ;50
000110  b198              CBZ      r0,|L1.314|
000112  9800              LDR      r0,[sp,#0]            ;52
000114  6b00              LDR      r0,[r0,#0x30]         ;52
000116  eb0000c9          ADD      r0,r0,r9,LSL #3       ;52
00011a  88c7              LDRH     r7,[r0,#6]            ;53
00011c  2f00              CMP      r7,#0                 ;55
00011e  d122              BNE      |L1.358|
000120  2037              MOVS     r0,#0x37              ;55
000122  e9cd8000          STRD     r8,r0,[sp,#0]         ;55
000126  a3b5              ADR      r3,|L1.1020|
000128  a2f1              ADR      r2,|L1.1264|
00012a  a1c9              ADR      r1,|L1.1104|
00012c  2005              MOVS     r0,#5                 ;55
00012e  f7fffffe          BL       _Anki_Log
000132  b009              ADD      sp,sp,#0x24
000134  2001              MOVS     r0,#1                 ;55
000136  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.314|
00013a  9802              LDR      r0,[sp,#8]
00013c  eb090149          ADD      r1,r9,r9,LSL #1
000140  6b00              LDR      r0,[r0,#0x30]
000142  eb000081          ADD      r0,r0,r1,LSL #2
000146  6886              LDR      r6,[r0,#8]            ;60
000148  2e00              CMP      r6,#0                 ;60
00014a  dc0c              BGT      |L1.358|
00014c  203c              MOVS     r0,#0x3c              ;60
00014e  e9cd8000          STRD     r8,r0,[sp,#0]         ;60
000152  a3aa              ADR      r3,|L1.1020|
000154  a2e6              ADR      r2,|L1.1264|
000156  a1be              ADR      r1,|L1.1104|
000158  2005              MOVS     r0,#5                 ;60
00015a  f7fffffe          BL       _Anki_Log
00015e  b009              ADD      sp,sp,#0x24
000160  2001              MOVS     r0,#1                 ;60
000162  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.358|
000166  f04f0800          MOV      r8,#0
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
000170  4580              CMP      r8,r0
000172  dd03              BLE      |L1.380|
000174  4620              MOV      r0,r4
000176  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
00017a  4680              MOV      r8,r0
                  |L1.380|
00017c  f64772ff          MOV      r2,#0x7fff            ;72
000180  f8c4800c          STR      r8,[r4,#0xc]          ;72
000184  43d0              MVNS     r0,r2                 ;72
000186  f8ad2010          STRH     r2,[sp,#0x10]         ;72
00018a  f8ad2014          STRH     r2,[sp,#0x14]         ;72
00018e  f8ad0012          STRH     r0,[sp,#0x12]         ;72
000192  f8ad0016          STRH     r0,[sp,#0x16]         ;72
000196  1e68              SUBS     r0,r5,#1              ;73
000198  f8ca0000          STR      r0,[r10,#0]           ;75
00019c  9803              LDR      r0,[sp,#0xc]          ;75
00019e  2800              CMP      r0,#0                 ;75
0001a0  4648              MOV      r0,r9                 ;92
0001a2  d02f              BEQ      |L1.516|
                  |L1.420|
0001a4  9900              LDR      r1,[sp,#0]            ;75
0001a6  6b09              LDR      r1,[r1,#0x30]         ;75
0001a8  eb0101c0          ADD      r1,r1,r0,LSL #3       ;75
0001ac  88ca              LDRH     r2,[r1,#6]            ;77
0001ae  42ba              CMP      r2,r7                 ;77
0001b0  d131              BNE      |L1.534|
0001b2  f9b12000          LDRSH    r2,[r1,#0]            ;82
0001b6  f9b13002          LDRSH    r3,[r1,#2]            ;83
0001ba  f9bdc010          LDRSH    r12,[sp,#0x10]        ;86
0001be  f9b11004          LDRSH    r1,[r1,#4]            ;84
0001c2  4594              CMP      r12,r2                ;86
0001c4  bfb8              IT       LT                    ;86
0001c6  4662              MOVLT    r2,r12                ;86
0001c8  f8ad2010          STRH     r2,[sp,#0x10]         ;86
0001cc  f9bd2012          LDRSH    r2,[sp,#0x12]         ;87
0001d0  f1030c01          ADD      r12,r3,#1             ;87
0001d4  4562              CMP      r2,r12                ;87
0001d6  bfd8              IT       LE                    ;87
0001d8  4662              MOVLE    r2,r12                ;87
0001da  f8ad2012          STRH     r2,[sp,#0x12]         ;87
0001de  f9bd2014          LDRSH    r2,[sp,#0x14]         ;88
0001e2  428a              CMP      r2,r1                 ;88
0001e4  bfa8              IT       GE                    ;88
0001e6  460a              MOVGE    r2,r1                 ;88
0001e8  f8ad2014          STRH     r2,[sp,#0x14]         ;88
0001ec  f9bd2016          LDRSH    r2,[sp,#0x16]         ;89
0001f0  1c4b              ADDS     r3,r1,#1              ;89
0001f2  429a              CMP      r2,r3                 ;89
0001f4  bfd8              IT       LE                    ;89
0001f6  461a              MOVLE    r2,r3                 ;89
0001f8  f8ad2016          STRH     r2,[sp,#0x16]         ;89
0001fc  1c40              ADDS     r0,r0,#1              ;76
0001fe  42a8              CMP      r0,r5                 ;76
000200  dbd0              BLT      |L1.420|
000202  e00b              B        |L1.540|
                  |L1.516|
000204  9902              LDR      r1,[sp,#8]            ;86
000206  eb000240          ADD      r2,r0,r0,LSL #1       ;86
00020a  6b09              LDR      r1,[r1,#0x30]         ;86
00020c  eb010182          ADD      r1,r1,r2,LSL #2       ;86
000210  688a              LDR      r2,[r1,#8]            ;93
000212  42b2              CMP      r2,r6                 ;93
000214  d07e              BEQ      |L1.788|
                  |L1.534|
000216  1e40              SUBS     r0,r0,#1              ;94
000218  f8ca0000          STR      r0,[r10,#0]           ;94
                  |L1.540|
00021c  f9bd3010          LDRSH    r3,[sp,#0x10]         ;109
000220  f5a341fe          SUB      r1,r3,#0x7f00         ;109
000224  39ff              SUBS     r1,r1,#0xff           ;109
000226  bf1c              ITT      NE                    ;109
000228  f9bd2012          LDRSHNE  r2,[sp,#0x12]         ;109
00022c  f5124f00          CMNNE    r2,#0x8000            ;109
000230  d071              BEQ      |L1.790|
000232  f9bd0014          LDRSH    r0,[sp,#0x14]         ;109
000236  f5a041fe          SUB      r1,r0,#0x7f00         ;109
00023a  39ff              SUBS     r1,r1,#0xff           ;109
00023c  bf1c              ITT      NE                    ;109
00023e  f9bd1016          LDRSHNE  r1,[sp,#0x16]         ;109
000242  f5114f00          CMNNE    r1,#0x8000            ;109
000246  d066              BEQ      |L1.790|
000248  1a08              SUBS     r0,r1,r0              ;109
00024a  b201              SXTH     r1,r0                 ;109
00024c  9101              STR      r1,[sp,#4]            ;117
00024e  1ad2              SUBS     r2,r2,r3              ;117
000250  0049              LSLS     r1,r1,#1              ;117
000252  fa0ffb82          SXTH     r11,r2                ;117
000256  460d              MOV      r5,r1                 ;117
000258  9812              LDR      r0,[sp,#0x48]         ;117
00025a  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
00025e  4606              MOV      r6,r0                 ;117
000260  4629              MOV      r1,r5                 ;117
000262  9812              LDR      r0,[sp,#0x48]         ;118
000264  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000268  4605              MOV      r5,r0                 ;118
00026a  ea4f014b          LSL      r1,r11,#1             ;119
00026e  4688              MOV      r8,r1                 ;119
000270  9812              LDR      r0,[sp,#0x48]         ;119
000272  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000276  4607              MOV      r7,r0                 ;119
000278  4641              MOV      r1,r8                 ;119
00027a  9812              LDR      r0,[sp,#0x48]         ;120
00027c  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStack8AllocateEi ; Anki::Embedded::MemoryStack::Allocate(int)
000280  4680              MOV      r8,r0                 ;120
000282  9901              LDR      r1,[sp,#4]            ;123
000284  2000              MOVS     r0,#0                 ;123
000286  2900              CMP      r1,#0                 ;123
000288  bfc4              ITT      GT                    ;72
00028a  4aa0              LDRGT    r2,|L1.1292|
00028c  0c53              LSRGT    r3,r2,#17             ;72
00028e  dd07              BLE      |L1.672|
                  |L1.656|
000290  f8263010          STRH     r3,[r6,r0,LSL #1]     ;124
000294  f8252010          STRH     r2,[r5,r0,LSL #1]     ;125
000298  9901              LDR      r1,[sp,#4]            ;123
00029a  1c40              ADDS     r0,r0,#1              ;123
00029c  4281              CMP      r1,r0                 ;123
00029e  dcf7              BGT      |L1.656|
                  |L1.672|
0002a0  2000              MOVS     r0,#0                 ;128
0002a2  f1bb0f00          CMP      r11,#0                ;128
0002a6  bfc4              ITT      GT                    ;72
0002a8  4998              LDRGT    r1,|L1.1292|
0002aa  0c4a              LSRGT    r2,r1,#17             ;72
0002ac  dd06              BLE      |L1.700|
                  |L1.686|
0002ae  f8272010          STRH     r2,[r7,r0,LSL #1]     ;129
0002b2  f8281010          STRH     r1,[r8,r0,LSL #1]     ;130
0002b6  1c40              ADDS     r0,r0,#1              ;128
0002b8  4583              CMP      r11,r0                ;128
0002ba  dcf8              BGT      |L1.686|
                  |L1.700|
0002bc  9803              LDR      r0,[sp,#0xc]          ;134
0002be  2800              CMP      r0,#0                 ;134
0002c0  f8da0000          LDR      r0,[r10,#0]           ;134
0002c4  d07a              BEQ      |L1.956|
0002c6  4548              CMP      r0,r9                 ;135
0002c8  db48              BLT      |L1.860|
                  |L1.714|
0002ca  9800              LDR      r0,[sp,#0]            ;135
0002cc  6b00              LDR      r0,[r0,#0x30]         ;135
0002ce  eb0001c9          ADD      r1,r0,r9,LSL #3       ;135
0002d2  a802              ADD      r0,sp,#8              ;141
0002d4  f7fffffe          BL       __ARM_common_memcpy4_8
0002d8  f8bd100a          LDRH     r1,[sp,#0xa]          ;142
0002dc  f8bd0010          LDRH     r0,[sp,#0x10]         ;142
0002e0  1a09              SUBS     r1,r1,r0              ;142
0002e2  b20a              SXTH     r2,r1                 ;142
0002e4  f8ad200a          STRH     r2,[sp,#0xa]          ;142
0002e8  f8bd1008          LDRH     r1,[sp,#8]            ;143
0002ec  1a08              SUBS     r0,r1,r0              ;143
0002ee  fa0ffc80          SXTH     r12,r0                ;143
0002f2  f8bd000c          LDRH     r0,[sp,#0xc]          ;144
0002f6  f8bd1014          LDRH     r1,[sp,#0x14]         ;144
0002fa  f8adc008          STRH     r12,[sp,#8]           ;143
0002fe  1a40              SUBS     r0,r0,r1              ;144
000300  b200              SXTH     r0,r0                 ;144
000302  f8ad000c          STRH     r0,[sp,#0xc]          ;144
000306  4661              MOV      r1,r12                ;147
000308  4562              CMP      r2,r12                ;147
00030a  db21              BLT      |L1.848|
                  |L1.780|
00030c  f9373011          LDRSH    r3,[r7,r1,LSL #1]     ;148
000310  4283              CMP      r3,r0                 ;148
000312  e001              B        |L1.792|
                  |L1.788|
000314  e023              B        |L1.862|
                  |L1.790|
000316  e04d              B        |L1.948|
                  |L1.792|
000318  bfa8              IT       GE                    ;148
00031a  4603              MOVGE    r3,r0                 ;148
00031c  f8273011          STRH     r3,[r7,r1,LSL #1]     ;148
000320  f9383011          LDRSH    r3,[r8,r1,LSL #1]     ;149
000324  4283              CMP      r3,r0                 ;149
000326  bfd8              IT       LE                    ;149
000328  4603              MOVLE    r3,r0                 ;149
00032a  f8283011          STRH     r3,[r8,r1,LSL #1]     ;149
00032e  f9363010          LDRSH    r3,[r6,r0,LSL #1]     ;151
000332  4563              CMP      r3,r12                ;151
000334  bfa8              IT       GE                    ;151
000336  4663              MOVGE    r3,r12                ;151
000338  f8263010          STRH     r3,[r6,r0,LSL #1]     ;151
00033c  f9353010          LDRSH    r3,[r5,r0,LSL #1]     ;152
000340  4293              CMP      r3,r2                 ;152
000342  bfd8              IT       LE                    ;152
000344  4613              MOVLE    r3,r2                 ;152
000346  f8253010          STRH     r3,[r5,r0,LSL #1]     ;152
00034a  1c49              ADDS     r1,r1,#1              ;147
00034c  428a              CMP      r2,r1                 ;147
00034e  dadd              BGE      |L1.780|
                  |L1.848|
000350  f8da0000          LDR      r0,[r10,#0]           ;135
000354  f1090901          ADD      r9,r9,#1              ;135
000358  4548              CMP      r0,r9                 ;135
00035a  dab6              BGE      |L1.714|
                  |L1.860|
00035c  e0ff              B        |L1.1374|
                  |L1.862|
00035e  f9b12000          LDRSH    r2,[r1,#0]            ;98
000362  f9b13002          LDRSH    r3,[r1,#2]            ;99
000366  f9bdc010          LDRSH    r12,[sp,#0x10]        ;102
00036a  f9b11004          LDRSH    r1,[r1,#4]            ;100
00036e  4594              CMP      r12,r2                ;102
000370  bfb8              IT       LT                    ;102
000372  4662              MOVLT    r2,r12                ;102
000374  f8ad2010          STRH     r2,[sp,#0x10]         ;102
000378  f9bd2012          LDRSH    r2,[sp,#0x12]         ;103
00037c  f1030c01          ADD      r12,r3,#1             ;103
000380  4562              CMP      r2,r12                ;103
000382  bfd8              IT       LE                    ;103
000384  4662              MOVLE    r2,r12                ;103
000386  f8ad2012          STRH     r2,[sp,#0x12]         ;103
00038a  f9bd2014          LDRSH    r2,[sp,#0x14]         ;104
00038e  428a              CMP      r2,r1                 ;104
000390  bfa8              IT       GE                    ;104
000392  460a              MOVGE    r2,r1                 ;104
000394  f8ad2014          STRH     r2,[sp,#0x14]         ;104
000398  f9bd2016          LDRSH    r2,[sp,#0x16]         ;105
00039c  1c4b              ADDS     r3,r1,#1              ;105
00039e  429a              CMP      r2,r3                 ;105
0003a0  bfd8              IT       LE                    ;105
0003a2  461a              MOVLE    r2,r3                 ;105
0003a4  f8ad2016          STRH     r2,[sp,#0x16]         ;105
0003a8  1c40              ADDS     r0,r0,#1              ;92
0003aa  42a8              CMP      r0,r5                 ;92
0003ac  f6ffaf2a          BLT      |L1.516|
0003b0  e734              B        |L1.540|
0003b2  e003              B        |L1.956|
                  |L1.948|
0003b4  b009              ADD      sp,sp,#0x24
0003b6  2001              MOVS     r0,#1                 ;111
0003b8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.956|
0003bc  4548              CMP      r0,r9                 ;156
0003be  db19              BLT      |L1.1012|
                  |L1.960|
0003c0  9802              LDR      r0,[sp,#8]            ;156
0003c2  eb090149          ADD      r1,r9,r9,LSL #1       ;156
0003c6  6b00              LDR      r0,[r0,#0x30]         ;156
0003c8  eb000181          ADD      r1,r0,r1,LSL #2       ;156
0003cc  f8b1c004          LDRH     r12,[r1,#4]           ;162
0003d0  6808              LDR      r0,[r1,#0]            ;163
0003d2  f8bd1010          LDRH     r1,[sp,#0x10]         ;163
0003d6  ebc14220          RSB      r2,r1,r0,ASR #16      ;163
0003da  b212              SXTH     r2,r2                 ;163
0003dc  f362401f          BFI      r0,r2,#16,#16         ;163
0003e0  1a40              SUBS     r0,r0,r1              ;164
0003e2  b201              SXTH     r1,r0                 ;164
0003e4  f8bd0014          LDRH     r0,[sp,#0x14]         ;165
0003e8  460b              MOV      r3,r1                 ;164
0003ea  ebac0000          SUB      r0,r12,r0             ;165
0003ee  b200              SXTH     r0,r0                 ;165
0003f0  428a              CMP      r2,r1                 ;168
0003f2  e08d              B        |L1.1296|
                  |L1.1012|
0003f4  e0b3              B        |L1.1374|
0003f6  0000              DCW      0x0000
                  |L1.1016|
                          DCD      ||.constdata||
                  |L1.1020|
0003fc  2e2e5c63          DCB      "..\\coretech\\vision\\robot\\src\\traceBoundary.cpp",0
000400  6f726574
000404  6563685c
000408  76697369
00040c  6f6e5c72
000410  6f626f74
000414  5c737263
000418  5c747261
00041c  6365426f
000420  756e6461
000424  72792e63
000428  707000  
00042b  00                DCB      0
                  |L1.1068|
00042c  73746172          DCB      "startComponentIndex is not in range",0
000430  74436f6d
000434  706f6e65
000438  6e74496e
00043c  64657820
000440  6973206e
000444  6f742069
000448  6e207261
00044c  6e676500
                  |L1.1104|
000450  436f6d70          DCB      "ComputeQuadrilateralsFromConnectedComponents",0
000454  75746551
000458  75616472
00045c  696c6174
000460  6572616c
000464  7346726f
000468  6d436f6e
00046c  6e656374
000470  6564436f
000474  6d706f6e
000478  656e7473
00047c  00      
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L1.1152|
000480  636f6d70          DCB      "components is not valid",0
000484  6f6e656e
000488  74732069
00048c  73206e6f
000490  74207661
000494  6c696400
                  |L1.1176|
000498  65787472          DCB      "extractedBoundary is not valid",0
00049c  61637465
0004a0  64426f75
0004a4  6e646172
0004a8  79206973
0004ac  206e6f74
0004b0  2076616c
0004b4  696400  
0004b7  00                DCB      0
                  |L1.1208|
0004b8  73637261          DCB      "scratch is not valid",0
0004bc  74636820
0004c0  6973206e
0004c4  6f742076
0004c8  616c6964
0004cc  00      
0004cd  00                DCB      0
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L1.1232|
0004d0  636f6d70          DCB      "components must be sorted in id",0
0004d4  6f6e656e
0004d8  7473206d
0004dc  75737420
0004e0  62652073
0004e4  6f727465
0004e8  6420696e
0004ec  20696400
                  |L1.1264|
0004f0  636f6d70          DCB      "componentId is not valid.",0
0004f4  6f6e656e
0004f8  74496420
0004fc  6973206e
000500  6f742076
000504  616c6964
000508  2e00    
00050a  00                DCB      0
00050b  00                DCB      0
                  |L1.1292|
                          DCD      0xffff8000
                  |L1.1296|
000510  db1e              BLT      |L1.1360|
                  |L1.1298|
000512  f937c011          LDRSH    r12,[r7,r1,LSL #1]    ;169
000516  4584              CMP      r12,r0                ;169
000518  bfa8              IT       GE                    ;169
00051a  4684              MOVGE    r12,r0                ;169
00051c  f827c011          STRH     r12,[r7,r1,LSL #1]    ;169
000520  f938c011          LDRSH    r12,[r8,r1,LSL #1]    ;170
000524  4584              CMP      r12,r0                ;170
000526  bfd8              IT       LE                    ;170
000528  4684              MOVLE    r12,r0                ;170
00052a  f828c011          STRH     r12,[r8,r1,LSL #1]    ;170
00052e  f936c010          LDRSH    r12,[r6,r0,LSL #1]    ;172
000532  459c              CMP      r12,r3                ;172
000534  bfa8              IT       GE                    ;172
000536  469c              MOVGE    r12,r3                ;172
000538  f826c010          STRH     r12,[r6,r0,LSL #1]    ;172
00053c  f935c010          LDRSH    r12,[r5,r0,LSL #1]    ;173
000540  4594              CMP      r12,r2                ;173
000542  bfd8              IT       LE                    ;173
000544  4694              MOVLE    r12,r2                ;173
000546  f825c010          STRH     r12,[r5,r0,LSL #1]    ;173
00054a  1c49              ADDS     r1,r1,#1              ;168
00054c  428a              CMP      r2,r1                 ;168
00054e  dae0              BGE      |L1.1298|
                  |L1.1360|
000550  f8da0000          LDR      r0,[r10,#0]           ;156
000554  f1090901          ADD      r9,r9,#1              ;156
000558  4548              CMP      r0,r9                 ;156
00055a  f6bfaf31          BGE      |L1.960|
                  |L1.1374|
00055e  2100              MOVS     r1,#0                 ;203
000560  9a01              LDR      r2,[sp,#4]            ;205
000562  4608              MOV      r0,r1                 ;205
000564  2a00              CMP      r2,#0                 ;205
000566  bfc8              IT       GT                    ;72
000568  f64773ff          MOVGT    r3,#0x7fff            ;72
00056c  dd0c              BLE      |L1.1416|
                  |L1.1390|
00056e  f9362010          LDRSH    r2,[r6,r0,LSL #1]     ;206
000572  429a              CMP      r2,r3                 ;206
000574  bf1a              ITTE     NE                    ;206
000576  f9352010          LDRSHNE  r2,[r5,r0,LSL #1]     ;206
00057a  f5124f00          CMNNE    r2,#0x8000            ;206
00057e  2101              MOVEQ    r1,#1                 ;209
000580  1c40              ADDS     r0,r0,#1              ;205
000582  9a01              LDR      r2,[sp,#4]            ;205
000584  4290              CMP      r0,r2                 ;205
000586  dbf2              BLT      |L1.1390|
                  |L1.1416|
000588  2000              MOVS     r0,#0                 ;213
00058a  f1bb0f00          CMP      r11,#0                ;213
00058e  bfc8              IT       GT                    ;72
000590  f64772ff          MOVGT    r2,#0x7fff            ;72
000594  dd0b              BLE      |L1.1454|
                  |L1.1430|
000596  f9373010          LDRSH    r3,[r7,r0,LSL #1]     ;214
00059a  4293              CMP      r3,r2                 ;214
00059c  bf1a              ITTE     NE                    ;214
00059e  f9383010          LDRSHNE  r3,[r8,r0,LSL #1]     ;214
0005a2  f5134f00          CMNNE    r3,#0x8000            ;214
0005a6  2101              MOVEQ    r1,#1                 ;217
0005a8  1c40              ADDS     r0,r0,#1              ;213
0005aa  4558              CMP      r0,r11                ;213
0005ac  dbf3              BLT      |L1.1430|
                  |L1.1454|
0005ae  2900              CMP      r1,#0                 ;221
0005b0  f0408229          BNE.W    |L1.2566|
0005b4  882a              LDRH     r2,[r5,#0]            ;232
0005b6  2000              MOVS     r0,#0                 ;232
0005b8  f8ad2018          STRH     r2,[sp,#0x18]         ;232
0005bc  f8ad001a          STRH     r0,[sp,#0x1a]         ;232
0005c0  a906              ADD      r1,sp,#0x18           ;232
0005c2  4620              MOV      r0,r4                 ;232
0005c4  f7fffffe          BL       _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_ ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::PushBack(const Anki::Embedded::Point<short>&)
0005c8  9801              LDR      r0,[sp,#4]            ;235
0005ca  f04f0901          MOV      r9,#1                 ;235
0005ce  2801              CMP      r0,#1                 ;235
0005d0  dd78              BLE      |L1.1732|
                  |L1.1490|
0005d2  eb050149          ADD      r1,r5,r9,LSL #1       ;239
0005d6  f9350019          LDRSH    r0,[r5,r9,LSL #1]     ;239
0005da  f931ac02          LDRSH    r10,[r1,#-2]          ;239
0005de  4582              CMP      r10,r0                ;239
0005e0  da24              BGE      |L1.1580|
0005e2  f1a00001          SUB      r0,r0,#1              ;245
0005e6  4550              CMP      r0,r10                ;245
0005e8  db4c              BLT      |L1.1668|
                  |L1.1514|
0005ea  f8ada008          STRH     r10,[sp,#8]           ;245
0005ee  f8ad900a          STRH     r9,[sp,#0xa]          ;245
0005f2  4620              MOV      r0,r4                 ;245
0005f4  f8d4b00c          LDR      r11,[r4,#0xc]         ;245
0005f8  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
0005fc  4558              CMP      r0,r11                ;245
0005fe  dd0b              BLE      |L1.1560|
000600  6b20              LDR      r0,[r4,#0x30]         ;245
000602  f8bd1008          LDRH     r1,[sp,#8]            ;245
000606  eb00008b          ADD      r0,r0,r11,LSL #2      ;245
00060a  8001              STRH     r1,[r0,#0]            ;245
00060c  f8bd100a          LDRH     r1,[sp,#0xa]          ;245
000610  8041              STRH     r1,[r0,#2]            ;245
000612  f10b0101          ADD      r1,r11,#1             ;245
000616  60e1              STR      r1,[r4,#0xc]          ;245
                  |L1.1560|
000618  f10a0001          ADD      r0,r10,#1             ;245
00061c  fa0ffa80          SXTH     r10,r0                ;245
000620  f9350019          LDRSH    r0,[r5,r9,LSL #1]     ;245
000624  1e40              SUBS     r0,r0,#1              ;245
000626  4550              CMP      r0,r10                ;245
000628  dadf              BGE      |L1.1514|
00062a  e02b              B        |L1.1668|
                  |L1.1580|
00062c  dd2a              BLE      |L1.1668|
00062e  f1aa0101          SUB      r1,r10,#1             ;254
000632  fa0ffa81          SXTH     r10,r1                ;254
000636  4550              CMP      r0,r10                ;254
000638  dc24              BGT      |L1.1668|
00063a  f1a90001          SUB      r0,r9,#1              ;255
00063e  b200              SXTH     r0,r0                 ;255
000640  9003              STR      r0,[sp,#0xc]          ;255
                  |L1.1602|
000642  f8ada008          STRH     r10,[sp,#8]           ;255
000646  f8ad000a          STRH     r0,[sp,#0xa]          ;255
00064a  4620              MOV      r0,r4                 ;255
00064c  f8d4b00c          LDR      r11,[r4,#0xc]         ;255
000650  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
000654  4558              CMP      r0,r11                ;255
000656  dd0b              BLE      |L1.1648|
000658  6b20              LDR      r0,[r4,#0x30]         ;255
00065a  f8bd1008          LDRH     r1,[sp,#8]            ;255
00065e  eb00008b          ADD      r0,r0,r11,LSL #2      ;255
000662  8001              STRH     r1,[r0,#0]            ;255
000664  f8bd100a          LDRH     r1,[sp,#0xa]          ;255
000668  8041              STRH     r1,[r0,#2]            ;255
00066a  f10b0101          ADD      r1,r11,#1             ;255
00066e  60e1              STR      r1,[r4,#0xc]          ;255
                  |L1.1648|
000670  f1aa0001          SUB      r0,r10,#1             ;254
000674  fa0ffa80          SXTH     r10,r0                ;254
000678  f9350019          LDRSH    r0,[r5,r9,LSL #1]     ;254
00067c  4550              CMP      r0,r10                ;254
00067e  bfd8              IT       LE                    ;254
000680  9803              LDRLE    r0,[sp,#0xc]          ;254
000682  ddde              BLE      |L1.1602|
                  |L1.1668|
000684  f8350019          LDRH     r0,[r5,r9,LSL #1]     ;260
000688  f8ad0000          STRH     r0,[sp,#0]            ;260
00068c  f8ad9002          STRH     r9,[sp,#2]            ;260
000690  4620              MOV      r0,r4                 ;260
000692  f8d4a00c          LDR      r10,[r4,#0xc]         ;260
000696  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
00069a  4550              CMP      r0,r10                ;260
00069c  dd0b              BLE      |L1.1718|
00069e  6b20              LDR      r0,[r4,#0x30]         ;260
0006a0  f8bd1000          LDRH     r1,[sp,#0]            ;260
0006a4  eb00008a          ADD      r0,r0,r10,LSL #2      ;260
0006a8  8001              STRH     r1,[r0,#0]            ;260
0006aa  f8bd1002          LDRH     r1,[sp,#2]            ;260
0006ae  8041              STRH     r1,[r0,#2]            ;260
0006b0  f10a0101          ADD      r1,r10,#1             ;260
0006b4  60e1              STR      r1,[r4,#0xc]          ;260
                  |L1.1718|
0006b6  f1090001          ADD      r0,r9,#1              ;235
0006ba  fa0ff980          SXTH     r9,r0                 ;235
0006be  9801              LDR      r0,[sp,#4]            ;235
0006c0  4581              CMP      r9,r0                 ;235
0006c2  db86              BLT      |L1.1490|
                  |L1.1732|
0006c4  eb050040          ADD      r0,r5,r0,LSL #1       ;267
0006c8  f930ac02          LDRSH    r10,[r0,#-2]          ;267
0006cc  9801              LDR      r0,[sp,#4]            ;267
0006ce  eb060040          ADD      r0,r6,r0,LSL #1       ;267
0006d2  9007              STR      r0,[sp,#0x1c]         ;267
0006d4  f9300c02          LDRSH    r0,[r0,#-2]           ;267
0006d8  1c40              ADDS     r0,r0,#1              ;267
0006da  4550              CMP      r0,r10                ;267
0006dc  dc7e              BGT      |L1.2012|
                  |L1.1758|
0006de  f938901a          LDRSH    r9,[r8,r10,LSL #1]    ;269
0006e2  eb08004a          ADD      r0,r8,r10,LSL #1      ;269
0006e6  9000              STR      r0,[sp,#0]            ;269
0006e8  f9300c02          LDRSH    r0,[r0,#-2]           ;269
0006ec  4548              CMP      r0,r9                 ;269
0006ee  da26              BGE      |L1.1854|
0006f0  f1a90101          SUB      r1,r9,#1              ;275
0006f4  fa0ff981          SXTH     r9,r1                 ;275
0006f8  4581              CMP      r9,r0                 ;275
0006fa  db4b              BLT      |L1.1940|
                  |L1.1788|
0006fc  f8ada00c          STRH     r10,[sp,#0xc]         ;275
000700  f8ad900e          STRH     r9,[sp,#0xe]          ;275
000704  4620              MOV      r0,r4                 ;275
000706  f8d4b00c          LDR      r11,[r4,#0xc]         ;275
00070a  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
00070e  4558              CMP      r0,r11                ;275
000710  dd0b              BLE      |L1.1834|
000712  6b20              LDR      r0,[r4,#0x30]         ;275
000714  f8bd100c          LDRH     r1,[sp,#0xc]          ;275
000718  eb00008b          ADD      r0,r0,r11,LSL #2      ;275
00071c  8001              STRH     r1,[r0,#0]            ;275
00071e  f8bd100e          LDRH     r1,[sp,#0xe]          ;275
000722  8041              STRH     r1,[r0,#2]            ;275
000724  f10b0101          ADD      r1,r11,#1             ;275
000728  60e1              STR      r1,[r4,#0xc]          ;275
                  |L1.1834|
00072a  f1a90001          SUB      r0,r9,#1              ;275
00072e  fa0ff980          SXTH     r9,r0                 ;275
000732  9800              LDR      r0,[sp,#0]            ;275
000734  f9300c02          LDRSH    r0,[r0,#-2]           ;275
000738  4548              CMP      r0,r9                 ;275
00073a  dddf              BLE      |L1.1788|
00073c  e02a              B        |L1.1940|
                  |L1.1854|
00073e  dd29              BLE      |L1.1940|
000740  1e40              SUBS     r0,r0,#1              ;286
000742  4581              CMP      r9,r0                 ;286
000744  dc26              BGT      |L1.1940|
000746  f1aa0001          SUB      r0,r10,#1             ;287
00074a  b200              SXTH     r0,r0                 ;287
00074c  9008              STR      r0,[sp,#0x20]         ;287
                  |L1.1870|
00074e  f8ad000c          STRH     r0,[sp,#0xc]          ;287
000752  f8ad900e          STRH     r9,[sp,#0xe]          ;287
000756  4620              MOV      r0,r4                 ;287
000758  f8d4b00c          LDR      r11,[r4,#0xc]         ;287
00075c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
000760  4558              CMP      r0,r11                ;287
000762  dd0b              BLE      |L1.1916|
000764  6b20              LDR      r0,[r4,#0x30]         ;287
000766  f8bd100c          LDRH     r1,[sp,#0xc]          ;287
00076a  eb00008b          ADD      r0,r0,r11,LSL #2      ;287
00076e  8001              STRH     r1,[r0,#0]            ;287
000770  f8bd100e          LDRH     r1,[sp,#0xe]          ;287
000774  8041              STRH     r1,[r0,#2]            ;287
000776  f10b0101          ADD      r1,r11,#1             ;287
00077a  60e1              STR      r1,[r4,#0xc]          ;287
                  |L1.1916|
00077c  f1090001          ADD      r0,r9,#1              ;286
000780  fa0ff980          SXTH     r9,r0                 ;286
000784  9800              LDR      r0,[sp,#0]            ;286
000786  f9300c02          LDRSH    r0,[r0,#-2]           ;286
00078a  1e40              SUBS     r0,r0,#1              ;286
00078c  4548              CMP      r0,r9                 ;286
00078e  bfa8              IT       GE                    ;286
000790  9808              LDRGE    r0,[sp,#0x20]         ;286
000792  dadc              BGE      |L1.1870|
                  |L1.1940|
000794  f1aa0001          SUB      r0,r10,#1             ;292
000798  fa0ffa80          SXTH     r10,r0                ;292
00079c  9800              LDR      r0,[sp,#0]            ;292
00079e  f8300c02          LDRH     r0,[r0,#-2]           ;292
0007a2  f8ada008          STRH     r10,[sp,#8]           ;292
0007a6  f8ad000a          STRH     r0,[sp,#0xa]          ;292
0007aa  4620              MOV      r0,r4                 ;292
0007ac  f8d4900c          LDR      r9,[r4,#0xc]          ;292
0007b0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
0007b4  4581              CMP      r9,r0                 ;292
0007b6  da0b              BGE      |L1.2000|
0007b8  6b20              LDR      r0,[r4,#0x30]         ;292
0007ba  f8bd1008          LDRH     r1,[sp,#8]            ;292
0007be  eb000089          ADD      r0,r0,r9,LSL #2       ;292
0007c2  8001              STRH     r1,[r0,#0]            ;292
0007c4  f8bd100a          LDRH     r1,[sp,#0xa]          ;292
0007c8  8041              STRH     r1,[r0,#2]            ;292
0007ca  f1090101          ADD      r1,r9,#1              ;292
0007ce  60e1              STR      r1,[r4,#0xc]          ;292
                  |L1.2000|
0007d0  9807              LDR      r0,[sp,#0x1c]         ;267
0007d2  f9300c02          LDRSH    r0,[r0,#-2]           ;267
0007d6  1c40              ADDS     r0,r0,#1              ;267
0007d8  4550              CMP      r0,r10                ;267
0007da  e000              B        |L1.2014|
                  |L1.2012|
0007dc  e001              B        |L1.2018|
                  |L1.2014|
0007de  f77faf7e          BLE      |L1.1758|
                  |L1.2018|
0007e2  9801              LDR      r0,[sp,#4]            ;297
0007e4  1e80              SUBS     r0,r0,#2              ;297
0007e6  fa0ff880          SXTH     r8,r0                 ;297
0007ea  f1b80f00          CMP      r8,#0                 ;297
0007ee  db76              BLT      |L1.2270|
                  |L1.2032|
0007f0  eb060148          ADD      r1,r6,r8,LSL #1       ;300
0007f4  f9360018          LDRSH    r0,[r6,r8,LSL #1]     ;300
0007f8  f9b19002          LDRSH    r9,[r1,#2]            ;300
0007fc  4581              CMP      r9,r0                 ;300
0007fe  da2a              BGE      |L1.2134|
000800  f1090101          ADD      r1,r9,#1              ;306
000804  fa0ff981          SXTH     r9,r1                 ;306
000808  4548              CMP      r0,r9                 ;306
00080a  bfa4              ITT      GE                    ;307
00080c  f1080001          ADDGE    r0,r8,#1              ;307
000810  fa0ffb80          SXTHGE   r11,r0                ;307
000814  db43              BLT      |L1.2206|
                  |L1.2070|
000816  f8ad9004          STRH     r9,[sp,#4]            ;306
00081a  f8adb006          STRH     r11,[sp,#6]           ;306
00081e  4620              MOV      r0,r4                 ;306
000820  f8d4a00c          LDR      r10,[r4,#0xc]         ;306
000824  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
000828  4550              CMP      r0,r10                ;306
00082a  dd0b              BLE      |L1.2116|
00082c  6b20              LDR      r0,[r4,#0x30]         ;306
00082e  f8bd1004          LDRH     r1,[sp,#4]            ;306
000832  eb00008a          ADD      r0,r0,r10,LSL #2      ;306
000836  8001              STRH     r1,[r0,#0]            ;306
000838  f8bd1006          LDRH     r1,[sp,#6]            ;306
00083c  8041              STRH     r1,[r0,#2]            ;306
00083e  f10a0101          ADD      r1,r10,#1             ;306
000842  60e1              STR      r1,[r4,#0xc]          ;306
                  |L1.2116|
000844  f1090001          ADD      r0,r9,#1              ;306
000848  fa0ff980          SXTH     r9,r0                 ;306
00084c  f9360018          LDRSH    r0,[r6,r8,LSL #1]     ;306
000850  4548              CMP      r0,r9                 ;306
000852  dae0              BGE      |L1.2070|
000854  e023              B        |L1.2206|
                  |L1.2134|
000856  dd22              BLE      |L1.2206|
000858  1c40              ADDS     r0,r0,#1              ;316
00085a  4548              CMP      r0,r9                 ;316
00085c  dc1f              BGT      |L1.2206|
                  |L1.2142|
00085e  f8ad9004          STRH     r9,[sp,#4]            ;316
000862  f8ad8006          STRH     r8,[sp,#6]            ;316
000866  4620              MOV      r0,r4                 ;316
000868  f8d4a00c          LDR      r10,[r4,#0xc]         ;316
00086c  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
000870  4582              CMP      r10,r0                ;316
000872  da0b              BGE      |L1.2188|
000874  6b20              LDR      r0,[r4,#0x30]         ;316
000876  f8bd1004          LDRH     r1,[sp,#4]            ;316
00087a  eb00008a          ADD      r0,r0,r10,LSL #2      ;316
00087e  8001              STRH     r1,[r0,#0]            ;316
000880  f8bd1006          LDRH     r1,[sp,#6]            ;316
000884  8041              STRH     r1,[r0,#2]            ;316
000886  f10a0101          ADD      r1,r10,#1             ;316
00088a  60e1              STR      r1,[r4,#0xc]          ;316
                  |L1.2188|
00088c  f1a90001          SUB      r0,r9,#1              ;316
000890  fa0ff980          SXTH     r9,r0                 ;316
000894  f9360018          LDRSH    r0,[r6,r8,LSL #1]     ;316
000898  1c40              ADDS     r0,r0,#1              ;316
00089a  4548              CMP      r0,r9                 ;316
00089c  dddf              BLE      |L1.2142|
                  |L1.2206|
00089e  f8360018          LDRH     r0,[r6,r8,LSL #1]     ;322
0008a2  f8ad0000          STRH     r0,[sp,#0]            ;322
0008a6  f8ad8002          STRH     r8,[sp,#2]            ;322
0008aa  4620              MOV      r0,r4                 ;322
0008ac  f8d4900c          LDR      r9,[r4,#0xc]          ;322
0008b0  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
0008b4  4548              CMP      r0,r9                 ;322
0008b6  dd0b              BLE      |L1.2256|
0008b8  6b20              LDR      r0,[r4,#0x30]         ;322
0008ba  f8bd1000          LDRH     r1,[sp,#0]            ;322
0008be  eb000089          ADD      r0,r0,r9,LSL #2       ;322
0008c2  8001              STRH     r1,[r0,#0]            ;322
0008c4  f8bd1002          LDRH     r1,[sp,#2]            ;322
0008c8  8041              STRH     r1,[r0,#2]            ;322
0008ca  f1090101          ADD      r1,r9,#1              ;322
0008ce  60e1              STR      r1,[r4,#0xc]          ;322
                  |L1.2256|
0008d0  f1a80001          SUB      r0,r8,#1              ;297
0008d4  fa0ff880          SXTH     r8,r0                 ;297
0008d8  f1b80f00          CMP      r8,#0                 ;297
0008dc  da88              BGE      |L1.2032|
                  |L1.2270|
0008de  8830              LDRH     r0,[r6,#0]            ;327
0008e0  1c40              ADDS     r0,r0,#1              ;327
0008e2  b206              SXTH     r6,r0                 ;327
0008e4  f9b50000          LDRSH    r0,[r5,#0]            ;327
0008e8  42b0              CMP      r0,r6                 ;327
0008ea  db74              BLT      |L1.2518|
                  |L1.2284|
0008ec  eb070146          ADD      r1,r7,r6,LSL #1       ;329
0008f0  f9370016          LDRSH    r0,[r7,r6,LSL #1]     ;329
0008f4  f9318c02          LDRSH    r8,[r1,#-2]           ;329
0008f8  4580              CMP      r8,r0                 ;329
0008fa  da29              BGE      |L1.2384|
0008fc  f1080101          ADD      r1,r8,#1              ;335
000900  fa0ff881          SXTH     r8,r1                 ;335
000904  4540              CMP      r0,r8                 ;335
000906  bfa4              ITT      GE                    ;336
000908  1e70              SUBGE    r0,r6,#1              ;336
00090a  fa0ffa80          SXTHGE   r10,r0                ;336
00090e  db43              BLT      |L1.2456|
                  |L1.2320|
000910  f8ada004          STRH     r10,[sp,#4]           ;335
000914  f8ad8006          STRH     r8,[sp,#6]            ;335
000918  4620              MOV      r0,r4                 ;335
00091a  f8d4900c          LDR      r9,[r4,#0xc]          ;335
00091e  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
000922  4548              CMP      r0,r9                 ;335
000924  dd0b              BLE      |L1.2366|
000926  6b20              LDR      r0,[r4,#0x30]         ;335
000928  f8bd1004          LDRH     r1,[sp,#4]            ;335
00092c  eb000089          ADD      r0,r0,r9,LSL #2       ;335
000930  8001              STRH     r1,[r0,#0]            ;335
000932  f8bd1006          LDRH     r1,[sp,#6]            ;335
000936  8041              STRH     r1,[r0,#2]            ;335
000938  f1090101          ADD      r1,r9,#1              ;335
00093c  60e1              STR      r1,[r4,#0xc]          ;335
                  |L1.2366|
00093e  f1080001          ADD      r0,r8,#1              ;335
000942  fa0ff880          SXTH     r8,r0                 ;335
000946  f9370016          LDRSH    r0,[r7,r6,LSL #1]     ;335
00094a  4540              CMP      r0,r8                 ;335
00094c  dae0              BGE      |L1.2320|
00094e  e023              B        |L1.2456|
                  |L1.2384|
000950  dd22              BLE      |L1.2456|
000952  1c40              ADDS     r0,r0,#1              ;346
000954  4540              CMP      r0,r8                 ;346
000956  dc1f              BGT      |L1.2456|
                  |L1.2392|
000958  f8ad6004          STRH     r6,[sp,#4]            ;346
00095c  f8ad8006          STRH     r8,[sp,#6]            ;346
000960  4620              MOV      r0,r4                 ;346
000962  f8d4900c          LDR      r9,[r4,#0xc]          ;346
000966  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
00096a  4581              CMP      r9,r0                 ;346
00096c  da0b              BGE      |L1.2438|
00096e  6b20              LDR      r0,[r4,#0x30]         ;346
000970  f8bd1004          LDRH     r1,[sp,#4]            ;346
000974  eb000089          ADD      r0,r0,r9,LSL #2       ;346
000978  8001              STRH     r1,[r0,#0]            ;346
00097a  f8bd1006          LDRH     r1,[sp,#6]            ;346
00097e  8041              STRH     r1,[r0,#2]            ;346
000980  f1090101          ADD      r1,r9,#1              ;346
000984  60e1              STR      r1,[r4,#0xc]          ;346
                  |L1.2438|
000986  f1a80001          SUB      r0,r8,#1              ;346
00098a  fa0ff880          SXTH     r8,r0                 ;346
00098e  f9370016          LDRSH    r0,[r7,r6,LSL #1]     ;346
000992  1c40              ADDS     r0,r0,#1              ;346
000994  4540              CMP      r0,r8                 ;346
000996  dddf              BLE      |L1.2392|
                  |L1.2456|
000998  f8370016          LDRH     r0,[r7,r6,LSL #1]     ;352
00099c  f8ad6000          STRH     r6,[sp,#0]            ;352
0009a0  f8ad0002          STRH     r0,[sp,#2]            ;352
0009a4  4620              MOV      r0,r4                 ;352
0009a6  f8d4800c          LDR      r8,[r4,#0xc]          ;352
0009aa  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
0009ae  4540              CMP      r0,r8                 ;352
0009b0  dd0b              BLE      |L1.2506|
0009b2  6b20              LDR      r0,[r4,#0x30]         ;352
0009b4  f8bd1000          LDRH     r1,[sp,#0]            ;352
0009b8  eb000088          ADD      r0,r0,r8,LSL #2       ;352
0009bc  8001              STRH     r1,[r0,#0]            ;352
0009be  f8bd1002          LDRH     r1,[sp,#2]            ;352
0009c2  8041              STRH     r1,[r0,#2]            ;352
0009c4  f1080101          ADD      r1,r8,#1              ;352
0009c8  60e1              STR      r1,[r4,#0xc]          ;352
                  |L1.2506|
0009ca  1c70              ADDS     r0,r6,#1              ;327
0009cc  b206              SXTH     r6,r0                 ;327
0009ce  f9b50000          LDRSH    r0,[r5,#0]            ;327
0009d2  42b0              CMP      r0,r6                 ;327
0009d4  da8a              BGE      |L1.2284|
                  |L1.2518|
0009d6  68e3              LDR      r3,[r4,#0xc]          ;361
0009d8  2000              MOVS     r0,#0                 ;361
0009da  6b21              LDR      r1,[r4,#0x30]         ;361
0009dc  2b00              CMP      r3,#0                 ;361
0009de  dd12              BLE      |L1.2566|
                  |L1.2528|
0009e0  f8312020          LDRH     r2,[r1,r0,LSL #2]     ;362
0009e4  f8bdc010          LDRH     r12,[sp,#0x10]        ;362
0009e8  4462              ADD      r2,r2,r12             ;362
0009ea  f8212020          STRH     r2,[r1,r0,LSL #2]     ;362
0009ee  eb010280          ADD      r2,r1,r0,LSL #2       ;363
0009f2  f8bd4014          LDRH     r4,[sp,#0x14]         ;363
0009f6  f8b2c002          LDRH     r12,[r2,#2]           ;363
0009fa  1c40              ADDS     r0,r0,#1              ;361
0009fc  44a4              ADD      r12,r12,r4            ;363
0009fe  f8a2c002          STRH     r12,[r2,#2]           ;363
000a02  4283              CMP      r3,r0                 ;361
000a04  dcec              BGT      |L1.2528|
                  |L1.2566|
000a06  b009              ADD      sp,sp,#0x24
000a08  2000              MOVS     r0,#0                 ;367
000a0a  e8bd8ff0          POP      {r4-r11,pc}
;;;369      } // namespace Embedded
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki8Embedded25TraceNextExteriorBoundaryERKNS0_19ConnectedComponentsEiRNS0_15FixedLengthListINS0_5PointIsEEEERiNS0_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki8Embedded25TraceNextExteriorBoundaryERKNS0_19ConnectedComponentsEiRNS0_15FixedLengthListINS0_5PointIsEEEERiNS0_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __PRETTY_FUNCTION__
000000  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000004  3a3a5265          DCB      0x3a,0x3a,0x52,0x65
000008  73756c74          DCB      0x73,0x75,0x6c,0x74
00000c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000010  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000014  6d626564          DCB      0x6d,0x62,0x65,0x64
000018  6465643a          DCB      0x64,0x65,0x64,0x3a
00001c  3a547261          DCB      0x3a,0x54,0x72,0x61
000020  63654e65          DCB      0x63,0x65,0x4e,0x65
000024  78744578          DCB      0x78,0x74,0x45,0x78
000028  74657269          DCB      0x74,0x65,0x72,0x69
00002c  6f72426f          DCB      0x6f,0x72,0x42,0x6f
000030  756e6461          DCB      0x75,0x6e,0x64,0x61
000034  72792863          DCB      0x72,0x79,0x28,0x63
000038  6f6e7374          DCB      0x6f,0x6e,0x73,0x74
00003c  20416e6b          DCB      0x20,0x41,0x6e,0x6b
000040  693a3a45          DCB      0x69,0x3a,0x3a,0x45
000044  6d626564          DCB      0x6d,0x62,0x65,0x64
000048  6465643a          DCB      0x64,0x65,0x64,0x3a
00004c  3a436f6e          DCB      0x3a,0x43,0x6f,0x6e
000050  6e656374          DCB      0x6e,0x65,0x63,0x74
000054  6564436f          DCB      0x65,0x64,0x43,0x6f
000058  6d706f6e          DCB      0x6d,0x70,0x6f,0x6e
00005c  656e7473          DCB      0x65,0x6e,0x74,0x73
000060  20262c20          DCB      0x20,0x26,0x2c,0x20
000064  7369676e          DCB      0x73,0x69,0x67,0x6e
000068  65642069          DCB      0x65,0x64,0x20,0x69
00006c  6e742c20          DCB      0x6e,0x74,0x2c,0x20
000070  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000074  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000078  62656464          DCB      0x62,0x65,0x64,0x64
00007c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
000080  46697865          DCB      0x46,0x69,0x78,0x65
000084  644c656e          DCB      0x64,0x4c,0x65,0x6e
000088  6774684c          DCB      0x67,0x74,0x68,0x4c
00008c  6973743c          DCB      0x69,0x73,0x74,0x3c
000090  416e6b69          DCB      0x41,0x6e,0x6b,0x69
000094  3a3a456d          DCB      0x3a,0x3a,0x45,0x6d
000098  62656464          DCB      0x62,0x65,0x64,0x64
00009c  65643a3a          DCB      0x65,0x64,0x3a,0x3a
0000a0  506f696e          DCB      0x50,0x6f,0x69,0x6e
0000a4  743c7369          DCB      0x74,0x3c,0x73,0x69
0000a8  676e6564          DCB      0x67,0x6e,0x65,0x64
0000ac  2073686f          DCB      0x20,0x73,0x68,0x6f
0000b0  72743e3e          DCB      0x72,0x74,0x3e,0x3e
0000b4  20262c20          DCB      0x20,0x26,0x2c,0x20
0000b8  7369676e          DCB      0x73,0x69,0x67,0x6e
0000bc  65642069          DCB      0x65,0x64,0x20,0x69
0000c0  6e742026          DCB      0x6e,0x74,0x20,0x26
0000c4  2c20416e          DCB      0x2c,0x20,0x41,0x6e
0000c8  6b693a3a          DCB      0x6b,0x69,0x3a,0x3a
0000cc  456d6265          DCB      0x45,0x6d,0x62,0x65
0000d0  64646564          DCB      0x64,0x64,0x65,0x64
0000d4  3a3a4d65          DCB      0x3a,0x3a,0x4d,0x65
0000d8  6d6f7279          DCB      0x6d,0x6f,0x72,0x79
0000dc  53746163          DCB      0x53,0x74,0x61,0x63
0000e0  6b290000          DCB      0x6b,0x29,0x00,0x00
0000e4  41727261          DCB      0x41,0x72,0x72,0x61
0000e8  793c5479          DCB      0x79,0x3c,0x54,0x79
0000ec  70653e3a          DCB      0x70,0x65,0x3e,0x3a
0000f0  3a676574          DCB      0x3a,0x67,0x65,0x74
0000f4  5f73697a          DCB      0x5f,0x73,0x69,0x7a
0000f8  65000000          DCB      0x65,0x00,0x00,0x00
0000fc  4e656761          DCB      0x4e,0x65,0x67,0x61
000100  74697665          DCB      0x74,0x69,0x76,0x65
000104  2064696d          DCB      0x20,0x64,0x69,0x6d
000108  656e7369          DCB      0x65,0x6e,0x73,0x69
00010c  6f6e0000          DCB      0x6f,0x6e,0x00,0x00
000110  2e2e5c63          DCB      0x2e,0x2e,0x5c,0x63
000114  6f726574          DCB      0x6f,0x72,0x65,0x74
000118  6563685c          DCB      0x65,0x63,0x68,0x5c
00011c  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000120  6f6e5c69          DCB      0x6f,0x6e,0x5c,0x69
000124  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000128  64655c61          DCB      0x64,0x65,0x5c,0x61
00012c  6e6b692f          DCB      0x6e,0x6b,0x69,0x2f
000130  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
000134  6f6e2f72          DCB      0x6f,0x6e,0x2f,0x72
000138  6f626f74          DCB      0x6f,0x62,0x6f,0x74
00013c  2f617272          DCB      0x2f,0x61,0x72,0x72
000140  61793264          DCB      0x61,0x79,0x32,0x64
000144  2e6800            DCB      0x2e,0x68,0x00

                          AREA ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv, CODE, READONLY, ALIGN=1

                  _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
;;;169    
;;;170        template<typename Type> inline s32 FixedLengthList<Type>::get_maximumSize() const
000000  69c0              LDR      r0,[r0,#0x1c]
;;;171        {
;;;172          return this->array.get_size(1);
;;;173        } // s32 FixedLengthList<Type>::get_maximumSize() const
000002  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||area_number.15||, COMGROUP=_ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv, LINKORDER=||t._ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv||
                          DCD      0x00000001

                          AREA ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_, CODE, READONLY, ALIGN=2

                  _ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_ PROC ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::PushBack(const Anki::Embedded::Point<short>&)
;;;112    
;;;113        template<typename Type> Result FixedLengthList<Type>::PushBack(const Type &value)
000000  b570              PUSH     {r4-r6,lr}
;;;114        {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;115          const s32 curSize = this->get_size();
;;;116    
;;;117          if(curSize >= this->get_maximumSize()) {
000006  68c4              LDR      r4,[r0,#0xc]
000008  f7fffffe          BL       _ZNK4Anki8Embedded15FixedLengthListINS0_5PointIsEEE15get_maximumSizeEv ; Anki::Embedded::FixedLengthList<Anki::Embedded::Point<short>>::get_maximumSize() const
00000c  42a0              CMP      r0,r4
;;;118            return RESULT_FAIL_OUT_OF_MEMORY;
00000e  bfdc              ITT      LE
000010  4806              LDRLE    r0,|L21.44|
;;;119          }
;;;120    
;;;121          *this->Pointer(curSize) = value;
;;;122    
;;;123          this->xSlice.size = curSize+1;
;;;124    
;;;125          return RESULT_OK;
;;;126        } // Result FixedLengthList<Type>::PushBack(const Type &value)
000012  bd70              POPLE    {r4-r6,pc}
000014  6b28              LDR      r0,[r5,#0x30]
000016  8831              LDRH     r1,[r6,#0]
000018  eb000084          ADD      r0,r0,r4,LSL #2
00001c  8001              STRH     r1,[r0,#0]
00001e  8871              LDRH     r1,[r6,#2]
000020  8041              STRH     r1,[r0,#2]
000022  1c60              ADDS     r0,r4,#1              ;123
000024  60e8              STR      r0,[r5,#0xc]          ;125
000026  2000              MOVS     r0,#0                 ;125
000028  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP

00002a  0000              DCW      0x0000
                  |L21.44|
                          DCD      0x01000001

                          AREA ||area_number.22||, COMGROUP=_ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_, LINKORDER=||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN4Anki8Embedded15FixedLengthListINS0_5PointIsEEE8PushBackERKS3_||
                          DCD      0x00000001

                          AREA ||i.__ARM_common_memcpy4_8||, COMGROUP=__ARM_common_memcpy4_8, CODE, READONLY, ALIGN=1

                  __ARM_common_memcpy4_8 PROC
000000  680a              LDR      r2,[r1,#0]
000002  684b              LDR      r3,[r1,#4]
000004  6002              STR      r2,[r0,#0]
000006  6043              STR      r3,[r0,#4]
000008  4770              BX       lr
                          ENDP


                          AREA ||area_number.29||, COMGROUP=__ARM_common_memcpy4_8, LINKORDER=||i.__ARM_common_memcpy4_8||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__ARM_common_memcpy4_8||
                          DCD      0x00000001
