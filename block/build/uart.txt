; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\uart.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\uart.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\uart.crf arm_hal\hal\uart.cpp]
                          THUMB

                          AREA ||i.DMA1_Stream6_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream6_IRQHandler PROC
;;;404      // Used for UART transfer-complete
;;;405      void DMA_HANDLER_TX()
000000  b510              PUSH     {r4,lr}
;;;406      {
;;;407        using namespace Anki::Cozmo::HAL;
;;;408        
;;;409        // Clear DMA Transfer Complete flag
;;;410        DMA_ClearFlag(DMA_STREAM_TX, DMA_FLAG_TX); // Stream 7 (or 6)
000002  490e              LDR      r1,|L1.60|
000004  480e              LDR      r0,|L1.64|
000006  f7fffffe          BL       DMA_ClearFlag
;;;411        
;;;412        m_writeTail += m_writeLength;
00000a  4c0e              LDR      r4,|L1.68|
00000c  6860              LDR      r0,[r4,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
00000e  68e1              LDR      r1,[r4,#0xc]  ; _ZN4Anki5Cozmo3HAL13m_writeLengthE
000010  4408              ADD      r0,r0,r1
000012  6060              STR      r0,[r4,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
;;;413        if (m_writeTail >= sizeof(m_bufferWrite))
000014  6861              LDR      r1,[r4,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
000016  2000              MOVS     r0,#0
000018  f5b15f80          CMP      r1,#0x1000
;;;414          m_writeTail = 0;
00001c  bf28              IT       CS
00001e  6060              STRCS    r0,[r4,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
;;;415        
;;;416        // Check if there's more data to be transferred
;;;417        if (m_writeHead != m_writeTail)
000020  68a1              LDR      r1,[r4,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000022  6862              LDR      r2,[r4,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
000024  4291              CMP      r1,r2
;;;418        {
;;;419          MicroWait(1);
;;;420          StartTransfer();
;;;421        } else {
;;;422          m_isTransferring = false;
000026  bf04              ITT      EQ
000028  7020              STRBEQ   r0,[r4,#0]
;;;423        }
;;;424      }
00002a  bd10              POPEQ    {r4,pc}
00002c  2001              MOVS     r0,#1                 ;419
00002e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL9MicroWaitEj ; Anki::Cozmo::HAL::MicroWait(unsigned)
000032  6960              LDR      r0,[r4,#0x14]         ;420  ; _ZN4Anki5Cozmo3HAL13StartTransferE
000034  e8bd4010          POP      {r4,lr}               ;420
000038  4700              BX       r0                    ;420
;;;425    }
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x20200000
                  |L1.64|
                          DCD      0x400260a0
                  |L1.68|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL10BufPutCharEh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL10BufPutCharEh PROC ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;239          // Add one char to the buffer, wrapping around
;;;240          static void BufPutChar(u8 c)
000000  4907              LDR      r1,|L2.32|
;;;241          {
;;;242    #if defined(UART_NON_ISR_PUT_CHAR)
;;;243            UART->DR = c;
;;;244            while (!(UART->SR & USART_FLAG_TXE))
;;;245              ;
;;;246            return;
;;;247    #else
;;;248            m_bufferWrite[m_writeHead] = c;
000002  4a06              LDR      r2,|L2.28|
000004  688b              LDR      r3,[r1,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000006  54d0              STRB     r0,[r2,r3]
;;;249            m_writeHead++;
000008  6888              LDR      r0,[r1,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
00000a  1c40              ADDS     r0,r0,#1
00000c  6088              STR      r0,[r1,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
;;;250            if (m_writeHead >= sizeof(m_bufferWrite))
00000e  6888              LDR      r0,[r1,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000010  f5b05f80          CMP      r0,#0x1000
;;;251            {
;;;252              m_writeHead = 0;
000014  bf24              ITT      CS
000016  2000              MOVCS    r0,#0
000018  6088              STRCS    r0,[r1,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
;;;253            }
;;;254    #endif
;;;255          }
00001a  4770              BX       lr
;;;256          
                          ENDP

                  |L2.28|
                          DCD      ||.bss||
                  |L2.32|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL10UARTPutHexEh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL10UARTPutHexEh PROC ; Anki::Cozmo::HAL::UARTPutHex(unsigned char)
;;;346          
;;;347          void UARTPutHex(u8 c)
000000  b570              PUSH     {r4-r6,lr}
;;;348          {
;;;349            static u8 hex[] = "0123456789ABCDEF";
;;;350            UARTPutChar(hex[c >> 4]);
000002  4d07              LDR      r5,|L3.32|
000004  4604              MOV      r4,r0                 ;348
000006  eb051014          ADD      r0,r5,r4,LSR #4
00000a  7800              LDRB     r0,[r0,#0]
00000c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;351            UARTPutChar(hex[c & 0xF]);
000010  f004000f          AND      r0,r4,#0xf
000014  5c28              LDRB     r0,[r5,r0]
000016  e8bd4070          POP      {r4-r6,lr}
00001a  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;352          }
;;;353          
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      ||.data||+0x20

                          AREA ||i._ZN4Anki5Cozmo3HAL11UARTGetCharEj||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL11UARTGetCharEj PROC ; Anki::Cozmo::HAL::UARTGetChar(unsigned)
;;;382    
;;;383          s32 UARTGetChar(u32 timeout)
000000  4901              LDR      r1,|L4.8|
;;;384          {
;;;385            return GetChar(timeout);
000002  6989              LDR      r1,[r1,#0x18]  ; _ZN4Anki5Cozmo3HAL7GetCharE
000004  4708              BX       r1
;;;386          }      
;;;387        }
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL11UARTPutCharEi||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL11UARTPutCharEi PROC ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;256          
;;;257          int UARTPutChar(int c)
000000  b570              PUSH     {r4-r6,lr}
000002  4c0c              LDR      r4,|L5.52|
;;;258          {
000004  4605              MOV      r5,r0
                  |L5.6|
000006  6861              LDR      r1,[r4,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
000008  68a2              LDR      r2,[r4,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
00000a  68a0              LDR      r0,[r4,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
00000c  4288              CMP      r0,r1
00000e  bfb2              ITEE     LT
000010  1a89              SUBLT    r1,r1,r2
000012  1a50              SUBGE    r0,r2,r1
000014  f5c05180          RSBGE    r1,r0,#0x1000
;;;259           
;;;260            // Leave one guard byte in the buffer
;;;261            while (UARTGetFreeSpace() <= 2)
000018  2902              CMP      r1,#2
00001a  ddf4              BLE      |L5.6|
;;;262              ;
;;;263            
;;;264            __disable_irq();
00001c  b672              CPSID    i
;;;265            BufPutChar(c);
00001e  b2e8              UXTB     r0,r5
000020  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;266            
;;;267            // Enable DMA if it's not already running
;;;268            if (!m_isTransferring)
000024  7820              LDRB     r0,[r4,#0]  ; _ZN4Anki5Cozmo3HAL16m_isTransferringE
000026  2800              CMP      r0,#0
;;;269            {
;;;270              StartTransfer();
000028  bf04              ITT      EQ
00002a  6960              LDREQ    r0,[r4,#0x14]  ; _ZN4Anki5Cozmo3HAL13StartTransferE
00002c  4780              BLXEQ    r0
;;;271            }
;;;272            
;;;273            __enable_irq();
00002e  b662              CPSIE    i
;;;274            
;;;275            return c;
000030  4628              MOV      r0,r5
;;;276          }
000032  bd70              POP      {r4-r6,pc}
;;;277    
                          ENDP

                  |L5.52|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL12UARTPutHex32Ej||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL12UARTPutHex32Ej PROC ; Anki::Cozmo::HAL::UARTPutHex32(unsigned)
;;;353          
;;;354          void UARTPutHex32(u32 value)
000000  b570              PUSH     {r4-r6,lr}
000002  4d19              LDR      r5,|L6.104|
;;;355          {
000004  4604              MOV      r4,r0
;;;356            UARTPutHex(value >> 24);
000006  0e06              LSRS     r6,r0,#24
000008  eb051016          ADD      r0,r5,r6,LSR #4
00000c  7800              LDRB     r0,[r0,#0]
00000e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
000012  f006000f          AND      r0,r6,#0xf
000016  5c28              LDRB     r0,[r5,r0]
000018  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;357            UARTPutHex(value >> 16);
00001c  f3c44607          UBFX     r6,r4,#16,#8
000020  eb051016          ADD      r0,r5,r6,LSR #4
000024  7800              LDRB     r0,[r0,#0]
000026  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
00002a  f006000f          AND      r0,r6,#0xf
00002e  5c28              LDRB     r0,[r5,r0]
000030  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;358            UARTPutHex(value >> 8);
000034  f3c42607          UBFX     r6,r4,#8,#8
000038  eb051016          ADD      r0,r5,r6,LSR #4
00003c  7800              LDRB     r0,[r0,#0]
00003e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
000042  f006000f          AND      r0,r6,#0xf
000046  5c28              LDRB     r0,[r5,r0]
000048  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;359            UARTPutHex(value);
00004c  b2e4              UXTB     r4,r4
00004e  eb051014          ADD      r0,r5,r4,LSR #4
000052  7800              LDRB     r0,[r0,#0]
000054  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
000058  f004000f          AND      r0,r4,#0xf
00005c  5c28              LDRB     r0,[r5,r0]
00005e  e8bd4070          POP      {r4-r6,lr}
000062  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;360          }
;;;361          
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
                          DCD      ||.data||+0x20

                          AREA ||i._ZN4Anki5Cozmo3HAL13UARTConfigureEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL13UARTConfigureEv PROC ; Anki::Cozmo::HAL::UARTConfigure()
;;;121    
;;;122          void UARTConfigure()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;123          {
;;;124            // Supporting 3.0
;;;125          #ifdef DEBUG_UART
;;;126            GPIO_PIN_SOURCE(TX, GPIOB, 6);
;;;127            GPIO_PIN_SOURCE(RX, GPIOB, 7);
;;;128          #else
;;;129            GPIO_PIN_SOURCE(TX, GPIOA, 2);
;;;130            GPIO_PIN_SOURCE(RX, GPIOA, 3);
;;;131          #endif
;;;132            
;;;133            // Clock configuration
;;;134            RCC_AHB1PeriphClockCmd(RCC_GPIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  b096              SUB      sp,sp,#0x58           ;123
000008  4d56              LDR      r5,|L7.356|
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;135            RCC_AHB1PeriphClockCmd(RCC_DMA, ENABLE);
000010  2101              MOVS     r1,#1
000012  0548              LSLS     r0,r1,#21
000014  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;136            //RCC_APB2PeriphClockCmd(RCC_UART, ENABLE);
;;;137    				RCC_APB1PeriphClockCmd(RCC_UART, ENABLE);
000018  2101              MOVS     r1,#1
00001a  0448              LSLS     r0,r1,#17
00001c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;138    				
;;;139            // Configure the pins for UART in AF mode
;;;140            GPIO_InitTypeDef GPIO_InitStructure;
;;;141            GPIO_InitStructure.GPIO_Pin = PIN_TX;
;;;142            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000020  2002              MOVS     r0,#2
000022  f88d0044          STRB     r0,[sp,#0x44]
;;;143            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000026  2400              MOVS     r4,#0
000028  2104              MOVS     r1,#4                 ;141
00002a  f88d4045          STRB     r4,[sp,#0x45]
00002e  9110              STR      r1,[sp,#0x40]         ;142
;;;144            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000030  f88d4046          STRB     r4,[sp,#0x46]
;;;145            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000034  f88d4047          STRB     r4,[sp,#0x47]
;;;146            GPIO_Init(GPIO_TX, &GPIO_InitStructure);
000038  a910              ADD      r1,sp,#0x40
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       GPIO_Init
;;;147            
;;;148            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;149            GPIO_InitStructure.GPIO_Pin = PIN_RX;
000040  2108              MOVS     r1,#8
;;;150            GPIO_Init(GPIO_RX, &GPIO_InitStructure);
000042  9110              STR      r1,[sp,#0x40]
000044  f88d4047          STRB     r4,[sp,#0x47]         ;148
000048  a910              ADD      r1,sp,#0x40
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       GPIO_Init
;;;151            
;;;152            GPIO_PinAFConfig(GPIO_TX, SOURCE_TX, GPIO_AF);
000050  2207              MOVS     r2,#7
000052  2102              MOVS     r1,#2
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       GPIO_PinAFConfig
;;;153            GPIO_PinAFConfig(GPIO_RX, SOURCE_RX, GPIO_AF);
00005a  2207              MOVS     r2,#7
00005c  2103              MOVS     r1,#3
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       GPIO_PinAFConfig
;;;154            
;;;155            // Configure the UART for the appropriate baudrate
;;;156            USART_InitTypeDef USART_InitStructure;
;;;157            USART_Cmd(UART, DISABLE);
000064  f8df9100          LDR      r9,|L7.360|
000068  2100              MOVS     r1,#0
00006a  4648              MOV      r0,r9
00006c  f7fffffe          BL       USART_Cmd
;;;158            USART_InitStructure.USART_BaudRate = BAUDRATE;
000070  f44f30e1          MOV      r0,#0x1c200
;;;159            USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000074  9012              STR      r0,[sp,#0x48]
;;;160            USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;161            USART_InitStructure.USART_Parity = USART_Parity_No;
000076  f8ad4050          STRH     r4,[sp,#0x50]
;;;162            USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;163            USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00007a  200c              MOVS     r0,#0xc
00007c  f8ad404c          STRH     r4,[sp,#0x4c]         ;159
000080  f8ad0052          STRH     r0,[sp,#0x52]
000084  f8ad404e          STRH     r4,[sp,#0x4e]         ;160
000088  f8ad4054          STRH     r4,[sp,#0x54]         ;162
;;;164            USART_Init(UART, &USART_InitStructure);
00008c  a912              ADD      r1,sp,#0x48
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       USART_Init
;;;165            USART_Cmd(UART, ENABLE);
000094  2101              MOVS     r1,#1
000096  4648              MOV      r0,r9
000098  f7fffffe          BL       USART_Cmd
;;;166            
;;;167            // Configure DMA for receiving
;;;168            DMA_DeInit(DMA_STREAM_RX);
00009c  f8dfa0cc          LDR      r10,|L7.364|
0000a0  4650              MOV      r0,r10
0000a2  f7fffffe          BL       DMA_DeInit
;;;169            
;;;170            DMA_InitTypeDef DMA_InitStructure;
;;;171            DMA_InitStructure.DMA_Channel = DMA_CHANNEL_RX;
0000a6  02af              LSLS     r7,r5,#10
;;;172            DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART->DR;
0000a8  f1090004          ADD      r0,r9,#4
0000ac  e9cd7000          STRD     r7,r0,[sp,#0]
;;;173            DMA_InitStructure.DMA_Memory0BaseAddr = (u32)m_bufferRead;
0000b0  482f              LDR      r0,|L7.368|
;;;174            DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
;;;175            DMA_InitStructure.DMA_BufferSize = sizeof(m_bufferRead);
0000b2  152e              ASRS     r6,r5,#20
0000b4  e9cd0402          STRD     r0,r4,[sp,#8]
0000b8  e9cd6404          STRD     r6,r4,[sp,#0x10]
;;;176            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;177            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
;;;178            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
;;;179            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
;;;180            DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
0000bc  15a8              ASRS     r0,r5,#22
;;;181            DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
0000be  e9cd4008          STRD     r4,r0,[sp,#0x20]
0000c2  e9cd6406          STRD     r6,r4,[sp,#0x18]      ;175
0000c6  f44f3880          MOV      r8,#0x10000
0000ca  f8cd8028          STR      r8,[sp,#0x28]
;;;182            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
;;;183            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
0000ce  2503              MOVS     r5,#3
0000d0  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;184            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
;;;185            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
0000d4  940d              STR      r4,[sp,#0x34]
;;;186            DMA_Init(DMA_STREAM_RX, &DMA_InitStructure);
0000d6  4669              MOV      r1,sp
0000d8  4650              MOV      r0,r10
0000da  940e              STR      r4,[sp,#0x38]
0000dc  f7fffffe          BL       DMA_Init
;;;187            
;;;188            // Enable DMA
;;;189            USART_DMACmd(UART, USART_DMAReq_Rx, ENABLE);
0000e0  2201              MOVS     r2,#1
0000e2  2140              MOVS     r1,#0x40
0000e4  4648              MOV      r0,r9
0000e6  f7fffffe          BL       USART_DMACmd
;;;190            DMA_Cmd(DMA_STREAM_RX, ENABLE);
0000ea  2101              MOVS     r1,#1
0000ec  4650              MOV      r0,r10
0000ee  f7fffffe          BL       DMA_Cmd
;;;191            
;;;192            // Configure DMA For transmitting
;;;193            DMA_DeInit(DMA_STREAM_TX);
0000f2  f8dfa080          LDR      r10,|L7.372|
0000f6  4650              MOV      r0,r10
0000f8  f7fffffe          BL       DMA_DeInit
;;;194            
;;;195            DMA_InitStructure.DMA_Channel = DMA_CHANNEL_TX;
;;;196            DMA_InitStructure.DMA_Memory0BaseAddr = (u32)m_bufferWrite;
0000fc  481e              LDR      r0,|L7.376|
;;;197            DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
0000fe  9002              STR      r0,[sp,#8]
000100  2040              MOVS     r0,#0x40
;;;198            DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;199            DMA_InitStructure.DMA_BufferSize = sizeof(m_bufferWrite);
000102  9003              STR      r0,[sp,#0xc]
000104  9700              STR      r7,[sp,#0]            ;197
000106  9409              STR      r4,[sp,#0x24]
000108  0180              LSLS     r0,r0,#6
00010a  e9cd0404          STRD     r0,r4,[sp,#0x10]
00010e  e9cd6406          STRD     r6,r4,[sp,#0x18]
;;;200            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;201            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
;;;202            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
;;;203            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;  // Use in combination with FIFO to increase throughput? Needs to be divisible by 1, 1/4, 1/2 of FIFO size
;;;204            DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
000112  f8cd8028          STR      r8,[sp,#0x28]
000116  9408              STR      r4,[sp,#0x20]
000118  e9cd450b          STRD     r4,r5,[sp,#0x2c]
;;;205            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;  // See comment above
;;;206            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
;;;207            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
;;;208            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
00011c  940d              STR      r4,[sp,#0x34]
;;;209            DMA_Init(DMA_STREAM_TX, &DMA_InitStructure);
00011e  4669              MOV      r1,sp
000120  4650              MOV      r0,r10
000122  940e              STR      r4,[sp,#0x38]
000124  f7fffffe          BL       DMA_Init
;;;210            
;;;211            // Enable UART DMA, but don't start the actual DMA engine
;;;212            USART_DMACmd(UART, USART_DMAReq_Tx, ENABLE);
000128  2201              MOVS     r2,#1
00012a  2180              MOVS     r1,#0x80
00012c  4648              MOV      r0,r9
00012e  f7fffffe          BL       USART_DMACmd
;;;213            
;;;214            // Note: DMA is not enabled for TX here, because the buffer is empty.
;;;215            // After main/long execution, DMA will be enabled for a specified
;;;216            // length.
;;;217            
;;;218            // Enable interrupt on DMA transfer complete for TX.
;;;219            // This is mainly for LongExecution.
;;;220            DMA_ITConfig(DMA_STREAM_TX, DMA_IT_TC, ENABLE);
000132  2201              MOVS     r2,#1
000134  2110              MOVS     r1,#0x10
000136  4650              MOV      r0,r10
000138  f7fffffe          BL       DMA_ITConfig
;;;221            
;;;222            NVIC_InitTypeDef NVIC_InitStructure;
;;;223            NVIC_InitStructure.NVIC_IRQChannel = DMA_IRQ_TX;
00013c  2011              MOVS     r0,#0x11
00013e  f88d003c          STRB     r0,[sp,#0x3c]
;;;224            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;  // Don't want this to be a very high priority
000142  f88d503d          STRB     r5,[sp,#0x3d]
;;;225            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
000146  f88d503e          STRB     r5,[sp,#0x3e]
;;;226            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00014a  2001              MOVS     r0,#1
00014c  f88d003f          STRB     r0,[sp,#0x3f]
;;;227            NVIC_Init(&NVIC_InitStructure);
000150  a80f              ADD      r0,sp,#0x3c
000152  f7fffffe          BL       NVIC_Init
;;;228            
;;;229            m_writeHead = m_writeTail = m_readTail = 0;
000156  4809              LDR      r0,|L7.380|
000158  6104              STR      r4,[r0,#0x10]  ; _ZN4Anki5Cozmo3HAL10m_readTailE
00015a  6044              STR      r4,[r0,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
00015c  6084              STR      r4,[r0,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
;;;230          }
00015e  b016              ADD      sp,sp,#0x58
000160  e8bd87f0          POP      {r4-r10,pc}
;;;231          
                          ENDP

                  |L7.356|
                          DCD      0x40020000
                  |L7.360|
                          DCD      0x40004400
                  |L7.364|
                          DCD      0x40026088
                  |L7.368|
                          DCD      ||.bss||+0x1000
                  |L7.372|
                          DCD      0x400260a0
                  |L7.376|
                          DCD      ||.bss||
                  |L7.380|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL13UARTPutStringEPKc||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL13UARTPutStringEPKc PROC ; Anki::Cozmo::HAL::UARTPutString(const char*)
;;;340    
;;;341          void UARTPutString(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;342          {
000002  4604              MOV      r4,r0
;;;343            while (*s)
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  bf14              ITE      NE
00000a  4d0e              LDRNE    r5,|L8.68|
;;;344              UARTPutChar(*s++);
;;;345          }
00000c  bd70              POPEQ    {r4-r6,pc}
                  |L8.14|
00000e  f8140b01          LDRB     r0,[r4],#1            ;344
                  |L8.18|
000012  6869              LDR      r1,[r5,#4]            ;344  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
000014  68aa              LDR      r2,[r5,#8]            ;344  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000016  68ab              LDR      r3,[r5,#8]            ;344  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000018  428b              CMP      r3,r1                 ;344
00001a  bfb2              ITEE     LT                    ;344
00001c  1a89              SUBLT    r1,r1,r2              ;344
00001e  1a51              SUBGE    r1,r2,r1              ;344
000020  f5c15180          RSBGE    r1,r1,#0x1000         ;344
000024  2902              CMP      r1,#2                 ;344
000026  ddf4              BLE      |L8.18|
000028  b672              CPSID    i                     ;344
00002a  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
00002e  7828              LDRB     r0,[r5,#0]            ;344  ; _ZN4Anki5Cozmo3HAL16m_isTransferringE
000030  2800              CMP      r0,#0                 ;344
000032  bf04              ITT      EQ                    ;344
000034  6968              LDREQ    r0,[r5,#0x14]         ;344  ; _ZN4Anki5Cozmo3HAL13StartTransferE
000036  4780              BLXEQ    r0                    ;344
000038  b662              CPSIE    i                     ;344
00003a  7820              LDRB     r0,[r4,#0]            ;343
00003c  2800              CMP      r0,#0                 ;343
00003e  d1e6              BNE      |L8.14|
000040  bd70              POP      {r4-r6,pc}
;;;346          
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL14UARTPutMessageEhPhj||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL14UARTPutMessageEhPhj PROC ; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
;;;277    
;;;278          bool UARTPutMessage(u8 msgID, u8* buffer, u32 length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;279          {
000004  4614              MOV      r4,r2
000006  4688              MOV      r8,r1
000008  4681              MOV      r9,r0
;;;280            bool result = false;
00000a  2600              MOVS     r6,#0
;;;281            
;;;282            __disable_irq();
00000c  b672              CPSID    i
00000e  4f29              LDR      r7,|L9.180|
000010  687a              LDR      r2,[r7,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
000012  68b8              LDR      r0,[r7,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000014  68b9              LDR      r1,[r7,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000016  4291              CMP      r1,r2
000018  bfb2              ITEE     LT
00001a  1a10              SUBLT    r0,r2,r0
00001c  1a80              SUBGE    r0,r0,r2
00001e  f5c05080          RSBGE    r0,r0,#0x1000
;;;283            int bytesLeft = UARTGetFreeSpace();
;;;284            
;;;285            // Leave one guard byte + header
;;;286            if (bytesLeft > (length + 1 + 7))
000022  f1040108          ADD      r1,r4,#8
000026  4288              CMP      r0,r1
000028  d93f              BLS      |L9.170|
;;;287            {
;;;288              result = true;
00002a  2601              MOVS     r6,#1
;;;289              
;;;290              // Write header first
;;;291              BufPutChar(0xBE);
00002c  20be              MOVS     r0,#0xbe
00002e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;292              BufPutChar(0xEF);
000032  20ef              MOVS     r0,#0xef
000034  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;293    					
;;;294              u32 lengthWithMsgID = length + 1;
000038  1c65              ADDS     r5,r4,#1
;;;295              BufPutChar(lengthWithMsgID);
00003a  b2e8              UXTB     r0,r5
00003c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;296              BufPutChar(lengthWithMsgID >> 8);
000040  f3c52007          UBFX     r0,r5,#8,#8
000044  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;297              BufPutChar(lengthWithMsgID >> 16);
000048  f3c54007          UBFX     r0,r5,#16,#8
00004c  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;298              BufPutChar(lengthWithMsgID >> 24);
000050  0e28              LSRS     r0,r5,#24
000052  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;299    					
;;;300              BufPutChar(msgID);
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       _ZN4Anki5Cozmo3HAL10BufPutCharEh ; Anki::Cozmo::HAL::BufPutChar(unsigned char)
;;;301              
;;;302    #if defined(UART_NON_ISR_PUT_CHAR)
;;;303              for (int i=0; i<length; ++i)
;;;304              {
;;;305                BufPutChar(buffer[i]);
;;;306              }
;;;307    #else          
;;;308              bytesLeft = sizeof(m_bufferWrite) - m_writeHead;
00005c  68b8              LDR      r0,[r7,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
;;;309              if (length <= bytesLeft)
;;;310              {
;;;311                memcpy(&m_bufferWrite[m_writeHead], buffer, length);
;;;312                m_writeHead += length;
;;;313                
;;;314                if (m_writeHead == sizeof(m_bufferWrite))
;;;315                {
;;;316                  m_writeHead = 0;
;;;317                }
;;;318              } else {
;;;319                // Copy to the end of the buffer, then wrap around for the rest
;;;320                int lengthFirst = bytesLeft;
;;;321                memcpy(&m_bufferWrite[m_writeHead], buffer, lengthFirst);
00005e  68b9              LDR      r1,[r7,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000060  f5c05580          RSB      r5,r0,#0x1000         ;308
000064  4814              LDR      r0,|L9.184|
000066  42ac              CMP      r4,r5                 ;309
000068  4408              ADD      r0,r0,r1
00006a  d80d              BHI      |L9.136|
00006c  4622              MOV      r2,r4                 ;311
00006e  4641              MOV      r1,r8                 ;311
000070  f7fffffe          BL       __aeabi_memcpy
000074  68b8              LDR      r0,[r7,#8]            ;312  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000076  4420              ADD      r0,r0,r4              ;312
000078  60b8              STR      r0,[r7,#8]            ;312  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
00007a  68b8              LDR      r0,[r7,#8]            ;314  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
00007c  f5b05f80          CMP      r0,#0x1000            ;314
000080  bf04              ITT      EQ                    ;316
000082  2000              MOVEQ    r0,#0                 ;316
000084  60b8              STREQ    r0,[r7,#8]            ;316  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000086  e00b              B        |L9.160|
                  |L9.136|
000088  462a              MOV      r2,r5
00008a  4641              MOV      r1,r8
00008c  f7fffffe          BL       __aeabi_memcpy
;;;322                
;;;323                bytesLeft = length - lengthFirst;
000090  1b64              SUBS     r4,r4,r5
;;;324                memcpy(m_bufferWrite, &buffer[lengthFirst], bytesLeft);
000092  eb080105          ADD      r1,r8,r5
000096  4622              MOV      r2,r4
000098  4807              LDR      r0,|L9.184|
00009a  f7fffffe          BL       __aeabi_memcpy
;;;325                
;;;326                m_writeHead = bytesLeft;
00009e  60bc              STR      r4,[r7,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
                  |L9.160|
;;;327              }
;;;328              
;;;329              // Enable DMA if it's not already running
;;;330              if (!m_isTransferring)
0000a0  7838              LDRB     r0,[r7,#0]  ; _ZN4Anki5Cozmo3HAL16m_isTransferringE
0000a2  2800              CMP      r0,#0
;;;331              {
;;;332                StartTransfer();
0000a4  bf04              ITT      EQ
0000a6  6978              LDREQ    r0,[r7,#0x14]  ; _ZN4Anki5Cozmo3HAL13StartTransferE
0000a8  4780              BLXEQ    r0
                  |L9.170|
;;;333              }
;;;334    #endif
;;;335    
;;;336            }
;;;337            __enable_irq();
0000aa  b662              CPSIE    i
;;;338            return result;
0000ac  4630              MOV      r0,r6
;;;339          }
0000ae  e8bd87f0          POP      {r4-r10,pc}
;;;340    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L9.180|
                          DCD      ||.data||
                  |L9.184|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL16UARTGetCharacterEj PROC ; Anki::Cozmo::HAL::UARTGetCharacter(unsigned)
;;;361          
;;;362          static s32 UARTGetCharacter(u32 timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;363          {
000004  4607              MOV      r7,r0
;;;364            u32 startTime = GetMicroCounter();
000006  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
;;;365    
;;;366            do
;;;367            {
;;;368              // Make sure there's data in the FIFO
;;;369              // NDTR counts down...
;;;370              if (DMA_STREAM_RX->NDTR != sizeof(m_bufferRead) - m_readTail)
00000a  4e0e              LDR      r6,|L10.68|
00000c  4c0e              LDR      r4,|L10.72|
00000e  4605              MOV      r5,r0                 ;364
                  |L10.16|
000010  f8d6008c          LDR      r0,[r6,#0x8c]
000014  6921              LDR      r1,[r4,#0x10]  ; _ZN4Anki5Cozmo3HAL10m_readTailE
000016  f5c16180          RSB      r1,r1,#0x400
00001a  4288              CMP      r0,r1
00001c  d009              BEQ      |L10.50|
;;;371              {
;;;372                u8 value = m_bufferRead[m_readTail];
00001e  490b              LDR      r1,|L10.76|
000020  6920              LDR      r0,[r4,#0x10]  ; _ZN4Anki5Cozmo3HAL10m_readTailE
000022  5c08              LDRB     r0,[r1,r0]
;;;373                m_readTail = (m_readTail + 1) % sizeof(m_bufferRead);  
000024  6921              LDR      r1,[r4,#0x10]  ; _ZN4Anki5Cozmo3HAL10m_readTailE
000026  1c49              ADDS     r1,r1,#1
000028  f3c10109          UBFX     r1,r1,#0,#10
00002c  6121              STR      r1,[r4,#0x10]  ; _ZN4Anki5Cozmo3HAL10m_readTailE
;;;374                return value;
;;;375              }
;;;376            }
;;;377            while ((GetMicroCounter() - startTime) < timeout);
;;;378    
;;;379            // No data, so return with an error
;;;380            return -1;
;;;381          }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L10.50|
000032  f7fffffe          BL       _ZN4Anki5Cozmo3HAL15GetMicroCounterEv ; Anki::Cozmo::HAL::GetMicroCounter()
000036  1b40              SUBS     r0,r0,r5              ;377
000038  42b8              CMP      r0,r7                 ;377
00003a  d3e9              BCC      |L10.16|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;380
000040  e8bd81f0          POP      {r4-r8,pc}
;;;382    
                          ENDP

                  |L10.68|
                          DCD      0x40026000
                  |L10.72|
                          DCD      ||.data||
                  |L10.76|
                          DCD      ||.bss||+0x1000

                          AREA ||i._ZN4Anki5Cozmo3HAL16UARTGetFreeSpaceEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL16UARTGetFreeSpaceEv PROC ; Anki::Cozmo::HAL::UARTGetFreeSpace()
;;;106          
;;;107          int UARTGetFreeSpace()
000000  4a05              LDR      r2,|L11.24|
;;;108          {
;;;109            int tail = m_writeTail;
000002  6850              LDR      r0,[r2,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
;;;110            int head = m_writeHead;
000004  6891              LDR      r1,[r2,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
;;;111            if (m_writeHead < tail)
000006  6892              LDR      r2,[r2,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000008  4282              CMP      r2,r0
;;;112              return tail - head;
00000a  bfb2              ITEE     LT
00000c  1a40              SUBLT    r0,r0,r1
;;;113            else
;;;114              return sizeof(m_bufferWrite) - (head - tail);
00000e  1a08              SUBGE    r0,r1,r0
000010  f5c05080          RSBGE    r0,r0,#0x1000
;;;115          }
000014  4770              BX       lr
;;;116          
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL17UARTStartTransferEv PROC ; Anki::Cozmo::HAL::UARTStartTransfer()
;;;81           
;;;82           static void UARTStartTransfer()
000000  4b0d              LDR      r3,|L12.56|
;;;83           {
;;;84     #if defined(UART_NON_ISR_PUT_CHAR)
;;;85             return;
;;;86     #else
;;;87             int tail = m_writeTail;
000002  6859              LDR      r1,[r3,#4]  ; _ZN4Anki5Cozmo3HAL11m_writeTailE
;;;88             int length = m_writeHead - tail;
000004  6898              LDR      r0,[r3,#8]  ; _ZN4Anki5Cozmo3HAL11m_writeHeadE
000006  1a40              SUBS     r0,r0,r1
;;;89             if (length < 0)
;;;90             {
;;;91               length = sizeof(m_bufferWrite) - tail;
000008  bf48              IT       MI
00000a  f5c15080          RSBMI    r0,r1,#0x1000
;;;92             }
;;;93             if (length > 25) {
00000e  2819              CMP      r0,#0x19
;;;94               length = 25;
000010  bfc8              IT       GT
000012  2019              MOVGT    r0,#0x19
;;;95             }
;;;96             
;;;97             DMA_STREAM_TX->NDTR = length;                     // Buffer size
000014  4a09              LDR      r2,|L12.60|
000016  f8c200a4          STR      r0,[r2,#0xa4]
;;;98             DMA_STREAM_TX->M0AR = (u32)&m_bufferWrite[tail];  // Buffer address
00001a  f8dfc024          LDR      r12,|L12.64|
00001e  4461              ADD      r1,r1,r12
000020  f8c210ac          STR      r1,[r2,#0xac]
;;;99             
;;;100            m_writeLength = length;
000024  60d8              STR      r0,[r3,#0xc]  ; _ZN4Anki5Cozmo3HAL13m_writeLengthE
;;;101            m_isTransferring = true;
000026  2001              MOVS     r0,#1
000028  7018              STRB     r0,[r3,#0]
;;;102            
;;;103            DMA_STREAM_TX->CR |= DMA_SxCR_EN; // Enable DMA
00002a  f8520fa0          LDR      r0,[r2,#0xa0]!
00002e  f0400001          ORR      r0,r0,#1
000032  6010              STR      r0,[r2,#0]
;;;104    #endif
;;;105          }
000034  4770              BX       lr
;;;106          
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      ||.data||
                  |L12.60|
                          DCD      0x40026000
                  |L12.64|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo3HAL22UARTGetWriteBufferSizeEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo3HAL22UARTGetWriteBufferSizeEv PROC ; Anki::Cozmo::HAL::UARTGetWriteBufferSize()
;;;116          
;;;117          int UARTGetWriteBufferSize()
000000  f44f5080          MOV      r0,#0x1000
;;;118          {
;;;119            return sizeof(m_bufferWrite);
;;;120          }
000004  4770              BX       lr
;;;121    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo3HAL8UARTInitEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo3HAL8UARTInitEv PROC ; Anki::Cozmo::HAL::UARTInit()
;;;231          
;;;232          void UARTInit()
000000  b510              PUSH     {r4,lr}
;;;233          {
;;;234            // Configure the UART - and light up purple to indicate UART
;;;235            SetLED(LED_LEFT_EYE_LEFT, LED_PURPLE);
000002  f04f11ff          MOV      r1,#0xff00ff
000006  2007              MOVS     r0,#7
000008  f7fffffe          BL       _ZN4Anki5Cozmo3HAL6SetLEDENS0_5LEDIdEj ; Anki::Cozmo::HAL::SetLED(Anki::Cozmo::LEDId, unsigned)
;;;236            UARTConfigure();
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL13UARTConfigureEv ; Anki::Cozmo::HAL::UARTConfigure()
;;;237          }
;;;238    
                          ENDP


                          AREA ||i.__sti___8_uart_cpp_ae57ec1a||, CODE, READONLY, ALIGN=2

                  __sti___8_uart_cpp_ae57ec1a PROC
000000  4803              LDR      r0,|L15.16|
000002  ed9f0a02          VLDR     s0,|L15.12|
000006  ed800a07          VSTR     s0,[r0,#0x1c]
00000a  4770              BX       lr
                          ENDP

                  |L15.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L15.16|
                          DCD      ||.data||

                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;396    
;;;397    int std::fgetc(FILE* f)
000000  4901              LDR      r1,|L16.8|
;;;398    {
;;;399      return Anki::Cozmo::HAL::UARTGetChar();
000002  2000              MOVS     r0,#0
000004  6989              LDR      r1,[r1,#0x18]  ; _ZN4Anki5Cozmo3HAL7GetCharE
000006  4708              BX       r1
;;;400    }
;;;401    
                          ENDP

                  |L16.8|
                          DCD      ||.data||

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;391    // Override fputc and fgetc for our own UART methods
;;;392    int std::fputc(int c, FILE* f)
000000  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
;;;393    {
;;;394      return Anki::Cozmo::HAL::UARTPutChar(c);
;;;395    }
;;;396    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo3HAL16UARTGetFreeSpaceEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL16UARTGetFreeSpaceEv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo3HAL11UARTPutCharEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL11UARTPutCharEi||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i.fputc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.fputc||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki5Cozmo3HAL11UARTGetCharEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL11UARTGetCharEj||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i.fgetc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.fgetc||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i.DMA1_Stream6_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.DMA1_Stream6_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL17UARTStartTransferEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo3HAL22UARTGetWriteBufferSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL22UARTGetWriteBufferSizeEv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki5Cozmo3HAL13UARTConfigureEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL13UARTConfigureEv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki5Cozmo3HAL8UARTInitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL8UARTInitEv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki5Cozmo3HAL14UARTPutMessageEhPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL14UARTPutMessageEhPhj||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki5Cozmo3HAL13UARTPutStringEPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL13UARTPutStringEPKc||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN4Anki5Cozmo3HAL10UARTPutHexEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL10UARTPutHexEh||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN4Anki5Cozmo3HAL12UARTPutHex32Ej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL12UARTPutHex32Ej||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL16UARTGetCharacterEj||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i.__sti___8_uart_cpp_ae57ec1a||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___8_uart_cpp_ae57ec1a||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN4Anki5Cozmo3HAL10BufPutCharEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL10BufPutCharEh||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  _ZN4Anki5Cozmo3HAL13m_bufferWriteE ; Anki::Cozmo::HAL::m_bufferWrite
                          %        4096
                  _ZN4Anki5Cozmo3HAL12m_bufferReadE ; Anki::Cozmo::HAL::m_bufferRead
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo3HAL16m_isTransferringE ; Anki::Cozmo::HAL::m_isTransferring
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  _ZN4Anki5Cozmo3HAL11m_writeTailE ; Anki::Cozmo::HAL::m_writeTail
                          DCD      0x00000000
                  _ZN4Anki5Cozmo3HAL11m_writeHeadE ; Anki::Cozmo::HAL::m_writeHead
                          DCD      0x00000000
                  _ZN4Anki5Cozmo3HAL13m_writeLengthE ; Anki::Cozmo::HAL::m_writeLength
                          DCD      0x00000000
                  _ZN4Anki5Cozmo3HAL10m_readTailE ; Anki::Cozmo::HAL::m_readTail
                          DCD      0x00000000
                  _ZN4Anki5Cozmo3HAL13StartTransferE ; Anki::Cozmo::HAL::StartTransfer
                          DCD      _ZN4Anki5Cozmo3HAL17UARTStartTransferEv ; Anki::Cozmo::HAL::UARTStartTransfer()
                  _ZN4Anki5Cozmo3HAL7GetCharE ; Anki::Cozmo::HAL::GetChar
                          DCD      _ZN4Anki5Cozmo3HAL16UARTGetCharacterEj ; Anki::Cozmo::HAL::UARTGetCharacter(unsigned)
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000
                  hex
000020  30313233          DCB      0x30,0x31,0x32,0x33
000024  34353637          DCB      0x34,0x35,0x36,0x37
000028  38394142          DCB      0x38,0x39,0x41,0x42
00002c  43444546          DCB      0x43,0x44,0x45,0x46
000030  00                DCB      0x00

                          AREA ||area_number.39||, DATA, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.data||
                  _ZN4Anki5Cozmo3HAL10m_readHeadE ; Anki::Cozmo::HAL::m_readHead
                          DCD      0x00000000

                          AREA ||area_number.40||, DATA, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.data||
                  _ZN4Anki5Cozmo3HAL17BUFFER_WRITE_SIZEE ; Anki::Cozmo::HAL::BUFFER_WRITE_SIZE
                          DCD      0x00001000

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  _ZN4Anki5Cozmo3HAL16BUFFER_READ_SIZEE ; Anki::Cozmo::HAL::BUFFER_READ_SIZE
                          DCD      0x00000400

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_uart_cpp_ae57ec1a

;*** Start embedded assembler ***

#line 1 "arm_hal\\hal\\uart.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_uart_cpp_ae57ec1a___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___8_uart_cpp_ae57ec1a___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_uart_cpp_ae57ec1a___Z7__REVSHi|
#line 144
|__asm___8_uart_cpp_ae57ec1a___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
