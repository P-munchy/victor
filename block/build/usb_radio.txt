; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\usb_radio.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usb_radio.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\usb_radio.crf arm_hal\hal\usb_radio.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo11RadioUpdateEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo11RadioUpdateEv PROC ; Anki::Cozmo::RadioUpdate()
;;;192    
;;;193        void RadioUpdate()
000000  4770              BX       lr
;;;194        {
;;;195        }
;;;196      } // namespace Cozmo
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12InitSimRadioEi||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12InitSimRadioEi PROC ; Anki::Cozmo::InitSimRadio(int)
;;;34     
;;;35         Result InitSimRadio(s32 robotID)
000000  2000              MOVS     r0,#0
;;;36         {
;;;37           return RESULT_OK;
;;;38         }
000002  4770              BX       lr
;;;39     
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo25RadioGetNumBytesAvailableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo25RadioGetNumBytesAvailableEv PROC ; Anki::Cozmo::RadioGetNumBytesAvailable()
;;;91     
;;;92         u32 RadioGetNumBytesAvailable(void)
000000  b570              PUSH     {r4-r6,lr}
;;;93         {
;;;94     #if(USING_UART_RADIO)
;;;95           // Pull as many inbound chars as we can into our local buffer
;;;96           while (recvBufSize_ < RECV_BUFFER_SIZE)
000002  4c0b              LDR      r4,|L3.48|
000004  6860              LDR      r0,[r4,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000006  f5b06f80          CMP      r0,#0x400
;;;97           {
;;;98             int c = HAL::UARTGetChar(0);
;;;99             if (c < 0)    // Nothing more to grab
;;;100              return recvBufSize_;
;;;101            recvBuf_[recvBufSize_++] = c;
00000a  bfb4              ITE      LT
00000c  4d09              LDRLT    r5,|L3.52|
;;;102          }
;;;103    #endif
;;;104          return recvBufSize_;
;;;105    
;;;106        } // RadioGetNumBytesAvailable()
00000e  bd70              POPGE    {r4-r6,pc}
                  |L3.16|
000010  2000              MOVS     r0,#0                 ;98
000012  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTGetCharEj ; Anki::Cozmo::HAL::UARTGetChar(unsigned)
000016  2800              CMP      r0,#0                 ;99
000018  da01              BGE      |L3.30|
00001a  6860              LDR      r0,[r4,#4]            ;100  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  6861              LDR      r1,[r4,#4]            ;101  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000020  5468              STRB     r0,[r5,r1]            ;101
000022  1c48              ADDS     r0,r1,#1              ;101
000024  6060              STR      r0,[r4,#4]            ;96  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000026  f5b06f80          CMP      r0,#0x400             ;96
00002a  dbf1              BLT      |L3.16|
00002c  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      ||.data||
                  |L3.52|
                          DCD      ||.bss||

                          AREA ||i._ZN4Anki5Cozmo3HAL15DisconnectRadioEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL15DisconnectRadioEv PROC ; Anki::Cozmo::HAL::DisconnectRadio()
;;;65     
;;;66         void HAL::DisconnectRadio(void)
000000  4902              LDR      r1,|L4.12|
;;;67         {
;;;68           somBlueState = 0;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;69           somWifiState = 0;
000006  7008              STRB     r0,[r1,#0]
;;;70           recvBufSize_ = 0;
000008  6048              STR      r0,[r1,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
;;;71         }
00000a  4770              BX       lr
;;;72     
                          ENDP

                  |L4.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL16RadioIsConnectedEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL16RadioIsConnectedEv PROC ; Anki::Cozmo::HAL::RadioIsConnected()
;;;52     
;;;53         bool HAL::RadioIsConnected(void)
000000  4803              LDR      r0,|L5.16|
;;;54         {
;;;55           // Always assumes radio is connected
;;;56           //return true;
;;;57     
;;;58           // 2.0 version
;;;59           //return HAL::WifiHasClient();
;;;60     
;;;61           if (somBlueState != 0) return true;
000002  7841              LDRB     r1,[r0,#1]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112somBlueStateE
000004  2900              CMP      r1,#0
;;;62           if (somWifiState != 0) return true;
000006  bf06              ITTE     EQ
000008  7800              LDRBEQ   r0,[r0,#0]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112somWifiStateE
00000a  2800              CMPEQ    r0,#0
00000c  2001              MOVNE    r0,#1
;;;63           return false;
;;;64         }
00000e  4770              BX       lr
;;;65     
                          ENDP

                  |L5.16|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv PROC ; Anki::Cozmo::HAL::RadioSendMessage(Anki::Cozmo::Messages::ID, const void*)
;;;73     #ifndef RUN_EMBEDDED_TESTS
;;;74         bool HAL::RadioSendMessage(const Messages::ID msgID, const void *buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;75         {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;76     #if(USING_UART_RADIO)
;;;77     
;;;78             // Send the message header (0xBEEF + timestamp + robotID + msgID)
;;;79             // For TCP comms, send timestamp immediately after the header.
;;;80             // This is needed on the basestation side to properly order messages.
;;;81     
;;;82             // Send header and message content - return false if message was discarded (full buffer)
;;;83             const u32 size = Messages::GetSize(msgID);
000006  f7fffffe          BL       _ZN4Anki5Cozmo8Messages7GetSizeENS1_2IDE ; Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)
;;;84             return UARTPutMessage(msgID, (u8*)buffer, size);
00000a  4602              MOV      r2,r0
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  e8bd4070          POP      {r4-r6,lr}
000014  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL14UARTPutMessageEhPhj ; Anki::Cozmo::HAL::UARTPutMessage(unsigned char, unsigned char*, unsigned)
;;;85     #else
;;;86             return true;
;;;87     #endif
;;;88     
;;;89         } // RadioSendMessage()
;;;90     #endif // #ifndef RUN_EMBEDDED_TESTS
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo3HAL16RadioUpdateStateEhh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL16RadioUpdateStateEhh PROC ; Anki::Cozmo::HAL::RadioUpdateState(unsigned char, unsigned char)
;;;39     
;;;40         void HAL::RadioUpdateState(u8 wifi, u8 blue)
000000  4a05              LDR      r2,|L7.24|
;;;41         {
;;;42           if (wifi == 0 && blue == 0)
000002  ea500301          ORRS     r3,r0,r1
;;;43           {
;;;44             DisconnectRadio();
;;;45           }
;;;46           else
;;;47           {
;;;48             somWifiState = wifi;
000006  bf1e              ITTT     NE
000008  7010              STRBNE   r0,[r2,#0]
;;;49             somBlueState = blue;
00000a  7051              STRBNE   r1,[r2,#1]
;;;50           }
;;;51         }
00000c  4770              BXNE     lr
00000e  2000              MOVS     r0,#0
000010  7050              STRB     r0,[r2,#1]
000012  7010              STRB     r0,[r2,#0]
000014  6050              STR      r0,[r2,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000016  4770              BX       lr
;;;52     
                          ENDP

                  |L7.24|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo3HAL19RadioGetNextMessageEPh||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo3HAL19RadioGetNextMessageEPh PROC ; Anki::Cozmo::HAL::RadioGetNextMessage(unsigned char*)
;;;112        //       radio functions.
;;;113        Messages::ID HAL::RadioGetNextMessage(u8 *buffer)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;114        {
000004  4d39              LDR      r5,|L8.236|
000006  4680              MOV      r8,r0
;;;115          Messages::ID retVal = Messages::NO_MESSAGE_ID;
000008  2600              MOVS     r6,#0
00000a  6868              LDR      r0,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
00000c  4f38              LDR      r7,|L8.240|
00000e  f5b06f80          CMP      r0,#0x400
000012  da0b              BGE      |L8.44|
                  |L8.20|
000014  2000              MOVS     r0,#0                 ;114
000016  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTGetCharEj ; Anki::Cozmo::HAL::UARTGetChar(unsigned)
00001a  0001              MOVS     r1,r0                 ;114
00001c  6868              LDR      r0,[r5,#4]            ;114  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
00001e  d405              BMI      |L8.44|
000020  5439              STRB     r1,[r7,r0]            ;114
000022  1c40              ADDS     r0,r0,#1              ;114
000024  6068              STR      r0,[r5,#4]            ;114  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000026  f5b06f80          CMP      r0,#0x400             ;114
00002a  dbf3              BLT      |L8.20|
                  |L8.44|
;;;116    
;;;117    #if(USING_UART_RADIO)
;;;118    //      if (server.HasClient()) {
;;;119            const u32 bytesAvailable = RadioGetNumBytesAvailable();
;;;120            if(bytesAvailable > 0) {
00002c  2800              CMP      r0,#0
00002e  d052              BEQ      |L8.214|
;;;121    
;;;122              const int headerSize = sizeof(RADIO_PACKET_HEADER);
;;;123    
;;;124              // Look for valid header
;;;125              u8* hPtr = NULL;
;;;126              for(int i = 0; i < recvBufSize_-1; ++i) {
000030  686b              LDR      r3,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000032  2100              MOVS     r1,#0                 ;125
000034  1e5a              SUBS     r2,r3,#1
000036  4608              MOV      r0,r1
000038  2a00              CMP      r2,#0
00003a  dd51              BLE      |L8.224|
                  |L8.60|
;;;127                if (recvBuf_[i] == RADIO_PACKET_HEADER[0]) {
00003c  f817c000          LDRB     r12,[r7,r0]
000040  f1bc0fbe          CMP      r12,#0xbe
000044  d106              BNE      |L8.84|
;;;128                  if (recvBuf_[i+1] == RADIO_PACKET_HEADER[1]) {
000046  eb070c00          ADD      r12,r7,r0
00004a  f89cc001          LDRB     r12,[r12,#1]
00004e  f1bc0fef          CMP      r12,#0xef
000052  d043              BEQ      |L8.220|
                  |L8.84|
000054  1c40              ADDS     r0,r0,#1
000056  4290              CMP      r0,r2                 ;126
000058  dbf0              BLT      |L8.60|
                  |L8.90|
;;;129                    hPtr = &(recvBuf_[i]);
;;;130                    break;
;;;131                  }
;;;132                }
;;;133              }
;;;134    
;;;135              if (hPtr == NULL) {
00005a  2900              CMP      r1,#0
00005c  d040              BEQ      |L8.224|
;;;136                // Header not found at all
;;;137                // Delete everything
;;;138                recvBufSize_ = 0;
;;;139                return retVal;
;;;140              }
;;;141    
;;;142              const s32 n = (s32)hPtr - (s32)recvBuf_;
00005e  1bc8              SUBS     r0,r1,r7
;;;143              if (n != 0) {
000060  d004              BEQ      |L8.108|
;;;144                // Header was not found at the beginning.
;;;145                // Delete everything up until the header.
;;;146                recvBufSize_ -= n;
000062  1a1a              SUBS     r2,r3,r0
;;;147                memcpy(recvBuf_, hPtr, recvBufSize_);
000064  4822              LDR      r0,|L8.240|
000066  606a              STR      r2,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000068  f7fffffe          BL       __aeabi_memcpy
                  |L8.108|
;;;148              }
;;;149    
;;;150              // Check if expected number of bytes are in the msg
;;;151              if (recvBufSize_ > headerSize) {
00006c  6868              LDR      r0,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
00006e  2802              CMP      r0,#2
000070  dd31              BLE      |L8.214|
;;;152                u32 dataLen = recvBuf_[headerSize] +
000072  78b8              LDRB     r0,[r7,#2]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef18recvBuf_E
000074  78f9              LDRB     r1,[r7,#3]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef18recvBuf_E
000076  797a              LDRB     r2,[r7,#5]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef18recvBuf_E
000078  eb002001          ADD      r0,r0,r1,LSL #8
00007c  7939              LDRB     r1,[r7,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef18recvBuf_E
00007e  0409              LSLS     r1,r1,#16
000080  eb016102          ADD      r1,r1,r2,LSL #24
000084  1844              ADDS     r4,r0,r1
;;;153                              (recvBuf_[headerSize+1] << 8) +
;;;154                              (recvBuf_[headerSize+2] << 16) +
;;;155                              (recvBuf_[headerSize+3] << 24);
;;;156    
;;;157                if (dataLen > 255) {
000086  2cff              CMP      r4,#0xff
000088  d904              BLS      |L8.148|
;;;158                  // We shouldn't be sending huge messages to the robot
;;;159                  PRINT("WARNING(RecvdMsgTooBig): %d bytes\n", dataLen);
00008a  4621              MOV      r1,r4
00008c  a019              ADR      r0,|L8.244|
00008e  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
;;;160                  dataLen = 255;
000092  24ff              MOVS     r4,#0xff
                  |L8.148|
;;;161                }
;;;162    
;;;163                if (recvBufSize_ >= headerSize + 4 + dataLen) {
000094  6868              LDR      r0,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
000096  1da1              ADDS     r1,r4,#6
000098  4288              CMP      r0,r1
00009a  d31c              BCC      |L8.214|
;;;164    
;;;165                  // Check that message size is correct
;;;166                  Messages::ID msgID = static_cast<Messages::ID>(recvBuf_[headerSize+4]);
00009c  79be              LDRB     r6,[r7,#6]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef18recvBuf_E
;;;167                  const u8 size = Messages::GetSize(msgID);
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       _ZN4Anki5Cozmo8Messages7GetSizeENS1_2IDE ; Anki::Cozmo::Messages::GetSize(Anki::Cozmo::Messages::ID)
0000a4  b2c2              UXTB     r2,r0
;;;168                  u32 msgLen = dataLen - 1;  // Doesn't include msgID
0000a6  f1a40901          SUB      r9,r4,#1
;;;169    
;;;170                  if (msgLen != size) {
0000aa  4591              CMP      r9,r2
0000ac  d004              BEQ      |L8.184|
;;;171                    PRINT("WARNING: Message size mismatch: ID %d, expected %d bytes, but got %d bytes\n", msgID, size, msgLen);
0000ae  464b              MOV      r3,r9
0000b0  4631              MOV      r1,r6
0000b2  4819              LDR      r0,|L8.280|
0000b4  f7fffffe          BL       _ZN4Anki5Cozmo8Messages8SendTextEPKcz ; Anki::Cozmo::Messages::SendText(const char*, ...)
                  |L8.184|
;;;172                  }
;;;173    
;;;174                  // Copy message contents to buffer
;;;175                  std::memcpy((void*)buffer, recvBuf_ + headerSize + 4 + 1, msgLen);
0000b8  464a              MOV      r2,r9
0000ba  1df9              ADDS     r1,r7,#7
0000bc  4640              MOV      r0,r8
0000be  f7fffffe          BL       __aeabi_memcpy
;;;176                  retVal = msgID;
;;;177    
;;;178                  // Shift recvBuf contents down
;;;179                  const u32 entireMsgSize = headerSize + 4 + dataLen;
;;;180                  memcpy(recvBuf_, recvBuf_ + entireMsgSize, recvBufSize_ - entireMsgSize);
0000c2  1da4              ADDS     r4,r4,#6
0000c4  6868              LDR      r0,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
0000c6  1939              ADDS     r1,r7,r4
0000c8  1b02              SUBS     r2,r0,r4
0000ca  4809              LDR      r0,|L8.240|
0000cc  f7fffffe          BL       __aeabi_memcpy
;;;181                  recvBufSize_ -= entireMsgSize;
0000d0  6868              LDR      r0,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
0000d2  1b00              SUBS     r0,r0,r4
0000d4  6068              STR      r0,[r5,#4]  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
                  |L8.214|
;;;182    
;;;183                }
;;;184              }
;;;185    
;;;186            } // if bytesAvailable > 0
;;;187    //      }
;;;188    #endif
;;;189          return retVal;
0000d6  4630              MOV      r0,r6
;;;190        } // RadioGetNextMessage()
0000d8  e8bd87f0          POP      {r4-r10,pc}
                  |L8.220|
0000dc  1839              ADDS     r1,r7,r0              ;129
0000de  e7bc              B        |L8.90|
                  |L8.224|
0000e0  2000              MOVS     r0,#0                 ;138
0000e2  6068              STR      r0,[r5,#4]            ;139  ; _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E
0000e4  4630              MOV      r0,r6                 ;139
0000e6  e8bd87f0          POP      {r4-r10,pc}
;;;191    #endif // #ifndef RUN_EMBEDDED_TESTS
                          ENDP

0000ea  0000              DCW      0x0000
                  |L8.236|
                          DCD      ||.data||
                  |L8.240|
                          DCD      ||.bss||
                  |L8.244|
0000f4  5741524e          DCB      "WARNING(RecvdMsgTooBig): %d bytes\n",0
0000f8  494e4728
0000fc  52656376
000100  644d7367
000104  546f6f42
000108  6967293a
00010c  20256420
000110  62797465
000114  730a00  
000117  00                DCB      0
                  |L8.280|
                          DCD      ||.conststring||

                          AREA ||i.__sti___13_usb_radio_cpp_bde5bef1||, CODE, READONLY, ALIGN=2

                  __sti___13_usb_radio_cpp_bde5bef1 PROC
000000  4803              LDR      r0,|L9.16|
000002  ed9f0a02          VLDR     s0,|L9.12|
000006  ed800a02          VSTR     s0,[r0,#8]
00000a  4770              BX       lr
                          ENDP

                  |L9.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L9.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo3HAL15DisconnectRadioEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL15DisconnectRadioEv||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Anki5Cozmo3HAL16RadioUpdateStateEhh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL16RadioUpdateStateEhh||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki5Cozmo3HAL16RadioIsConnectedEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL16RadioIsConnectedEv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL16RadioSendMessageENS0_8Messages2IDEPKv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki5Cozmo25RadioGetNumBytesAvailableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo25RadioGetNumBytesAvailableEv||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki5Cozmo3HAL19RadioGetNextMessageEPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo3HAL19RadioGetNextMessageEPh||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki5Cozmo12InitSimRadioEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12InitSimRadioEi||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki5Cozmo11RadioUpdateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo11RadioUpdateEv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i.__sti___13_usb_radio_cpp_bde5bef1||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___13_usb_radio_cpp_bde5bef1||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef18recvBuf_E ; Anki::Cozmo::<unnamed>::recvBuf_
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _ZN4Anki5Cozmo19RADIO_PACKET_HEADERE ; Anki::Cozmo::RADIO_PACKET_HEADER
000000  beef              DCB      0xbe,0xef

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  5741524e          DCB      "WARNING: Message size mismatch: ID %d, expected %d byte"
000004  494e473a
000008  204d6573
00000c  73616765
000010  2073697a
000014  65206d69
000018  736d6174
00001c  63683a20
000020  49442025
000024  642c2065
000028  78706563
00002c  74656420
000030  25642062
000034  797465  
000037  732c2062          DCB      "s, but got %d bytes\n",0
00003b  75742067
00003f  6f742025
000043  64206279
000047  7465730a
00004b  00      

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112somWifiStateE ; Anki::Cozmo::<unnamed>::somWifiState
000000  00                DCB      0x00
                  _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112somBlueStateE ; Anki::Cozmo::<unnamed>::somBlueState
000001  000000            DCB      0x00,0x00,0x00
                  _ZN4Anki5Cozmo37_GLOBAL__N__13_usb_radio_cpp_bde5bef112recvBufSize_E ; Anki::Cozmo::<unnamed>::recvBufSize_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___13_usb_radio_cpp_bde5bef1
