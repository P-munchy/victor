; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\usbd_cdc_core.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_cdc_core.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\usbd_cdc_core.crf arm_hal\lib\usb\usbd_cdc_core.c]
                          THUMB

                          AREA ||i.USBD_cdc_GetCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_cdc_GetCfgDesc PROC
;;;784      */
;;;785    static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
000000  2043              MOVS     r0,#0x43
;;;786    {
;;;787      *length = sizeof (usbd_cdc_CfgDesc);
000002  8008              STRH     r0,[r1,#0]
;;;788      return usbd_cdc_CfgDesc;
000004  4800              LDR      r0,|L1.8|
;;;789    }
000006  4770              BX       lr
;;;790    
                          ENDP

                  |L1.8|
                          DCD      ||.data||+0x28

                          AREA ||i.USBD_cdc_GetOtherCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_cdc_GetOtherCfgDesc PROC
;;;798    #ifdef USE_USB_OTG_HS 
;;;799    static uint8_t  *USBD_cdc_GetOtherCfgDesc (uint8_t speed, uint16_t *length)
000000  2043              MOVS     r0,#0x43
;;;800    {
;;;801      *length = sizeof (usbd_cdc_OtherCfgDesc);
000002  8008              STRH     r0,[r1,#0]
;;;802      return usbd_cdc_OtherCfgDesc;
000004  4800              LDR      r0,|L2.8|
;;;803    }
000006  4770              BX       lr
;;;804    #endif
                          ENDP

                  |L2.8|
                          DCD      ||.data||+0x6b

                          AREA ||i.usbd_cdc_DataIn||, CODE, READONLY, ALIGN=2

                  usbd_cdc_DataIn PROC
;;;623      */
;;;624    static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;625    {
;;;626      uint16_t USB_Tx_ptr;
;;;627      uint16_t USB_Tx_length;
;;;628    
;;;629      if (USB_Tx_State == 1)
000002  4c13              LDR      r4,|L3.80|
000004  7821              LDRB     r1,[r4,#0]  ; USB_Tx_State
000006  2901              CMP      r1,#1
000008  d11f              BNE      |L3.74|
;;;630      {
;;;631        if (APP_Rx_length == 0) 
00000a  6922              LDR      r2,[r4,#0x10]  ; APP_Rx_length
00000c  2500              MOVS     r5,#0
00000e  2a00              CMP      r2,#0
;;;632        {
;;;633          USB_Tx_State = 0;
000010  bf08              IT       EQ
000012  7025              STRBEQ   r5,[r4,#0]
000014  d019              BEQ      |L3.74|
000016  490e              LDR      r1,|L3.80|
;;;634        }
;;;635        else 
;;;636        {
;;;637          if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
000018  f5b27f00          CMP      r2,#0x200
;;;638            USB_Tx_ptr = APP_Rx_ptr_out;
00001c  68c9              LDR      r1,[r1,#0xc]
;;;639            USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
;;;640            
;;;641            APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
;;;642            APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
;;;643          }
;;;644          else 
;;;645          {
;;;646            USB_Tx_ptr = APP_Rx_ptr_out;
00001e  fa1ffc81          UXTH     r12,r1
000022  d908              BLS      |L3.54|
000024  f5017100          ADD      r1,r1,#0x200          ;641
000028  60e1              STR      r1,[r4,#0xc]          ;642  ; APP_Rx_ptr_out
00002a  f5a27100          SUB      r1,r2,#0x200          ;642
00002e  f44f7300          MOV      r3,#0x200             ;639
000032  6121              STR      r1,[r4,#0x10]         ;642  ; APP_Rx_length
000034  e003              B        |L3.62|
                  |L3.54|
;;;647            USB_Tx_length = APP_Rx_length;
;;;648            
;;;649            APP_Rx_ptr_out += APP_Rx_length;
000036  4411              ADD      r1,r1,r2
000038  e9c41503          STRD     r1,r5,[r4,#0xc]
00003c  b293              UXTH     r3,r2                 ;647
                  |L3.62|
;;;650            APP_Rx_length = 0;
;;;651          }
;;;652          
;;;653          /* Prepare the available data buffer to be sent on IN endpoint */
;;;654          DCD_EP_Tx (pdev,
00003e  4905              LDR      r1,|L3.84|
000040  eb01020c          ADD      r2,r1,r12
000044  2181              MOVS     r1,#0x81
000046  f7fffffe          BL       DCD_EP_Tx
                  |L3.74|
;;;655                     CDC_IN_EP,
;;;656                     (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
;;;657                     USB_Tx_length);
;;;658        }
;;;659      }  
;;;660      
;;;661      return USBD_OK;
00004a  2000              MOVS     r0,#0
;;;662    }
00004c  bd70              POP      {r4-r6,pc}
;;;663    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ||.data||
                  |L3.84|
                          DCD      ||.bss||+0x200

                          AREA ||i.usbd_cdc_DataOut||, CODE, READONLY, ALIGN=2

                  usbd_cdc_DataOut PROC
;;;670      */
;;;671    static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
000000  b510              PUSH     {r4,lr}
;;;672    {      
000002  4604              MOV      r4,r0
;;;673      uint16_t USB_Rx_Cnt;
;;;674      
;;;675      /* Get the received data buffer and update the counter */
;;;676      USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
000004  eb010181          ADD      r1,r1,r1,LSL #2
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
;;;677      
;;;678      /* USB data will be immediately processed, this allow next USB traffic being 
;;;679         NAKed till the end of the application Xfer */
;;;680      APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
00000c  4a07              LDR      r2,|L4.44|
00000e  f8b0038c          LDRH     r0,[r0,#0x38c]        ;676
000012  b281              UXTH     r1,r0                 ;676
000014  6912              LDR      r2,[r2,#0x10]  ; VCP_fops
000016  4806              LDR      r0,|L4.48|
000018  4790              BLX      r2
;;;681      
;;;682      /* Prepare Out endpoint to receive next packet */
;;;683      DCD_EP_PrepareRx(pdev,
00001a  f44f7300          MOV      r3,#0x200
00001e  4a04              LDR      r2,|L4.48|
000020  2101              MOVS     r1,#1
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DCD_EP_PrepareRx
;;;684                       CDC_OUT_EP,
;;;685                       (uint8_t*)(USB_Rx_Buffer),
;;;686                       CDC_DATA_OUT_PACKET_SIZE);
;;;687    
;;;688      return USBD_OK;
000028  2000              MOVS     r0,#0
;;;689    }
00002a  bd10              POP      {r4,pc}
;;;690    
                          ENDP

                  |L4.44|
                          DCD      VCP_fops
                  |L4.48|
                          DCD      ||.bss||

                          AREA ||i.usbd_cdc_DeInit||, CODE, READONLY, ALIGN=2

                  usbd_cdc_DeInit PROC
;;;474      */
;;;475    static uint8_t  usbd_cdc_DeInit (void  *pdev, 
000000  b510              PUSH     {r4,lr}
;;;476                                     uint8_t cfgidx)
;;;477    {
000002  4604              MOV      r4,r0
;;;478      /* Open EP IN */
;;;479      DCD_EP_Close(pdev,
000004  2181              MOVS     r1,#0x81
000006  f7fffffe          BL       DCD_EP_Close
;;;480                  CDC_IN_EP);
;;;481      
;;;482      /* Open EP OUT */
;;;483      DCD_EP_Close(pdev,
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       DCD_EP_Close
;;;484                  CDC_OUT_EP);
;;;485      
;;;486      /* Open Command IN EP */
;;;487      DCD_EP_Close(pdev,
000012  2182              MOVS     r1,#0x82
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DCD_EP_Close
;;;488                  CDC_CMD_EP);
;;;489    
;;;490      /* Restore default state of the Interface physical components */
;;;491      APP_FOPS.pIf_DeInit();
00001a  4802              LDR      r0,|L5.36|
00001c  6840              LDR      r0,[r0,#4]  ; VCP_fops
00001e  4780              BLX      r0
;;;492      
;;;493      return USBD_OK;
000020  2000              MOVS     r0,#0
;;;494    }
000022  bd10              POP      {r4,pc}
;;;495    
                          ENDP

                  |L5.36|
                          DCD      VCP_fops

                          AREA ||i.usbd_cdc_EP0_RxReady||, CODE, READONLY, ALIGN=2

                  usbd_cdc_EP0_RxReady PROC
;;;602      */
;;;603    static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
000000  b510              PUSH     {r4,lr}
;;;604    { 
;;;605      if (cdcCmd != NO_CMD)
000002  4c07              LDR      r4,|L6.32|
000004  6960              LDR      r0,[r4,#0x14]  ; cdcCmd
000006  28ff              CMP      r0,#0xff
000008  d007              BEQ      |L6.26|
;;;606      {
;;;607        /* Process the data */
;;;608        APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
00000a  4906              LDR      r1,|L6.36|
00000c  69a2              LDR      r2,[r4,#0x18]  ; cdcLen
00000e  688b              LDR      r3,[r1,#8]  ; VCP_fops
000010  f1040120          ADD      r1,r4,#0x20
000014  4798              BLX      r3
;;;609        
;;;610        /* Reset the command variable to default value */
;;;611        cdcCmd = NO_CMD;
000016  20ff              MOVS     r0,#0xff
000018  6160              STR      r0,[r4,#0x14]  ; cdcCmd
                  |L6.26|
;;;612      }
;;;613      
;;;614      return USBD_OK;
00001a  2000              MOVS     r0,#0
;;;615    }
00001c  bd10              POP      {r4,pc}
;;;616    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.data||
                  |L6.36|
                          DCD      VCP_fops

                          AREA ||i.usbd_cdc_Init||, CODE, READONLY, ALIGN=2

                  usbd_cdc_Init PROC
;;;428      */
;;;429    static uint8_t  usbd_cdc_Init (void  *pdev, 
000000  b510              PUSH     {r4,lr}
;;;430                                   uint8_t cfgidx)
;;;431    {
;;;432      uint8_t *pbuf;
;;;433    
;;;434      /* Open EP IN */
;;;435      DCD_EP_Open(pdev,
000002  2302              MOVS     r3,#2
000004  4604              MOV      r4,r0                 ;431
000006  021a              LSLS     r2,r3,#8
000008  2181              MOVS     r1,#0x81
00000a  f7fffffe          BL       DCD_EP_Open
;;;436                  CDC_IN_EP,
;;;437                  CDC_DATA_IN_PACKET_SIZE,
;;;438                  USB_OTG_EP_BULK);
;;;439      
;;;440      /* Open EP OUT */
;;;441      DCD_EP_Open(pdev,
00000e  2302              MOVS     r3,#2
000010  021a              LSLS     r2,r3,#8
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DCD_EP_Open
;;;442                  CDC_OUT_EP,
;;;443                  CDC_DATA_OUT_PACKET_SIZE,
;;;444                  USB_OTG_EP_BULK);
;;;445      
;;;446      /* Open Command IN EP */
;;;447      DCD_EP_Open(pdev,
00001a  2303              MOVS     r3,#3
00001c  2208              MOVS     r2,#8
00001e  2182              MOVS     r1,#0x82
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       DCD_EP_Open
;;;448                  CDC_CMD_EP,
;;;449                  CDC_CMD_PACKET_SZE,
;;;450                  USB_OTG_EP_INT);
;;;451      
;;;452      pbuf = (uint8_t *)USBD_DeviceDesc;
000026  4908              LDR      r1,|L7.72|
;;;453      pbuf[4] = DEVICE_CLASS_CDC;
000028  2002              MOVS     r0,#2
00002a  7108              STRB     r0,[r1,#4]
;;;454      pbuf[5] = DEVICE_SUBCLASS_CDC;
00002c  2000              MOVS     r0,#0
00002e  7148              STRB     r0,[r1,#5]
;;;455      
;;;456      /* Initialize the Interface physical components */
;;;457      APP_FOPS.pIf_Init();
000030  4806              LDR      r0,|L7.76|
000032  6801              LDR      r1,[r0,#0]  ; VCP_fops
000034  4788              BLX      r1
;;;458    
;;;459      /* Prepare Out endpoint to receive next packet */
;;;460      DCD_EP_PrepareRx(pdev,
000036  f44f7300          MOV      r3,#0x200
00003a  4a05              LDR      r2,|L7.80|
00003c  2101              MOVS     r1,#1
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       DCD_EP_PrepareRx
;;;461                       CDC_OUT_EP,
;;;462                       (uint8_t*)(USB_Rx_Buffer),
;;;463                       CDC_DATA_OUT_PACKET_SIZE);
;;;464      
;;;465      return USBD_OK;
000044  2000              MOVS     r0,#0
;;;466    }
000046  bd10              POP      {r4,pc}
;;;467    
                          ENDP

                  |L7.72|
                          DCD      USBD_DeviceDesc
                  |L7.76|
                          DCD      VCP_fops
                  |L7.80|
                          DCD      ||.bss||

                          AREA ||i.usbd_cdc_SOF||, CODE, READONLY, ALIGN=2

                  usbd_cdc_SOF PROC
;;;697      */
;;;698    static uint8_t  usbd_cdc_SOF (void *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;699    {      
;;;700      static uint32_t FrameCount = 0;
;;;701      
;;;702      if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
000002  4c1c              LDR      r4,|L8.116|
000004  69e1              LDR      r1,[r4,#0x1c]  ; FrameCount
000006  1c49              ADDS     r1,r1,#1
000008  61e1              STR      r1,[r4,#0x1c]  ; FrameCount
00000a  2929              CMP      r1,#0x29
00000c  d12f              BNE      |L8.110|
;;;703      {
;;;704        /* Reset the frame counter */
;;;705        FrameCount = 0;
00000e  2500              MOVS     r5,#0
000010  61e5              STR      r5,[r4,#0x1c]  ; FrameCount
000012  7821              LDRB     r1,[r4,#0]  ; USB_Tx_State
000014  2901              CMP      r1,#1
000016  d02a              BEQ      |L8.110|
000018  68e1              LDR      r1,[r4,#0xc]  ; APP_Rx_ptr_out
00001a  f5b16f00          CMP      r1,#0x800
00001e  bf08              IT       EQ
000020  60e5              STREQ    r5,[r4,#0xc]  ; APP_Rx_ptr_out
000022  e9d42102          LDRD     r2,r1,[r4,#8]
000026  4291              CMP      r1,r2
000028  bf38              IT       CC
00002a  1a52              SUBCC    r2,r2,r1
00002c  bf88              IT       HI
00002e  f5c16200          RSBHI    r2,r1,#0x800
000032  bf08              IT       EQ
000034  7025              STRBEQ   r5,[r4,#0]
000036  d01a              BEQ      |L8.110|
000038  6122              STR      r2,[r4,#0x10]  ; APP_Rx_length
00003a  f5b27f00          CMP      r2,#0x200
00003e  fa1ffc81          UXTH     r12,r1
000042  d908              BLS      |L8.86|
000044  f5017100          ADD      r1,r1,#0x200
000048  60e1              STR      r1,[r4,#0xc]  ; APP_Rx_ptr_out
00004a  f5a27100          SUB      r1,r2,#0x200
00004e  f44f7300          MOV      r3,#0x200
000052  6121              STR      r1,[r4,#0x10]  ; APP_Rx_length
000054  e003              B        |L8.94|
                  |L8.86|
000056  4411              ADD      r1,r1,r2
000058  e9c41503          STRD     r1,r5,[r4,#0xc]
00005c  b293              UXTH     r3,r2
                  |L8.94|
00005e  2101              MOVS     r1,#1
000060  7021              STRB     r1,[r4,#0]
000062  4905              LDR      r1,|L8.120|
000064  eb01020c          ADD      r2,r1,r12
000068  2181              MOVS     r1,#0x81
00006a  f7fffffe          BL       DCD_EP_Tx
                  |L8.110|
;;;706        
;;;707        /* Check the data to be sent through IN pipe */
;;;708        Handle_USBAsynchXfer(pdev);
;;;709      }
;;;710      
;;;711      return USBD_OK;
00006e  2000              MOVS     r0,#0
;;;712    }
000070  bd70              POP      {r4-r6,pc}
;;;713    
                          ENDP

000072  0000              DCW      0x0000
                  |L8.116|
                          DCD      ||.data||
                  |L8.120|
                          DCD      ||.bss||+0x200

                          AREA ||i.usbd_cdc_Setup||, CODE, READONLY, ALIGN=2

                  usbd_cdc_Setup PROC
;;;502      */
;;;503    static uint8_t  usbd_cdc_Setup (void  *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;504                                    USB_SETUP_REQ *req)
;;;505    {
000002  460c              MOV      r4,r1
;;;506      uint16_t len=USB_CDC_DESC_SIZ;
;;;507      uint8_t  *pbuf=usbd_cdc_CfgDesc + 9;
000004  4e2d              LDR      r6,|L9.188|
;;;508      
;;;509      switch (req->bmRequest & USB_REQ_TYPE_MASK)
000006  7809              LDRB     r1,[r1,#0]
000008  4605              MOV      r5,r0                 ;505
00000a  223a              MOVS     r2,#0x3a              ;506
00000c  f1060309          ADD      r3,r6,#9              ;507
000010  f0110060          ANDS     r0,r1,#0x60
;;;510      {
;;;511        /* CDC Class Requests -------------------------------*/
;;;512      case USB_REQ_TYPE_CLASS :
;;;513          /* Check if the request is a data setup packet */
;;;514          if (req->wLength)
;;;515          {
;;;516            /* Check if the request is Device-to-Host */
;;;517            if (req->bmRequest & 0x80)
;;;518            {
;;;519              /* Get the data to be sent to Host from interface layer */
;;;520              APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
;;;521              
;;;522              /* Send the data to the host */
;;;523              USBD_CtlSendData (pdev, 
;;;524                                CmdBuff,
;;;525                                req->wLength);          
;;;526            }
;;;527            else /* Host-to-Device requeset */
;;;528            {
;;;529              /* Set the value of the current command to be processed */
;;;530              cdcCmd = req->bRequest;
000014  f1a60c28          SUB      r12,r6,#0x28
000018  d023              BEQ      |L9.98|
00001a  2820              CMP      r0,#0x20              ;509
00001c  d005              BEQ      |L9.42|
;;;531              cdcLen = req->wLength;
;;;532              
;;;533              /* Prepare the reception of the buffer over EP0
;;;534              Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
;;;535              function. */
;;;536              USBD_CtlPrepareRx (pdev,
;;;537                                 CmdBuff,
;;;538                                 req->wLength);          
;;;539            }
;;;540          }
;;;541          else /* No Data request */
;;;542          {
;;;543            /* Transfer the command to the interface layer */
;;;544            APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
;;;545          }
;;;546          
;;;547          return USBD_OK;
;;;548          
;;;549        default:
;;;550          USBD_CtlError (pdev, req);
00001e  4621              MOV      r1,r4
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       USBD_CtlError
;;;551          return USBD_FAIL;
000026  2002              MOVS     r0,#2
;;;552        
;;;553          
;;;554          
;;;555        /* Standard Requests -------------------------------*/
;;;556      case USB_REQ_TYPE_STANDARD:
;;;557        switch (req->bRequest)
;;;558        {
;;;559        case USB_REQ_GET_DESCRIPTOR: 
;;;560          if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
;;;561          {
;;;562    #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
;;;563            pbuf = usbd_cdc_Desc;   
;;;564    #else
;;;565            pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
;;;566    #endif 
;;;567            len = MIN(USB_CDC_DESC_SIZ , req->wLength);
;;;568          }
;;;569          
;;;570          USBD_CtlSendData (pdev, 
;;;571                            pbuf,
;;;572                            len);
;;;573          break;
;;;574          
;;;575        case USB_REQ_GET_INTERFACE :
;;;576          USBD_CtlSendData (pdev,
;;;577                            (uint8_t *)&usbd_cdc_AltSet,
;;;578                            1);
;;;579          break;
;;;580          
;;;581        case USB_REQ_SET_INTERFACE :
;;;582          if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
;;;583          {
;;;584            usbd_cdc_AltSet = (uint8_t)(req->wValue);
;;;585          }
;;;586          else
;;;587          {
;;;588            /* Call the error management function (command will be nacked */
;;;589            USBD_CtlError (pdev, req);
;;;590          }
;;;591          break;
;;;592        }
;;;593      }
;;;594      return USBD_OK;
;;;595    }
000028  bd70              POP      {r4-r6,pc}
                  |L9.42|
00002a  4825              LDR      r0,|L9.192|
00002c  88e2              LDRH     r2,[r4,#6]            ;514
00002e  6883              LDR      r3,[r0,#8]            ;514
000030  b192              CBZ      r2,|L9.88|
000032  7860              LDRB     r0,[r4,#1]            ;530
000034  f0110f80          TST      r1,#0x80              ;517
000038  d007              BEQ      |L9.74|
00003a  4922              LDR      r1,|L9.196|
00003c  4798              BLX      r3                    ;520
00003e  88e2              LDRH     r2,[r4,#6]            ;523
000040  4920              LDR      r1,|L9.196|
000042  4628              MOV      r0,r5                 ;523
000044  f7fffffe          BL       USBD_CtlSendData
000048  e035              B        |L9.182|
                  |L9.74|
00004a  e9cc0205          STRD     r0,r2,[r12,#0x14]     ;523
00004e  491d              LDR      r1,|L9.196|
000050  4628              MOV      r0,r5                 ;536
000052  f7fffffe          BL       USBD_CtlPrepareRx
000056  e02e              B        |L9.182|
                  |L9.88|
000058  2200              MOVS     r2,#0                 ;544
00005a  7860              LDRB     r0,[r4,#1]            ;544
00005c  4611              MOV      r1,r2                 ;544
00005e  4798              BLX      r3                    ;544
000060  e029              B        |L9.182|
                  |L9.98|
000062  7861              LDRB     r1,[r4,#1]            ;557
000064  2906              CMP      r1,#6                 ;557
000066  d004              BEQ      |L9.114|
000068  290a              CMP      r1,#0xa               ;557
00006a  d012              BEQ      |L9.146|
00006c  290b              CMP      r1,#0xb               ;557
00006e  d016              BEQ      |L9.158|
000070  e021              B        |L9.182|
                  |L9.114|
000072  8860              LDRH     r0,[r4,#2]            ;560
000074  2121              MOVS     r1,#0x21              ;560
000076  ebb12f10          CMP      r1,r0,LSR #8          ;560
00007a  d105              BNE      |L9.136|
00007c  88e2              LDRH     r2,[r4,#6]            ;567
00007e  f1060312          ADD      r3,r6,#0x12           ;565
000082  2a3a              CMP      r2,#0x3a              ;567
000084  bf88              IT       HI                    ;567
000086  223a              MOVHI    r2,#0x3a              ;567
                  |L9.136|
000088  4619              MOV      r1,r3                 ;570
00008a  4628              MOV      r0,r5                 ;570
00008c  f7fffffe          BL       USBD_CtlSendData
000090  e011              B        |L9.182|
                  |L9.146|
000092  2201              MOVS     r2,#1                 ;576
000094  490c              LDR      r1,|L9.200|
000096  4628              MOV      r0,r5                 ;576
000098  f7fffffe          BL       USBD_CtlSendData
00009c  e00b              B        |L9.182|
                  |L9.158|
00009e  8860              LDRH     r0,[r4,#2]            ;582
0000a0  f0100fff          TST      r0,#0xff              ;582
0000a4  bf04              ITT      EQ                    ;584
0000a6  b2c0              UXTBEQ   r0,r0                 ;584
0000a8  f8cc0004          STREQ    r0,[r12,#4]           ;584  ; usbd_cdc_AltSet
0000ac  d003              BEQ      |L9.182|
0000ae  4621              MOV      r1,r4                 ;589
0000b0  4628              MOV      r0,r5                 ;589
0000b2  f7fffffe          BL       USBD_CtlError
                  |L9.182|
0000b6  2000              MOVS     r0,#0                 ;594
0000b8  bd70              POP      {r4-r6,pc}
;;;596    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L9.188|
                          DCD      ||.data||+0x28
                  |L9.192|
                          DCD      VCP_fops
                  |L9.196|
                          DCD      ||.data||+0x20
                  |L9.200|
                          DCD      ||.data||+0x4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USB_Rx_Buffer
                          %        512
                  APP_Rx_Buffer
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  USB_Tx_State
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  usbd_cdc_AltSet
                          DCD      0x00000000
                  APP_Rx_ptr_in
                          DCD      0x00000000
                  APP_Rx_ptr_out
                          DCD      0x00000000
                  APP_Rx_length
                          DCD      0x00000000
                  cdcCmd
                          DCD      0x000000ff
                  cdcLen
                          DCD      0x00000000
                  FrameCount
                          DCD      0x00000000
                  CmdBuff
                          %        8
                  usbd_cdc_CfgDesc
000028  09024300          DCB      0x09,0x02,0x43,0x00
00002c  020100c0          DCB      0x02,0x01,0x00,0xc0
000030  32090400          DCB      0x32,0x09,0x04,0x00
000034  00010202          DCB      0x00,0x01,0x02,0x02
000038  01000524          DCB      0x01,0x00,0x05,0x24
00003c  00100105          DCB      0x00,0x10,0x01,0x05
000040  24010001          DCB      0x24,0x01,0x00,0x01
000044  04240202          DCB      0x04,0x24,0x02,0x02
000048  05240600          DCB      0x05,0x24,0x06,0x00
00004c  01070582          DCB      0x01,0x07,0x05,0x82
000050  03080010          DCB      0x03,0x08,0x00,0x10
000054  09040100          DCB      0x09,0x04,0x01,0x00
000058  020a0000          DCB      0x02,0x0a,0x00,0x00
00005c  00070501          DCB      0x00,0x07,0x05,0x01
000060  02000200          DCB      0x02,0x00,0x02,0x00
000064  07058102          DCB      0x07,0x05,0x81,0x02
000068  000200            DCB      0x00,0x02,0x00
                  usbd_cdc_OtherCfgDesc
00006b  09                DCB      0x09
00006c  07430002          DCB      0x07,0x43,0x00,0x02
000070  0104c032          DCB      0x01,0x04,0xc0,0x32
000074  09040000          DCB      0x09,0x04,0x00,0x00
000078  01020201          DCB      0x01,0x02,0x02,0x01
00007c  00052400          DCB      0x00,0x05,0x24,0x00
000080  10010524          DCB      0x10,0x01,0x05,0x24
000084  01000104          DCB      0x01,0x00,0x01,0x04
000088  24020205          DCB      0x24,0x02,0x02,0x05
00008c  24060001          DCB      0x24,0x06,0x00,0x01
000090  07058203          DCB      0x07,0x05,0x82,0x03
000094  0800ff09          DCB      0x08,0x00,0xff,0x09
000098  04010002          DCB      0x04,0x01,0x00,0x02
00009c  0a000000          DCB      0x0a,0x00,0x00,0x00
0000a0  07050102          DCB      0x07,0x05,0x01,0x02
0000a4  40000007          DCB      0x40,0x00,0x00,0x07
0000a8  05810240          DCB      0x05,0x81,0x02,0x40
0000ac  0000              DCB      0x00,0x00

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  USBD_CDC_cb
                          DCD      usbd_cdc_Init
                          DCD      usbd_cdc_DeInit
                          DCD      usbd_cdc_Setup
                          DCD      0x00000000
                          DCD      usbd_cdc_EP0_RxReady
                          DCD      usbd_cdc_DataIn
                          DCD      usbd_cdc_DataOut
                          DCD      usbd_cdc_SOF
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      USBD_cdc_GetCfgDesc
                          DCD      USBD_cdc_GetOtherCfgDesc

;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\usb\\usbd_cdc_core.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_usbd_cdc_core_c_2aaaf82f____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___15_usbd_cdc_core_c_2aaaf82f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_usbd_cdc_core_c_2aaaf82f____REVSH|
#line 144
|__asm___15_usbd_cdc_core_c_2aaaf82f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
