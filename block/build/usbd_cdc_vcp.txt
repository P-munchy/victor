; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\usbd_cdc_vcp.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_cdc_vcp.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\usbd_cdc_vcp.crf arm_hal\lib\usb\usbd_cdc_vcp.cpp]
                          THUMB

                          AREA ||i._Z10VCP_DataRxPhj||, CODE, READONLY, ALIGN=1

                  _Z10VCP_DataRxPhj PROC ; VCP_DataRx(unsigned char*, unsigned)
;;;226    
;;;227    static uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len)
000000  b570              PUSH     {r4-r6,lr}
;;;228    {
000002  1e0d              SUBS     r5,r1,#0
000004  4606              MOV      r6,r0
;;;229      using namespace Anki::Cozmo::HAL;
;;;230      
;;;231      u32 i;
;;;232      for (i = 0; i < Len; i++)
000006  f04f0400          MOV      r4,#0
00000a  d905              BLS      |L1.24|
                  |L1.12|
;;;233      {
;;;234        UARTPutChar(Buf[i]);
00000c  5d30              LDRB     r0,[r6,r4]
00000e  f7fffffe          BL       _ZN4Anki5Cozmo3HAL11UARTPutCharEi ; Anki::Cozmo::HAL::UARTPutChar(int)
000012  1c64              ADDS     r4,r4,#1              ;232
000014  42a5              CMP      r5,r4                 ;232
000016  d8f9              BHI      |L1.12|
                  |L1.24|
;;;235      }
;;;236      
;;;237      return USBD_OK;
000018  2000              MOVS     r0,#0
;;;238    }
00001a  bd70              POP      {r4-r6,pc}
;;;239    
                          ENDP


                          AREA ||i._Z10VCP_DeInitv||, CODE, READONLY, ALIGN=1

                  _Z10VCP_DeInitv PROC ; VCP_DeInit()
;;;96       */
;;;97     static uint16_t VCP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;98     {
;;;99     
;;;100      return USBD_OK;
;;;101    }
000002  4770              BX       lr
;;;102    
                          ENDP


                          AREA ||i._Z13VCP_WriteDataPhj||, CODE, READONLY, ALIGN=2

                  _Z13VCP_WriteDataPhj PROC ; VCP_WriteData(unsigned char*, unsigned)
;;;192    
;;;193    uint16_t VCP_WriteData(u8* buffer, u32 length)
000000  b470              PUSH     {r4-r6}
;;;194    {
;;;195      u32 i;
;;;196      __disable_irq();
000002  b672              CPSID    i
;;;197      for (i = 0; i < length; i++)
000004  2200              MOVS     r2,#0
000006  2900              CMP      r1,#0
000008  d913              BLS      |L3.50|
;;;198      {
;;;199        APP_Rx_Buffer[APP_Rx_ptr_in] = *buffer++;  
00000a  4c0c              LDR      r4,|L3.60|
00000c  f8dfc030          LDR      r12,|L3.64|
000010  2500              MOVS     r5,#0
                  |L3.18|
000012  f8106b01          LDRB     r6,[r0],#1
000016  f8dc3000          LDR      r3,[r12,#0]  ; APP_Rx_ptr_in
00001a  54e6              STRB     r6,[r4,r3]
;;;200        APP_Rx_ptr_in++;
00001c  1c5b              ADDS     r3,r3,#1
;;;201        if (APP_Rx_ptr_in == APP_RX_DATA_SIZE)
00001e  f8cc3000          STR      r3,[r12,#0]  ; APP_Rx_ptr_in
000022  f5b36f00          CMP      r3,#0x800
;;;202        {
;;;203          APP_Rx_ptr_in = 0;
000026  bf08              IT       EQ
000028  f8cc5000          STREQ    r5,[r12,#0]  ; APP_Rx_ptr_in
00002c  1c52              ADDS     r2,r2,#1              ;197
00002e  428a              CMP      r2,r1                 ;197
000030  d3ef              BCC      |L3.18|
                  |L3.50|
;;;204        }
;;;205      }
;;;206      __enable_irq();
000032  b662              CPSIE    i
;;;207      
;;;208      return USBD_OK;
000034  2000              MOVS     r0,#0
;;;209    }
000036  bc70              POP      {r4-r6}
000038  4770              BX       lr
;;;210    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      APP_Rx_Buffer
                  |L3.64|
                          DCD      APP_Rx_ptr_in

                          AREA ||i._Z13VCP_WriteLinePc||, CODE, READONLY, ALIGN=2

                  _Z13VCP_WriteLinePc PROC ; VCP_WriteLine(char*)
;;;177      */
;;;178    uint16_t VCP_WriteLine(char* buf)
000000  b410              PUSH     {r4}
;;;179    {
;;;180      __disable_irq();
000002  b672              CPSID    i
;;;181      while (*buf != 0)
000004  7801              LDRB     r1,[r0,#0]
000006  b189              CBZ      r1,|L4.44|
;;;182      {
;;;183        APP_Rx_Buffer[APP_Rx_ptr_in] = *buf++;  
000008  4b0a              LDR      r3,|L4.52|
00000a  4a0b              LDR      r2,|L4.56|
00000c  f04f0c00          MOV      r12,#0
                  |L4.16|
000010  b2cc              UXTB     r4,r1
000012  6811              LDR      r1,[r2,#0]  ; APP_Rx_ptr_in
000014  1c40              ADDS     r0,r0,#1
000016  545c              STRB     r4,[r3,r1]
;;;184        APP_Rx_ptr_in++;  
000018  1c49              ADDS     r1,r1,#1
;;;185        if (APP_Rx_ptr_in == APP_RX_DATA_SIZE)
00001a  6011              STR      r1,[r2,#0]  ; APP_Rx_ptr_in
00001c  f5b16f00          CMP      r1,#0x800
;;;186          APP_Rx_ptr_in = 0;
000020  bf08              IT       EQ
000022  f8c2c000          STREQ    r12,[r2,#0]  ; APP_Rx_ptr_in
000026  7801              LDRB     r1,[r0,#0]            ;181
000028  2900              CMP      r1,#0                 ;185
00002a  d1f1              BNE      |L4.16|
                  |L4.44|
;;;187      }
;;;188      __enable_irq();
00002c  b662              CPSIE    i
;;;189      
;;;190      return USBD_OK;
00002e  2000              MOVS     r0,#0
;;;191    }
000030  bc10              POP      {r4}
000032  4770              BX       lr
;;;192    
                          ENDP

                  |L4.52|
                          DCD      APP_Rx_Buffer
                  |L4.56|
                          DCD      APP_Rx_ptr_in

                          AREA ||i._Z8VCP_CtrljPhj||, CODE, READONLY, ALIGN=2

                  _Z8VCP_CtrljPhj PROC ; VCP_Ctrl(unsigned, unsigned char*, unsigned)
;;;111      */
;;;112    static uint16_t VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
000000  2804              CMP      r0,#4
;;;113    {
000002  dd22              BLE      |L5.74|
;;;114      switch (Cmd)
;;;115      {
;;;116      case SEND_ENCAPSULATED_COMMAND:
;;;117        /* Not  needed for this driver */
;;;118        break;
;;;119    
;;;120      case GET_ENCAPSULATED_RESPONSE:
;;;121        /* Not  needed for this driver */
;;;122        break;
;;;123    
;;;124      case SET_COMM_FEATURE:
;;;125        /* Not  needed for this driver */
;;;126        break;
;;;127    
;;;128      case GET_COMM_FEATURE:
;;;129        /* Not  needed for this driver */
;;;130        break;
;;;131    
;;;132      case CLEAR_COMM_FEATURE:
;;;133        /* Not  needed for this driver */
;;;134        break;
;;;135    
;;;136      case SET_LINE_CODING:
;;;137        linecoding.bitrate = (uint32_t)(Buf[0] | (Buf[1] << 8) | (Buf[2] << 16) | (Buf[3] << 24));
000004  4a12              LDR      r2,|L5.80|
000006  2820              CMP      r0,#0x20              ;114
000008  d002              BEQ      |L5.16|
00000a  2821              CMP      r0,#0x21              ;114
00000c  d00c              BEQ      |L5.40|
00000e  e01c              B        |L5.74|
                  |L5.16|
000010  78cb              LDRB     r3,[r1,#3]
000012  6808              LDR      r0,[r1,#0]
000014  f363601f          BFI      r0,r3,#24,#8
;;;138        linecoding.format = Buf[4];
000018  6010              STR      r0,[r2,#0]  ; linecoding
00001a  7908              LDRB     r0,[r1,#4]
00001c  7110              STRB     r0,[r2,#4]
;;;139        linecoding.paritytype = Buf[5];
00001e  7948              LDRB     r0,[r1,#5]
000020  7150              STRB     r0,[r2,#5]
;;;140        linecoding.datatype = Buf[6];
000022  7988              LDRB     r0,[r1,#6]
000024  7190              STRB     r0,[r2,#6]
;;;141        /* Set the new configuration */
;;;142        VCP_COMConfig(OTHER_CONFIG);
;;;143        break;
000026  e010              B        |L5.74|
                  |L5.40|
;;;144    
;;;145      case GET_LINE_CODING:
;;;146        Buf[0] = (uint8_t)(linecoding.bitrate);
000028  7810              LDRB     r0,[r2,#0]  ; linecoding
00002a  7008              STRB     r0,[r1,#0]
;;;147        Buf[1] = (uint8_t)(linecoding.bitrate >> 8);
00002c  8810              LDRH     r0,[r2,#0]  ; linecoding
00002e  0a00              LSRS     r0,r0,#8
000030  7048              STRB     r0,[r1,#1]
;;;148        Buf[2] = (uint8_t)(linecoding.bitrate >> 16);
000032  6810              LDR      r0,[r2,#0]  ; linecoding
000034  0c00              LSRS     r0,r0,#16
000036  7088              STRB     r0,[r1,#2]
;;;149        Buf[3] = (uint8_t)(linecoding.bitrate >> 24);
000038  6810              LDR      r0,[r2,#0]  ; linecoding
00003a  0e00              LSRS     r0,r0,#24
00003c  70c8              STRB     r0,[r1,#3]
;;;150        Buf[4] = linecoding.format;
00003e  7910              LDRB     r0,[r2,#4]  ; linecoding
000040  7108              STRB     r0,[r1,#4]
;;;151        Buf[5] = linecoding.paritytype;
000042  7950              LDRB     r0,[r2,#5]  ; linecoding
000044  7148              STRB     r0,[r1,#5]
;;;152        Buf[6] = linecoding.datatype; 
000046  7990              LDRB     r0,[r2,#6]  ; linecoding
000048  7188              STRB     r0,[r1,#6]
                  |L5.74|
;;;153        break;
;;;154    
;;;155      case SET_CONTROL_LINE_STATE:
;;;156        /* Not  needed for this driver */
;;;157        break;
;;;158    
;;;159      case SEND_BREAK:
;;;160        /* Not  needed for this driver */
;;;161        break;    
;;;162        
;;;163      default:
;;;164        break;
;;;165      }
;;;166    
;;;167      return USBD_OK;
00004a  2000              MOVS     r0,#0
;;;168    }
00004c  4770              BX       lr
;;;169    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      ||.data||

                          AREA ||i._Z8VCP_Initv||, CODE, READONLY, ALIGN=1

                  _Z8VCP_Initv PROC ; VCP_Init()
;;;85       */
;;;86     static uint16_t VCP_Init(void)
000000  2000              MOVS     r0,#0
;;;87     {  
;;;88       return USBD_OK;
;;;89     }
000002  4770              BX       lr
;;;90     
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._Z8VCP_Initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z8VCP_Initv||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._Z10VCP_DeInitv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10VCP_DeInitv||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z8VCP_CtrljPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8VCP_CtrljPhj||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z13VCP_WriteLinePc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13VCP_WriteLinePc||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z13VCP_WriteDataPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13VCP_WriteDataPhj||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z10VCP_DataRxPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10VCP_DataRxPhj||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  linecoding
                          DCD      0x0001c200
000004  00000800          DCB      0x00,0x00,0x08,0x00

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  VCP_fops
                          DCD      _Z8VCP_Initv ; VCP_Init()
                          DCD      _Z10VCP_DeInitv ; VCP_DeInit()
                          DCD      _Z8VCP_CtrljPhj ; VCP_Ctrl(unsigned, unsigned char*, unsigned)
                          DCD      0x00000000
                          DCD      _Z10VCP_DataRxPhj ; VCP_DataRx(unsigned char*, unsigned)

;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\usb\\usbd_cdc_vcp.cpp"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_usbd_cdc_vcp_cpp_8a96d5fd___Z7__REV16j|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___16_usbd_cdc_vcp_cpp_8a96d5fd___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_usbd_cdc_vcp_cpp_8a96d5fd___Z7__REVSHi|
#line 144
|__asm___16_usbd_cdc_vcp_cpp_8a96d5fd___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
