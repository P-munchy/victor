; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\usbd_core.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_core.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\usbd_core.crf arm_hal\lib\usb\usbd_core.c]
                          THUMB

                          AREA ||i.USBD_ClrCfg||, CODE, READONLY, ALIGN=1

                  USBD_ClrCfg PROC
;;;432    */
;;;433    USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
000000  b510              PUSH     {r4,lr}
;;;434    {
;;;435      pdev->dev.class_cb->DeInit(pdev, cfgidx);   
000002  f8d025e4          LDR      r2,[r0,#0x5e4]
000006  6852              LDR      r2,[r2,#4]
000008  4790              BLX      r2
;;;436      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;437    }
00000c  bd10              POP      {r4,pc}
;;;438    
                          ENDP


                          AREA ||i.USBD_DataInStage||, CODE, READONLY, ALIGN=2

                  USBD_DataInStage PROC
;;;260    */
;;;261    static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;262    {
000002  4605              MOV      r5,r0
000004  b159              CBZ      r1,|L2.30|
;;;263      USB_OTG_EP *ep;
;;;264      
;;;265      if(epnum == 0) 
;;;266      {
;;;267        ep = &pdev->dev.in_ep[0];
;;;268        if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
;;;269        {
;;;270          if(ep->rem_data_len > ep->maxpacket)
;;;271          {
;;;272            ep->rem_data_len -=  ep->maxpacket;
;;;273            if(pdev->cfg.dma_enable == 1)
;;;274            {
;;;275              /* in slave mode this, is handled by the TxFifoEmpty ISR */
;;;276              ep->xfer_buff += ep->maxpacket;
;;;277            }
;;;278            USBD_CtlContinueSendData (pdev, 
;;;279                                      ep->xfer_buff, 
;;;280                                      ep->rem_data_len);
;;;281          }
;;;282          else
;;;283          { /* last packet is MPS multiple, so send ZLP packet */
;;;284            if((ep->total_data_len % ep->maxpacket == 0) &&
;;;285               (ep->total_data_len >= ep->maxpacket) &&
;;;286                 (ep->total_data_len < ep->ctl_data_len ))
;;;287            {
;;;288              
;;;289              USBD_CtlContinueSendData(pdev , NULL, 0);
;;;290              ep->ctl_data_len = 0;
;;;291            }
;;;292            else
;;;293            {
;;;294              if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
;;;295                 (pdev->dev.device_status == USB_OTG_CONFIGURED))
;;;296              {
;;;297                pdev->dev.class_cb->EP0_TxSent(pdev); 
;;;298              }          
;;;299              USBD_CtlReceiveStatus(pdev);
;;;300            }
;;;301          }
;;;302        }
;;;303        if (pdev->dev.test_mode == 1)
;;;304        {
;;;305          USBD_RunTestMode(pdev); 
;;;306          pdev->dev.test_mode = 0;
;;;307        }
;;;308      }
;;;309      else if((pdev->dev.class_cb->DataIn != NULL)&& 
000006  f8d505e4          LDR      r0,[r5,#0x5e4]
00000a  6942              LDR      r2,[r0,#0x14]
00000c  2a00              CMP      r2,#0
00000e  d04a              BEQ      |L2.166|
;;;310              (pdev->dev.device_status == USB_OTG_CONFIGURED))
000010  f8950112          LDRB     r0,[r5,#0x112]
000014  2803              CMP      r0,#3
;;;311      {
;;;312        pdev->dev.class_cb->DataIn(pdev, epnum); 
000016  bf04              ITT      EQ
000018  4628              MOVEQ    r0,r5
00001a  4790              BLXEQ    r2
00001c  e043              B        |L2.166|
                  |L2.30|
00001e  f8950111          LDRB     r0,[r5,#0x111]        ;268
000022  2600              MOVS     r6,#0                 ;268
000024  f505748e          ADD      r4,r5,#0x11c          ;267
000028  2802              CMP      r0,#2                 ;268
00002a  d132              BNE      |L2.146|
00002c  69e1              LDR      r1,[r4,#0x1c]         ;270
00002e  68a0              LDR      r0,[r4,#8]            ;270
000030  4281              CMP      r1,r0                 ;270
000032  d90f              BLS      |L2.84|
000034  1a08              SUBS     r0,r1,r0              ;272
000036  61e0              STR      r0,[r4,#0x1c]         ;273
000038  78e8              LDRB     r0,[r5,#3]            ;273
00003a  2801              CMP      r0,#1                 ;273
00003c  d103              BNE      |L2.70|
00003e  e9d41002          LDRD     r1,r0,[r4,#8]         ;273
000042  4408              ADD      r0,r0,r1              ;276
000044  60e0              STR      r0,[r4,#0xc]          ;276
                  |L2.70|
000046  8ba0              LDRH     r0,[r4,#0x1c]         ;278
000048  68e1              LDR      r1,[r4,#0xc]          ;278
00004a  b282              UXTH     r2,r0                 ;278
00004c  4628              MOV      r0,r5                 ;278
00004e  f7fffffe          BL       USBD_CtlContinueSendData
000052  e01e              B        |L2.146|
                  |L2.84|
000054  6a21              LDR      r1,[r4,#0x20]         ;284
000056  fbb1f2f0          UDIV     r2,r1,r0              ;284
00005a  fb001212          MLS      r2,r0,r2,r1           ;284
00005e  b95a              CBNZ     r2,|L2.120|
000060  4281              CMP      r1,r0                 ;285
000062  d309              BCC      |L2.120|
000064  6a60              LDR      r0,[r4,#0x24]         ;286
000066  4281              CMP      r1,r0                 ;286
000068  d206              BCS      |L2.120|
00006a  2200              MOVS     r2,#0                 ;289
00006c  4611              MOV      r1,r2                 ;289
00006e  4628              MOV      r0,r5                 ;289
000070  f7fffffe          BL       USBD_CtlContinueSendData
000074  6266              STR      r6,[r4,#0x24]         ;290
000076  e00c              B        |L2.146|
                  |L2.120|
000078  f8d505e4          LDR      r0,[r5,#0x5e4]        ;294
00007c  68c1              LDR      r1,[r0,#0xc]          ;294
00007e  b129              CBZ      r1,|L2.140|
000080  f8950112          LDRB     r0,[r5,#0x112]        ;295
000084  2803              CMP      r0,#3                 ;295
000086  bf04              ITT      EQ                    ;297
000088  4628              MOVEQ    r0,r5                 ;297
00008a  4788              BLXEQ    r1                    ;297
                  |L2.140|
00008c  4628              MOV      r0,r5                 ;299
00008e  f7fffffe          BL       USBD_CtlReceiveStatus
                  |L2.146|
000092  f8950116          LDRB     r0,[r5,#0x116]        ;303
000096  2801              CMP      r0,#1                 ;303
000098  d105              BNE      |L2.166|
00009a  4804              LDR      r0,|L2.172|
00009c  6800              LDR      r0,[r0,#0]            ;303  ; SET_TEST_MODE
00009e  6929              LDR      r1,[r5,#0x10]         ;303
0000a0  6048              STR      r0,[r1,#4]            ;303
0000a2  f8856116          STRB     r6,[r5,#0x116]        ;306
                  |L2.166|
;;;313      }  
;;;314      return USBD_OK;
0000a6  2000              MOVS     r0,#0
;;;315    }
0000a8  bd70              POP      {r4-r6,pc}
;;;316    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      ||area_number.20||

                          AREA ||i.USBD_DataOutStage||, CODE, READONLY, ALIGN=1

                  USBD_DataOutStage PROC
;;;212    */
;;;213    static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
000000  b510              PUSH     {r4,lr}
;;;214    {
000002  4604              MOV      r4,r0
000004  b159              CBZ      r1,|L3.30|
;;;215      USB_OTG_EP *ep;
;;;216      
;;;217      if(epnum == 0) 
;;;218      {
;;;219        ep = &pdev->dev.out_ep[0];
;;;220        if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
;;;221        {
;;;222          if(ep->rem_data_len > ep->maxpacket)
;;;223          {
;;;224            ep->rem_data_len -=  ep->maxpacket;
;;;225            
;;;226            if(pdev->cfg.dma_enable == 1)
;;;227            {
;;;228              /* in slave mode this, is handled by the RxSTSQLvl ISR */
;;;229              ep->xfer_buff += ep->maxpacket; 
;;;230            }        
;;;231            USBD_CtlContinueRx (pdev, 
;;;232                                ep->xfer_buff,
;;;233                                MIN(ep->rem_data_len ,ep->maxpacket));
;;;234          }
;;;235          else
;;;236          {
;;;237            if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
;;;238               (pdev->dev.device_status == USB_OTG_CONFIGURED))
;;;239            {
;;;240              pdev->dev.class_cb->EP0_RxReady(pdev); 
;;;241            }
;;;242            USBD_CtlSendStatus(pdev);
;;;243          }
;;;244        }
;;;245      }
;;;246      else if((pdev->dev.class_cb->DataOut != NULL)&&
000006  f8d405e4          LDR      r0,[r4,#0x5e4]
00000a  6982              LDR      r2,[r0,#0x18]
00000c  2a00              CMP      r2,#0
00000e  d02f              BEQ      |L3.112|
;;;247              (pdev->dev.device_status == USB_OTG_CONFIGURED))
000010  f8940112          LDRB     r0,[r4,#0x112]
000014  2803              CMP      r0,#3
;;;248      {
;;;249        pdev->dev.class_cb->DataOut(pdev, epnum); 
000016  bf04              ITT      EQ
000018  4620              MOVEQ    r0,r4
00001a  4790              BLXEQ    r2
00001c  e028              B        |L3.112|
                  |L3.30|
00001e  f8940111          LDRB     r0,[r4,#0x111]        ;220
000022  f504715d          ADD      r1,r4,#0x374          ;219
000026  2803              CMP      r0,#3                 ;220
000028  d122              BNE      |L3.112|
00002a  688a              LDR      r2,[r1,#8]            ;222
00002c  69c8              LDR      r0,[r1,#0x1c]         ;222
00002e  4290              CMP      r0,r2                 ;222
000030  d911              BLS      |L3.86|
000032  1a80              SUBS     r0,r0,r2              ;224
000034  61c8              STR      r0,[r1,#0x1c]         ;226
000036  78e0              LDRB     r0,[r4,#3]            ;226
000038  2801              CMP      r0,#1                 ;226
00003a  d102              BNE      |L3.66|
00003c  68c8              LDR      r0,[r1,#0xc]          ;229
00003e  4410              ADD      r0,r0,r2              ;229
000040  60c8              STR      r0,[r1,#0xc]          ;229
                  |L3.66|
000042  69c8              LDR      r0,[r1,#0x1c]         ;231
000044  4290              CMP      r0,r2                 ;231
000046  bf28              IT       CS                    ;231
000048  4610              MOVCS    r0,r2                 ;231
00004a  b282              UXTH     r2,r0                 ;233
00004c  68c9              LDR      r1,[r1,#0xc]          ;233
00004e  4620              MOV      r0,r4                 ;233
000050  f7fffffe          BL       USBD_CtlContinueRx
000054  e00c              B        |L3.112|
                  |L3.86|
000056  f8d405e4          LDR      r0,[r4,#0x5e4]        ;237
00005a  6901              LDR      r1,[r0,#0x10]         ;237
00005c  b129              CBZ      r1,|L3.106|
00005e  f8940112          LDRB     r0,[r4,#0x112]        ;238
000062  2803              CMP      r0,#3                 ;238
000064  bf04              ITT      EQ                    ;240
000066  4620              MOVEQ    r0,r4                 ;240
000068  4788              BLXEQ    r1                    ;240
                  |L3.106|
00006a  4620              MOV      r0,r4                 ;242
00006c  f7fffffe          BL       USBD_CtlSendStatus
                  |L3.112|
;;;250      }  
;;;251      return USBD_OK;
000070  2000              MOVS     r0,#0
;;;252    }
000072  bd10              POP      {r4,pc}
;;;253    
                          ENDP


                          AREA ||i.USBD_DeInit||, CODE, READONLY, ALIGN=1

                  USBD_DeInit PROC
;;;165    */
;;;166    USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
000000  2000              MOVS     r0,#0
;;;167    {
;;;168      /* Software Init */
;;;169      
;;;170      return USBD_OK;
;;;171    }
000002  4770              BX       lr
;;;172    
                          ENDP


                          AREA ||i.USBD_DevConnected||, CODE, READONLY, ALIGN=1

                  USBD_DevConnected PROC
;;;469    */
;;;470    static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;471    {
000002  4604              MOV      r4,r0
;;;472      pdev->dev.usr_cb->DeviceConnected();
000004  f8d005e8          LDR      r0,[r0,#0x5e8]
000008  6940              LDR      r0,[r0,#0x14]
00000a  4780              BLX      r0
;;;473      pdev->dev.connection_status = 1;  
00000c  2001              MOVS     r0,#1
00000e  f8840115          STRB     r0,[r4,#0x115]
;;;474      return USBD_OK;
000012  2000              MOVS     r0,#0
;;;475    }
000014  bd10              POP      {r4,pc}
;;;476    
                          ENDP


                          AREA ||i.USBD_DevDisconnected||, CODE, READONLY, ALIGN=1

                  USBD_DevDisconnected PROC
;;;482    */
;;;483    static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;484    {
000002  4604              MOV      r4,r0
;;;485      pdev->dev.usr_cb->DeviceDisconnected();
000004  f8d005e8          LDR      r0,[r0,#0x5e8]
000008  6980              LDR      r0,[r0,#0x18]
00000a  4780              BLX      r0
;;;486      pdev->dev.class_cb->DeInit(pdev, 0);
00000c  f8d405e4          LDR      r0,[r4,#0x5e4]
000010  2100              MOVS     r1,#0
000012  6842              LDR      r2,[r0,#4]
000014  4620              MOV      r0,r4
000016  4790              BLX      r2
;;;487      pdev->dev.connection_status = 0;    
000018  2000              MOVS     r0,#0
00001a  f8840115          STRB     r0,[r4,#0x115]
;;;488      return USBD_OK;
;;;489    }
00001e  bd10              POP      {r4,pc}
;;;490    #endif
                          ENDP


                          AREA ||i.USBD_Init||, CODE, READONLY, ALIGN=1

                  USBD_Init PROC
;;;133    */
;;;134    void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;135                   USB_OTG_CORE_ID_TypeDef coreID,
;;;136                   USBD_DEVICE *pDevice,                  
;;;137                   USBD_Class_cb_TypeDef *class_cb, 
;;;138                   USBD_Usr_cb_TypeDef *usr_cb)
;;;139    {
000004  461d              MOV      r5,r3
000006  4617              MOV      r7,r2
000008  4688              MOV      r8,r1
00000a  4604              MOV      r4,r0
;;;140      /* Hardware Init */
;;;141      USB_OTG_BSP_Init(pdev);  
00000c  9e06              LDR      r6,[sp,#0x18]
00000e  f7fffffe          BL       USB_OTG_BSP_Init
;;;142      
;;;143      USBD_DeInit(pdev);
;;;144      
;;;145      /*Register class and user callbacks */
;;;146      pdev->dev.class_cb = class_cb;
;;;147      pdev->dev.usr_cb = usr_cb;  
000012  f8c455e4          STR      r5,[r4,#0x5e4]
;;;148      pdev->dev.usr_device = pDevice;    
;;;149      
;;;150      /* set USB OTG core params */
;;;151      DCD_Init(pdev , coreID);
000016  f8c475ec          STR      r7,[r4,#0x5ec]
00001a  f50465bd          ADD      r5,r4,#0x5e8          ;147
00001e  4641              MOV      r1,r8
000020  4620              MOV      r0,r4
000022  f8c465e8          STR      r6,[r4,#0x5e8]
000026  f7fffffe          BL       DCD_Init
;;;152      
;;;153      /* Upon Init call usr callback */
;;;154      pdev->dev.usr_cb->Init();
00002a  6828              LDR      r0,[r5,#0]
00002c  6800              LDR      r0,[r0,#0]
00002e  4780              BLX      r0
;;;155      
;;;156      /* Enable Interrupts */
;;;157      USB_OTG_BSP_EnableInterrupt(pdev);
000030  4620              MOV      r0,r4
000032  e8bd41f0          POP      {r4-r8,lr}
000036  f7ffbffe          B.W      USB_OTG_BSP_EnableInterrupt
;;;158    }
;;;159    
                          ENDP


                          AREA ||i.USBD_IsoINIncomplete||, CODE, READONLY, ALIGN=1

                  USBD_IsoINIncomplete PROC
;;;444    */
;;;445    static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;446    {
;;;447      pdev->dev.class_cb->IsoINIncomplete(pdev);   
000002  f8d015e4          LDR      r1,[r0,#0x5e4]
000006  6a09              LDR      r1,[r1,#0x20]
000008  4788              BLX      r1
;;;448      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;449    }
00000c  bd10              POP      {r4,pc}
;;;450    
                          ENDP


                          AREA ||i.USBD_IsoOUTIncomplete||, CODE, READONLY, ALIGN=1

                  USBD_IsoOUTIncomplete PROC
;;;456    */
;;;457    static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;458    {
;;;459      pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
000002  f8d015e4          LDR      r1,[r0,#0x5e4]
000006  6a49              LDR      r1,[r1,#0x24]
000008  4788              BLX      r1
;;;460      return USBD_OK;
00000a  2000              MOVS     r0,#0
;;;461    }
00000c  bd10              POP      {r4,pc}
;;;462    
                          ENDP


                          AREA ||i.USBD_Reset||, CODE, READONLY, ALIGN=1

                  USBD_Reset PROC
;;;338    
;;;339    static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;340    {
;;;341      /* Open EP0 OUT */
;;;342      DCD_EP_Open(pdev,
000002  2300              MOVS     r3,#0
000004  4604              MOV      r4,r0                 ;340
000006  2240              MOVS     r2,#0x40
000008  4619              MOV      r1,r3
00000a  f7fffffe          BL       DCD_EP_Open
;;;343                  0x00,
;;;344                  USB_OTG_MAX_EP0_SIZE,
;;;345                  EP_TYPE_CTRL);
;;;346      
;;;347      /* Open EP0 IN */
;;;348      DCD_EP_Open(pdev,
00000e  2300              MOVS     r3,#0
000010  2240              MOVS     r2,#0x40
000012  2180              MOVS     r1,#0x80
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DCD_EP_Open
;;;349                  0x80,
;;;350                  USB_OTG_MAX_EP0_SIZE,
;;;351                  EP_TYPE_CTRL);
;;;352      
;;;353      /* Upon Reset call usr call back */
;;;354      pdev->dev.device_status = USB_OTG_DEFAULT;
00001a  2001              MOVS     r0,#1
00001c  f8840112          STRB     r0,[r4,#0x112]
;;;355      pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
000020  f8d415e8          LDR      r1,[r4,#0x5e8]
000024  78a0              LDRB     r0,[r4,#2]
000026  6849              LDR      r1,[r1,#4]
000028  4788              BLX      r1
;;;356      
;;;357      return USBD_OK;
00002a  2000              MOVS     r0,#0
;;;358    }
00002c  bd10              POP      {r4,pc}
;;;359    
                          ENDP


                          AREA ||i.USBD_Resume||, CODE, READONLY, ALIGN=1

                  USBD_Resume PROC
;;;366    
;;;367    static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;368    {
000002  4604              MOV      r4,r0
;;;369      /* Upon Resume call usr call back */
;;;370      pdev->dev.usr_cb->DeviceResumed(); 
000004  f8d005e8          LDR      r0,[r0,#0x5e8]
000008  6900              LDR      r0,[r0,#0x10]
00000a  4780              BLX      r0
;;;371      pdev->dev.device_status = pdev->dev.device_old_status;  
;;;372      pdev->dev.device_status = USB_OTG_CONFIGURED;  
00000c  2003              MOVS     r0,#3
00000e  f8840112          STRB     r0,[r4,#0x112]
;;;373      return USBD_OK;
000012  2000              MOVS     r0,#0
;;;374    }
000014  bd10              POP      {r4,pc}
;;;375    
                          ENDP


                          AREA ||i.USBD_SOF||, CODE, READONLY, ALIGN=1

                  USBD_SOF PROC
;;;400    
;;;401    static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;402    {
;;;403      if(pdev->dev.class_cb->SOF)
000002  f8d015e4          LDR      r1,[r0,#0x5e4]
000006  69c9              LDR      r1,[r1,#0x1c]
000008  2900              CMP      r1,#0
;;;404      {
;;;405        pdev->dev.class_cb->SOF(pdev); 
00000a  bf18              IT       NE
00000c  4788              BLXNE    r1
;;;406      }
;;;407      return USBD_OK;
00000e  2000              MOVS     r0,#0
;;;408    }
000010  bd10              POP      {r4,pc}
;;;409    /**
                          ENDP


                          AREA ||i.USBD_SetCfg||, CODE, READONLY, ALIGN=1

                  USBD_SetCfg PROC
;;;416    
;;;417    USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
000000  b510              PUSH     {r4,lr}
;;;418    {
000002  4604              MOV      r4,r0
;;;419      pdev->dev.class_cb->Init(pdev, cfgidx); 
000004  f8d005e4          LDR      r0,[r0,#0x5e4]
000008  6802              LDR      r2,[r0,#0]
00000a  4620              MOV      r0,r4
00000c  4790              BLX      r2
;;;420      
;;;421      /* Upon set config call usr call back */
;;;422      pdev->dev.usr_cb->DeviceConfigured();
00000e  f8d405e8          LDR      r0,[r4,#0x5e8]
000012  6880              LDR      r0,[r0,#8]
000014  4780              BLX      r0
;;;423      return USBD_OK; 
000016  2000              MOVS     r0,#0
;;;424    }
000018  bd10              POP      {r4,pc}
;;;425    
                          ENDP


                          AREA ||i.USBD_SetupStage||, CODE, READONLY, ALIGN=1

                  USBD_SetupStage PROC
;;;178    */
;;;179    static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
000000  b510              PUSH     {r4,lr}
;;;180    {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
;;;181      USB_SETUP_REQ req;
;;;182      
;;;183      USBD_ParseSetupRequest(pdev , &req);
000006  4669              MOV      r1,sp
000008  f7fffffe          BL       USBD_ParseSetupRequest
;;;184      
;;;185      switch (req.bmRequest & 0x1F) 
00000c  f89d2000          LDRB     r2,[sp,#0]
000010  f012011f          ANDS     r1,r2,#0x1f
000014  d00b              BEQ      |L14.46|
000016  2901              CMP      r1,#1
000018  d00e              BEQ      |L14.56|
00001a  2902              CMP      r1,#2
00001c  d011              BEQ      |L14.66|
;;;186      {
;;;187      case USB_REQ_RECIPIENT_DEVICE:   
;;;188        USBD_StdDevReq (pdev, &req);
;;;189        break;
;;;190        
;;;191      case USB_REQ_RECIPIENT_INTERFACE:     
;;;192        USBD_StdItfReq(pdev, &req);
;;;193        break;
;;;194        
;;;195      case USB_REQ_RECIPIENT_ENDPOINT:        
;;;196        USBD_StdEPReq(pdev, &req);   
;;;197        break;
;;;198        
;;;199      default:           
;;;200        DCD_EP_Stall(pdev , req.bmRequest & 0x80);
00001e  f0020180          AND      r1,r2,#0x80
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DCD_EP_Stall
                  |L14.40|
;;;201        break;
;;;202      }  
;;;203      return USBD_OK;
;;;204    }
000028  b002              ADD      sp,sp,#8
00002a  2000              MOVS     r0,#0                 ;203
00002c  bd10              POP      {r4,pc}
                  |L14.46|
00002e  4669              MOV      r1,sp                 ;188
000030  4620              MOV      r0,r4                 ;188
000032  f7fffffe          BL       USBD_StdDevReq
000036  e7f7              B        |L14.40|
                  |L14.56|
000038  4669              MOV      r1,sp                 ;192
00003a  4620              MOV      r0,r4                 ;192
00003c  f7fffffe          BL       USBD_StdItfReq
000040  e7f2              B        |L14.40|
                  |L14.66|
000042  4669              MOV      r1,sp                 ;196
000044  4620              MOV      r0,r4                 ;196
000046  f7fffffe          BL       USBD_StdEPReq
00004a  e7ed              B        |L14.40|
;;;205    
                          ENDP


                          AREA ||i.USBD_Suspend||, CODE, READONLY, ALIGN=1

                  USBD_Suspend PROC
;;;383    
;;;384    static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;385    {
;;;386      pdev->dev.device_old_status = pdev->dev.device_status;
000002  f8901112          LDRB     r1,[r0,#0x112]
000006  f8801113          STRB     r1,[r0,#0x113]
;;;387      pdev->dev.device_status  = USB_OTG_SUSPENDED;
00000a  2104              MOVS     r1,#4
00000c  f8801112          STRB     r1,[r0,#0x112]
;;;388      /* Upon Resume call usr call back */
;;;389      pdev->dev.usr_cb->DeviceSuspended(); 
000010  f8d005e8          LDR      r0,[r0,#0x5e8]
000014  68c0              LDR      r0,[r0,#0xc]
000016  4780              BLX      r0
;;;390      return USBD_OK;
000018  2000              MOVS     r0,#0
;;;391    }
00001a  bd10              POP      {r4,pc}
;;;392    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  USBD_DCD_INT_cb
                          DCD      USBD_DataOutStage
                          DCD      USBD_DataInStage
                          DCD      USBD_SetupStage
                          DCD      USBD_SOF
                          DCD      USBD_Reset
                          DCD      USBD_Suspend
                          DCD      USBD_Resume
                          DCD      USBD_IsoINIncomplete
                          DCD      USBD_IsoOUTIncomplete
                          DCD      USBD_DevConnected
                          DCD      USBD_DevDisconnected

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  USBD_DCD_INT_fops
                          DCD      USBD_DCD_INT_cb

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  SET_TEST_MODE
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\usb\\usbd_core.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_usbd_core_c_3d268f20____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___11_usbd_core_c_3d268f20____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_usbd_core_c_3d268f20____REVSH|
#line 144
|__asm___11_usbd_core_c_3d268f20____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
