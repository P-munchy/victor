; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\usbd_desc.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_desc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\usbd_desc.crf arm_hal\lib\usb\usbd_desc.c]
                          THUMB

                          AREA ||i.USBD_USR_ConfigStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_ConfigStrDescriptor PROC
;;;269    */
;;;270    uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
000000  b510              PUSH     {r4,lr}
;;;271    {
;;;272      if(speed  == USB_OTG_SPEED_HIGH)
;;;273      {  
;;;274        USBD_GetString ((uint8_t *)USBD_CONFIGURATION_HS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);
;;;275      }
;;;276      else
;;;277      {
;;;278        USBD_GetString ((uint8_t *)USBD_CONFIGURATION_FS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length); 
000002  460a              MOV      r2,r1
000004  4902              LDR      r1,|L1.16|
000006  a003              ADR      r0,|L1.20|
000008  f7fffffe          BL       USBD_GetString
;;;279      }
;;;280      return USBD_StrDesc;  
00000c  4800              LDR      r0,|L1.16|
;;;281    }
00000e  bd10              POP      {r4,pc}
;;;282    
                          ENDP

                  |L1.16|
                          DCD      USBD_StrDesc
                  |L1.20|
000014  48494420          DCB      "HID Config",0
000018  436f6e66
00001c  696700  
00001f  00                DCB      0

                          AREA ||i.USBD_USR_DeviceDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_DeviceDescriptor PROC
;;;187    */
;;;188    uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
000000  2012              MOVS     r0,#0x12
;;;189    {
;;;190      *length = sizeof(USBD_DeviceDesc);
000002  8008              STRH     r0,[r1,#0]
;;;191      return USBD_DeviceDesc;
000004  4800              LDR      r0,|L2.8|
;;;192    }
000006  4770              BX       lr
;;;193    
                          ENDP

                  |L2.8|
                          DCD      ||area_number.11||+0x4

                          AREA ||i.USBD_USR_InterfaceStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_InterfaceStrDescriptor PROC
;;;290    */
;;;291    uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
000000  b510              PUSH     {r4,lr}
;;;292    {
;;;293      if(speed == 0)
;;;294      {
;;;295        USBD_GetString ((uint8_t *)USBD_INTERFACE_HS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);
;;;296      }
;;;297      else
;;;298      {
;;;299        USBD_GetString ((uint8_t *)USBD_INTERFACE_FS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);
000002  460a              MOV      r2,r1
000004  4902              LDR      r1,|L3.16|
000006  a003              ADR      r0,|L3.20|
000008  f7fffffe          BL       USBD_GetString
;;;300      }
;;;301      return USBD_StrDesc;  
00000c  4800              LDR      r0,|L3.16|
;;;302    }
00000e  bd10              POP      {r4,pc}
;;;303    
                          ENDP

                  |L3.16|
                          DCD      USBD_StrDesc
                  |L3.20|
000014  48494420          DCB      "HID Interface",0
000018  496e7465
00001c  72666163
000020  6500    
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.USBD_USR_LangIDStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_LangIDStrDescriptor PROC
;;;200    */
;;;201    uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
000000  2004              MOVS     r0,#4
;;;202    {
;;;203      *length =  sizeof(USBD_LangIDDesc);  
000002  8008              STRH     r0,[r1,#0]
;;;204      return USBD_LangIDDesc;
000004  4800              LDR      r0,|L4.8|
;;;205    }
000006  4770              BX       lr
;;;206    
                          ENDP

                  |L4.8|
                          DCD      ||area_number.11||

                          AREA ||i.USBD_USR_ManufacturerStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_ManufacturerStrDescriptor PROC
;;;236    */
;;;237    uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
000000  b510              PUSH     {r4,lr}
;;;238    {
;;;239      USBD_GetString ((uint8_t *)USBD_MANUFACTURER_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);
000002  460a              MOV      r2,r1
000004  4902              LDR      r1,|L5.16|
000006  a003              ADR      r0,|L5.20|
000008  f7fffffe          BL       USBD_GetString
;;;240      return USBD_StrDesc;
00000c  4800              LDR      r0,|L5.16|
;;;241    }
00000e  bd10              POP      {r4,pc}
;;;242    
                          ENDP

                  |L5.16|
                          DCD      USBD_StrDesc
                  |L5.20|
000014  53544d69          DCB      "STMicroelectronics",0
000018  63726f65
00001c  6c656374
000020  726f6e69
000024  637300  
000027  00                DCB      0

                          AREA ||i.USBD_USR_ProductStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_ProductStrDescriptor PROC
;;;214    */
;;;215    uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
000000  460a              MOV      r2,r1
;;;216    {
000002  b510              PUSH     {r4,lr}
;;;217     
;;;218      
;;;219      if(speed == 0)
;;;220      {   
;;;221        USBD_GetString ((uint8_t *)USBD_PRODUCT_HS_STRING, (uint8_t *) USBD_StrDesc,(uint16_t *) length);
;;;222      }
;;;223      else
;;;224      {
;;;225        USBD_GetString ((uint8_t *)USBD_PRODUCT_FS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);    
000004  4904              LDR      r1,|L6.24|
000006  2800              CMP      r0,#0                 ;219
000008  bf0c              ITE      EQ                    ;221
00000a  a004              ADREQ    r0,|L6.28|
00000c  a008              ADRNE    r0,|L6.48|
00000e  f7fffffe          BL       USBD_GetString
;;;226      }
;;;227      return USBD_StrDesc;
000012  4801              LDR      r0,|L6.24|
;;;228    }
000014  bd10              POP      {r4,pc}
;;;229    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      USBD_StrDesc
                  |L6.28|
00001c  4a6f7973          DCB      "Joystick in HS mode",0
000020  7469636b
000024  20696e20
000028  4853206d
00002c  6f646500
                  |L6.48|
000030  4a6f7973          DCB      "Joystick in FS Mode",0
000034  7469636b
000038  20696e20
00003c  4653204d
000040  6f646500

                          AREA ||i.USBD_USR_SerialStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_USR_SerialStrDescriptor PROC
;;;249    */
;;;250    uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
000000  460a              MOV      r2,r1
;;;251    {
000002  b510              PUSH     {r4,lr}
;;;252      if(speed  == USB_OTG_SPEED_HIGH)
;;;253      {    
;;;254        USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_HS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);
;;;255      }
;;;256      else
;;;257      {
;;;258        USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_FS_STRING,(uint8_t *) USBD_StrDesc,(uint16_t *) length);    
000004  4904              LDR      r1,|L7.24|
000006  2800              CMP      r0,#0                 ;252
000008  bf0c              ITE      EQ                    ;254
00000a  a004              ADREQ    r0,|L7.28|
00000c  a007              ADRNE    r0,|L7.44|
00000e  f7fffffe          BL       USBD_GetString
;;;259      }
;;;260      return USBD_StrDesc;
000012  4801              LDR      r0,|L7.24|
;;;261    }
000014  bd10              POP      {r4,pc}
;;;262    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      USBD_StrDesc
                  |L7.28|
00001c  30303030          DCB      "00000000011B",0
000020  30303030
000024  30313142
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L7.44|
00002c  30303030          DCB      "00000000011C",0
000030  30303030
000034  30313143
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  USR_desc
                          DCD      USBD_USR_DeviceDescriptor
                          DCD      USBD_USR_LangIDStrDescriptor
                          DCD      USBD_USR_ManufacturerStrDescriptor
                          DCD      USBD_USR_ProductStrDescriptor
                          DCD      USBD_USR_SerialStrDescriptor
                          DCD      USBD_USR_ConfigStrDescriptor
                          DCD      USBD_USR_InterfaceStrDescriptor

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  USBD_LangIDDesc
000000  04030904          DCB      0x04,0x03,0x09,0x04
                  USBD_DeviceDesc
000004  12010002          DCB      0x12,0x01,0x00,0x02
000008  00000040          DCB      0x00,0x00,0x00,0x40
00000c  83041057          DCB      0x83,0x04,0x10,0x57
000010  00020102          DCB      0x00,0x02,0x01,0x02
000014  0301              DCB      0x03,0x01

                          AREA ||area_number.12||, DATA, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.data||
                  USBD_DeviceQualifierDesc
000000  0a060002          DCB      0x0a,0x06,0x00,0x02
000004  00000040          DCB      0x00,0x00,0x00,0x40
000008  0100              DCB      0x01,0x00

;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\usb\\usbd_desc.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_usbd_desc_c_USR_desc____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___11_usbd_desc_c_USR_desc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_usbd_desc_c_USR_desc____REVSH|
#line 144
|__asm___11_usbd_desc_c_USR_desc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
