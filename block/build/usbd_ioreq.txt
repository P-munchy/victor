; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\build\usbd_ioreq.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_ioreq.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F429X -DUSE_STDPERIPH_DRIVER -DSTM32F429_439xx -DUSE_DEFAULT_TIMEOUT_CALLBACK -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_FS -DCOZMO_ROBOT -DROBOT_HARDWARE -DANKICORETECH_EMBEDDED_USE_HEATSHRINK -DCORETECH_ROBOT -DSTM32F429X --omf_browse=.\build\usbd_ioreq.crf arm_hal\lib\usb\usbd_ioreq.c]
                          THUMB

                          AREA ||i.USBD_CtlContinueRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueRx PROC
;;;164    */
;;;165    USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
000000  b510              PUSH     {r4,lr}
;;;166                                              uint8_t *pbuf,                                          
;;;167                                              uint16_t len)
;;;168    {
;;;169      USBD_Status ret = USBD_OK;
;;;170      
;;;171      DCD_EP_PrepareRx (pdev,
000002  4613              MOV      r3,r2
000004  2400              MOVS     r4,#0                 ;169
000006  460a              MOV      r2,r1
000008  4621              MOV      r1,r4
00000a  f7fffffe          BL       DCD_EP_PrepareRx
;;;172                        0,                     
;;;173                        pbuf,                         
;;;174                        len);
;;;175      return ret;
00000e  4620              MOV      r0,r4
;;;176    }
000010  bd10              POP      {r4,pc}
;;;177    /**
                          ENDP


                          AREA ||i.USBD_CtlContinueSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueSendData PROC
;;;117    */
;;;118    USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
000000  b510              PUSH     {r4,lr}
;;;119                                           uint8_t *pbuf,
;;;120                                           uint16_t len)
;;;121    {
;;;122      USBD_Status ret = USBD_OK;
;;;123      
;;;124      DCD_EP_Tx (pdev, 0, pbuf, len);
000002  4613              MOV      r3,r2
000004  2400              MOVS     r4,#0                 ;122
000006  460a              MOV      r2,r1
000008  4621              MOV      r1,r4
00000a  f7fffffe          BL       DCD_EP_Tx
;;;125      
;;;126      
;;;127      return ret;
00000e  4620              MOV      r0,r4
;;;128    }
000010  bd10              POP      {r4,pc}
;;;129    
                          ENDP


                          AREA ||i.USBD_CtlPrepareRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlPrepareRx PROC
;;;137    */
;;;138    USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
000000  b510              PUSH     {r4,lr}
;;;139                                      uint8_t *pbuf,                                  
;;;140                                      uint16_t len)
;;;141    {
;;;142      USBD_Status ret = USBD_OK;
;;;143      
;;;144      pdev->dev.out_ep[0].total_data_len = len;
;;;145      pdev->dev.out_ep[0].rem_data_len   = len;
000002  f8c02394          STR      r2,[r0,#0x394]
;;;146      pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
000006  2303              MOVS     r3,#3
000008  f8c02390          STR      r2,[r0,#0x390]
00000c  f8803111          STRB     r3,[r0,#0x111]
;;;147      
;;;148      DCD_EP_PrepareRx (pdev,
000010  4613              MOV      r3,r2
000012  2400              MOVS     r4,#0                 ;142
000014  460a              MOV      r2,r1
000016  4621              MOV      r1,r4
000018  f7fffffe          BL       DCD_EP_PrepareRx
;;;149                        0,
;;;150                        pbuf,
;;;151                        len);
;;;152      
;;;153    
;;;154      return ret;
00001c  4620              MOV      r0,r4
;;;155    }
00001e  bd10              POP      {r4,pc}
;;;156    
                          ENDP


                          AREA ||i.USBD_CtlReceiveStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlReceiveStatus PROC
;;;202    */
;;;203    USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;204    {
000002  4604              MOV      r4,r0
;;;205      USBD_Status ret = USBD_OK;
000004  2500              MOVS     r5,#0
;;;206      pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
000006  2005              MOVS     r0,#5
000008  f8840111          STRB     r0,[r4,#0x111]
;;;207      DCD_EP_PrepareRx ( pdev,
00000c  462b              MOV      r3,r5
00000e  462a              MOV      r2,r5
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       DCD_EP_PrepareRx
;;;208                        0,
;;;209                        NULL,
;;;210                        0);  
;;;211    
;;;212      USB_OTG_EP0_OutStart(pdev);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USB_OTG_EP0_OutStart
;;;213      
;;;214      return ret;
00001e  4628              MOV      r0,r5
;;;215    }
000020  bd70              POP      {r4-r6,pc}
;;;216    
                          ENDP


                          AREA ||i.USBD_CtlSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendData PROC
;;;94     */
;;;95     USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
000000  b510              PUSH     {r4,lr}
;;;96                                    uint8_t *pbuf,
;;;97                                    uint16_t len)
;;;98     {
;;;99       USBD_Status ret = USBD_OK;
;;;100      
;;;101      pdev->dev.in_ep[0].total_data_len = len;
;;;102      pdev->dev.in_ep[0].rem_data_len   = len;
000002  f8c0213c          STR      r2,[r0,#0x13c]
;;;103      pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
000006  2302              MOVS     r3,#2
000008  f8c02138          STR      r2,[r0,#0x138]
00000c  f8803111          STRB     r3,[r0,#0x111]
;;;104    
;;;105      DCD_EP_Tx (pdev, 0, pbuf, len);
000010  4613              MOV      r3,r2
000012  2400              MOVS     r4,#0                 ;99
000014  460a              MOV      r2,r1
000016  4621              MOV      r1,r4
000018  f7fffffe          BL       DCD_EP_Tx
;;;106     
;;;107      return ret;
00001c  4620              MOV      r0,r4
;;;108    }
00001e  bd10              POP      {r4,pc}
;;;109    
                          ENDP


                          AREA ||i.USBD_CtlSendStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendStatus PROC
;;;182    */
;;;183    USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
000002  4604              MOV      r4,r0
;;;185      USBD_Status ret = USBD_OK;
000004  2500              MOVS     r5,#0
;;;186      pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
000006  2004              MOVS     r0,#4
000008  f8840111          STRB     r0,[r4,#0x111]
;;;187      DCD_EP_Tx (pdev,
00000c  462b              MOV      r3,r5
00000e  462a              MOV      r2,r5
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       DCD_EP_Tx
;;;188                 0,
;;;189                 NULL, 
;;;190                 0); 
;;;191      
;;;192      USB_OTG_EP0_OutStart(pdev);  
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USB_OTG_EP0_OutStart
;;;193      
;;;194      return ret;
00001e  4628              MOV      r0,r5
;;;195    }
000020  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP


                          AREA ||i.USBD_GetRxCount||, CODE, READONLY, ALIGN=1

                  USBD_GetRxCount PROC
;;;224    */
;;;225    uint16_t  USBD_GetRxCount (USB_OTG_CORE_HANDLE  *pdev , uint8_t epnum)
000000  eb010181          ADD      r1,r1,r1,LSL #2
;;;226    {
;;;227      return pdev->dev.out_ep[epnum].xfer_count;
000004  eb0000c1          ADD      r0,r0,r1,LSL #3
000008  f8b0038c          LDRH     r0,[r0,#0x38c]
00000c  b280              UXTH     r0,r0
;;;228    }
00000e  4770              BX       lr
;;;229    
                          ENDP


;*** Start embedded assembler ***

#line 1 "arm_hal\\lib\\usb\\usbd_ioreq.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REV16|
#line 129 ".\\arm_hal\\lib\\core_cmInstr.h"
|__asm___12_usbd_ioreq_c_28e25e4d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REVSH|
#line 144
|__asm___12_usbd_ioreq_c_28e25e4d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
