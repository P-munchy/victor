; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\visiondebugstream.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\visiondebugstream.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\visiondebugstream.crf supervisor\src\visionDebugStream.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream10InitializeEv||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream10InitializeEv PROC ; Anki::Cozmo::VisionSystem::DebugStream::Initialize()
;;;367    
;;;368            Result Initialize()
000000  2000              MOVS     r0,#0
;;;369            {
;;;370    #if SEND_DEBUG_STREAM
;;;371              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;372    
;;;373              InitBenchmarking();
;;;374              BeginBenchmark("TotalTime");
;;;375    #endif
;;;376              return RESULT_OK;
;;;377            }
000002  4770              BX       lr
;;;378          } // namespace DebugStream
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream10SendBufferERNS_8Embedded16SerializedBufferENS3_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream10SendBufferERNS_8Embedded16SerializedBufferENS3_11MemoryStackE PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendBuffer(Anki::Embedded::SerializedBuffer&, Anki::Embedded::MemoryStack)
;;;41     
;;;42             Result SendBuffer(SerializedBuffer &toSend, MemoryStack scratch)
000000  2000              MOVS     r0,#0
;;;43             {
;;;44     #if SEND_DEBUG_STREAM
;;;45               const f32 curSecond = Round<s32>(GetTimeF32());
;;;46     
;;;47               // Hack, to prevent overwhelming the send buffer
;;;48               if(curSecond != lastSecond) {
;;;49                 bytesSinceLastSecond = 0;
;;;50                 lastSecond = curSecond;
;;;51               } else {
;;;52                 if(bytesSinceLastSecond > MAX_BYTES_PER_SECOND) {
;;;53                   return RESULT_OK;
;;;54                 } else {
;;;55                   bytesSinceLastSecond += toSend.get_memoryStack().get_usedBytes();
;;;56                 }
;;;57               }
;;;58     
;;;59               /*for(s32 i=0; i<500; i++) {
;;;60                 BeginBenchmark("Test");
;;;61                 EndBenchmark("Test");
;;;62               }*/
;;;63               
;;;64               EndBenchmark("TotalTime");
;;;65     
;;;66               const u32 lastComputeBenchmarkResults_elapsedTime = computeBenchmarkResults_end - computeBenchmarkResults_start;
;;;67     
;;;68               computeBenchmarkResults_start = GetTimeU32();
;;;69     
;;;70               FixedLengthList<BenchmarkElement> benchmarks = ComputeBenchmarkResults(scratch);
;;;71     
;;;72               const s32 totalTimeIndex = GetNameIndex("TotalTime", benchmarks);
;;;73               if(totalTimeIndex >= 0) {
;;;74                 // Hack to add the time for computing the benchmark to the compiled times
;;;75                 if(benchmarks.get_size() < benchmarks.get_maximumSize()) {
;;;76                   BenchmarkElement newElement("ComputeBenchmarkResults");
;;;77                   newElement.inclusive_mean = lastComputeBenchmarkResults_elapsedTime;
;;;78                   newElement.inclusive_min = lastComputeBenchmarkResults_elapsedTime;
;;;79                   newElement.inclusive_max = lastComputeBenchmarkResults_elapsedTime;
;;;80                   newElement.inclusive_total = lastComputeBenchmarkResults_elapsedTime;
;;;81                   newElement.exclusive_mean = lastComputeBenchmarkResults_elapsedTime;
;;;82                   newElement.exclusive_min = lastComputeBenchmarkResults_elapsedTime;
;;;83                   newElement.exclusive_max = lastComputeBenchmarkResults_elapsedTime;
;;;84                   newElement.exclusive_total = lastComputeBenchmarkResults_elapsedTime;
;;;85                   newElement.numEvents = 1;
;;;86     
;;;87                   const s32 numBenchmarks = benchmarks.get_size();
;;;88                   BenchmarkElement * restrict pBenchmarks = benchmarks.Pointer(0);
;;;89     
;;;90                   pBenchmarks[totalTimeIndex].inclusive_total += lastComputeBenchmarkResults_elapsedTime;
;;;91                   
;;;92                   benchmarks.PushBack(newElement);
;;;93                 }
;;;94     
;;;95                 toSend.PushBack<BenchmarkElement>("Benchmarks", benchmarks);
;;;96               } // if(totalTimeIndex >= 0)
;;;97     
;;;98               InitBenchmarking();
;;;99     
;;;100              computeBenchmarkResults_end = GetTimeU32();
;;;101    
;;;102              BeginBenchmark("TotalTime");
;;;103    
;;;104              BeginBenchmark("UARTPutMessage");
;;;105    
;;;106              s32 startIndex;
;;;107              u8 * bufferStart = reinterpret_cast<u8*>(toSend.get_memoryStack().get_validBufferStart(startIndex));
;;;108              const s32 validUsedBytes = toSend.get_memoryStack().get_usedBytes() - startIndex;
;;;109    
;;;110              const s32 startDiff = static_cast<s32>( reinterpret_cast<size_t>(bufferStart) - reinterpret_cast<size_t>(toSend.get_memoryStack().get_buffer()) );
;;;111              const s32 endDiff = toSend.get_memoryStack().get_totalBytes() - toSend.get_memoryStack().get_usedBytes();
;;;112    
;;;113              if( (startDiff >= SERIALIZED_BUFFER_HEADER_LENGTH) && (endDiff >= SERIALIZED_BUFFER_FOOTER_LENGTH) ) {
;;;114                memcpy(bufferStart - SERIALIZED_BUFFER_HEADER_LENGTH, &Embedded::SERIALIZED_BUFFER_HEADER[0], SERIALIZED_BUFFER_HEADER_LENGTH);
;;;115                memcpy(bufferStart + validUsedBytes, &Embedded::SERIALIZED_BUFFER_FOOTER[0], SERIALIZED_BUFFER_FOOTER_LENGTH);
;;;116    
;;;117                Anki::Cozmo::HAL::UARTPutMessage(
;;;118                  0,
;;;119                  bufferStart - SERIALIZED_BUFFER_HEADER_LENGTH,
;;;120                  validUsedBytes + SERIALIZED_BUFFER_HEADER_LENGTH + SERIALIZED_BUFFER_FOOTER_LENGTH);
;;;121              }
;;;122    
;;;123              EndBenchmark("UARTPutMessage");
;;;124    #endif // SEND_DEBUG_STREAM
;;;125    
;;;126              return RESULT_OK;
;;;127            }
000002  4770              BX       lr
;;;128    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream15SendBinaryImageERKNS_8Embedded5ArrayIhEEPKcRKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersENS3_11MemoryStackESH_SH_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream15SendBinaryImageERKNS_8Embedded5ArrayIhEEPKcRKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersENS3_11MemoryStackESH_SH_ PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendBinaryImage(const Anki::Embedded::Array<unsigned char>&, const char*, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, const Anki::Cozmo::VisionSystem::TrackerParameters&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;327    
;;;328            Result SendBinaryImage(const Array<u8> &grayscaleImage, const char * objectName, const Tracker &tracker, const TrackerParameters &parameters, MemoryStack ccmScratch, MemoryStack onchipScratch, MemoryStack offchipScratch)
000000  2000              MOVS     r0,#0
;;;329            {
;;;330              Result result = RESULT_OK;
;;;331    #if SEND_DEBUG_STREAM && DOCKING_ALGORITHM == DOCKING_BINARY_TRACKER
;;;332              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;333    
;;;334              EdgeLists edgeLists;
;;;335    
;;;336              edgeLists.imageHeight = grayscaleImage.get_size(0);
;;;337              edgeLists.imageWidth = grayscaleImage.get_size(1);
;;;338    
;;;339              edgeLists.xDecreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;340              edgeLists.xIncreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;341              edgeLists.yDecreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;342              edgeLists.yIncreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;343    
;;;344              DetectBlurredEdges_GrayvalueThreshold(
;;;345                grayscaleImage,
;;;346                60,
;;;347                parameters.edgeDetectionParams_update.minComponentWidth, parameters.edgeDetectionParams_update.everyNLines,
;;;348                edgeLists);
;;;349    
;;;350              edgeLists.Serialize("Edge List", debugStreamBuffer_);
;;;351    
;;;352              const s32 height = Vision::CameraResInfo[debugStreamResolution_].height;
;;;353              const s32 width  = Vision::CameraResInfo[debugStreamResolution_].width;
;;;354    
;;;355              Array<u8> imageSmall(height, width, offchipScratch);
;;;356    
;;;357              DownsampleHelper(grayscaleImage, imageSmall, ccmScratch);
;;;358    
;;;359              debugStreamBuffer_.PushBack(objectName, imageSmall);
;;;360    
;;;361              result = SendBuffer(debugStreamBuffer_, offchipScratch);
;;;362    
;;;363    #endif // #if SEND_DEBUG_STREAM
;;;364    
;;;365              return result;
;;;366            }
000002  4770              BX       lr
;;;367    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendBenchmarksOnlyENS_8Embedded11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream18SendBenchmarksOnlyENS_8Embedded11MemoryStackE PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendBenchmarksOnly(Anki::Embedded::MemoryStack)
;;;128    
;;;129            Result SendBenchmarksOnly(MemoryStack scratch)
000000  b500              PUSH     {lr}
;;;130            {
000002  b087              SUB      sp,sp,#0x1c
;;;131              return SendBuffer(debugStreamBuffer_, scratch);
000004  4601              MOV      r1,r0
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       _ZN4Anki8Embedded11MemoryStackC1ERKS1_ ; Anki::Embedded::MemoryStack::MemoryStack(const Anki::Embedded::MemoryStack&)
;;;132            }
00000c  b007              ADD      sp,sp,#0x1c
00000e  2000              MOVS     r0,#0
000010  bd00              POP      {pc}
;;;133            
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendFaceDetectionsERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_9RectangleIiEEEEiNS3_11MemoryStackESE_SE_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream18SendFaceDetectionsERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_9RectangleIiEEEEiNS3_11MemoryStackESE_SE_ PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendFaceDetections(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::Rectangle<int>>&, int, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;246    
;;;247            Result SendFaceDetections(
000000  2000              MOVS     r0,#0
;;;248              const Array<u8> &image,
;;;249              const FixedLengthList<Rectangle<s32> > &detectedFaces,
;;;250              const s32 detectedFacesImageWidth,
;;;251              MemoryStack ccmScratch,
;;;252              MemoryStack onchipScratch,
;;;253              MemoryStack offchipScratch)
;;;254            {
;;;255              Result result = RESULT_OK;
;;;256    
;;;257    #if SEND_DEBUG_STREAM
;;;258              const s32 height = Vision::CameraResInfo[debugStreamResolution_].height;
;;;259              const s32 width  = Vision::CameraResInfo[debugStreamResolution_].width;
;;;260    
;;;261              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;262    
;;;263              if(detectedFaces.get_size() > 0) {
;;;264                debugStreamBuffer_.PushBack<s32>("detectedFacesImageWidth", &detectedFacesImageWidth, 1);
;;;265                debugStreamBuffer_.PushBack<Rectangle<s32> >("detectedFaces", detectedFaces);
;;;266              }
;;;267    
;;;268              frameNumber++;
;;;269    
;;;270              Array<u8> imageSmall(height, width, offchipScratch);
;;;271              DownsampleHelper(image, imageSmall, ccmScratch);
;;;272              debugStreamBuffer_.PushBack("Robot Image", imageSmall);
;;;273    
;;;274              result = SendBuffer(debugStreamBuffer_, offchipScratch);
;;;275    
;;;276              // The UART can't handle this at full rate, so wait a bit between each frame
;;;277              if(debugStreamResolution_ == Vision::CAMERA_RES_QVGA) {
;;;278                //HAL::MicroWait(1000000);
;;;279              }
;;;280    
;;;281    #endif // #if SEND_DEBUG_STREAM
;;;282    
;;;283              return result;
;;;284            } // static Result SendFaceDetections()
000002  4770              BX       lr
;;;285    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendTrackingUpdateERKNS_8Embedded5ArrayIhEERKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersEhfNS3_11MemoryStackESF_SF_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream18SendTrackingUpdateERKNS_8Embedded5ArrayIhEERKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersEhfNS3_11MemoryStackESF_SF_ PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendTrackingUpdate(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::TemplateTracker::LucasKanadeTracker_SampledPlanar6dof&, const Anki::Cozmo::VisionSystem::TrackerParameters&, unsigned char, float, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;169    
;;;170            Result SendTrackingUpdate(
000000  2000              MOVS     r0,#0
;;;171              const Array<u8> &image,
;;;172              const Tracker &tracker,
;;;173              const TrackerParameters &parameters,
;;;174              const u8 meanGrayvalueError,
;;;175              const f32 percentMatchingGrayvalues,
;;;176              MemoryStack ccmScratch,
;;;177              MemoryStack onchipScratch,
;;;178              MemoryStack offchipScratch)
;;;179            {
;;;180              Result result = RESULT_OK;
;;;181    
;;;182    #if SEND_DEBUG_STREAM
;;;183              const s32 height = Vision::CameraResInfo[debugStreamResolution_].height;
;;;184              const s32 width  = Vision::CameraResInfo[debugStreamResolution_].width;
;;;185    
;;;186              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;187    
;;;188              tracker.get_transformation().Serialize("Transformation", debugStreamBuffer_);
;;;189    
;;;190              debugStreamBuffer_.PushBack<u8>("meanGrayvalueError", &meanGrayvalueError, 1);
;;;191    
;;;192              debugStreamBuffer_.PushBack<f32>("percentMatchingGrayvalues", &percentMatchingGrayvalues, 1);
;;;193    
;;;194              frameNumber++;
;;;195    
;;;196              if(frameNumber % SEND_EVERY_N_FRAMES != 0) {
;;;197                return RESULT_OK;
;;;198              }
;;;199    
;;;200    #if DOCKING_ALGORITHM == DOCKING_BINARY_TRACKER
;;;201              EdgeLists edgeLists;
;;;202    
;;;203              edgeLists.imageHeight = image.get_size(0);
;;;204              edgeLists.imageWidth = image.get_size(1);
;;;205    
;;;206              edgeLists.xDecreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;207              edgeLists.xIncreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;208              edgeLists.yDecreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;209              edgeLists.yIncreasing = FixedLengthList<Point<s16> >(parameters.edgeDetectionParams_update.maxDetectionsPerType, offchipScratch);
;;;210    
;;;211              if(parameters.edgeDetectionParams_update.type == TemplateTracker::BinaryTracker::EDGE_TYPE_GRAYVALUE) {
;;;212                DetectBlurredEdges_GrayvalueThreshold(
;;;213                  image,
;;;214                  tracker.get_lastUsedGrayvalueThrehold(),
;;;215                  parameters.edgeDetectionParams_update.minComponentWidth, parameters.edgeDetectionParams_update.everyNLines,
;;;216                  edgeLists);
;;;217              } else {
;;;218                DetectBlurredEdges_DerivativeThreshold(
;;;219                  image,
;;;220                  parameters.edgeDetectionParams_update.combHalfWidth, parameters.edgeDetectionParams_update.combResponseThreshold, parameters.edgeDetectionParams_update.everyNLines,
;;;221                  edgeLists);
;;;222              }
;;;223    
;;;224              edgeLists.Serialize("Edge List", debugStreamBuffer_);
;;;225    
;;;226              Array<u8> imageSmall(height, width, offchipScratch);
;;;227              DownsampleHelper(image, imageSmall, ccmScratch);
;;;228              debugStreamBuffer_.PushBack("Robot Image", imageSmall);
;;;229    #else
;;;230              Array<u8> imageSmall(height, width, offchipScratch);
;;;231              DownsampleHelper(image, imageSmall, ccmScratch);
;;;232              debugStreamBuffer_.PushBack("Robot Image", imageSmall);
;;;233    #endif
;;;234    
;;;235              result = SendBuffer(debugStreamBuffer_, offchipScratch);
;;;236    
;;;237              // The UART can't handle this at full rate, so wait a bit between each frame
;;;238              if(debugStreamResolution_ == Vision::CAMERA_RES_QVGA) {
;;;239                //HAL::MicroWait(1000000);
;;;240              }
;;;241    
;;;242    #endif // #if SEND_DEBUG_STREAM
;;;243    
;;;244              return result;
;;;245            } // static Result SendTrackingUpdate()
000002  4770              BX       lr
;;;246    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream21SendFiducialDetectionERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_12VisionMarkerEEENS3_11MemoryStackESD_SD_||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream21SendFiducialDetectionERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_12VisionMarkerEEENS3_11MemoryStackESD_SD_ PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendFiducialDetection(const Anki::Embedded::Array<unsigned char>&, const Anki::Embedded::FixedLengthList<Anki::Embedded::VisionMarker>&, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack, Anki::Embedded::MemoryStack)
;;;133            
;;;134            Result SendFiducialDetection(const Array<u8> &image, const FixedLengthList<VisionMarker> &markers, MemoryStack ccmScratch, MemoryStack onchipScratch, MemoryStack offchipScratch)
000000  2000              MOVS     r0,#0
;;;135            {
;;;136              Result result = RESULT_OK;
;;;137    
;;;138    #if SEND_DEBUG_STREAM
;;;139              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;140    
;;;141              if(markers.get_size() != 0) {
;;;142                const s32 numMarkers = markers.get_size();
;;;143                const VisionMarker * pMarkers = markers.Pointer(0);
;;;144    
;;;145                char objectName[64];
;;;146                for(s32 i=0; i<numMarkers; i++) {
;;;147                  snprintf(objectName, 64, "Marker%d", i);
;;;148                  pMarkers[i].Serialize(objectName, debugStreamBuffer_);
;;;149                }
;;;150              }
;;;151    
;;;152              const s32 height = Vision::CameraResInfo[debugStreamResolution_].height;
;;;153              const s32 width  = Vision::CameraResInfo[debugStreamResolution_].width;
;;;154    
;;;155              Array<u8> imageSmall(height, width, offchipScratch);
;;;156              DownsampleHelper(image, imageSmall, ccmScratch);
;;;157              debugStreamBuffer_.PushBack("Robot Image", imageSmall);
;;;158    
;;;159              result = SendBuffer(debugStreamBuffer_, offchipScratch);
;;;160    
;;;161              // The UART can't handle this at full rate, so wait a bit between each frame
;;;162              if(debugStreamResolution_ == Vision::CAMERA_RES_QVGA) {
;;;163                //HAL::MicroWait(1000000);
;;;164              }
;;;165    #endif // #if SEND_DEBUG_STREAM
;;;166    
;;;167              return result;
;;;168            } // Result SendDebugStream_Detection()
000002  4770              BX       lr
;;;169    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream9SendArrayERKNS_8Embedded5ArrayIhEEPKcNS3_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream9SendArrayERKNS_8Embedded5ArrayIhEEPKcNS3_11MemoryStackE PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendArray(const Anki::Embedded::Array<unsigned char>&, const char*, Anki::Embedded::MemoryStack)
;;;304    
;;;305            Result SendArray(const Array<u8> &array, const char * objectName, MemoryStack scratch)
000000  2000              MOVS     r0,#0
;;;306            {
;;;307    #if SEND_DEBUG_STREAM
;;;308              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;309              debugStreamBuffer_.PushBack(objectName, array);
;;;310              return SendBuffer(debugStreamBuffer_, scratch);
;;;311    #else
;;;312              return RESULT_OK;
;;;313    #endif // #if SEND_DEBUG_STREAM
;;;314            }
000002  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream9SendImageERKNS_8Embedded5ArrayIhEEfPKcNS3_11MemoryStackE||, CODE, READONLY, ALIGN=1

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream9SendImageERKNS_8Embedded5ArrayIhEEfPKcNS3_11MemoryStackE PROC ; Anki::Cozmo::VisionSystem::DebugStream::SendImage(const Anki::Embedded::Array<unsigned char>&, float, const char*, Anki::Embedded::MemoryStack)
;;;315    
;;;316            Result SendImage(const Array<u8> &array, const f32 exposureTime, const char * objectName, MemoryStack scratch)
000000  2000              MOVS     r0,#0
;;;317            {
;;;318    #if SEND_DEBUG_STREAM
;;;319              debugStreamBuffer_ = SerializedBuffer(&debugStreamBufferData_[0], DEBUG_STREAM_BUFFER_SIZE);
;;;320              debugStreamBuffer_.PushBack(objectName, array);
;;;321              debugStreamBuffer_.PushBack<f32>("Exposure time", &exposureTime, 1);
;;;322              return SendBuffer(debugStreamBuffer_, scratch);
;;;323    #else
;;;324              return RESULT_OK;
;;;325    #endif // #if SEND_DEBUG_STREAM
;;;326            }
000002  4770              BX       lr
;;;327    
                          ENDP


                          AREA ||i.__sti___21_visionDebugStream_cpp_7de1fc27||, CODE, READONLY, ALIGN=2

                  __sti___21_visionDebugStream_cpp_7de1fc27 PROC
000000  4804              LDR      r0,|L10.20|
000002  ed9f0a03          VLDR     s0,|L10.16|
000006  ed800a00          VSTR     s0,[r0,#0]
00000a  4803              LDR      r0,|L10.24|
00000c  f7ffbffe          B.W      _ZN4Anki8Embedded16SerializedBufferC1Ev ; Anki::Embedded::SerializedBuffer::SerializedBuffer()
                          ENDP

                  |L10.16|
000010  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L10.20|
                          DCD      ||.data||
                  |L10.24|
                          DCD      ||.bss||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream10SendBufferERNS_8Embedded16SerializedBufferENS3_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream10SendBufferERNS_8Embedded16SerializedBufferENS3_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendBenchmarksOnlyENS_8Embedded11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendBenchmarksOnlyENS_8Embedded11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream21SendFiducialDetectionERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_12VisionMarkerEEENS3_11MemoryStackESD_SD_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream21SendFiducialDetectionERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_12VisionMarkerEEENS3_11MemoryStackESD_SD_||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendTrackingUpdateERKNS_8Embedded5ArrayIhEERKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersEhfNS3_11MemoryStackESF_SF_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendTrackingUpdateERKNS_8Embedded5ArrayIhEERKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersEhfNS3_11MemoryStackESF_SF_||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendFaceDetectionsERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_9RectangleIiEEEEiNS3_11MemoryStackESE_SE_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream18SendFaceDetectionsERKNS_8Embedded5ArrayIhEERKNS3_15FixedLengthListINS3_9RectangleIiEEEEiNS3_11MemoryStackESE_SE_||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream9SendArrayERKNS_8Embedded5ArrayIhEEPKcNS3_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream9SendArrayERKNS_8Embedded5ArrayIhEEPKcNS3_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream9SendImageERKNS_8Embedded5ArrayIhEEfPKcNS3_11MemoryStackE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream9SendImageERKNS_8Embedded5ArrayIhEEfPKcNS3_11MemoryStackE||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream15SendBinaryImageERKNS_8Embedded5ArrayIhEEPKcRKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersENS3_11MemoryStackESH_SH_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream15SendBinaryImageERKNS_8Embedded5ArrayIhEEPKcRKNS3_15TemplateTracker36LucasKanadeTracker_SampledPlanar6dofERKNS1_17TrackerParametersENS3_11MemoryStackESH_SH_||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo12VisionSystem11DebugStream10InitializeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo12VisionSystem11DebugStream10InitializeEv||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i.__sti___21_visionDebugStream_cpp_7de1fc27||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___21_visionDebugStream_cpp_7de1fc27||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ZN4Anki5Cozmo12VisionSystem11DebugStream45_GLOBAL__N__21_visionDebugStream_cpp_7de1fc2718debugStreamBuffer_E ; Anki::Cozmo::VisionSystem::DebugStream::<unnamed>::debugStreamBuffer_
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___21_visionDebugStream_cpp_7de1fc27
