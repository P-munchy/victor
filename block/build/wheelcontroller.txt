; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\build\wheelcontroller.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\wheelcontroller.d --cpu=Cortex-M4.fp --apcs=interwork -Otime -I.\arm_hal -I.\arm_hal\lib -I..\include -I..\coretech\common\include -I..\coretech\messaging\include -I..\coretech\planning\include -I..\coretech\vision\include -I.\supervisor\src -I..\..\coretech-external\heatshrink -IC:\Keil\ARM\Pack\ARM\CMSIS\3.20.4\Device\ARM\ARMCM4\Include -I.\include -DSTM32F401xC -DUSE_STDPERIPH_DRIVER -DSTM32F411xE -DCOZMO_ROBOT -DROBOT_HARDWARE -DCORETECH_ROBOT -DOFFBOARD_VISION -DSTM32F401xx --omf_browse=.\build\wheelcontroller.crf supervisor\src\wheelController.cpp]
                          THUMB

                          AREA ||i._ZN4Anki5Cozmo15WheelController12SetCoastModeEb||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController12SetCoastModeEb PROC ; Anki::Cozmo::WheelController::SetCoastMode(bool)
;;;304        // wheel controllers
;;;305        void SetCoastMode(const bool isOn)
000000  4905              LDR      r1,|L1.24|
;;;306        {
000002  2800              CMP      r0,#0
;;;307          coastMode_ = isOn;
000004  7008              STRB     r0,[r1,#0]
;;;308          
;;;309          if(coastMode_) {
;;;310            ResetIntegralGainSums();
;;;311          }
;;;312        }
000006  bf08              IT       EQ
000008  4770              BXEQ     lr
00000a  ed9f0a04          VLDR     s0,|L1.28|
00000e  ed810a0c          VSTR     s0,[r1,#0x30]
000012  ed810a0d          VSTR     s0,[r1,#0x34]
000016  4770              BX       lr
;;;313    
                          ENDP

                  |L1.24|
                          DCD      ||.data||
                  |L1.28|
00001c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv PROC ; Anki::Cozmo::WheelController::AreWheelsPowered()
;;;313    
;;;314        bool AreWheelsPowered()
000000  4808              LDR      r0,|L2.36|
;;;315        {
;;;316          return (power_l_ != 0 || power_r_ != 0);
000002  ed900a06          VLDR     s0,[r0,#0x18]
000006  eeb50ac0          VCMPE.F32 s0,#0.0
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  bf03              ITTTE    EQ
000010  ed900a07          VLDREQ   s0,[r0,#0x1c]
000014  eeb50ac0          VCMPEEQ.F32 s0,#0.0
000018  eef1fa10          VMRSEQ   APSR_nzcv,FPSCR
00001c  2001              MOVNE    r0,#1
00001e  bf08              IT       EQ
000020  2000              MOVEQ    r0,#0
;;;317        }
000022  4770              BX       lr
;;;318        
                          ENDP

                  |L2.36|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController21ComputeLeftWheelPowerEfff||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo15WheelController21ComputeLeftWheelPowerEfff PROC ; Anki::Cozmo::WheelController::ComputeLeftWheelPower(float, float, float)
;;;88         
;;;89         f32 ComputeLeftWheelPower(f32 desired_speed_mmps, f32 error, f32 error_sum)
000000  b510              PUSH     {r4,lr}
;;;90         {
000002  ed2d8b08          VPUSH    {d8-d11}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  eef08a41          VMOV.F32 s17,s2
;;;91           // 3rd order polynomial
;;;92           // For x = speed in mm/s,
;;;93           // power = 5E-7x^3 - 0.0001x^2 + 0.0082x + 0.0149
;;;94           f32 x = ABS(desired_speed_mmps);
00000e  eeb58ac0          VCMPE.F32 s16,#0.0
000012  eeb0aa60          VMOV.F32 s20,s1                ;90
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001a  bfac              ITE      GE
00001c  eeb00a48          VMOVGE.F32 s0,s16
000020  eeb10a48          VNEGLT.F32 s0,s16
;;;95           f32 x2 = x*x;
000024  ee20ba00          VMUL.F32 s22,s0,s0
;;;96           f32 x3 = x*x2;
;;;97           
;;;98     #     ifdef SIMULATOR
;;;99           f32 out_ol = 5E-7 * x3 - 0.0001 * x2 + 0.0082 * x;
;;;100    #     else
;;;101    #       ifdef COZMO_TREADS
;;;102            f32 out_ol = 8.4E-7 * x3 - 0.000166336 * x2 + 0.01343098 * x;    // #2: With treads
000028  ee100a10          VMOV     r0,s0
00002c  ee60aa0b          VMUL.F32 s21,s0,s22            ;96
000030  f7fffffe          BL       __aeabi_f2d
000034  ed9f1b20          VLDR     d1,|L3.184|
000038  ec532b11          VMOV     r2,r3,d1
00003c  f7fffffe          BL       __aeabi_dmul
000040  ec410b19          VMOV     d9,r0,r1
000044  ee1b0a10          VMOV     r0,s22
000048  f7fffffe          BL       __aeabi_f2d
00004c  ed9f0b1c          VLDR     d0,|L3.192|
000050  ec532b10          VMOV     r2,r3,d0
000054  f7fffffe          BL       __aeabi_dmul
000058  ec410b1b          VMOV     d11,r0,r1
00005c  ee1a0a90          VMOV     r0,s21
000060  f7fffffe          BL       __aeabi_f2d
000064  ed9f0b18          VLDR     d0,|L3.200|
000068  ec532b10          VMOV     r2,r3,d0
00006c  f7fffffe          BL       __aeabi_dmul
000070  ec532b1b          VMOV     r2,r3,d11
000074  f7fffffe          BL       __aeabi_dsub
000078  ec532b19          VMOV     r2,r3,d9
00007c  f7fffffe          BL       __aeabi_dadd
000080  f7fffffe          BL       __aeabi_d2f
000084  ee000a10          VMOV     s0,r0
;;;103    #       else
;;;104            f32 out_ol = 5.12E-7 * x3 - 0.000107221 * x2 + 0.008739278 * x;  // #1: No treads
;;;105    #       endif
;;;106    #     endif
;;;107          
;;;108          if (desired_speed_mmps < 0) {
000088  eeb58ac0          VCMPE.F32 s16,#0.0
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;109            out_ol *= -1;
000090  bf38              IT       CC
000092  eeb10a40          VNEGCC.F32 s0,s0
;;;110          }
;;;111          f32 out_corr = ( (Kp_ * error) + (error_sum * Ki_) );
000096  480e              LDR      r0,|L3.208|
000098  edd00a01          VLDR     s1,[r0,#4]
00009c  ed901a02          VLDR     s2,[r0,#8]
0000a0  ee600a8a          VMUL.F32 s1,s1,s20
0000a4  ee480a81          VMLA.F32 s1,s17,s2
;;;112          f32 out_total = out_ol + out_corr;
;;;113          return out_total;
;;;114        }
0000a8  ecbd8b08          VPOP     {d8-d11}
0000ac  ee300a20          VADD.F32 s0,s0,s1              ;112
0000b0  bd10              POP      {r4,pc}
;;;115    
                          ENDP

0000b2  0000              DCW      0x0000
                          DCD      0x00000000
                  |L3.184|
0000b8  9ed36a4b          DCFD     0x3f8b81b39ed36a4b ; 0.01343098
0000bc  3f8b81b3
                  |L3.192|
0000c0  5c3c4990          DCFD     0x3f25cd4f5c3c4990 ; 0.000166336
0000c4  3f25cd4f
                  |L3.200|
0000c8  88dfb80c          DCFD     0x3eac2f8b88dfb80c ; 8.4e-07
0000cc  3eac2f8b
                  |L3.208|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController21GetDesiredWheelSpeedsERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController21GetDesiredWheelSpeedsERfS2_ PROC ; Anki::Cozmo::WheelController::GetDesiredWheelSpeeds(float&, float&)
;;;270        //Get the wheel speeds in mm/sec
;;;271        void GetDesiredWheelSpeeds(f32 &leftws, f32 &rightws)
000000  4a04              LDR      r2,|L4.20|
;;;272        {
;;;273          leftws  = desiredWheelSpeedL_;
000002  ed920a04          VLDR     s0,[r2,#0x10]
000006  ed800a00          VSTR     s0,[r0,#0]
;;;274          rightws = desiredWheelSpeedR_;
00000a  ed920a05          VLDR     s0,[r2,#0x14]
00000e  ed810a00          VSTR     s0,[r1,#0]
;;;275        }
000012  4770              BX       lr
;;;276        
                          ENDP

                  |L4.20|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController21ResetIntegralGainSumsEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController21ResetIntegralGainSumsEv PROC ; Anki::Cozmo::WheelController::ResetIntegralGainSums()
;;;319        
;;;320        void ResetIntegralGainSums(void)
000000  4804              LDR      r0,|L5.20|
;;;321        {
;;;322          error_sumL_ = 0;
000002  ed9f0a03          VLDR     s0,|L5.16|
000006  ed800a0c          VSTR     s0,[r0,#0x30]
;;;323          error_sumR_ = 0;
00000a  ed800a0d          VSTR     s0,[r0,#0x34]
;;;324        }
00000e  4770              BX       lr
;;;325        
                          ENDP

                  |L5.16|
000010  00000000          DCFS     0x00000000 ; 0
                  |L5.20|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController21SetDesiredWheelSpeedsEff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController21SetDesiredWheelSpeedsEff PROC ; Anki::Cozmo::WheelController::SetDesiredWheelSpeeds(float, float)
;;;277        //Set the wheel speeds in mm/sec
;;;278        void SetDesiredWheelSpeeds(f32 leftws, f32 rightws)
000000  4802              LDR      r0,|L6.12|
;;;279        {
;;;280          desiredWheelSpeedL_ = leftws;
000002  ed800a04          VSTR     s0,[r0,#0x10]
;;;281          desiredWheelSpeedR_ = rightws;
000006  edc00a05          VSTR     s1,[r0,#0x14]
;;;282        }
00000a  4770              BX       lr
;;;283        
                          ENDP

                  |L6.12|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController22ComputeRightWheelPowerEfff||, CODE, READONLY, ALIGN=3

                  _ZN4Anki5Cozmo15WheelController22ComputeRightWheelPowerEfff PROC ; Anki::Cozmo::WheelController::ComputeRightWheelPower(float, float, float)
;;;115    
;;;116        f32 ComputeRightWheelPower(f32 desired_speed_mmps, f32 error, f32 error_sum)
000000  b510              PUSH     {r4,lr}
;;;117        {
000002  ed2d8b08          VPUSH    {d8-d11}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  eef08a41          VMOV.F32 s17,s2
;;;118          // 3rd order polynomial
;;;119          // For x = speed in mm/s,
;;;120          // power = 4E-7x^3 - 0.00008x^2 + 0.0072x + 0.0203
;;;121          f32 x = ABS(desired_speed_mmps);
00000e  eeb58ac0          VCMPE.F32 s16,#0.0
000012  eeb0aa60          VMOV.F32 s20,s1                ;117
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001a  bfac              ITE      GE
00001c  eeb00a48          VMOVGE.F32 s0,s16
000020  eeb10a48          VNEGLT.F32 s0,s16
;;;122          f32 x2 = x*x;
000024  ee20ba00          VMUL.F32 s22,s0,s0
;;;123          f32 x3 = x*x2;
;;;124          
;;;125    #     ifdef SIMULATOR
;;;126          f32 out_ol = 5E-7 * x3 - 0.0001 * x2 + 0.0082 * x;
;;;127    #     else
;;;128    #       ifdef COZMO_TREADS
;;;129            f32 out_ol = 4.824E-7 * x3 - 8.98123E-5 * x2 + 0.007008705 * x;        // #2: With treads
000028  ee100a10          VMOV     r0,s0
00002c  ee60aa0b          VMUL.F32 s21,s0,s22            ;123
000030  f7fffffe          BL       __aeabi_f2d
000034  ed9f1b20          VLDR     d1,|L7.184|
000038  ec532b11          VMOV     r2,r3,d1
00003c  f7fffffe          BL       __aeabi_dmul
000040  ec410b19          VMOV     d9,r0,r1
000044  ee1b0a10          VMOV     r0,s22
000048  f7fffffe          BL       __aeabi_f2d
00004c  ed9f0b1c          VLDR     d0,|L7.192|
000050  ec532b10          VMOV     r2,r3,d0
000054  f7fffffe          BL       __aeabi_dmul
000058  ec410b1b          VMOV     d11,r0,r1
00005c  ee1a0a90          VMOV     r0,s21
000060  f7fffffe          BL       __aeabi_f2d
000064  ed9f0b18          VLDR     d0,|L7.200|
000068  ec532b10          VMOV     r2,r3,d0
00006c  f7fffffe          BL       __aeabi_dmul
000070  ec532b1b          VMOV     r2,r3,d11
000074  f7fffffe          BL       __aeabi_dsub
000078  ec532b19          VMOV     r2,r3,d9
00007c  f7fffffe          BL       __aeabi_dadd
000080  f7fffffe          BL       __aeabi_d2f
000084  ee000a10          VMOV     s0,r0
;;;130    #       else
;;;131            f32 out_ol = 3.97E-7 * x3 - 0.000084032 * x2 + 0.008001138 * x;   // #1: No treads
;;;132    #       endif
;;;133    #     endif
;;;134          
;;;135          if (desired_speed_mmps < 0) {
000088  eeb58ac0          VCMPE.F32 s16,#0.0
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR
;;;136            out_ol *= -1;
000090  bf38              IT       CC
000092  eeb10a40          VNEGCC.F32 s0,s0
;;;137          }
;;;138          f32 out_corr = ( (Kp_ * error) + (error_sum * Ki_) );
000096  480e              LDR      r0,|L7.208|
000098  edd00a01          VLDR     s1,[r0,#4]
00009c  ed901a02          VLDR     s2,[r0,#8]
0000a0  ee600a8a          VMUL.F32 s1,s1,s20
0000a4  ee480a81          VMLA.F32 s1,s17,s2
;;;139          f32 out_total = out_ol + out_corr;
;;;140          return out_total;
;;;141          
;;;142        }
0000a8  ecbd8b08          VPOP     {d8-d11}
0000ac  ee300a20          VADD.F32 s0,s0,s1              ;139
0000b0  bd10              POP      {r4,pc}
;;;143        
                          ENDP

0000b2  0000              DCW      0x0000
                          DCD      0x00000000
                  |L7.184|
0000b8  ec326dbb          DCFD     0x3f7cb528ec326dbb ; 0.0070087049999999996
0000bc  3f7cb528
                  |L7.192|
0000c0  90ab5261          DCFD     0x3f178b3390ab5261 ; 8.9812299999999994e-05
0000c4  3f178b33
                  |L7.200|
0000c8  d187cafa          DCFD     0x3ea02fc8d187cafa ; 4.8240000000000003e-07
0000cc  3ea02fc8
                  |L7.208|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController22GetFilteredWheelSpeedsERfS2_||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController22GetFilteredWheelSpeedsERfS2_ PROC ; Anki::Cozmo::WheelController::GetFilteredWheelSpeeds(float&, float&)
;;;263        
;;;264        void GetFilteredWheelSpeeds(f32 &left, f32 &right)
000000  4a04              LDR      r2,|L8.20|
;;;265        {
;;;266          left = filterWheelSpeedL_;
000002  ed920a0a          VLDR     s0,[r2,#0x28]
000006  ed800a00          VSTR     s0,[r0,#0]
;;;267          right = filterWheelSpeedR_;
00000a  ed920a0b          VLDR     s0,[r2,#0x2c]
00000e  ed810a00          VSTR     s0,[r1,#0]
;;;268        }
000012  4770              BX       lr
;;;269        
                          ENDP

                  |L8.20|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController26utilSetVehicleOLTrajectoryEtt||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController26utilSetVehicleOLTrajectoryEtt PROC ; Anki::Cozmo::WheelController::utilSetVehicleOLTrajectory(unsigned short, unsigned short)
;;;285        //This will only work if the steering controller does not overwrite the values.
;;;286        void utilSetVehicleOLTrajectory( u16 radius, u16 vspeed )
000000  2800              CMP      r0,#0
;;;287        {
;;;288          
;;;289          //if the radius is zero, we can't compute the speeds and return without doing anything
;;;290          if (radius == 0) return;
;;;291          
;;;292          //if delta speed is positive, the left wheel is supposed to turn slower, it becomes the INNER wheel
;;;293          float leftspeed =  (float)vspeed * (1.0f - WHEEL_DIST_HALF_MM / radius);
;;;294          
;;;295          //if delta speed is positive, the right wheel is supposed to turn faster, it becomes the OUTER wheel
;;;296          float rightspeed = (float)vspeed * (1.0f + WHEEL_DIST_HALF_MM / radius);
;;;297          
;;;298          //Set the computed speeds to the wheels
;;;299          SetDesiredWheelSpeeds( (s16)leftspeed, (s16)rightspeed);
;;;300        }
000002  bf08              IT       EQ
000004  4770              BXEQ     lr
000006  ee000a10          VMOV     s0,r0                 ;293
00000a  eeb80a40          VCVT.F32.U32 s0,s0                 ;293
00000e  eddf1a1a          VLDR     s3,|L9.120|
000012  eec10a80          VDIV.F32 s1,s3,s0              ;293
000016  eeb70a00          VMOV.F32 s0,#1.00000000        ;293
00001a  ee301a60          VSUB.F32 s2,s0,s1              ;293
00001e  ee001a90          VMOV     s1,r1                 ;293
000022  eef80a60          VCVT.F32.U32 s1,s1                 ;293
000026  ee610a20          VMUL.F32 s1,s2,s1              ;293
00002a  ee010a10          VMOV     s2,r0                 ;296
00002e  eeb81a41          VCVT.F32.U32 s2,s2                 ;296
000032  eefd0ae0          VCVT.S32.F32 s1,s1                 ;299
000036  ee812a81          VDIV.F32 s4,s3,s2              ;296
00003a  ee100a90          VMOV     r0,s1                 ;299
00003e  b200              SXTH     r0,r0                 ;299
000040  ee000a90          VMOV     s1,r0                 ;299
000044  eef80ae0          VCVT.F32.S32 s1,s1                 ;299
000048  ee321a00          VADD.F32 s2,s4,s0              ;296
00004c  ee001a10          VMOV     s0,r1                 ;296
000050  eeb80a40          VCVT.F32.U32 s0,s0                 ;296
000054  ee210a00          VMUL.F32 s0,s2,s0              ;296
000058  eebd0ac0          VCVT.S32.F32 s0,s0                 ;299
00005c  ee100a10          VMOV     r0,s0                 ;299
000060  b200              SXTH     r0,r0                 ;299
000062  ee000a10          VMOV     s0,r0                 ;299
000066  4805              LDR      r0,|L9.124|
000068  eeb80ac0          VCVT.F32.S32 s0,s0                 ;299
00006c  edc00a04          VSTR     s1,[r0,#0x10]         ;299
000070  ed800a05          VSTR     s0,[r0,#0x14]         ;299
000074  4770              BX       lr
;;;301        
                          ENDP

000076  0000              DCW      0x0000
                  |L9.120|
000078  41becccd          DCFS     0x41becccd ; 23.850000381469727
                  |L9.124|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController27EncoderSpeedFilterIterationEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController27EncoderSpeedFilterIterationEv PROC ; Anki::Cozmo::WheelController::EncoderSpeedFilterIteration()
;;;236        // Runs one step of the wheel encoder filter;
;;;237        void EncoderSpeedFilterIteration(void)
000000  b510              PUSH     {r4,lr}
;;;238        {
;;;239          // Get encoder speed measurements
;;;240          measuredWheelSpeedL_ = Cozmo::HAL::MotorGetSpeed(HAL::MOTOR_LEFT_WHEEL);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
000008  eebd0ac0          VCVT.S32.F32 s0,s0
00000c  4c12              LDR      r4,|L10.88|
;;;241          measuredWheelSpeedR_ = Cozmo::HAL::MotorGetSpeed(HAL::MOTOR_RIGHT_WHEEL);
00000e  2001              MOVS     r0,#1
000010  ed840a08          VSTR     s0,[r4,#0x20]         ;240
000014  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorGetSpeedENS1_7MotorIDE ; Anki::Cozmo::HAL::MotorGetSpeed(Anki::Cozmo::HAL::MotorID)
000018  eebd0ac0          VCVT.S32.F32 s0,s0
;;;242          
;;;243          filterWheelSpeedL_ = (measuredWheelSpeedL_ *
00001c  ed9f1a0f          VLDR     s2,|L10.92|
000020  ed840a09          VSTR     s0,[r4,#0x24]         ;241
000024  edd40a08          VLDR     s1,[r4,#0x20]
000028  ed942a0a          VLDR     s4,[r4,#0x28]
;;;244                           (1.0f - ENCODER_FILTERING_COEFF) +
;;;245                           (filterWheelSpeedL_ * ENCODER_FILTERING_COEFF));
;;;246          filterWheelSpeedR_ = (measuredWheelSpeedR_ *
00002c  eeb80ac0          VCVT.F32.S32 s0,s0
000030  eef80ae0          VCVT.F32.S32 s1,s1                 ;243
000034  ee200a01          VMUL.F32 s0,s0,s2
000038  ee601a81          VMUL.F32 s3,s1,s2              ;243
00003c  eddf0a08          VLDR     s1,|L10.96|
000040  ee421a20          VMLA.F32 s3,s4,s1              ;243
000044  edc41a0a          VSTR     s3,[r4,#0x28]         ;243
000048  ed941a0b          VLDR     s2,[r4,#0x2c]
00004c  ee010a20          VMLA.F32 s0,s2,s1
000050  ed840a0b          VSTR     s0,[r4,#0x2c]
;;;247                           (1.0f - ENCODER_FILTERING_COEFF) +
;;;248                           (filterWheelSpeedR_ * ENCODER_FILTERING_COEFF));
;;;249          
;;;250        } // EncoderSpeedFilterIteration()
000054  bd10              POP      {r4,pc}
;;;251        
                          ENDP

000056  0000              DCW      0x0000
                  |L10.88|
                          DCD      ||.data||
                  |L10.92|
00005c  3dccccd0          DCFS     0x3dccccd0 ; 0.10000002384185791
                  |L10.96|
000060  3f666666          DCFS     0x3f666666 ; 0.89999997615814209

                          AREA ||i._ZN4Anki5Cozmo15WheelController3RunEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController3RunEv PROC ; Anki::Cozmo::WheelController::Run()
;;;145        //Run the wheel controller
;;;146        void Run()
000000  b510              PUSH     {r4,lr}
;;;147        {
;;;148          if(1) {
;;;149    //      if(!coastMode_ && !coastUntilStop_) {
;;;150            
;;;151    #if(DEBUG_WHEEL_CONTROLLER)
;;;152            PRINT(" WHEEL speeds: %f (L), %f (R)   (Curr: %d, %d)\n",
;;;153                    filterWheelSpeedL_, filterWheelSpeedR_,
;;;154                    measuredWheelSpeedL_, measuredWheelSpeedR_);
;;;155            PRINT(" WHEEL desired speeds: %f (L), %f (R)\n",
;;;156                    desiredWheelSpeedL_, desiredWheelSpeedR_);
;;;157    #endif
;;;158            
;;;159            //Compute the error between dessired and actual (filtered)
;;;160            f32 errorL = (desiredWheelSpeedL_ - filterWheelSpeedL_);
000002  4c6f              LDR      r4,|L11.448|
000004  ed2d8b04          VPUSH    {d8-d9}               ;147
000008  ed940a04          VLDR     s0,[r4,#0x10]
00000c  edd40a0a          VLDR     s1,[r4,#0x28]
;;;161            f32 errorR = (desiredWheelSpeedR_ - filterWheelSpeedR_);
000010  ed941a0b          VLDR     s2,[r4,#0x2c]
000014  ee309a60          VSUB.F32 s18,s0,s1             ;160
000018  edd40a05          VLDR     s1,[r4,#0x14]
00001c  ee708ac1          VSUB.F32 s17,s1,s2
;;;162            
;;;163            // Compute power to command to motors
;;;164            f32 outl = ComputeLeftWheelPower(desiredWheelSpeedL_, errorL, error_sumL_);
000020  ed941a0c          VLDR     s2,[r4,#0x30]
000024  eef00a49          VMOV.F32 s1,s18
000028  f7fffffe          BL       _ZN4Anki5Cozmo15WheelController21ComputeLeftWheelPowerEfff ; Anki::Cozmo::WheelController::ComputeLeftWheelPower(float, float, float)
00002c  eeb08a40          VMOV.F32 s16,s0
;;;165            f32 outr = ComputeRightWheelPower(desiredWheelSpeedR_, errorR, error_sumR_);
000030  ed941a0d          VLDR     s2,[r4,#0x34]
000034  eef00a68          VMOV.F32 s1,s17
000038  ed940a05          VLDR     s0,[r4,#0x14]
00003c  f7fffffe          BL       _ZN4Anki5Cozmo15WheelController22ComputeRightWheelPowerEfff ; Anki::Cozmo::WheelController::ComputeRightWheelPower(float, float, float)
;;;166            
;;;167            
;;;168    #if(DEBUG_WHEEL_CONTROLLER)
;;;169            PRINT(" WHEEL error: %f (L), %f (R)   error_sum: %f (L), %f (R)\n", errorL, errorR, error_sumL_, error_sumR_);
;;;170    #endif
;;;171            
;;;172            /*
;;;173             // If commanded speed is 0 and current speed is pretty slow, suppress motor drive and don't let error accumulate.
;;;174             // This was contributing to brief slow crawls after pushing or sudden stops.
;;;175             if (GetUserCommandedCurrentVehicleSpeed() == 0 && (GetCurrentMeasuredVehicleSpeed() < WHEEL_DEAD_BAND_MM_S || (desiredWheelSpeedL < 0 && desiredWheelSpeedR < 0))) {
;;;176             error_suml_ = 0;
;;;177             error_sumr_ = 0;
;;;178             outl = 0;
;;;179             outr = 0;
;;;180             ResetSpeedControllerIntegralError();
;;;181             }
;;;182             */
;;;183            
;;;184            power_l_ = CLIP(outl, -HAL::MOTOR_MAX_POWER, HAL::MOTOR_MAX_POWER);
000040  ee180a10          VMOV     r0,s16
000044  f1104f81          CMN      r0,#0x40800000
000048  bf34              ITE      CC
00004a  eef00a48          VMOVCC.F32 s1,s16
00004e  eeff0a00          VMOVCS.F32 s1,#-1.00000000
000052  ee100a90          VMOV     r0,s1
000056  f1b05f7e          CMP      r0,#0x3f800000
00005a  bfa8              IT       GE
00005c  eeb78a00          VMOVGE.F32 s16,#1.00000000
000060  da06              BGE      |L11.112|
000062  ee180a10          VMOV     r0,s16
000066  f1104f81          CMN      r0,#0x40800000
00006a  bf28              IT       CS
00006c  eebf8a00          VMOVCS.F32 s16,#-1.00000000
                  |L11.112|
000070  ed848a06          VSTR     s16,[r4,#0x18]
;;;185            power_r_ = CLIP(outr, -HAL::MOTOR_MAX_POWER, HAL::MOTOR_MAX_POWER);
000074  ee100a10          VMOV     r0,s0
000078  f1104f81          CMN      r0,#0x40800000
00007c  bf34              ITE      CC
00007e  eef00a40          VMOVCC.F32 s1,s0
000082  eeff0a00          VMOVCS.F32 s1,#-1.00000000
000086  ee100a90          VMOV     r0,s1
00008a  f1b05f7e          CMP      r0,#0x3f800000
00008e  bfa8              IT       GE
000090  eeb70a00          VMOVGE.F32 s0,#1.00000000
000094  da06              BGE      |L11.164|
000096  ee100a10          VMOV     r0,s0
00009a  f1104f81          CMN      r0,#0x40800000
00009e  bf28              IT       CS
0000a0  eebf0a00          VMOVCS.F32 s0,#-1.00000000
                  |L11.164|
0000a4  ed840a07          VSTR     s0,[r4,#0x1c]
;;;186            
;;;187            
;;;188            // If considered stopped, force stop
;;;189            if (ABS(desiredWheelSpeedL_) <= WHEEL_SPEED_COMMAND_STOPPED_MM_S) {
0000a8  ed940a04          VLDR     s0,[r4,#0x10]
0000ac  eeb50ac0          VCMPE.F32 s0,#0.0
0000b0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000b4  bfb8              IT       LT
0000b6  eeb10a40          VNEGLT.F32 s0,s0
0000ba  ee100a10          VMOV     r0,s0
;;;190              power_l_ = 0;
0000be  eddf0a41          VLDR     s1,|L11.452|
0000c2  f1b04f80          CMP      r0,#0x40000000        ;189
0000c6  bfdc              ITT      LE
0000c8  edc40a06          VSTRLE   s1,[r4,#0x18]
;;;191              error_sumL_ = 0;
0000cc  edc40a0c          VSTRLE   s1,[r4,#0x30]
;;;192            }
;;;193            
;;;194            
;;;195            // If considered stopped, force stop
;;;196            if (ABS(desiredWheelSpeedR_) <= WHEEL_SPEED_COMMAND_STOPPED_MM_S) {
0000d0  ed940a05          VLDR     s0,[r4,#0x14]
0000d4  eeb50ac0          VCMPE.F32 s0,#0.0
0000d8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000dc  bfb8              IT       LT
0000de  eeb10a40          VNEGLT.F32 s0,s0
0000e2  ee100a10          VMOV     r0,s0
0000e6  f1b04f80          CMP      r0,#0x40000000
;;;197              power_r_ = 0;
0000ea  bfdc              ITT      LE
0000ec  edc40a07          VSTRLE   s1,[r4,#0x1c]
;;;198              error_sumR_ = 0;
0000f0  edc40a0d          VSTRLE   s1,[r4,#0x34]
;;;199            }
;;;200            
;;;201            //Sum the error (integrate it). But ONLY, if we are not commading max output already
;;;202            //This should prevent the integral term to become to huge
;;;203            if (ABS(power_l_) < Cozmo::HAL::MOTOR_MAX_POWER) {
0000f4  ed940a06          VLDR     s0,[r4,#0x18]
0000f8  eeb50ac0          VCMPE.F32 s0,#0.0
0000fc  eef1fa10          VMRS     APSR_nzcv,FPSCR
000100  bfac              ITE      GE
000102  eef00a40          VMOVGE.F32 s1,s0
000106  eef10a40          VNEGLT.F32 s1,s0
00010a  ee101a90          VMOV     r1,s1
;;;204              error_sumL_ = CLIP(error_sumL_ + errorL, -MAX_ERROR_SUM,MAX_ERROR_SUM);
00010e  4a2e              LDR      r2,|L11.456|
000110  eddf2a2e          VLDR     s5,|L11.460|
000114  482e              LDR      r0,|L11.464|
000116  ed9f2a2f          VLDR     s4,|L11.468|
00011a  f1b15f7e          CMP      r1,#0x3f800000        ;203
00011e  da1a              BGE      |L11.342|
000120  edd40a0c          VLDR     s1,[r4,#0x30]
000124  ee301a89          VADD.F32 s2,s1,s18
000128  ee111a10          VMOV     r1,s2
00012c  4281              CMP      r1,r0
00012e  bf34              ITE      CC
000130  eef01a41          VMOVCC.F32 s3,s2
000134  eef01a42          VMOVCS.F32 s3,s4
000138  ee111a90          VMOV     r1,s3
00013c  4291              CMP      r1,r2
00013e  bfa8              IT       GE
000140  eeb01a62          VMOVGE.F32 s2,s5
000144  da05              BGE      |L11.338|
000146  ee111a10          VMOV     r1,s2
00014a  4281              CMP      r1,r0
00014c  bf28              IT       CS
00014e  eeb01a42          VMOVCS.F32 s2,s4
                  |L11.338|
000152  ed841a0c          VSTR     s2,[r4,#0x30]
                  |L11.342|
;;;205            }
;;;206            if (ABS(power_r_) < Cozmo::HAL::MOTOR_MAX_POWER) {
000156  ed941a07          VLDR     s2,[r4,#0x1c]
00015a  eeb51ac0          VCMPE.F32 s2,#0.0
00015e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000162  bfb8              IT       LT
000164  eeb11a41          VNEGLT.F32 s2,s2
000168  ee111a10          VMOV     r1,s2
00016c  f1b15f7e          CMP      r1,#0x3f800000
000170  da1a              BGE      |L11.424|
;;;207              error_sumR_ = CLIP(error_sumR_ + errorR, -MAX_ERROR_SUM,MAX_ERROR_SUM);
000172  edd40a0d          VLDR     s1,[r4,#0x34]
000176  ee700aa8          VADD.F32 s1,s1,s17
00017a  ee101a90          VMOV     r1,s1
00017e  4281              CMP      r1,r0
000180  bf34              ITE      CC
000182  eeb01a60          VMOVCC.F32 s2,s1
000186  eeb01a42          VMOVCS.F32 s2,s4
00018a  ee111a10          VMOV     r1,s2
00018e  4291              CMP      r1,r2
000190  bfa8              IT       GE
000192  eef00a62          VMOVGE.F32 s1,s5
000196  da05              BGE      |L11.420|
000198  ee101a90          VMOV     r1,s1
00019c  4281              CMP      r1,r0
00019e  bf28              IT       CS
0001a0  eef00a42          VMOVCS.F32 s1,s4
                  |L11.420|
0001a4  edc40a0d          VSTR     s1,[r4,#0x34]
                  |L11.424|
;;;208            }
;;;209          } else {
;;;210            // Coasting -- command 0 to motors
;;;211            power_l_ = 0;
;;;212            power_r_ = 0;
;;;213            error_sumL_ = 0;
;;;214            error_sumR_ = 0;
;;;215            
;;;216            // Cancel coast until stop if we've stopped.
;;;217            if (coastUntilStop_ &&
;;;218                SpeedController::GetCurrentMeasuredVehicleSpeed() == 0) {
;;;219              coastUntilStop_ = FALSE;
;;;220            }
;;;221          }
;;;222          
;;;223    #if(DEBUG_WHEEL_CONTROLLER)
;;;224          PRINT(" WHEEL power: %f (L), %f (R)\n", power_l_, power_r_);
;;;225    #endif
;;;226          
;;;227          //Command the computed motor power values
;;;228          HAL::MotorSetPower(HAL::MOTOR_LEFT_WHEEL, power_l_);
0001a8  2000              MOVS     r0,#0
0001aa  f7fffffe          BL       _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
;;;229          HAL::MotorSetPower(HAL::MOTOR_RIGHT_WHEEL, power_r_);
0001ae  ed940a07          VLDR     s0,[r4,#0x1c]
0001b2  2001              MOVS     r0,#1
0001b4  ecbd8b04          VPOP     {d8-d9}
0001b8  e8bd4010          POP      {r4,lr}
0001bc  f7ffbffe          B.W      _ZN4Anki5Cozmo3HAL13MotorSetPowerENS1_7MotorIDEf ; Anki::Cozmo::HAL::MotorSetPower(Anki::Cozmo::HAL::MotorID, float)
;;;230    
;;;231          
;;;232        } // Run()
;;;233        
                          ENDP

                  |L11.448|
                          DCD      ||.data||
                  |L11.452|
0001c4  00000000          DCFS     0x00000000 ; 0
                  |L11.456|
                          DCD      0x459c4000
                  |L11.460|
0001cc  459c4000          DCFS     0x459c4000 ; 5000
                  |L11.464|
                          DCD      0xc59c4000
                  |L11.468|
0001d4  c59c4000          DCFS     0xc59c4000 ; -5000

                          AREA ||i._ZN4Anki5Cozmo15WheelController6EnableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController6EnableEv PROC ; Anki::Cozmo::WheelController::Enable()
;;;77         
;;;78         void Enable()
000000  4901              LDR      r1,|L12.8|
;;;79         {
;;;80           enable_ = true;
000002  2001              MOVS     r0,#1
000004  7048              STRB     r0,[r1,#1]
;;;81         }
000006  4770              BX       lr
;;;82         
                          ENDP

                  |L12.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController6ManageEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController6ManageEv PROC ; Anki::Cozmo::WheelController::Manage()
;;;253        //This manages at a high level what the wheel speed controller needs to do
;;;254        void Manage()
000000  4805              LDR      r0,|L13.24|
;;;255        {
000002  b510              PUSH     {r4,lr}
;;;256          //In many other case (as of now), we run the wheel controller normally
;;;257          if (enable_) {
000004  7840              LDRB     r0,[r0,#1]  ; _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de7enable_E
000006  2800              CMP      r0,#0
;;;258            Run();
000008  bf18              IT       NE
00000a  f7fffffe          BLNE     _ZN4Anki5Cozmo15WheelController3RunEv ; Anki::Cozmo::WheelController::Run()
;;;259          }
;;;260          
;;;261          EncoderSpeedFilterIteration();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      _ZN4Anki5Cozmo15WheelController27EncoderSpeedFilterIterationEv ; Anki::Cozmo::WheelController::EncoderSpeedFilterIteration()
;;;262        }
;;;263        
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController7DisableEv||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController7DisableEv PROC ; Anki::Cozmo::WheelController::Disable()
;;;82         
;;;83         void Disable()
000000  4901              LDR      r1,|L14.8|
;;;84         {
;;;85           enable_ = false;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;86         }
000006  4770              BX       lr
;;;87         
                          ENDP

                  |L14.8|
                          DCD      ||.data||

                          AREA ||i._ZN4Anki5Cozmo15WheelController8SetGainsEfff||, CODE, READONLY, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController8SetGainsEfff PROC ; Anki::Cozmo::WheelController::SetGains(float, float, float)
;;;71         //sets the wheel PID controller constants
;;;72         void SetGains(float kp, float ki, float kd) {
000000  4803              LDR      r0,|L15.16|
;;;73           Kp_ = kp;
000002  ed800a01          VSTR     s0,[r0,#4]
;;;74           Ki_ = ki;
000006  edc00a02          VSTR     s1,[r0,#8]
;;;75           Kd_ = kd;
00000a  ed801a03          VSTR     s2,[r0,#0xc]
;;;76         }
00000e  4770              BX       lr
;;;77         
                          ENDP

                  |L15.16|
                          DCD      ||.data||

                          AREA ||i.__sti___19_wheelController_cpp_bcff47de||, CODE, READONLY, ALIGN=2

                  __sti___19_wheelController_cpp_bcff47de PROC
000000  4803              LDR      r0,|L16.16|
000002  ed9f0a02          VLDR     s0,|L16.12|
000006  ed800a0e          VSTR     s0,[r0,#0x38]
00000a  4770              BX       lr
                          ENDP

                  |L16.12|
00000c  423df6f2          DCFS     0x423df6f2 ; 47.491157531738281
                  |L16.16|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController8SetGainsEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController8SetGainsEfff||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController6EnableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController6EnableEv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController7DisableEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController7DisableEv||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController21ComputeLeftWheelPowerEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController21ComputeLeftWheelPowerEfff||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController22ComputeRightWheelPowerEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController22ComputeRightWheelPowerEfff||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController3RunEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController3RunEv||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController27EncoderSpeedFilterIterationEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController27EncoderSpeedFilterIterationEv||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController6ManageEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController6ManageEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController22GetFilteredWheelSpeedsERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController22GetFilteredWheelSpeedsERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController21GetDesiredWheelSpeedsERfS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController21GetDesiredWheelSpeedsERfS2_||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController21SetDesiredWheelSpeedsEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController21SetDesiredWheelSpeedsEff||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController26utilSetVehicleOLTrajectoryEtt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController26utilSetVehicleOLTrajectoryEtt||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController21ResetIntegralGainSumsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController21ResetIntegralGainSumsEv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController12SetCoastModeEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController12SetCoastModeEb||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Anki5Cozmo15WheelController16AreWheelsPoweredEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i.__sti___19_wheelController_cpp_bcff47de||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___19_wheelController_cpp_bcff47de||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de10coastMode_E ; Anki::Cozmo::WheelController::<unnamed>::coastMode_
000000  01                DCB      0x01
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de7enable_E ; Anki::Cozmo::WheelController::<unnamed>::enable_
000001  010000            DCB      0x01,0x00,0x00
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de3Kp_E ; Anki::Cozmo::WheelController::<unnamed>::Kp_
000004  3a03126f          DCFS     0x3a03126f ; 0.00050000002374872565
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de3Ki_E ; Anki::Cozmo::WheelController::<unnamed>::Ki_
000008  3851b717          DCFS     0x3851b717 ; 4.9999998736893758e-05
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de3Kd_E ; Anki::Cozmo::WheelController::<unnamed>::Kd_
00000c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de19desiredWheelSpeedL_E ; Anki::Cozmo::WheelController::<unnamed>::desiredWheelSpeedL_
000010  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de19desiredWheelSpeedR_E ; Anki::Cozmo::WheelController::<unnamed>::desiredWheelSpeedR_
000014  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de8power_l_E ; Anki::Cozmo::WheelController::<unnamed>::power_l_
000018  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de8power_r_E ; Anki::Cozmo::WheelController::<unnamed>::power_r_
00001c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de20measuredWheelSpeedL_E ; Anki::Cozmo::WheelController::<unnamed>::measuredWheelSpeedL_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de20measuredWheelSpeedR_E ; Anki::Cozmo::WheelController::<unnamed>::measuredWheelSpeedR_
                          DCD      0x00000000
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de18filterWheelSpeedL_E ; Anki::Cozmo::WheelController::<unnamed>::filterWheelSpeedL_
000028  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de18filterWheelSpeedR_E ; Anki::Cozmo::WheelController::<unnamed>::filterWheelSpeedR_
00002c  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de11error_sumL_E ; Anki::Cozmo::WheelController::<unnamed>::error_sumL_
000030  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de11error_sumR_E ; Anki::Cozmo::WheelController::<unnamed>::error_sumR_
000034  00000000          DCFS     0x00000000 ; 0
                  _ZN4Anki5Cozmo21ROBOT_BOUNDING_RADIUSE ; Anki::Cozmo::ROBOT_BOUNDING_RADIUS
                          DCD      0x00000000

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  _ZN4Anki5Cozmo15WheelController43_GLOBAL__N__19_wheelController_cpp_bcff47de15coastUntilStop_E ; Anki::Cozmo::WheelController::<unnamed>::coastUntilStop_
000000  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___19_wheelController_cpp_bcff47de
