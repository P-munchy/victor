// Messages to be communicated over the wire from Victor to an External Device.
//  for the C-Like Abstract Data language
// Author: Nicolas Kent
// Copyright: Anki Inc (c) 2018

namespace Anki {
namespace Victor {
namespace ExternalInterface {

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Actions

// ====================================================
//                 Initial Pairing Flow
// ====================================================

// Request initial pairing, supplying the robot's highest pairing protocol
// version
message PairingProtocolVersion
{
    uint_16 version
}

// Send a generated public key to the app
message PairingPublicKey
{
    uint_8  publicKey[32] // Make this array length a clad constant
}

// Send a nonce to the app to test encryption
message PairingNonce
{
    uint_8  nonce[24] // Make this array length a clad constant
}

// Send an acknoweledgement to the app
message PairingAck
{
    uint_8  ack,
    uint_8  nonce[24] // Make this array length a clad constant
}

// Send a challenge to the app test encryption
message PairingCryptoChallengeRequest
{
    uint_32 number
}

// Tell the app a cryptography challenge/response has been accepted and that the
// robot is ready for secure encrypted communication
message PairingCryptoAccepted
{
    uint_8  statusCode
}

// The robot can inform the app to cancel the pairing process at any stage
message PairingCancel
{
}

// ====================================================
//                   Wifi Connection
// ====================================================

// Tell the app which networks are visible to the robot's wifi
message WifiNetworkListResponse
{
    string  ssidList[uint_16]
}

// Tell the app to send credentials to connect to a wifi network
// NOTE: This may be unnecessary, as victor could simply respond to sent network
//       credentials initiated by the app in response to the network list
message WifiNetworkCredentialsRequest
{
}

// Tell the app whether the supplied wifi network was successfully connected to
message WifiConnectionResponse
{
    bool    success,
    string  error // most likely enum, change when we figure the enums out
}

// Tell the app the robot's IP address on the active wifi network
message RobotIPAddressResponse
{
    string  ipAddress
}

union Connection {
    PairingProtocolVersion          pairingProtocolVersion          = 0x00,
    PairingPublicKey                pairingPublicKey                = 0x01,
    PairingNonce                    pairingNonce                    = 0x02,
    PairingAck                      pairingAck                      = 0x03,
    PairingCryptoChallengeRequest   pairingCryptoChallengeRequest   = 0x04,
    PairingCryptoAccepted           pairingCryptoAccepted           = 0x05,
    PairingCancel                   pairingCancel                   = 0x06,
    WifiNetworkListResponse         wifiNetworkListResponse         = 0x07,
    WifiNetworkCredentialsRequest   wifiNetworkCredentialsRequest   = 0x08,
    WifiConnectionResponse          wifiConnectionResponse          = 0x09,
    RobotIPAddressResponse          robotIPAddressResponse          = 0x0A
}

// ====================================================
//                      App General
// ====================================================

enum uint_16 RobotStatus {
  Exploring,
}

// Tell the app the robot's ui exposed status
message RobotStatusResponse
{
    RobotStatus     response
}

union AppGeneral {
    RobotStatusResponse         robotStatusResponse         = 0x00
}

// ====================================================
//                      Meet Victor
// ====================================================

// Tell the app that the robot is ready to enter the Meet Victor UX flow with
// a face ID
message MeetVictorReadyResponse
{
    string  faceID
}

// Tell the app the robot is starting a facial scan for the Meet Victor UX flow
message MeetVictorFaceScanStarted
{
}

// Tell the app the robot is finishing a facial scan for the Meet Victor UX flow
message MeetVictorFaceScanComplete
{
}

// Tell the app the robot encountered an error during the Meet Victor UX flow
message MeetVictorError
{
    string  errorString // most likely enum, change when we figure the enums out
}

union MeetVictor {
    MeetVictorReadyResponse     meetVictorReadyResponse     = 0x00,
    MeetVictorFaceScanStarted   meetVictorFaceScanStarted   = 0x01,
    MeetVictorFaceScanComplete  meetVictorFaceScanComplete  = 0x02,
    MeetVictorError             meetVictorError             = 0x03
}

// ====================================================
//                      Outer Union
// ====================================================

union RobotToDevice {
    Connection                  connection                  = 0x00,
    AppGeneral                  appGeneral                  = 0x01,
    MeetVictor                  meetVictor                  = 0x02
}

} // namespace ExternalInterface
} // namespace Victor
} // namespace Anki
