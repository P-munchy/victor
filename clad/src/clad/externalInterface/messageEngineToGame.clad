// UiMessageDefinitions message definition file
//  for the C-Like Abstract Data language
// Author: Greg Nagel
// Copyright: Anki Inc (c) 2015

#include "clad/audio/audioCallbackMessage.clad"
#include "clad/externalInterface/messageShared.clad"
#include "clad/robotInterface/messageFromActiveObject.clad"
#include "clad/robotInterface/messageFromAnimProcess.clad"
#include "clad/types/actionTypes.clad"
#include "clad/types/actionResults.clad"
#include "clad/types/animationEvents.clad"
#include "clad/types/behaviorComponent/behaviorObjectives.clad"
#include "clad/types/debugConsoleTypes.clad"
#include "clad/types/deviceDataTypes.clad"
#include "clad/types/engineErrorCodes.clad"
#include "clad/types/engineState.clad"
#include "clad/types/faceDetectionMetaData.clad"
#include "clad/types/faceEnrollmentResult.clad"
#include "clad/types/facialExpressions.clad"
#include "clad/types/factoryTestTypes.clad"
#include "clad/types/featureGateTypes.clad"
#include "clad/types/firmwareTypes.clad"
#include "clad/types/imageTypes.clad"
#include "clad/types/imu.clad"
#include "clad/types/inventoryTypes.clad"
#include "clad/types/loadedKnownFace.clad"
#include "clad/types/logLevels.clad"
#include "clad/types/motorTypes.clad"
#include "clad/types/needsSystemTypes.clad"
#include "clad/types/nvStorageTypes.clad"
#include "clad/types/objectFamilies.clad"
#include "clad/types/objectTypes.clad"
#include "clad/types/offTreadsStates.clad"
#include "clad/types/petTypes.clad"
#include "clad/types/poseStructs.clad"
#include "clad/types/proxMessages.clad"
#include "clad/types/cladPoint.clad"
#include "clad/types/cladRect.clad"
#include "clad/types/gameStatusFlag.clad"
#include "clad/types/robotStatusAndActions.clad"
#include "clad/types/sdkStatusTypes.clad"
#include "clad/types/toolCodes.clad"
#include "clad/types/touchGestureTypes.clad"
#include "clad/types/uiConnectionTypes.clad"
#include "clad/types/unlockTypes.clad"
#include "clad/types/visionModes.clad"
#include "clad/types/ledTypes.clad"
#include "clad/types/memoryMap.clad"
#include "util/ankiLab/ankiLabDef.clad"

namespace Anki {
namespace Cozmo {
namespace ExternalInterface {

///////////////////////////////////////////////////////////////////////////////
////////////////////////  ADVERTISING & CONNECTING  ///////////////////////////
///////////////////////////////////////////////////////////////////////////////


message UiDeviceAvailable {
    UiConnectionType  connectionType,
    uint_32 deviceID
}

message RobotConnectionResponse {
    RobotConnectionResult result,
    uint_32 fwVersion,
    uint_32 serialNumber,
    int_32  bodyHWVersion,
    BodyColor bodyColor // see robotStatusAndActions.clad
}

message RobotDisconnected {
    float_32 timeSinceLastMsg_sec
}


// DO NOT CHANGE THIS MESSAGE - it must be compatible across all versions so we can reliably handshake with SDK
message UiDeviceConnected {
    uint_8  reserved, // future-proofing (we can increase tag size to a uint_16 and still retain binary compatability)
    UiConnectionType  connectionType,
    uint_32 deviceID,
    uint_8  successful,
    uint_8  toGameCLADHash[16],
    uint_8  toEngineCLADHash[16],
    string  buildVersion
}

message EngineRobotCLADVersionMismatch {
  bool engineToRobotMismatch,
  bool robotToEngineMismatch,
  string  engineEnginetoRobotHash,	// Engine's calculated hash for the engine to robot messages
  string  engineRobotToEngineHash,	// Engine's calculated hash for the robot to engine messages
  string  robotEnginetoRobotHash,	// Robot's calculated hash for the engine to robot messages
  string  robotRobotToEngineHash,	// Robot's calculated hash for the robot to engine messages
}

// Indicates that a previously advertising object is no longer advertising
message ObjectUnavailable
{
  uint_32      factory_id,
}

// Responds to Unity request for feature toggles
message FeatureToggles {
  FeatureToggle features[uint_16]
}

message GoingToSleep {
  bool triggeredFromVoiceCommand = 0
}

message EngineLoadingDataStatus {
  float_32 ratioComplete = 0.0
}


/*
message Bogus {
}
*/

message CurrentCameraParams {
  float_32 cameraGain,
  uint_16  exposure_ms,
  bool     autoExposureEnabled
}

// Camera configuration for the Robot (set per-robot at the factory)
structure CameraConfig {
  float_32 focalLengthX,
  float_32 focalLengthY,
  float_32 centerX,
  float_32 centerY,
  float_32 fovX,  // Full FOV in degrees
  float_32 fovY,  // Full FOV in degrees
  int_32   minCameraExposureTime_ms,
  int_32   maxCameraExposureTime_ms,
  float_32 minCameraGain,
  float_32 maxCameraGain
}

// All settings that are static and unique for a given robot
message PerRobotSettings {
  uint_32 serialNumberHead,
  uint_32 serialNumberBody,
  uint_32 modelNumber,
  int_32  hwVersion,
  CameraConfig cameraConfig,
  BodyColor color // see robotStatusAndActions.clad
}

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////  ROBOT STATE  ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

message RobotState {
    PoseStruct3d pose,
    float_32 poseAngle_rad,    // heading in X-Y plane
    float_32 posePitch_rad,    // robot pitch angle
    float_32 leftWheelSpeed_mmps,
    float_32 rightWheelSpeed_mmps,
    float_32 headAngle_rad,
    float_32 liftHeight_mm,
    float_32 batteryVoltage,
    AccelData accel,                // in head frame (mm/s^2)
    GyroData gyro,                  // in head frame (rad/s)
    int_32   carryingObjectID,      // will be -1 if not carrying object
    int_32   carryingObjectOnTopID, // will be -1 if no object on top of object being carried
    int_32   headTrackingObjectID,  // will be -1 if head is not tracking to any object
    int_32   localizedToObjectID,   // Will be -1 if not localized to any object
    uint_32  lastImageTimeStamp,    // Last image processed by the vision system
    uint_32  status,                // See RobotStatusFlag in robotStatusAndActions.clad
    uint_8   gameStatus             // See GameStatusFlag in cozmoTypes.h
}

message RobotDelocalized {
}

message RobotPoked {
}

message RobotStopped {
}

message RobotOffTreadsStateChanged {
    OffTreadsState treadsState
}

message RobotCliffEventFinished {
}

// Tests a collision, not contacts.
message RobotOnChargerPlatformEvent {
  bool   onCharger
}

// Whether or not Cozmo has the hiccups
message RobotHiccupsChanged {
  bool hasHiccups
}

// Whether or not the robot's charge contacts are in contact with the charger contacts
message ChargerEvent {
  bool   onCharger
}

message TouchButtonEvent {
  bool  isPressed
}

message TouchGestureEvent {
  TouchGesture gesture
}

// Unexpected movement was detected so robot was stopped and all actions were cancelled
message UnexpectedMovement {
  uint_32 timestamp,
  UnexpectedMovementType movementType,
  UnexpectedMovementSide movementSide
}

// Whether or not the restore was successful
message RestoreRobotStatus {
  bool isWipe,
  bool success
}

// Sends an array of robot serial numbers that we have backup data for and whether or not
// game should prompt for restore
message RestoreRobotOptions {
  bool shouldPromptForRestore,
  uint_32 robotsWithBackupData[uint_8]
}

// Generic string for sending debug string up to game
message DebugString {
    string    text
}
message DebugAnimationString {
    string    text
}
message DebugPerformanceTick {
    string    systemName,
    float_32  lastTickTime
}

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////////  VISION  ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// RobotProcessedImage
//  Sent every time a full frame processing is completed, whether or not anything was
//  detected. Reports the image timestamp that was processed. Sent _after_ any results
//  or observations from the same image to indicate nothing else is coming from that
//  image.
message RobotProcessedImage {
   uint_32 timestamp,
   VisionMode visionModes[uint_8],
   uint_8 mean // Valid iff ComputingStatistics mode enabled
}

// RobotObservedObject for signaling that an object
//  with specified ID/Type/Family was seen at a particular location in the image
//  and the world
message RobotObservedObject {
    uint_32       timestamp,
    ObjectFamily  objectFamily,
    ObjectType    objectType,
    int_32        objectID,      // signed to match U2G::PickAndPlaceObject which has the option to have objectID<0
    CladRect      img_rect,      // position in image coords
    PoseStruct3d  pose,
    float_32      topFaceOrientation_rad, // absolute orienation of top face, iff isActive==true
    uint_8        isActive
}

// Message for the robot observing a possible object (existence hasn't been confirmed yet)
message RobotObservedPossibleObject {
    // objectID will always be -1
    RobotObservedObject possibleObject
}

// RobotObservedFace
message RobotObservedFace {
    int_32        faceID,         // negative: tracked but not recognized; positive: recognized face
    uint_32       timestamp,
    PoseStruct3d  pose,
    CladRect      img_rect,       // position in image coords
    string        name,           // Empty if none assigned yet

    Vision::FacialExpression  expression,
    Vision::SmileAmount       smileAmount,
    Vision::Gaze              gaze,
    Vision::BlinkAmount       blinkAmount,

    // Individual expression values histogram, sums to 100 (Exception: all zero if expression=Unknown)
    uint_8        expressionValues[verbatim Anki::Vision::FacialExpression::Count],

    // Face landmarks
    CladPoint2d   leftEye[uint_8],
    CladPoint2d   rightEye[uint_8],
    CladPoint2d   nose[uint_8],
    CladPoint2d   mouth[uint_8]
}

// RobotChangedObservedFaceID
//  This generally happens when a tracked face (negative ID) is recognized and
//  receives a positive ID or when face records get merged
message RobotChangedObservedFaceID {
    int_32   oldID,
    int_32   newID
}

// RobotObservedPet
message RobotObservedPet {
    int_32           petID,
    uint_32          timestamp,
    uint_32          numTimesObserved,
    float_32         score,
    CladRect         img_rect,    // Detection rectangle in image
    Vision::PetType  petType
}

// RobotObservedMotion
message RobotObservedMotion {
    uint_32  timestamp,     // Of the corresponding image

    // Area of the supporting region for the point, as a fraction of the image
    float_32 img_area,
    // Pixel coordinate of the point in the image, relative to top-left corner.
    int_16   img_x,
    int_16   img_y,

    // Area of the supporting region for the point, as a fraction of the ground ROI
    // If unable to map to the ground, area=0
    float_32 ground_area,
    // Coordinates of the point on the ground, relative to robot, in mm
    int_16   ground_x,
    int_16   ground_y,

    // Top area
    // Area of the supporting region for the point, as a fraction of the image
    float_32 top_img_area,
    // Pixel coordinate of the point in the image, relative to top-left corner.
    int_16   top_img_x,
    int_16   top_img_y,

    // Left area
    // Area of the supporting region for the point, as a fraction of the image
    float_32 left_img_area,
    // Pixel coordinate of the point in the image, relative to top-left corner.
    int_16   left_img_x,
    int_16   left_img_y,

    // Right area
    // Area of the supporting region for the point, as a fraction of the image
    float_32 right_img_area,
    // Pixel coordinate of the point in the image, relative to top-left corner.
    int_16   right_img_x,
    int_16   right_img_y
}

// RobotObservedLaserPoint
message RobotObservedLaserPoint {
    uint_32  timestamp,

    // Coordinates of the point on the ground, relative to robot, in mm.
    // Area of the supporting region for the point, as a fraction of the ground ROI.
    // If unable to map to the ground, area=0.
    float_32 ground_area_fraction,
    int_16   ground_x_mm,
    int_16   ground_y_mm
}

// RobotDeletedFace - sent when an _observed_ face has been deleted (e.g. if not seen for too long)
message RobotDeletedFace {
    int_32  faceID
}

// RobotDeletedLocatedObject: This message is broadcasted when we delete an object from the current origin. It's intended
// to notify clients that the object is no longer in the current origin, and thus its pose is not reliable.
// Note the robot might be able to "bring back" a location for the object by relocalizing to a previously known
// object.
message RobotDeletedLocatedObject {
    uint_32 objectID
}

// RobotDeletedAllCustomObjects
message RobotDeletedAllCustomObjects {
}

// RobotDeletedFixedCustomObjects
message RobotDeletedFixedCustomObjects {
}

// RobotDeletedCustomMarkerObjects
message RobotDeletedCustomMarkerObjects {
}

// CreatedFixedCustomObject
message CreatedFixedCustomObject {
    uint_32 objectID
}

// DefinedCustomObject
message DefinedCustomObject {
    bool success     // false if the last custom object definition failed (e.g. due to duplicate marker already in use)
}

// RobotMarkedObjectPoseUnknown
message RobotMarkedObjectPoseUnknown {
    uint_32 objectID
}

structure LocatedObjectState {
    uint_32      objectID,
    uint_32      lastObservedTimestamp,
    ObjectFamily objectFamily,
    ObjectType   objectType,
    PoseStruct3d pose,
    PoseState    poseState,
    bool         isConnected,
}

message LocatedObjectStates {
    LocatedObjectState objects[uint_8]
}

structure ConnectedObjectState {
    uint_32      objectID,
    ObjectFamily objectFamily,
    ObjectType   objectType
}

message ConnectedObjectStates {
    ConnectedObjectState objects[uint_8]
}

// RobotReadToolCode
message RobotReadToolCode {
  ToolCodeInfo info
}

// RobotEnrolledFace - Broadcast by BehaviorEnrollFace when it completes
message FaceEnrollmentCompleted
{
  FaceEnrollmentResult result,
  int_32               faceID,
  string               name
}

// NOTE: This is separate from deleting an _observed_ face.
message RobotErasedEnrolledFace {
    int_32 faceID,
    string name
}

// Sent if all enrolled faces are cleared, e.g. when a new face album is loaded from
// memory (in which case RobotAddedNamedFaces messages should follow).
// NOTE: This is separate from _observed_ faces.
message RobotErasedAllEnrolledFaces {

}

// RobotCompletedFactoryDotTest
//  Only sent during factory tests
message RobotCompletedFactoryDotTest {
    float_32 camPoseX_mm,
    float_32 camPoseY_mm,
    float_32 camPoseZ_mm,
    float_32 camPoseRoll_rad,
    float_32 camPosePitch_rad,
    float_32 camPoseYaw_rad,
    float_32 dotCenX_pix[4],  // Centroids in "standard" order: upper left, lower left, upper right, lower right
    float_32 dotCenY_pix[4],  //    "
    float_32 headAngle,
    bool     success = 0,
    bool     didComputePose = 0, // If false, camPose members will all be invalid
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////  ACTIONS  //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// RobotCompletedAction
// TODO: Add action type, more informative result codes...
message RobotCompletedAction {
    uint_32 idTag,                          // The identifier of the specific action that completed
    RobotActionType  actionType,            // see actionTypes.clad
    ActionResult  result,                   //  "
    ActionResult  subActionResults[uint_8], // vector of all results from this action's subActions
    ActionCompletedUnion completionInfo     //  see actionTypes.clad
}

// BlockPickedUp
message BlockPickedUp {
    bool didSucceed                       // true if robot thinks it picked up a block (from low or high position)
}

// BlockPlaced
message BlockPlaced {
    bool didSucceed                       // true if robot thinks it placed up a block (from low or high position)
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////  ANIMATIONS  //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

message AnimationAvailable {
  string animName
}

message AnimationGroupAvailable {
  string animGroupName
}

// Broadcast by AnimationStreamer when a new streaming animation is requested
// before the last one finished.
message AnimationAborted {
  uint_32 tag
}

message AnimationEvent {
  uint_32   timestamp,
  AnimEvent event_id
}

///////////////////////////////////////////////////////////////////////////////
// Mood / Emotions
///////////////////////////////////////////////////////////////////////////////

message MoodState {
  float_32 emotionValues[uint_8]
}

///////////////////////////////////////////////////////////////////////////////
// Needs
///////////////////////////////////////////////////////////////////////////////

message NeedsState {
  float_32      curNeedLevel[uint_8],
  NeedBracketId curNeedBracket[uint_8],
  bool          partIsDamaged[uint_8],
  int_32        curNeedsUnlockLevel,
  int_32        numStarsAwarded,
  int_32        numStarsForNextUnlock,
  NeedsActionId actionCausingTheUpdate,
  string        testVariation,
}

message NeedsPauseState {
  bool isPaused
}

message NeedsPauseStates {
  bool decayPause[uint_8],
  bool actionPause[uint_8]
}

message FreeplaySparksAwarded {
  int_32        sparksAwarded,
  string        sparksAwardedDisplayKey,
}

message StarLevelCompleted {
  int_32      unlockLevelCompleted,
  int_32      starsRequiredForNextUnlock,
  NeedsReward rewards[uint_8]
}

message StarUnlocked {
  int_32      unlockLevel,
  int_32      maxStarsForLevel,
  int_32      currentStars,
}

message StarStatus {
  int_32      timeToNextDay_s,
  bool        completedToday,
}

message WantsNeedsOnboarding {
  int_32 onboardingStageCompleted
}

structure SongUnlockStatus {
  bool   unlocked,
  string songUnlockId,
}

message SongsList {
  SongUnlockStatus songUnlockStatuses[uint_8],
}

///////////////////////////////////////////////////////////////////////////////
// Progression Unlocks
///////////////////////////////////////////////////////////////////////////////

message RequestSetUnlockResult {
  UnlockId unlockID,
  bool unlocked
}

message UnlockStatus {
  UnlockId unlocks[uint_8],
  bool fromBackup = 0
}

// Only called the first time so UI can show correct "new" badges on default unlocks
message UnlockedDefaults {
  UnlockId defaultUnlocks[uint_8]
}

///////////////////////////////////////////////////////////////////////////////
// Inventory
///////////////////////////////////////////////////////////////////////////////

message InventoryStatus {
  InventoryList allInventory
}

message RequestDefaultSparks {
}

///////////////////////////////////////////////////////////////////////////////
// Debug / Console
///////////////////////////////////////////////////////////////////////////////

structure DebugConsoleVar {
  string varName,
  string category,
  float_64 minValue,
  float_64 maxValue,
  ConsoleVarUnion varValue
}

message InitDebugConsoleVarMessage {
  DebugConsoleVar varData[uint_16]
}

message JsonDasLogMessage {
  string fileName,
  string[uint_16] jsonData
}

message JsonDasLogAllSentMessage {
  uint_8 filesSent
}

message VerifyDebugConsoleFuncMessage {
  string funcName,
  string[uint_16] statusMessage,
  bool success
}

message VerifyDebugConsoleVarMessage {
  string varName,
  string[uint_16] statusMessage,
  ConsoleVarUnion varValue,
  bool success
}

message DebugAppendConsoleLogLine {
  string[uint_16] line,
  LogLevel logLevel
}

structure TimingInfo
{
  float_32  avgTime_ms,
  float_32  minTime_ms,
  float_32  maxTime_ms
}

structure CurrentTimingInfo
{
  float_32 avgTime_ms,
  float_32 minTime_ms,
  float_32 maxTime_ms,
  float_32 currentTime_ms
}

message LatencyMessage {
  TimingInfo wifiLatency,
  TimingInfo extSendQueueTime,
  TimingInfo sendQueueTime,
  TimingInfo recvQueueTime,
  TimingInfo unityEngineLatency,
  TimingInfo sdkEngineLatency,
  CurrentTimingInfo imageLatency
}

message DeviceDataMessage {
  DeviceDataPair dataList[uint_8]
}

// Debug menu for taps
message BlockTapFilterStatus {
  bool  enabled,
  int_16 tapIntensityMin,
  uint_32 tapWaitOffset,
}

///////////////////////////////////////////////////////////////////////////////
// State
///////////////////////////////////////////////////////////////////////////////
message UpdateEngineState {
  EngineState oldState,
  EngineState newState
}

message EngineErrorCodeMessage {
  EngineErrorCode errorCode
}

// Sent when a cube lights change in CubeLightComponent
message CubeLightsStateTransition {
  uint_32 objectID,
  uint_32 factoryID,
  ObjectType objectType,
  // Colors are encoded as uint with 5 bits per color
  // To convert from frames to seconds divide by 30 (30 frames per second)
  LightState lights[4],
  uint_32 lightRotation_ms
}

///////////////////////////////////////////////////////////////////////////////
// BlockPool
///////////////////////////////////////////////////////////////////////////////

structure BlockPoolBlockData {
  uint_32 factoryID,
  ObjectType objectType
}

message BlockPoolDataMessage {
  uint_8              blockPoolEnabled,
  BlockPoolBlockData  blockData[uint_8]
}

///////////////////////////////////////////////////////////////////////////////
// Robot flash (non-volatile storage)
///////////////////////////////////////////////////////////////////////////////

// Returned in response to NVStorageWriteEntry, NVStorageReadEntry, and NVStorageEraseEntry
// to confirm success/failure of operation.
// The index indicates the blob order if this is one of the messages received in response to
// a NVStorageReadEntry and data contains data. You'll know when you get the last message of
// a read when result != NV_MORE.
message NVStorageOpResult {
  NVStorage::NVEntryTag  tag,
  NVStorage::NVResult    result,
  NVStorage::NVOperation op,
  uint_8  index,
  uint_8  data[uint_16],
}


///////////////////////////////////////////////////////////////////////////////
// Firmware
///////////////////////////////////////////////////////////////////////////////

message FirmwareUpdateProgress {
  FirmwareUpdateStage stage,
  FirmwareUpdateSubStage subStage,
  string  fwSig,
  uint_8  percentComplete
}

message FirmwareUpdateComplete {
  FirmwareUpdateResult  result,
  string  fwSig
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////  GAME  /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// The behavior wants the UI to pop up a game request
message RequestGameStart {
  UnlockId gameRequested
}

// Game asked for a random trick; respond with which trick started
// to update UI
message HardSparkStartedByEngine {
  UnlockId sparkStarted
}

// Spark was ended by Engine (due to success or timeout)
message HardSparkEndedByEngine {
  bool success
}

message SdkConnectionStatus
{
  string   sdkBuildVersion,
  string   requiredSdkBuildVersion,
  uint_32  numCommands,
  float_32 timeInCurrentConnection_s,
  bool     isConnected,
  bool     isWrongSdkVersion,
}

message SdkStatus {
  SdkConnectionStatus connectionStatus,
  string   sdkStatus[uint_8],
  uint_32  numTimesConnected,
  float_32 timeInSdkMode_s,
  float_32 timeSinceLastSdkMessage_s,
  float_32 timeSinceLastSdkCommand_s,
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////  Behavior  /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//notify the game that behavior has transitioned
message BehaviorTransition{
  //BehaviorID oldBehaviorID,
  //BehaviorID newBehaviorID,
  //BehaviorClass oldBehaviorClass,
  //ExecutableBehaviorType oldBehaviorExecType,
  //BehaviorClass newBehaviorClass,
  //ExecutableBehaviorType newBehaviorExecType,
  //string newBehaviorDisplayKey
}

message RespondAllBehaviorsList{
  //BehaviorID behaviors[uint_8]
}


message BehaviorObjectiveAchieved{
  BehaviorObjective behaviorObjective
}

// notify game that build pyramid spark prerequisites have been met/not met
message PyramidPreReqState{
  bool areCubesUpright
}

message GuardDogStart {
}

message GuardDogEnd {
  bool success
}


///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////  Onboarding  ///////////////////////////////
///////////////////////////////////////////////////////////////////////////////

enum uint_8 OnboardingStateEnum
{
  Inactive,
  ErrorCozmo,
  ErrorCubeMoved,
  ErrorCubeWrongSideUp,
  ErrorFinal,
  WaitForShowCube,
  WaitForOKCubeDiscovered,
  WaitForInspectCube,
  WaitForFinalContinue,
}

message OnboardingState {
  OnboardingStateEnum stateNum
}

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////  MEMORY MAP DATA  ///////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// We are about to send one or several messages with memory map info
message MemoryMapMessageBegin
{
  uint_32  originId,
  int_32   rootDepth,
  float_32 rootSize_mm,
  float_32 rootCenterX,
  float_32 rootCenterY
}

// A group of quad infos
message MemoryMapMessage
{
  MemoryMapQuadInfo quadInfos[uint_16]
}

// We finished sending memory map messages
message MemoryMapMessageEnd
{
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////  MISC  /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Data to display in UI that's useful to customer support
message SupportInfo {
  string deviceId
}

//  Audio stages are map to different music updates that
//  should be performed by Unity.
//  0 - Play__SFX__Cube_Feeding_Loop_Play - begin looping sfx
//  1 - Play__SFX__Cube_Feeding_Up - shake tick point up
//  2 - Play__SFX__Cube_Feeding_Down - shake tick point drops
//  3 - Play__SFX__Cube_Feeding_Success - game is over (also play the stop loop)
//  4 - Stop__SFX__Cube_Feeding_Loop_Stop - stop looping sfx

message FeedingSFXStageUpdate {
  uint_8 stage,
  float_32 chargePercentage = 0.0
}

message ResponseLocale {
  string locale
}

///////////////////////////////////////////////////////////////////////////////
// Notifications
///////////////////////////////////////////////////////////////////////////////

message ClearNotificationCache {
}

message CacheNotificationToSchedule {
  int_32 secondsInFuture,
  string textKey,
  bool   persist,
}

message NotificationTextKeys {
  string textKeys[uint_16],
}
// explicit autounion - this will force the values given, and then add every other messages in this file
// if you do not want to include messages in this union, use the keyword "structure" instead of "message"
// DO NOT CHANGE ANY EXPLICITELY DECLARED VALUES - they must be compatible across all versions so we can reliably
// handshake between and App and SDK version combination
autounion MessageEngineToGame
{
  UiDeviceConnected                 UiDeviceConnected                  = 0x00, // DO NOT CHANGE THIS VALUE
}

} // namespace G2U
} // namespace Cozmo
} // namespace Anki
