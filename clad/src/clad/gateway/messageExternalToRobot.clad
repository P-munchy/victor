namespace Anki {
namespace Victor {
namespace Gateway {

message UiDeviceConnectionWrongVersion {
  string placeHolder,
}

message DriveWheels {
  float_32 lwheel_speed_mmps,
  float_32 rwheel_speed_mmps,
  float_32 lwheel_accel_mmps2 = 0.0,
  float_32 rwheel_accel_mmps2 = 0.0,
}

message PlayAnimation {
  uint_32 numLoops,
  string  animationName,
  bool    ignoreBodyTrack = 0,
  bool    ignoreHeadTrack = 0,
  bool    ignoreLiftTrack = 0,
}

message MoveHead {
  float_32 speed_rad_per_sec,
}

message MoveLift {
  float_32 speed_rad_per_sec,
}

message DriveArc {
  float_32 speed,               // Target speed in mm/sec
                                // If curvatureRadius_mm == 0, the speed is in rad/s where +ve means CCW rotation.
  float_32 accel,               // Acceleration to approach target speed in mm/sec^2 (Sign is ignored)
                                // (or rad/s^2 if curvatureRadius_mm == 0)
                                // 0: Max acceleration
  int_16 curvatureRadius_mm     // Radius of arc to drive
                                // u16_MAX or u16_MIN: Straight
                                // +ve: curves left, -ve: curves right
                                // 0: Point turn
}

// Sends a chunk of oled data, to be later displayed using DisplayFaceImageRGB
message DisplayFaceImageRGBChunk {
    uint_16  faceData[600], // Splitting into chunks of 600 similar to the e2r layer
    uint_16  numPixels,
    uint_8   chunkIndex,
    uint_8   numChunks,
    uint_32  duration_ms,     // Use uint_32 max value to keep the image on the screen
    bool     interruptRunning,
}

// Request a status history
message RobotHistoryRequest {
}

// Request control from behavior system
message SDKActivationRequest {
  uint_32 slot, // TODO Use the BehaviorSlot enum
  bool enable,
}

// ====================================================
//                      Meet Victor
// ====================================================

// The app requests that the robot perform some non-instantaneous action, usually
// an action with an associated voice command, such as "go to your charger"
// todo (VIC-1398): eventually AppIntent should be its own union of structures, but
// currently there's only one intent, with one arg, and it's not possible to transmit
// a union over the temporary webservice handler. This will need replacing once the
// real app->engine channel is working
//
// Start Meet Victor
message AppIntent {
  string intent,
  string param,
}

// CancelFaceEnrollment - Unsets face enrollment settings, meaning BehaviorEnrollFace will no
//                        longer be activatable
//
// Cancels Meet Victor.
message CancelFaceEnrollment {
}

// Request a list of names and IDs
message RequestEnrolledNames {
}

// Rename given ID+oldName pair to use newName. For safety if current face with given ID
// does not match oldName, nothing happens.
// On success, a RobotLoadedKnownFace message with faceID and newName will be sent.
message UpdateEnrolledFaceByID {
  int_32 faceID,
  string oldName,
  string newName
}

// Erase a face record by ID
message EraseEnrolledFaceByID {
  int_32 faceID
}

// Erase all enrolled faces (use with care!)
message EraseAllEnrolledFaces {
}

// SetFaceToEnroll - Send face enrollments settings. Actual face enrollment only happens
//                   when the BehaviorEnrollFace runs. That behavior requires these settings
//                   be sent in order to be activatable.
//
// If you want to change where the enrolled face is saved (e.g., merge final enrollment into an
// existing face), use this before `AppIntent`.
//
// SetFaceToEnroll can be used to "rescan" a face, either from scratch, or to add new data to an existing face
message SetFaceToEnroll {
    string name,

    int_32 observedID=0,  // The ID of a specific observed face to enroll (0 for next one we see)
    int_32 saveID=0,      // The ID of an existing face to merge final enrollment into (0 for none,
                          // i.e. use observedID)

    bool saveToRobot=1,   // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
    bool sayName=0,       // Play say-name/celebration animations on success before completing
    bool useMusic=0       // Starts special music during say-name animations (will leave music playing!)
}

enum uint_32 VisionMode
  {
    Idle                   = 0x00,
    DetectingMarkers,
    DetectingFaces,
    DetectingMotion,
    DetectingOverheadEdges,
    ComputingCalibration,
    CheckingQuality,
    CheckingWhiteBalance,
    ComputingStatistics,
    DetectingPets,
    EstimatingFacialExpression,  // No effect if DetectingFaces not enabled
    DetectingSmileAmount,        //  "
    DetectingGaze,               //  "
    DetectingBlinkAmount,        //  "
    LimitedExposure,
    DetectingLaserPoints,
    BuildingOverheadMap,
    DetectingVisualObstacles,
    Benchmarking,
    SavingImages,
    RunningNeuralNet, 
    DetectingIllumination,
    Count
  }

message EnableVisionMode {
   VisionMode mode,
   bool       enable
}

// Note: these values and messages must match the values that get added to MessageGameToEngine
union MessageExternalToRobot {
  UiDeviceConnectionWrongVersion UiDeviceConnectionWrongVersion = 0x00, // DO NOT CHANGE THIS VALUE
  DriveWheels                    DriveWheels                    = 0x01,
  PlayAnimation                  PlayAnimation                  = 0x02,
  MoveHead                       MoveHead                       = 0x03,
  MoveLift                       MoveLift                       = 0x04,
  DriveArc                       DriveArc                       = 0x05,
  RobotHistoryRequest            RobotHistoryRequest            = 0x06,
  SDKActivationRequest           SDKActivationRequest           = 0x07,
  DisplayFaceImageRGBChunk       DisplayFaceImageRGBChunk       = 0x08,
  AppIntent                      AppIntent                      = 0x09,
  CancelFaceEnrollment           CancelFaceEnrollment           = 0x0A,
  RequestEnrolledNames           RequestEnrolledNames           = 0x0B,           
  UpdateEnrolledFaceByID         UpdateEnrolledFaceByID         = 0x0C,
  EraseEnrolledFaceByID          EraseEnrolledFaceByID          = 0x0D,
  EraseAllEnrolledFaces          EraseAllEnrolledFaces          = 0x0E,
  SetFaceToEnroll                SetFaceToEnroll                = 0x0F,
  EnableVisionMode               EnableVisionMode               = 0x10,
}

} // Gateway
} // Victor
} // Anki
