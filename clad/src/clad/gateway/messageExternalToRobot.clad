#include "clad/gateway/shared.clad"

namespace Anki {
namespace Vector {
namespace Gateway {

// ====================================================
//                      Meet Victor
// ====================================================

// The app requests that the robot perform some non-instantaneous action, usually
// an action with an associated voice command, such as "go to your charger"
// todo (VIC-1398): eventually AppIntent should be its own union of structures, but
// currently there's only one intent, with one arg, and it's not possible to transmit
// a union over the temporary webservice handler. This will need replacing once the
// real app->engine channel is working
//


// Erase a face record by ID
message EraseEnrolledFaceByID {
  int_32 faceID
}

/*
// SetFaceToEnroll - Send face enrollments settings. Actual face enrollment only happens
//                   when the BehaviorEnrollFace runs. That behavior requires these settings
//                   be sent in order to be activatable.
//
// If you want to change where the enrolled face is saved (e.g., merge final enrollment into an
// existing face), use this before `AppIntent`.
//
// SetFaceToEnroll can be used to "rescan" a face, either from scratch, or to add new data to an existing face
message SetFaceToEnroll {
    string name,

    int_32 observedID=0,  // The ID of a specific observed face to enroll (0 for next one we see)
    int_32 saveID=0,      // The ID of an existing face to merge final enrollment into (0 for none,
                          // i.e. use observedID)

    bool saveToRobot=1,   // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
    bool sayName=0,       // Play say-name/celebration animations on success before completing
    bool useMusic=0       // Starts special music during say-name animations (will leave music playing!)
}
*/

// Struct containing all the information relevant to how a 
// path should be modified or traversed.
// TODO: Include path wonkification parameters
structure PathMotionProfile {
    float_32     speed_mmps = 100.0,
    float_32     accel_mmps2 = 200.0,
    float_32     decel_mmps2 = 500.0,
    float_32     pointTurnSpeed_rad_per_sec = 2.0,
    float_32     pointTurnAccel_rad_per_sec2 = 10.0,
    float_32     pointTurnDecel_rad_per_sec2 = 10.0,
    float_32     dockSpeed_mmps = 60.0,
    float_32     dockAccel_mmps2 = 200.0,
    float_32     dockDecel_mmps2 = 500.0,
    float_32     reverseSpeed_mmps = 80.0,
    bool         isCustom = 0
}

// Note: these values and messages must match the values that get added to MessageGameToEngine
union MessageExternalToRobot {
  EraseEnrolledFaceByID             UpdateEnrolledFaceByID             = 0x00,
}

} // Gateway
} // Victor

} // Anki