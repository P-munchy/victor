namespace Anki {
namespace Victor {
namespace Gateway {

message UiDeviceConnected {
  string placeholder,
}

structure AnimationCompleted {
  string animationName,
}

union ActionCompletedUnion {
  AnimationCompleted          animationCompleted = 0x01,
}

enum int_32 RobotActionType {
    UNKNOWN = -1,
}

enum uint_32 ActionResult {
  SUCCESS                 = 0, // This is still zero
  RUNNING                 = 16777216,
  CANCELLED_WHILE_RUNNING = 33554432,
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////  META  /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

enum uint_8 MessageType {
  AnimationAvailable
}

message EndOfMessage {
  MessageType messageType
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////  ANIMATIONS  //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

message AnimationAvailable {
  string animName
}

message RobotCompletedAction {
    uint_32 idTag,                                 // The identifier of the specific action that completed
    RobotActionType      actionType,
    ActionResult         result,
    ActionResult         subActionResults[uint_8], // vector of all results from this action's subActions
    ActionCompletedUnion completionInfo,
}

// Tell the app the robot is starting a facial scan for the Meet Victor flow
message MeetVictorFaceScanStarted
{
}

// Tell the app the robot is finishing a facial scan for the Meet Victor flow
message MeetVictorFaceScanComplete
{
}

enum uint_8 FaceEnrollmentResult
{
    Success = 0,

    // Failures:
    SawWrongFace,
    SawMultipleFaces,
    TimedOut,
    SaveFailed,
    Incomplete,
    Cancelled,
    NameInUse,
    UnknownFailure
}

message LoadedKnownFace {
    int_64   secondsSinceFirstEnrolled,
    int_64   secondsSinceLastUpdated,
    int_64   secondsSinceLastSeen,
    int_64   lastSeenSecondsSinceEpoch,
    int_32   faceID,
    string   name,
}

// Receives the requested list of names and IDs.
message EnrolledNamesResponse {
  LoadedKnownFace faces[uint_8],
}

message FaceEnrollmentCompleted
{
  FaceEnrollmentResult result,
  int_32               faceID,
  string               name
}

message FeatureStatus {
  string featureName,
  string source, // Voice, App, AI, Unknown
}

union Status {
  FeatureStatus                    FeatureStatus                       = 0x00,
  MeetVictorFaceScanStarted        MeetVictorFaceScanStarted           = 0x01,
  MeetVictorFaceScanComplete       MeetVictorFaceScanComplete          = 0x02,
  FaceEnrollmentCompleted          FaceEnrollmentCompleted             = 0x03,
}

message TimeStampedStatus {
  Status status,
  uint_32 timestamp_ms,
}

message RobotHistoryResult {
  TimeStampedStatus  messages[uint_16],
}

// Response to request for control from behavior system
message SDKActivationResult {
  uint_32 slot,
  bool enabled,
}

structure PoseStruct3d
  {
    // Translation
    float_32 x,
    float_32 y,
    float_32 z,
    
    // Rotation quaternion
    float_32 q0,          
    float_32 q1,          
    float_32 q2,          
    float_32 q3,          

    uint_32 originID, // Which coordinate frame this pose is in (0 for none or unknown)
}

structure AccelData {
  float_32 x,  // mm/s^2
  float_32 y,
  float_32 z
}

structure GyroData {
  float_32 x,  // rad/s
  float_32 y,
  float_32 z
}

message RobotState {
    PoseStruct3d pose,
    float_32 poseAngle_rad,    // heading in X-Y plane
    float_32 posePitch_rad,    // robot pitch angle
    float_32 leftWheelSpeed_mmps,
    float_32 rightWheelSpeed_mmps,
    float_32 headAngle_rad,
    float_32 liftHeight_mm,
    float_32 batteryVoltage,
    AccelData accel,                // in head frame (mm/s^2)
    GyroData gyro,                  // in head frame (rad/s)
    int_32   carryingObjectID,      // will be -1 if not carrying object
    int_32   carryingObjectOnTopID, // will be -1 if no object on top of object being carried
    int_32   headTrackingObjectID,  // will be -1 if head is not tracking to any object
    int_32   localizedToObjectID,   // Will be -1 if not localized to any object
    uint_32  lastImageTimeStamp,    // Last image processed by the vision system
    uint_32  status,                // See RobotStatusFlag in robotStatusAndActions.clad
    uint_8   gameStatus             // See GameStatusFlag in cozmoTypes.h
}

structure CladPoint2d
{
  float_32 x,
  float_32 y
}

structure CladRect
{
  float_32 x_topLeft,
  float_32 y_topLeft,
  float_32 width,
  float_32 height
}

enum int_8 FacialExpression
{
        Unknown = -1,    // e.g. expression estimation disabled

        Neutral = 0,
        Happiness,
        Surprise,
        Anger,
        Sadness,
        
        Count
}

structure SmileAmount {
  bool      wasChecked,  // If false, degree and confidence are not valid (and will both be zero)
  float_32  amount,      // Ranges from 0.0=Not Smiling to 1.0=Full Smile
  float_32  confidence   // How confident in "degree", [0.0,1.0]
}

// Gaze angles are in the image plane and in the range +/- 90 degrees. Left/right are in the image, *not* face's left/right.
structure Gaze {
  bool      wasChecked,    // If false, angles will both be invalid (and set to zero)
  float_32  leftRight_deg, // 0 = looking straight ahead, >0 = towards image right, <0 = towards image left
  float_32  upDown_deg     // 0 = looking straightahead,  >0 = looking up,          <0 = looking down
}

// Left/right are as the eyes appear in the image to the viewer, not the face's left/right
structure BlinkAmount {
  bool      wasChecked,       // If false, both blink degrees will be invalid (and set to zero)
  float_32  blinkAmountLeft,  // Ranges from 0.0=no blink (eye fully open) to 1.0=full blink (eye fully closed)
  float_32  blinkAmountRight  // Left/right are as seen in the image, *not* the face's left and right
}

// RobotObservedFace
message RobotObservedFace {
    int_32        faceID,         // negative: tracked but not recognized; positive: recognized face
    uint_32       timestamp,
    PoseStruct3d  pose,
    CladRect      img_rect,       // position in image coords
    string        name,           // Empty if none assigned yet

    FacialExpression  expression,
    SmileAmount       smileAmount,
    Gaze              gaze,
    BlinkAmount       blinkAmount,

    // Individual expression values histogram, sums to 100 (Exception: all zero if expression=Unknown)
    uint_8        expressionValues[uint_8],

    // Face landmarks
    CladPoint2d   leftEye[uint_8],
    CladPoint2d   rightEye[uint_8],
    CladPoint2d   nose[uint_8],
    CladPoint2d   mouth[uint_8]
}

// RobotChangedObservedFaceID
//  This generally happens when a tracked face (negative ID) is recognized and
//  receives a positive ID or when face records get merged
message RobotChangedObservedFaceID {
    int_32   oldID,
    int_32   newID
}

// Anything that the robot wishes to push to the app that 
// is not a response to a request from the app.
union Event {
  Status                           status                              = 0x00,
  // BatteryEvents, etc.
}

// Note: these values and messages must match the values that get added to MessageEngineToGame
union MessageRobotToExternal {
  UiDeviceConnected                 UiDeviceConnected                  = 0x00, // DO NOT CHANGE THIS VALUE
  RobotCompletedAction              RobotCompletedAction               = 0x01,
  Event                             Event                              = 0x02,
  RobotHistoryResult                RobotHistoryResult                 = 0x03,
  SDKActivationResult               SDKActivationResult                = 0x04,
  RobotState                        RobotState                         = 0x05, // TODO: Add this to Events once webots dependancy on heirarchy is lifted
  EnrolledNamesResponse             EnrolledNamesResponse              = 0x06,
  RobotObservedFace                 RobotObservedFace                  = 0x07, // TODO: Add this to Events once webots dependancy on heirarchy is lifted
  RobotChangedObservedFaceID        RobotChangedObservedFaceID         = 0x08, // TODO: Add this to Events once webots dependancy on heirarchy is lifted
  AnimationAvailable                AnimationAvailable                 = 0x09,
  EndOfMessage                      EndOfMessage                       = 0x0A,
}

} // Gateway
} // Victor
} // Anki
