/** Clad message definitions for Needs system
*/


namespace Anki {
namespace Cozmo {

enum int_32 NeedId
{
  Repair  = 0,
  Energy  = 1,
  Play    = 2,
  Count
}

enum int_32 NeedBracketId
{
  Full      = 0,
  Normal    = 1,
  Warning   = 2,
  Critical  = 3,
  Count
}

enum_concept bool IsNeedBracketMet[NeedBracketId]
{
  Full = 1,
  Normal = 1,
  Warning = 0,
  Critical = 0,
  Count = 0
}

enum int_32 RepairablePartId
{
  Head    = 0,
  Lift    = 1,
  Treads  = 2
}

enum int_32 NeedsActionId
{
  // No action (for example, in a state update not triggered by any action)
  NoAction,

  // Decay action (sent from engine only; really as part of the 'reason for change')
  Decay,

  // Repair actions
  RepairHead,
  RepairLift,
  RepairTreads,

  // Feeding actions
  Feed,

  // Other actions (this will be a big and ever-growing list)
  KeepAwayWin,
  KeepAwayLose,
  MemoryMatchWin,
  MemoryMatchLose,
  QuickTapWin,
  QuickTapLose,

  // Behaviors
  CozmoSings,
  DizzyHard,
  DizzyMedium,
  DizzySoft,
  Fall,
  FistBump,
  FistBump_Sparked,
  GatherCubes,
  GuardDogLose,
  GuardDogWin,
  GuardDogNoInteraction,
  HiccupsEndBad,
  HiccupsEndGood,
  IndividualHiccup,
  KnockDownCubes,
  KnockDownCubes_Sparked,
  PeekAboo,
  PeekAboo_Sparked,
  PickupCube,
  PickupCube_Sparked,
  PopAWheelie,
  PopAWheelie_Sparked,
  Pounce,
  Pounce_Sparked,
  PyramidCompleted,
  PyramidCompleted_Sparked,
  RollACube,
  RollACube_Sparked,
  SayName,
  StackCube,
  StackCube_Sparked,
  Workout,
  Workout_Sparked,
  SeeFace,
  PlacedOnSide,
  BoredOnSide,

  Count
}


enum int_32 NeedsRewardType
{
  Sparks        = 0,  // data: number of sparks
  Unlock        = 1,  // data: unlockId
  Song          = 2,  // (new?)
  MemoryBadge   = 3,  // (new?)
}

structure NeedsReward
{
  NeedsRewardType rewardType,
  string          data,
  bool inventoryIsFull = 0
}


// Needs state stored on robot is different from state sent to game.
// NOTE:  Changing the format of this structure is tricky.  Be sure to
// increment the version constant in the code.  This version must be
// the first field of this structure.  You must also add backwards-
// compatibility code to read prior versions of this structure, and
// prior versions of the structure need to remain defined here.

structure NeedsStateOnRobot
{
  int_32  version,
  uint_64 timeLastWritten,
  int_32  curNeedLevel[10],   // MAX_NEEDS
  int_32  curNeedsUnlockLevel,
  int_32  numStarsAwarded,
  bool    partIsDamaged[32],  // MAX_REPAIRABLE_PARTS
  uint_64 timeLastStarAwarded,
  int_32  onboardingStageCompleted
}

// Prior versions here:
structure NeedsStateOnRobot_v02
{
  int_32  version,
  uint_64 timeLastWritten,
  int_32  curNeedLevel[10],   // MAX_NEEDS
  int_32  curNeedsUnlockLevel,
  int_32  numStarsAwarded,
  bool    partIsDamaged[32],  // MAX_REPAIRABLE_PARTS
  uint_64 timeLastStarAwarded
}

structure NeedsStateOnRobot_v01
{
  int_32  version,
  uint_64 timeLastWritten,
  int_32  curNeedLevel[10],   // MAX_NEEDS
  int_32  curNeedsUnlockLevel,
  int_32  numStarsAwarded,
  bool    partIsDamaged[32]   // MAX_REPAIRABLE_PARTS
}

// Final level will just repeat...
structure UnlockLevel
{
  NeedsReward rewards[uint_8],
  int_32      numStarsToUnlock,
  int_32      targetSparksTotal,
  int_32      maxPriorLevelUnlocks,
  float_32    minSparksPct,
  float_32    maxSparksPct,
  int_32      minSparks,
  int_32      minMaxSparks,
  int_32      freeplayTargetSparksTotal,
  float_32    freeplayMinSparksRewardPct,
  float_32    freeplayMinSparksPct,
  float_32    freeplayMaxSparksPct,
  int_32      freeplayMinSparks,
  int_32      freeplayMinMaxSparks,
}

} // namespace Cozmo
} // namespace Anki
