// Vizualization manager messages
//  for the C-Like Abstract Data language
// Author: Daniel Casner
// Copyright: Anki Inc (c) 2015

#include "clad/types/robotStatusAndActions.clad"
#include "clad/types/behaviorSystem/behaviorTypes.clad"
#include "clad/types/imageTypes.clad"
#include "clad/types/objectTypes.clad"
#include "clad/types/vizTypes.clad"
#include "clad/types/globalVizOrigin.clad"
#include "clad/types/activeObjectAccel.clad"
#include "clad/types/memoryMap.clad"

namespace Anki {
namespace Cozmo {
namespace VizInterface {

message RobotStateMessage
{
  RobotState state,
  int_32 numAnimBytesFree,
  int_32 numAnimAudioFramesFree,
  uint_8 videoFrameRateHz,
  uint_8 imageProcFrameRateHz,
  uint_8 enabledAnimTracks,
  uint_8 animTag
}

// VizObject
message Object
{
  uint_32    objectID,
  VizObjectType objectTypeID,
  uint_32    color,
  float_32   x_size_m,
  float_32   y_size_m,
  float_32   z_size_m,
  float_32   x_trans_m,
  float_32   y_trans_m,
  float_32   z_trans_m,
  float_32   rot_deg,
  float_32   rot_axis_x,
  float_32   rot_axis_y,
  float_32   rot_axis_z,
  float_32   objParameters[4] // for object-specific parameters
}

// SegmentPrimitive
message SegmentPrimitive
{
  string identifier,
  uint_32 color,
  float_32 origin[3],
  float_32 dest[3],
  bool clearPrevious  // if set to true, previous segments with same ID will be erased, otherwise drawn together
}

// VizQuad
message Quad
{
  VizQuadType quadType,
  uint_32 quadID,
  uint_32 color,
  float_32 xUpperLeft,
  float_32 yUpperLeft,
  float_32 zUpperLeft,
  float_32 xLowerLeft,
  float_32 yLowerLeft,
  float_32 zLowerLeft,
  float_32 xUpperRight,
  float_32 yUpperRight,
  float_32 zUpperRight,
  float_32 xLowerRight,
  float_32 yLowerRight,
  float_32 zLowerRight,
}

// SimpleQuad: Axis aligned quad. Any axis can be fixed or applied sideSize, depending on convention between parts
structure SimpleQuad
{
  uint_32 color,
  float_32 sideSize,
  float_32 center[3],
}

// SimpleQuadVectorMessageBegin: we are about to send one or several messages with quads
message SimpleQuadVectorMessageBegin
{
  string identifier,
}

// SimpleQuadVectorMessage: a group of simple quads
message SimpleQuadVectorMessage
{
  string identifier,
  SimpleQuad quads[uint_8],
}

// SimpleQuadVectorMessageBegin: we finished sending messages with quads for the given id
message SimpleQuadVectorMessageEnd
{
  string identifier,
}

// Memory map data scheme for internal use (webots viz, and app debug viz)
message MemoryMapMessageDebugVizBegin
{
  uint_32  originId,
  ExternalInterface::MemoryMapInfo info
}

message MemoryMapMessageDebugViz
{
  uint_32  originId,
  ExternalInterface::MemoryMapQuadInfoDebugViz quadInfos[uint_16]
}

message MemoryMapMessageDebugVizEnd
{
  uint_32  originId,
}

// VizCameraQuad
message CameraQuad
{
  uint_32 color,
  uint_32 topColor, // Color to draw line between UpperLeft and UpperRight corners
  float_32 xUpperLeft,
  float_32 yUpperLeft,
  float_32 xLowerLeft,
  float_32 yLowerLeft,
  float_32 xUpperRight,
  float_32 yUpperRight,
  float_32 xLowerRight,
  float_32 yLowerRight,
}

// VizCameraRect
message CameraRect
{
  uint_32 color,
  float_32 x,   // Upper left
  float_32 y,   // Upper left
  float_32 width,
  float_32 height,
  bool filled
}

// VizCameraLine
message CameraLine
{
  uint_32 color,
  float_32 xStart,
  float_32 yStart,
  float_32 xEnd,
  float_32 yEnd,
}

// VizCameraPoint
message CameraOval
{
  uint_32 color,
  float_32 xCen,
  float_32 yCen,
  float_32 xRad,
  float_32 yRad,
}

// VizCameraText
message CameraText
{
  uint_32 color,
  int_32  x,
  int_32  y,
  string  text
}

// EraseObject
message EraseObject
{
  uint_32 objectID,
  uint_32 lower_bound_id,
  uint_32 upper_bound_id,
}

// EraseSegmentPrimitives
message EraseSegmentPrimitives
{
  string identifier,
}

// EraseQuad
message EraseQuad
{
  uint_32 quadType,
  uint_32 quadID,
}

// VizSetRobot
message SetRobot
{
  uint_32 robotID,
  float_32 x_trans_m,
  float_32 y_trans_m,
  float_32 z_trans_m,
  float_32 rot_rad,
  float_32 rot_axis_x,
  float_32 rot_axis_y,
  float_32 rot_axis_z,
  float_32 head_angle,
  float_32 lift_angle,
}


// VizAppendPathSegmentLine
message AppendPathSegmentLine
{
  uint_32 pathID,
  float_32 x_start_m,
  float_32 y_start_m,
  float_32 z_start_m,
  float_32 x_end_m,
  float_32 y_end_m,
  float_32 z_end_m,
}

// VizAppendPathSegmentArc
message AppendPathSegmentArc
{
  uint_32 pathID,
  float_32 x_center_m,
  float_32 y_center_m,
  float_32 radius_m,
  float_32 start_rad,
  float_32 sweep_rad,
}

// VizSetPathColor
message SetPathColor
{
  uint_32 pathID,
  uint_32 colorID,
}


// ErasePath
message ErasePath
{
  uint_32 pathID,
}


// VizDefineColor
message DefineColor
{
  uint_32 colorID,
  float_32 r,
  float_32 g,
  float_32 b,
  float_32 alpha,
}


// VizSetLabel
message SetLabel
{
  uint_32 labelID,
  uint_32 colorID,
  string text
}


// VizDockingErrorSignal
message DockingErrorSignal
{
  float_32 x_dist,
  float_32 y_dist,
  float_32 z_dist,
  float_32 angle,
}

// VizCameraInfo
message CameraInfo
{
  float_32 gain,
  uint_16  exposure_ms
}

// VizVisionMarker
message VisionMarker
{
  int_16 topLeft_x,
  int_16 topLeft_y,
  int_16 topRight_x,
  int_16 topRight_y,
  int_16 bottomRight_x,
  int_16 bottomRight_y,
  int_16 bottomLeft_x,
  int_16 bottomLeft_y,
  int_8  verified,
}

// VizShowObjects
message ShowObjects
{
  int_8  show,
}

// VizTrackerQuad
message TrackerQuad
{
  int_16 topLeft_x,
  int_16 topLeft_y,
  int_16 topRight_x,
  int_16 topRight_y,
  int_16 bottomRight_x,
  int_16 bottomRight_y,
  int_16 bottomLeft_x,
  int_16 bottomLeft_y,
}

message FaceDetection
{
  uint_16 x_upperLeft,
  uint_16 y_upperLeft,
  uint_16 width,
  uint_16 height,
  bool    visualize
}

message RobotMood
{
  float_32  emotion[uint_8],
  string    recentEvents[uint_8]
}

structure BehaviorScoreData
{
  float_32   behaviorScore,
  float_32   totalScore,
  BehaviorID behaviorID
}

message RobotBehaviorSelectData
{
  BehaviorScoreData scoreData[uint_8]
}

message NewBehaviorSelected
{
  BehaviorID  newCurrentBehavior
}

message NewReactionTriggered
{
  string  reactionStrategyTriggered
}

message StartRobotUpdate
{
}

message EndRobotUpdate
{
}

message SaveImages
{
  ImageSendMode mode,
  string path
}

message SaveState
{
  bool   enabled,
  string path
}

message ObjectConnectionState
{
  uint_32    activeID,
  ObjectType objectType,
  bool       connected,
}

message ObjectMovingState
{
  uint_32 activeID,
  bool    moving,
}

message ObjectUpAxisState
{
  uint_32 activeID,
  UpAxis  upAxis,
}

message ObjectAccelState
{
  uint_32     objectID,
  ActiveAccel accel,
}

// an explicit auto-union that includes all messages in this file
// if you do not want to include messages in this union, use the keyword "structure" instead of "message"
autounion MessageViz { }

} // namespace Viz
} // namespace Cozmo
} // namespace Anki
