// External interface for robot <-> app and robot <-> sdk communication
//
// IMPORTANT: After changing this file, you will need to regenerate the
// Python files by running make in victor/tools/sdk/grpc_tools.

syntax = "proto3";

package external_interface;

option optimize_for = LITE_RUNTIME;

import "google/api/annotations.proto";
import "messages.proto";

service ExternalInterface {
  // Drives the wheel motors
  rpc DriveWheels(DriveWheelsRequest) returns (DriveWheelsResult) {
    option (google.api.http) = {
      post: "/v1/drive_wheels",
      body: "*"
    };
  }
  // Plays an animation by name
  rpc PlayAnimation(PlayAnimationRequest) returns (PlayAnimationResult) {
    option (google.api.http) = {
      post: "/v1/play_animation",
      body: "*"
    };
  }
  // Constructs and returns a list of animations
  rpc ListAnimations(ListAnimationsRequest) returns (ListAnimationsResult) {
    option (google.api.http) = {
      post: "/v1/list_animations",
      body: "*"
    };
  }
  // Moves the Head
  rpc MoveHead(MoveHeadRequest) returns (MoveHeadResult) {
    option (google.api.http) = {
      post: "/v1/move_head",
      body: "*"
    };
  }
  // Moves the Lift
  rpc MoveLift(MoveLiftRequest) returns (MoveLiftResult) {
    option (google.api.http) = {
      post: "/v1/move_lift",
      body: "*"
    };
  }
  // Drive arc
  rpc DriveArc(DriveArcRequest) returns (DriveArcResult) {
    option (google.api.http) = {
      post: "/v1/drive_arc",
      body: "*"
    };
  }
  // Sets LCD to a solid color
  rpc DisplayFaceImageRGB(DisplayFaceImageRGBRequest) returns (DisplayFaceImageRGBResult) {
    option (google.api.http) = {
      post: "/v1/display_face_image_rgb",
      body: "*"
    };
  }

  // Current groundwork for a streaming events endpoint
  rpc EventStream(EventRequest) returns (stream EventResult) {
    option (google.api.http) = {
      post: "/v1/event_stream",
      body: "*"
    };
  }
  
  // Endpoint for streaming robot state/sensor data
  rpc RobotStateStream(RobotStateRequest) returns (stream RobotStateResult) {
    option (google.api.http) = {
      post: "/v1/robot_state_stream",
      body: "*"
    };
  }
  // Request control from behavior system
  rpc SDKBehaviorActivation(SDKActivationRequest) returns (SDKActivationResult) {
    option (google.api.http) = {
      post: "/v1/sdk_activation",
      body: "*"
    };
  }

  // Meet Victor
  rpc AppIntent(AppIntentRequest) returns (AppIntentResult) {
    option (google.api.http) = {
      post: "/v1/app_intent",
      body: "*"
    };
  }
  rpc CancelFaceEnrollment(CancelFaceEnrollmentRequest) returns (CancelFaceEnrollmentResult) {
    option (google.api.http) = {
      post: "/v1/cancel_face_enrollment",
      body: "*"
    };
  }
  rpc RequestEnrolledNames(RequestEnrolledNamesRequest) returns (RequestEnrolledNamesResult) {
    option (google.api.http) = {
      post: "/v1/request_enrolled_names",
      body: "*"
    };
  }
  rpc UpdateEnrolledFaceByID(UpdateEnrolledFaceByIDRequest) returns (UpdateEnrolledFaceByIDResult) {
    option (google.api.http) = {
      post: "/v1/update_enrolled_face_by_id",
      body: "*"
    };
  }
  rpc EraseEnrolledFaceByID(EraseEnrolledFaceByIDRequest) returns (EraseEnrolledFaceByIDResult) {
    option (google.api.http) = {
      post: "/v1/erase_enrolled_face_by_id",
      body: "*"
    };
  }
  rpc EraseAllEnrolledFaces(EraseAllEnrolledFacesRequest) returns (EraseAllEnrolledFacesResult) {
    option (google.api.http) = {
      post: "/v1/erase_all_enrolled_faces",
      body: "*"
    };
  }
  rpc SetFaceToEnroll(SetFaceToEnrollRequest) returns (SetFaceToEnrollResult) {
    option (google.api.http) = {
      post: "/v1/set_face_to_enroll",
      body: "*"
    };
  }

  // TODO: sample rpc, remove once we have more real examples
  rpc Pang(Ping) returns (Pong) {
    option (google.api.http) = {
      post: "/v1/pang",
      body: "*"
    };
  }

  // TODO: sample rpc, remove once we have more real examples
  rpc Bang(Bing) returns (Bong) {
    option (google.api.http) = {
      post: "/v1/bang",
      body: "*"
    };
  }

  // Request onboarding state
  rpc GetOnboardingState(OnboardingStateRequest) returns (OnboardingStateResponse) {
    option (google.api.http) = {
      post: "/v1/get_onboarding_state",
      body: "*"
    };
  }

  // Send onboarding input
  rpc SendOnboardingInput(OnboardingInputRequest) returns (OnboardingInputResponse) {
    option (google.api.http) = {
      post: "/v1/send_onboarding_input",
      body: "*"
    };
  }

  // Request latest attention transfer message (after connection)
  rpc GetLatestAttentionTransfer(LatestAttentionTransferRequest) returns (LatestAttentionTransferResponse) {
    option (google.api.http) = {
      post: "/v1/get_latest_attention_transfer",
      body: "*"
    };
  }


}
