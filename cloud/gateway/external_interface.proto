// External interface for robot <-> app and robot <-> sdk communication
//
// TODO: Improve the comments in these files because they are exposed as
//       part of the SDK.

syntax = "proto3";

package Anki.Vector.external_interface;

import "google/api/annotations.proto";
import "behavior.proto";
import "cube.proto";
import "messages.proto";
import "settings.proto";
import "shared.proto";

// The grpc-defined connection between the SDK and Anki's Vector robot
service ExternalInterface {
  // Check the supported protocol version
  rpc ProtocolVersion(ProtocolVersionRequest) returns (ProtocolVersionResponse) {
    option (google.api.http) = {
      post: "/v1/protocol_version",
      body: "*"
    };
  }

  // Sets the speed and acceleration for Vector's wheel motors
  rpc DriveWheels(DriveWheelsRequest) returns (DriveWheelsResponse) {}

  // Requests that Vector play an animation
  rpc PlayAnimation(PlayAnimationRequest) returns (PlayAnimationResponse) {}

  // Constructs and returns a list of animations
  rpc ListAnimations(ListAnimationsRequest) returns (ListAnimationsResponse) {
    option (google.api.http) = {
      post: "/v1/list_animations",
      body: "*"
    };
  }

  // Moves the Head
  rpc MoveHead(MoveHeadRequest) returns (MoveHeadResponse) {}

  // Moves the Lift
  rpc MoveLift(MoveLiftRequest) returns (MoveLiftResponse) {}
  
  // Sets screen to a solid color
  rpc DisplayFaceImageRGB(DisplayFaceImageRGBRequest) returns (DisplayFaceImageRGBResponse) {
    option (google.api.http) = {
      post: "/v1/display_face_image_rgb",
      body: "*"
    };
  }

  // Streaming events endpoint
  rpc EventStream(EventRequest) returns (stream EventResponse) {
    option (google.api.http) = {
      post: "/v1/event_stream",
      additional_bindings {
        get: "/v1/event_stream"
      },
      body: "*"
    };
  }

  // Integrate with and acquire control of Vector's AI system
  rpc BehaviorControl(stream BehaviorControlRequest) returns (stream BehaviorControlResponse) {
  }

  // Acquire control of Vector's AI system
  rpc AssumeBehaviorControl(BehaviorControlRequest) returns (stream BehaviorControlResponse) {
    option (google.api.http) = {
      post: "/v1/assume_behavior_control",
      body: "*"
    };
  }

  rpc AppIntent(AppIntentRequest) returns (AppIntentResponse) {
    option (google.api.http) = {
      post: "/v1/app_intent",
      body: "*"
    };
  }
  rpc CancelFaceEnrollment(CancelFaceEnrollmentRequest) returns (CancelFaceEnrollmentResponse) {
    option (google.api.http) = {
      post: "/v1/cancel_face_enrollment",
      body: "*"
    };
  }
  rpc RequestEnrolledNames(RequestEnrolledNamesRequest) returns (RequestEnrolledNamesResponse) {
    option (google.api.http) = {
      post: "/v1/request_enrolled_names",
      body: "*"
    };
  }
  rpc UpdateEnrolledFaceByID(UpdateEnrolledFaceByIDRequest) returns (UpdateEnrolledFaceByIDResponse) {
    option (google.api.http) = {
      post: "/v1/update_enrolled_face_by_id",
      body: "*"
    };
  }
  rpc EraseEnrolledFaceByID(EraseEnrolledFaceByIDRequest) returns (EraseEnrolledFaceByIDResponse) {
    option (google.api.http) = {
      post: "/v1/erase_enrolled_face_by_id",
      body: "*"
    };
  }
  rpc EraseAllEnrolledFaces(EraseAllEnrolledFacesRequest) returns (EraseAllEnrolledFacesResponse) {
    option (google.api.http) = {
      post: "/v1/erase_all_enrolled_faces",
      body: "*"
    };
  }
  rpc SetFaceToEnroll(SetFaceToEnrollRequest) returns (SetFaceToEnrollResponse) {
    option (google.api.http) = {
      post: "/v1/set_face_to_enroll",
      body: "*"
    };
  }

  rpc EnableVisionMode(EnableVisionModeRequest) returns (EnableVisionModeResponse) {
    option (google.api.http) = {
      post: "/v1/enable_vision_mode",
      body: "*"
    };
  }
  
  rpc GoToPose(GoToPoseRequest) returns (GoToPoseResponse) {
    option (google.api.http) = {
      post: "/v1/go_to_pose",
      body: "*"
    };
  }

  rpc DockWithCube(DockWithCubeRequest) returns (DockWithCubeResponse) {
    option (google.api.http) = {
      post: "/v1/dock_with_cube",
      body: "*"
    };
  }

  rpc DriveOffCharger(DriveOffChargerRequest) returns (DriveOffChargerResponse) {
    option (google.api.http) = {
      post: "/v1/drive_off_charger",
      body: "*"
    };
  }

  rpc DriveOnCharger(DriveOnChargerRequest) returns (DriveOnChargerResponse) {
    option (google.api.http) = {
      post: "/v1/drive_on_charger",
      body: "*"
    };
  }

  rpc GetOnboardingState(OnboardingStateRequest) returns (OnboardingStateResponse) {
    option (google.api.http) = {
      post: "/v1/get_onboarding_state",
      body: "*"
    };
  }

  rpc SendOnboardingInput(OnboardingInputRequest) returns (OnboardingInputResponse) {
    option (google.api.http) = {
      post: "/v1/send_onboarding_input",
      body: "*"
    };
  }

  // Get the photos info
  rpc PhotosInfo(PhotosInfoRequest) returns (PhotosInfoResponse) {
    option (google.api.http) = {
      post: "/v1/photos_info",
      body: "*"
    };
  }

  // Get a photo by ID
  rpc Photo(PhotoRequest) returns (PhotoResponse) {
    option (google.api.http) = {
      post: "/v1/photo",
      body: "*"
    };
  }

  // Get a thumbnail by ID
  rpc Thumbnail(ThumbnailRequest) returns (ThumbnailResponse) {
    option (google.api.http) = {
      post: "/v1/thumbnail",
      body: "*"
    };
  }

  // Delete a photo by ID
  rpc DeletePhoto(DeletePhotoRequest) returns (DeletePhotoResponse) {
    option (google.api.http) = {
      post: "/v1/delete_photo",
      body: "*"
    };
  }

  // Request latest attention transfer message (after connection)
  rpc GetLatestAttentionTransfer(LatestAttentionTransferRequest) returns (LatestAttentionTransferResponse) {
    option (google.api.http) = {
      post: "/v1/get_latest_attention_transfer",
      body: "*"
    };
  }

  rpc PullJdocs(PullJdocsRequest) returns (PullJdocsResponse) {
    option (google.api.http) = {
      post: "/v1/pull_jdocs",
      body: "*"
    };
  }

  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      post: "/v1/update_settings",
      body: "*"
    };
  }

  rpc UpdateAccountSettings(UpdateAccountSettingsRequest) returns (UpdateAccountSettingsResponse) {
    option (google.api.http) = {
      post: "/v1/update_account_settings",
      body: "*"
    };
  }

  rpc UpdateUserEntitlements(UpdateUserEntitlementsRequest) returns (UpdateUserEntitlementsResponse) {
    option (google.api.http) = {
      post: "/v1/update_user_entitlements",
      body: "*"
    };
  }

  rpc DriveStraight(DriveStraightRequest) returns (DriveStraightResponse) {}

  rpc TurnInPlace(TurnInPlaceRequest) returns (TurnInPlaceResponse) {}

  rpc SetHeadAngle(SetHeadAngleRequest) returns (SetHeadAngleResponse) {}

  rpc SetLiftHeight(SetLiftHeightRequest) returns (SetLiftHeightResponse) {}

  rpc UserAuthentication(UserAuthenticationRequest) returns (UserAuthenticationResponse) {
    option (google.api.http) = {
      post: "/v1/user_authentication",
      body: "*"
    };
  }

  rpc SetBackpackLights(SetBackpackLightsRequest) returns (SetBackpackLightsResponse) {
    option (google.api.http) = {
      post: "/v1/set_backpack_lights",
      body: "*"
    };
  }

  rpc BatteryState(BatteryStateRequest) returns (BatteryStateResponse) {
    option (google.api.http) = {
      post: "/v1/battery_state",
      body: "*"
    };
  }

  rpc VersionState(VersionStateRequest) returns (VersionStateResponse) {
    option (google.api.http) = {
      post: "/v1/version_state",
      body: "*"
    };
  }

  rpc NetworkState(NetworkStateRequest) returns (NetworkStateResponse) {
    option (google.api.http) = {
      post: "/v1/network_state",
      body: "*"
    };
  }

  rpc SayText(SayTextRequest) returns (SayTextResponse) {
    option (google.api.http) = {
      post: "/v1/say_text",
      body: "*"
    };
  }

  // Attempt to connect to a cube. If a cube is currently connected,
  // this will do nothing.
  rpc ConnectCube(ConnectCubeRequest) returns (ConnectCubeResponse) {
    option (google.api.http) = {
      post: "/v1/connect_cube",
      body: "*"
    };
  }

  // Requests a disconnection from the currently connected cube.
  rpc DisconnectCube(DisconnectCubeRequest) returns (DisconnectCubeResponse) {
    option (google.api.http) = {
      post: "/v1/disconnect_cube",
      body: "*"
    };
  }
  
  rpc CubesAvailable(CubesAvailableRequest) returns (CubesAvailableResponse) {
    option (google.api.http) = {
      post: "/v1/cubes_available",
      body: "*"
    };
  }
  // Signal a connected cube to flash its lights using the default cube
  // flash animation.
  rpc FlashCubeLights(FlashCubeLightsRequest) returns (FlashCubeLightsResponse) {
    option (google.api.http) = {
      post: "/v1/flash_cube_lights",
      body: "*"
    };
  }

  // Forget the robot's preferred cube. This will cause the robot to
  // connect to the cube with the highest RSSI (signal strength) next
  // time a connection is requested. Saves this preference to disk.
  // The next cube that the robot connects to will become its
  // preferred cube.
  rpc ForgetPreferredCube(ForgetPreferredCubeRequest) returns (ForgetPreferredCubeResponse) {
    option (google.api.http) = {
      post: "/v1/forget_preferred_cube",
      body: "*"
    };
  }

  // Set the robot's preferred cube and save it to disk. The robot
  // will always attempt to connect to this cube if it is available.
  // This is only used in simulation for now.
  rpc SetPreferredCube(SetPreferredCubeRequest) returns (SetPreferredCubeResponse) {
    option (google.api.http) = {
      post: "/v1/set_preferred_cube",
      body: "*"
    };
  }

  // Set each of the lights on the currently connected cube based on two
  // rgb values each and timing data for how to transition between them.
  rpc SetCubeLights(SetCubeLightsRequest) returns (SetCubeLightsResponse) {}

  // Request an audio feed from the robot
  rpc AudioFeed(AudioFeedRequest) returns (stream AudioFeedResponse) {
    option (google.api.http) = {
      post: "/v1/audio_feed",
      body: "*"
    };
  }

  // Request a camera feed from the robot
  rpc CameraFeed(CameraFeedRequest) returns (stream CameraFeedResponse) {
    option (google.api.http) = {
      post: "/v1/camera_feed",
      body: "*"
    };
  }

  // CheckUpdateStatus tells if the robot is ready to reboot and update.
  rpc CheckUpdateStatus(CheckUpdateStatusRequest) returns (CheckUpdateStatusResponse) {
    option (google.api.http) = {
      post: "/v1/check_update_status",
      body: "*"
    };
  }

  // UpdateAndRestart reboots the robot when an update is available.
  // This will apply the update when the robot starts up.
  rpc UpdateAndRestart(UpdateAndRestartRequest) returns (UpdateAndRestartResponse) {
    option (google.api.http) = {
      post: "/v1/update_and_restart",
      body: "*"
    };
  }

  // UploadDebugLogs will upload debug logs to S3, and return a url to the caller.
  rpc UploadDebugLogs(UploadDebugLogsRequest) returns (UploadDebugLogsResponse) {
    option (google.api.http) = {
      post: "/v1/upload_debug_logs",
      body: "*"
    };
  }

  // CheckCloudConnection is used to verify Vector's connection to the Anki Cloud.
  rpc CheckCloudConnection(CheckCloudRequest) returns (CheckCloudResponse) {
    option (google.api.http) = {
      post: "/v1/check_cloud_connection",
      body: "*"
    };
  }
}
