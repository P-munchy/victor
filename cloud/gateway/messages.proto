// External interface for robot <-> app and robot <-> sdk communication

syntax = "proto3";

package Anki.Cozmo.external_interface;

option optimize_for = LITE_RUNTIME;

import "extensions.proto";

message ResultStatus {
  string description = 1;
}

message Animation {
  string name = 1;
}

message DriveWheelsRequest {
  float left_wheel_mmps   = 1;
  float right_wheel_mmps  = 2;
  float left_wheel_mmps2  = 3;
  float right_wheel_mmps2 = 4;
}

message DriveWheelsResult {
  ResultStatus status = 1;
}

message MoveHeadRequest {
  float speed_rad_per_sec = 1;
}

message MoveHeadResult {
  ResultStatus status = 1;
}

message MoveLiftRequest {
  float speed_rad_per_sec = 1;
}

message MoveLiftResult {
  ResultStatus status = 1;
}

message DriveArcRequest {
  float speed = 1;
  float accel = 2;
  int32 curvature_radius_mm = 3;
}

message DriveArcResult {
  ResultStatus status = 1;
}

// TODO: hook up ignore tracks and test that they work in the new world
message PlayAnimationRequest {
  Animation animation = 1;
  uint32 loops = 2;
  bool ignore_body_track = 3;
  bool ignore_head_track = 4;
  bool ignore_lift_track = 5;
}

message PlayAnimationResult {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

message ListAnimationsRequest {}

message ListAnimationsResult {
  ResultStatus status = 1;
  repeated Animation animation_names = 2;
}

message FeatureStatus {
  string feature_name = 1;
  string source      = 2; // Voice, App, AI, Unknown
}

message DisplayFaceImageRGBRequest {
  bytes face_data = 1;
  uint32 duration_ms = 2;
  bool interrupt_running = 3;
}

message DisplayFaceImageRGBResult {
  ResultStatus status = 1;
}

message MeetVictorFaceScanStarted
{
}

message MeetVictorFaceScanComplete
{
}

message Status {
  oneof status_type {
    FeatureStatus                   feature_status                   = 1;
    MeetVictorFaceScanStarted       meet_victor_face_scan_started    = 2;
    MeetVictorFaceScanComplete      meet_victor_face_scan_complete   = 3;
    FaceEnrollmentCompleted         face_enrollment_completed        = 4;
  }
}

message Onboarding {
  oneof onboarding_type {
    OnboardingState                    onboarding_state              = 1;
    OnboardingOnCharger                onboarding_on_charger         = 2;
    OnboardingLowBattery               onboarding_battery            = 3;
    OnboardingPickedUp                 onboarding_picked_up          = 4;
    OnboardingSeesCube                 onboarding_sees_cube          = 5;
    OnboardingCantFindCube             onboarding_cant_find_cube     = 6;
    OnboardingRobotExpectingStep       onboarding_expecting_step     = 7;
  }
}

message WakeWord {
  oneof wake_word_type {
    WakeWordBegin     wake_word_begin    = 1;
    WakeWordEnd       wake_word_end      = 2;
  }
}

message TimeStampedStatus {
  Status status = 1;
  uint32 timestamp_ms = 2;
}

message RobotHistoryRequest {
}

message RobotHistoryResult {
  repeated TimeStampedStatus messages = 1;
}

message PoseStruct {
  // Translation
  float x = 1;
  float y = 2;
  float z = 3;
  
  // Rotation quaternion
  float q0 = 4;
  float q1 = 5;
  float q2 = 6;
  float q3 = 7;

  uint32 origin_id = 8; // Which coordinate frame this pose is in (0 for none or unknown)
}

message AccelData {
  float x = 1;  // mm/s^2
  float y = 2;
  float z = 3;
}

message GyroData {
  float x = 1;  // rad/s
  float y = 2;
  float z = 3;
}

message RobotState {
  PoseStruct pose = 1;
  float pose_angle_rad = 2;
  float pose_pitch_rad = 3;
  float left_wheel_speed_mmps = 4;
  float right_wheel_speed_mmps = 5;
  float head_angle_rad = 6;
  float lift_height_mm = 7;
  float battery_voltage = 8;
  AccelData accel = 9;
  GyroData gyro = 10;
  int32 carrying_object_id = 11;
  int32 carrying_object_on_top_id = 12;
  int32 head_tracking_object_id = 13;
  int32 localized_to_object_id = 14;
  uint32 last_image_time_stamp = 15;
  uint32 status = 16;
  uint32 game_status = 17;
}

message CladPoint
{
  float x = 1;
  float y = 2;
}

message CladRect
{
  float x_top_left = 1;
  float y_top_left = 2;
  float width = 3;
  float height = 4;
}

// This is an int8 on the clad side.
// Proto field names are prefixed with "EXPRESSION_"
enum FacialExpression
{
  option allow_alias = true;
  EXPRESSION_UNKNOWN = 0;    // e.g. expression estimation disabled.

  EXPRESSION_NEUTRAL = 1;
  EXPRESSION_HAPPINESS = 2;
  EXPRESSION_SURPRISE = 3;
  EXPRESSION_ANGER = 4;
  EXPRESSION_SADNESS = 5;

  // Clad does not account for "Unknown" in the count.
  EXPRESSION_COUNT = 5;
}

message RobotObservedFace {
  int32 face_id = 1;         // negative: tracked but not recognized; positive: recognized face
  uint32 timestamp = 2;
  PoseStruct pose = 3;
  CladRect img_rect = 4;       // position in image coords
  string name = 5;           // Empty if none assigned yet

  FacialExpression expression = 6;

  // Individual expression values histogram, sums to 100 (Exception: all zero if expression=Unknown)
  repeated uint32 expression_values = 7; // This is a uint32 on the clad side

  // Face landmarks
  repeated CladPoint left_eye = 8;
  repeated CladPoint right_eye = 9;
  repeated CladPoint nose = 10;
  repeated CladPoint mouth = 11;
}

// RobotChangedObservedFaceID
//  This generally happens when a tracked face (negative ID) is recognized and
//  receives a positive ID or when face records get merged
message RobotChangedObservedFaceID {
  int32   old_id = 1;
  int32   new_id = 2;
}

// TODO: Remove this request/response once RobotState is made an event
message RobotStateRequest {}

message RobotStateResult {
  option (streamed) = true;
  ResultStatus status = 1;
  RobotState robot_state = 2;
}

message SDKActivationRequest {
  uint32 slot = 1; // TODO Use BehaviorSlot
  bool enable = 2;
}

message SDKActivationResult {
  ResultStatus status = 1;
  uint32 slot = 2; // TODO Use BehaviorSlot
  bool enabled = 3;
}

// Meet Victor
message AppIntentRequest {
  string intent = 1;
  string param = 2;
}

enum FaceEnrollmentResult
{
  SUCCESS = 0;

  // Failures:
  SAW_WRONG_FACE = 1;
  SAW_MULTIPLE_FACES = 2;
  TIMED_OUT = 3;
  SAVE_FAILED = 4;
  INCOMPLETE = 5;
  CANCELLED = 6;
  NAME_IN_USE = 7;
  NAMED_STORAGE_FULL = 8;
  UNKNOWN_FAILURE = 9;
}

message AppIntentResult {
  ResultStatus status = 1;
}

message FaceEnrollmentCompleted {
  FaceEnrollmentResult result = 1;
  int32                face_id = 2;
  string               name = 3;
}

message CancelFaceEnrollmentRequest {
}

message CancelFaceEnrollmentResult {
  ResultStatus status = 1;
}

message RequestEnrolledNamesRequest {
}

message LoadedKnownFace {
  int64  seconds_since_first_enrolled = 1;
  int64  seconds_since_last_updated = 2;
  int64  seconds_since_last_seen = 3;
  int64  last_seen_seconds_since_epoch = 4;
  int32  face_id = 5;
  string name = 6;
}

message RobotRenamedEnrolledFace {
    int32   face_id = 1;
    string   name = 2;
}

message RequestEnrolledNamesResult {
  ResultStatus status = 1;
  repeated LoadedKnownFace faces = 2;
}

message UpdateEnrolledFaceByIDRequest {
  int32 face_id = 1;
  string old_name = 2;
  string new_name = 3;
}

message UpdateEnrolledFaceByIDResult {
  ResultStatus status = 1;
}

message EraseEnrolledFaceByIDRequest {
  int32 face_id = 1;
}

message EraseEnrolledFaceByIDResult {
  ResultStatus status = 1;
}

message EraseAllEnrolledFacesRequest {
}

message EraseAllEnrolledFacesResult {
  ResultStatus status = 1;
}

message SetFaceToEnrollRequest {
  string  name = 1;

  int32   observed_id = 2;  // The ID of a specific observed face to enroll (0 for next one we see)
  int32   save_id = 3;      // The ID of an existing face to merge final enrollment into (0 for none,
                        // i.e. use observedID)

  bool    save_to_robot = 4;   // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
  bool    say_name = 5;       // Play say-name/celebration animations on success before completing
  bool    use_music = 6;       // Starts special music during say-name animations (will leave music playing!)
}
message SetFaceToEnrollResult {
  ResultStatus status = 1;
}

enum BehaviorResults
{
  BEHAVIOR_INVALID_STATE = 0;
  BEHAVIOR_COMPLETE_STATE = 1;
  BEHAVIOR_WONT_ACTIVATE_STATE = 2;
}

message DriveOffChargerRequest {
}

message DriveOffChargerResult {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

message DriveOnChargerRequest {
}

message DriveOnChargerResult {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

// TODO: Remove this example code once more code is converted to protobuf
message Ping {
  uint64 ping = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Pong {
  uint64 pong = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Bing {
  string bing = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Bong {
  string bong = 1;
}

enum OnboardingStages
{
  NotStarted = 0;
  FinishedComeHere = 1;
  FinishedMeetVictor = 2;
  Complete = 3;
  DevDoNothing = 4;
}

message OnboardingState {
  OnboardingStages stage = 1;
}

message OnboardingOnCharger {
  bool on_charger = 1;
  bool needs_to_charge = 2;
  float required_charge_time_s = 3;
}

message OnboardingLowBattery {
  bool low_battery = 1;
}

message OnboardingPickedUp {
  bool picked_up = 1;
}

message OnboardingSeesCube {
  bool sees_cube = 1;
}

message OnboardingCantFindCube {
}

message OnboardingStateRequest {
}

message OnboardingStateResponse {
  ResultStatus status = 1;
  OnboardingState onboarding_state = 2;
}

enum OnboardingSteps {
  DEFAULT = 0;
  FIRST_TRIGGER_WORD = 1;
}

message OnboardingContinue {
  OnboardingSteps step_number = 1;
}

message OnboardingContinueResponse {
  bool accepted = 1;
}

message OnboardingSkip {
}

message OnboardingRetryCharging {
}

message OnboardingConnectionComplete {
}

message OnboardingSkipOnboarding {
}

message OnboardingInputRequest {
  oneof oneof_message_type {
    OnboardingContinue onboarding_continue = 1;
    OnboardingSkip onboarding_skip = 2;
    OnboardingRetryCharging onboarding_retry_charging = 3;
    OnboardingConnectionComplete onboarding_connection_complete = 4;
    OnboardingSkipOnboarding onboarding_skip_onboarding = 5;
  }
}

message OnboardingInputResponse {
  ResultStatus status = 1;
  oneof oneof_message_type {
    OnboardingContinueResponse onboarding_continue_response = 2;
  }
}

message OnboardingRobotExpectingStep {
  OnboardingSteps step_number = 1;
}

message WakeWordBegin {
}

message WakeWordEnd {
  bool intent_heard = 1;
  string intent_json = 2; // todo: we send json as a string for now since the engine handling of intents is tightly coupled with clad
}

// Photos

message PhotoInfo {
  uint32 photo_id = 1;
  uint32 timestamp_utc = 2;
  bool photo_copied_to_app = 3;
  bool thumb_copied_to_app = 4;
}

message PhotosInfoRequest {
}

message PhotosInfoResponse {
  ResultStatus status = 1;
  repeated PhotoInfo photo_infos = 2;
}

message PhotoRequest {
  uint32 photo_id = 1;
}

message PhotoPathMessage {
  bool success = 1;
  string full_path = 2;
}

message PhotoResponse {
  ResultStatus status = 1;
  bool success = 2;
  bytes image = 3;
}

message ThumbnailRequest {
  uint32 photo_id = 1;
}

message ThumbnailPathMessage {
  bool success = 1;
  string full_path = 2;
}

message ThumbnailResponse {
  ResultStatus status = 1;
  bool success = 2;
  bytes image = 3;
}

message DeletePhotoRequest {
  uint32 photo_id = 1;
}

message DeletePhotoResponse {
  ResultStatus status = 1;
  bool success = 2;
}

// NOTE: must match attentionTransferTypes.clad
enum AttentionTransferReason {
  Invalid = 0;

  NoCloudConnection = 1;
  NoWifi = 2;
  UnmatchedIntent = 3;
}

message AttentionTransfer {
  AttentionTransferReason reason = 1;
  float seconds_ago = 2;
}

message LatestAttentionTransferRequest {
}

message LatestAttentionTransfer {
  oneof oneof_message_type {
    AttentionTransfer attention_transfer = 1;
  }
}

message LatestAttentionTransferResponse {
  ResultStatus status = 1;
  LatestAttentionTransfer latest_attention_transfer = 2;
}

// Proto field names are prefixed with "VISION_MODE_"
enum VisionMode {
  VISION_MODE_IDLE = 0;
  VISION_MODE_DETECTING_MARKERS = 1;
  VISION_MODE_DETECTING_FACES = 2;
  VISION_MODE_DETECTING_MOTION = 3;
  VISION_MODE_DETECTING_OVERHEAD_EDGES = 4;
  VISION_MODE_COMPUTING_CALIBRATION = 5;
  VISION_MODE_CHECKING_QUALITY = 6;
  VISION_MODE_CHECKING_WHITE_BALANCE = 7;
  VISION_MODE_COMPUTING_STATISTICS = 8;
  VISION_MODE_DETECTING_PETS = 9;
  VISION_MODE_ESTIMATING_FACIAL_EXPRESSION = 10;  // No effect if DetectingFaces not enabled
  VISION_MODE_DETECTING_SMILE_AMOUNT = 11;        //  "
  VISION_MODE_DETECTING_GAZE = 12;               //  "
  VISION_MODE_DETECTING_BLINK_AMOUNT = 13;        //  "
  VISION_MODE_LIMITED_EXPOSURE = 14;
  VISION_MODE_DETECTING_LASER_POINTS = 15;
  VISION_MODE_BUILDING_OVERHEAD_MAP = 16;
  VISION_MODE_DETECTING_VISUAL_OBSTACLES = 17;
  VISION_MODE_BENCHMARKING = 18;
  VISION_MODE_SAVING_IMAGES = 19;
  VISION_MODE_RUNNING_NEURAL_NET = 20; 
  VISION_MODE_DETECTING_ILLUMINATION = 21;
  VISION_MODE_COUNT = 22;
}

message EnableVisionModeRequest {
  VisionMode mode = 1;
  bool       enable = 2;
}

message EnableVisionModeResult {
  ResultStatus status = 1;
}

// Struct containing all the information relevant to how a 
// path should be modified or traversed.
// TODO: Include path wonkification parameters
message PathMotionProfile {
  float speed_mmps = 1;
  float accel_mmps2 = 2;
  float decel_mmps2 = 3;
  float point_turn_speed_rad_per_sec = 4;
  float point_turn_accel_rad_per_sec2 = 5;
  float point_turn_decel_rad_per_sec2 = 6;
  float dock_speed_mmps = 7;
  float dock_accel_mmps2 = 8;
  float dock_decel_mmps2 = 9;
  float reverse_speed_mmps = 10;
  bool  is_custom = 11;
}

enum ActionResult {
  ACTION_RESULT_SUCCESS                 = 0;
  ACTION_RESULT_RUNNING                 = 16777216;
  ACTION_RESULT_CANCELLED_WHILE_RUNNING = 33554432;
}

// GotoPose
message GoToPoseRequest {
  float x_mm = 1;
  float y_mm = 2;
  float rad = 3; 
  PathMotionProfile motion_prof = 4;
}

message GoToPoseResponse {
  ActionResult result = 1;
}

message DriveStraightRequest {
   float speed_mmps = 1;  // Speed should be positive
   float dist_mm = 2;     // Use +ve for forward, -ve for backward
   bool should_play_animation = 3;
}

message DriveStraightResponse {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

// TurnInPlace
// If isAbsolute == 0, turns the specified number of radians, *relative to the robot's current heading*
// If isAbsolute != 0, turns to the specified absolute orientation.
message TurnInPlaceRequest {
    float angle_rad = 1; // relative mode: postive turns left negative turns right
    float speed_rad_per_sec = 2;
    float accel_rad_per_sec2 = 3;
    float tol_rad = 4; // This should be no smaller than POINT_TURN_ANGLE_TOL from cozmoEngineConfig.h.
                            // Smaller values are ignored except 0 which is interpreted to mean
                            // default tolerance of POINT_TURN_ANGLE_TOL.
    uint32 is_absolute = 5; // 0: angle_rad is relative to current orientation, 1: angle_rad is absolute angle to turn to
}

message TurnInPlaceResponse {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

// SetHeadAngle
message SetHeadAngleRequest {
    float angle_rad = 1;
    float max_speed_rad_per_sec = 2;
    float accel_rad_per_sec2 = 3;
    float duration_sec = 4;
}

message SetHeadAngleResponse {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

// SetLiftHeight
message SetLiftHeightRequest {
    float height_mm = 1;
    float max_speed_rad_per_sec = 2;
    float accel_rad_per_sec2 = 3;
    float duration_sec = 4;
}

message SetLiftHeightResponse {
  ResultStatus status = 1;
  BehaviorResults result = 2;
}

// SetBackpackLEDs
message SetBackpackLEDsRequest {
  repeated uint32  on_color = 1;
  repeated uint32  off_color = 2;
  repeated uint32  on_period_ms = 3;
  repeated uint32  off_period_ms = 4;
  repeated uint32  transition_on_period_ms = 5;
  repeated uint32  transition_off_period_ms = 6;
}

message SetBackpackLEDsResponse {
  ResultStatus status = 1;
}

// Cube connection messages

message RequestCubeConnection {
}

message DoneWithCubeConnection {
}

message FlashCubeLights {
}

message ForgetPreferredCube {
}

message CubeConnectionAttemptResult {
  bool success = 1;
}

message CubeConnectionLost {
}

