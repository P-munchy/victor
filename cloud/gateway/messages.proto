// External interface for robot <-> app and robot <-> sdk communication

syntax = "proto3";

package external_interface;

option optimize_for = LITE_RUNTIME;

message ResultStatus {
  string description = 1;
}

message Animation {
  string name = 1;
}

message DriveWheelsRequest {
  float left_wheel_mmps   = 1;
  float right_wheel_mmps  = 2;
  float left_wheel_mmps2  = 3;
  float right_wheel_mmps2 = 4;
}

message DriveWheelsResult {
  ResultStatus status = 1;
}

message MoveHeadRequest {
  float speed_rad_per_sec = 1;
}

message MoveHeadResult {
  ResultStatus status = 1;
}

message MoveLiftRequest {
  float speed_rad_per_sec = 1;
}

message MoveLiftResult {
  ResultStatus status = 1;
}

message DriveArcRequest {
  float speed = 1;
  float accel = 2;
  int32 curvature_radius_mm = 3;
}

message DriveArcResult {
  ResultStatus status = 1;
}

message PlayAnimationRequest {
  Animation animation = 1;
  uint32 loops = 2;
}

message PlayAnimationResult {
  ResultStatus status = 1;
}

message ListAnimationsRequest {}

message ListAnimationsResult {
  ResultStatus status = 1;
  repeated Animation animation_names = 2;
}

message FeatureStatus {
  string feature_name = 1;
  string source      = 2; // Voice, App, AI, Unknown
}

message DisplayFaceImageRGBRequest {
  bytes face_data = 1;
  uint32 duration_ms = 2;
  bool interrupt_running = 3;
}

message DisplayFaceImageRGBResult {
  ResultStatus status = 1;
}

message MeetVictorFaceScanStarted
{
}

message MeetVictorFaceScanComplete
{
}

message Status {
  oneof status_type {
     FeatureStatus                   featureStatus                    = 1;
     MeetVictorFaceScanStarted       meet_victor_face_scan_started    = 2;
     MeetVictorFaceScanComplete      meet_victor_face_scan_complete   = 3;
  }
}

message Onboarding {
  oneof onboarding_type {
    OnboardingState                    onboarding_state              = 1;
    OnboardingOnCharger                onboarding_on_charger         = 2;
    OnboardingLowBattery               onboarding_battery            = 3;
    OnboardingPickedUp                 onboarding_picked_up          = 4;
    OnboardingSeesCube                 onboarding_sees_cube          = 5;
    OnboardingCantFindCube             onboarding_cant_find_cube     = 6;
    OnboardingRobotExpectingContinue   onboarding_expecting_continue = 7;
  }
}

message WakeWord {
  oneof wake_word_type {
    WakeWordBegin     wake_word_begin    = 1;
    WakeWordEnd       wake_word_end      = 2;
  }
}

message TimeStampedStatus {
  Status status = 1;
  uint32 timestamp_ms = 2;
}

message RobotHistoryRequest {
}

message RobotHistoryResult {
  repeated TimeStampedStatus messages = 1;
}

message PoseStruct {
    // Translation
    float x = 1;
    float y = 2;
    float z = 3;
    
    // Rotation quaternion
    float q0 = 4;
    float q1 = 5;
    float q2 = 6;
    float q3 = 7;

    uint32 origin_id = 8; // Which coordinate frame this pose is in (0 for none or unknown)
}

message AccelData {
  float x = 1;  // mm/s^2
  float y = 2;
  float z = 3;
}

message GyroData {
  float x = 1;  // rad/s
  float y = 2;
  float z = 3;
}

message RobotState {
    PoseStruct pose = 1;
    float pose_angle_rad = 2;
    float pose_pitch_rad = 3;
    float left_wheel_speed_mmps = 4;
    float right_wheel_speed_mmps = 5;
    float head_angle_rad = 6;
    float lift_height_mm = 7;
    float battery_voltage = 8;
    AccelData accel = 9;
    GyroData gyro = 10;
    int32 carrying_object_id = 11;
    int32 carrying_object_on_top_id = 12;
    int32 head_tracking_object_id = 13;
    int32 localized_to_object_id = 14;
    uint32 last_image_time_stamp = 15;
    uint32 status = 16;
    uint32 game_status = 17;
}

message Event {
  oneof event_type {
    Status                           status                              = 1;
    Onboarding                       onboarding                          = 2;
    WakeWord                         wake_word                           = 3;
    AttentionTransfer                attention_transfer                  = 4;
  }
}

message EventRequest {}

message EventResult {
  ResultStatus status = 1;
  Event event = 2;
}

// TODO: Remove this request/response once RobotState is made an event
message RobotStateRequest {}

message RobotStateResult {
  ResultStatus status = 1;
  RobotState robot_state = 2;
}

message SDKActivationRequest {
  uint32 slot = 1; // TODO Use BehaviorSlot
  bool enable = 2;
}

message SDKActivationResult {
  ResultStatus status = 1;
  uint32 slot = 2; // TODO Use BehaviorSlot
  bool enabled = 3;
}

// Meet Victor
message AppIntentRequest {
  string intent = 1;
  string param = 2;
}

enum FaceEnrollmentResult
{
    SUCCESS = 0;

    // Failures:
    SAW_WRONG_FACE = 1;
    SAW_MULTIPLE_FACES = 2;
    TIMED_OUT = 3;
    SAVE_FAILED = 4;
    INCOMPLETE = 5;
    CANCELLED = 6;
    NAME_IN_USE = 7;
    UNKNOWN_FAILURE = 8;
}

message AppIntentResult {
  ResultStatus status = 1;
}

message FaceEnrollmentCompleted {
  FaceEnrollmentResult result = 1;
  int32               face_id = 2;
  string               name = 3;
}

message CancelFaceEnrollmentRequest {
}

message CancelFaceEnrollmentResult {
  ResultStatus status = 1;
}

message RequestEnrolledNamesRequest {
}

message LoadedKnownFace {
    int64   seconds_since_first_enrolled = 1;
    int64   seconds_since_last_updated = 2;
    int64   seconds_since_last_seen = 3;
    int32   face_id = 4;
    string  name = 5;
}

message RobotRenamedEnrolledFace {
    int32   face_id = 1;
    string   name = 2;
}

message RequestEnrolledNamesResult {
  ResultStatus status = 1;
  repeated LoadedKnownFace faces = 2;
}

message UpdateEnrolledFaceByIDRequest {
  int32 face_id = 1;
  string old_name = 2;
  string new_name = 3;
}

message UpdateEnrolledFaceByIDResult {
  ResultStatus status = 1;
}

message EraseEnrolledFaceByIDRequest {
  int32 face_id = 1;
}

message EraseEnrolledFaceByIDResult {
  ResultStatus status = 1;
}

message EraseAllEnrolledFacesRequest {
}

message EraseAllEnrolledFacesResult {
  ResultStatus status = 1;
}

message SetFaceToEnrollRequest {
    string  name = 1;

    int32   observed_id = 2;  // The ID of a specific observed face to enroll (0 for next one we see)
    int32   save_id = 3;      // The ID of an existing face to merge final enrollment into (0 for none,
                          // i.e. use observedID)

    bool    save_to_robot = 4;   // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
    bool    say_name = 5;       // Play say-name/celebration animations on success before completing
    bool    use_music = 6;       // Starts special music during say-name animations (will leave music playing!)
  
}
message SetFaceToEnrollResult {
  ResultStatus status = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Ping {
  uint64 ping = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Pong {
  uint64 pong = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Bing {
  string bing = 1;
}

// TODO: Remove this example code once more code is converted to protobuf
message Bong {
  string bong = 1;
}

enum OnboardingStages
{
  NotStarted = 0;
  FinishedComeHere = 1;
  FinishedMeetVictor = 2;
  Complete = 3;
  DevDoNothing = 4;
}

message OnboardingState {
  OnboardingStages stage = 1;
}

message OnboardingOnCharger {
  bool on_charger = 1;
  bool needs_to_charge = 2;
  float required_charge_time_s = 3;
}

message OnboardingLowBattery {
  bool low_battery = 1;
}

message OnboardingPickedUp {
  bool picked_up = 1;
}

message OnboardingSeesCube {
  bool sees_cube = 1;
}

message OnboardingCantFindCube {
}

message OnboardingStateRequest {
}

message OnboardingStateResponse {
  ResultStatus status = 1;
  OnboardingState onboarding_state = 2;
}

enum OnboardingContinueEnum {
  Default = 0;
}

message OnboardingContinue {
  OnboardingContinueEnum continue_number = 1;
}

message OnboardingContinueResponse {
  bool accepted = 1;
}

message OnboardingSkip {
}

message OnboardingRetryCharging {
}


message OnboardingInputRequest {
  oneof oneof_message_type {
    OnboardingContinue onboarding_continue = 1;
    OnboardingSkip onboarding_skip = 2;
    OnboardingRetryCharging onboarding_retry_charging = 3;
  }
}

message OnboardingInputResponse {
  ResultStatus status = 1;
  oneof oneof_message_type {
    OnboardingContinueResponse onboarding_continue_response = 2;
  }
}

message OnboardingRobotExpectingContinue {
  OnboardingContinueEnum continue_number = 1;
}

message WakeWordBegin {
}

message WakeWordEnd {
  bool intent_heard = 1;
  string intent_json = 2; // todo: we send json as a string for now since the engine handling of intents is tightly coupled with clad
}

// NOTE: must match attentionTransferTypes.clad
enum AttentionTransferReason {
  Invalid = 0;

  NoCloudConnection = 1;
  PhotoStorageFull = 2;
  CantFindCharger = 3;
  UnmatchedIntent = 4;
}

message AttentionTransfer {
  AttentionTransferReason reason = 1;
  float seconds_ago = 2;
}

message LatestAttentionTransferRequest {
}

message LatestAttentionTransfer {
  oneof oneof_message_type {
    AttentionTransfer attention_transfer = 1;
  }
}

message LatestAttentionTransferResponse {
  ResultStatus status = 1;
  LatestAttentionTransfer latest_attention_transfer = 2;
}

message GatewayWrapper {
  oneof oneof_message_type {
    // ------------ messages sent from robot to app ----------------------
    Event event = 1;
    // ------------ onboarding requests and responses --------------------
    OnboardingStateRequest        onboarding_state_request = 2;
    OnboardingState               onboarding_state = 3;
    OnboardingContinue            onboarding_continue = 4;
    OnboardingContinueResponse    onboarding_continue_response = 5;
    OnboardingSkip                onboarding_skip = 6;
    // ------------ test response/response pairs -------------------------
    // TODO: remove these once we have more examples
    Ping ping = 7;
    Pong pong = 8;
    Bing bing = 9;
    Bong bong = 10;
    // ------------ Attention transfer --------------------
    LatestAttentionTransferRequest latest_attention_transfer_request = 11;
    LatestAttentionTransfer        latest_attention_transfer = 12;
  }
}
