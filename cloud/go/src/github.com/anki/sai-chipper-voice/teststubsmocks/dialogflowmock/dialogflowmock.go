// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anki/sai-chipper-voice/conversation/dialogflow (interfaces: SessionClient,StreamingClient)

// Package dialogflowmock is a generated GoMock package.
package dialogflowmock

import (
	context "context"
	dialogflow "github.com/anki/sai-chipper-voice/conversation/dialogflow"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionClient is a mock of SessionClient interface
type MockSessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionClientMockRecorder
}

// MockSessionClientMockRecorder is the mock recorder for MockSessionClient
type MockSessionClientMockRecorder struct {
	mock *MockSessionClient
}

// NewMockSessionClient creates a new mock instance
func NewMockSessionClient(ctrl *gomock.Controller) *MockSessionClient {
	mock := &MockSessionClient{ctrl: ctrl}
	mock.recorder = &MockSessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionClient) EXPECT() *MockSessionClientMockRecorder {
	return m.recorder
}

// DetectTextIntent mocks base method
func (m *MockSessionClient) DetectTextIntent(arg0 context.Context, arg1, arg2 string) (*dialogflow.IntentResponse, error) {
	ret := m.ctrl.Call(m, "DetectTextIntent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dialogflow.IntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectTextIntent indicates an expected call of DetectTextIntent
func (mr *MockSessionClientMockRecorder) DetectTextIntent(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectTextIntent", reflect.TypeOf((*MockSessionClient)(nil).DetectTextIntent), arg0, arg1, arg2)
}

// MockStreamingClient is a mock of StreamingClient interface
type MockStreamingClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingClientMockRecorder
}

// MockStreamingClientMockRecorder is the mock recorder for MockStreamingClient
type MockStreamingClientMockRecorder struct {
	mock *MockStreamingClient
}

// NewMockStreamingClient creates a new mock instance
func NewMockStreamingClient(ctrl *gomock.Controller) *MockStreamingClient {
	mock := &MockStreamingClient{ctrl: ctrl}
	mock.recorder = &MockStreamingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamingClient) EXPECT() *MockStreamingClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStreamingClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStreamingClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamingClient)(nil).Close))
}

// Recv mocks base method
func (m *MockStreamingClient) Recv() (bool, *dialogflow.IntentResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*dialogflow.IntentResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Recv indicates an expected call of Recv
func (mr *MockStreamingClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamingClient)(nil).Recv))
}

// Send mocks base method
func (m *MockStreamingClient) Send(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockStreamingClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamingClient)(nil).Send), arg0)
}
