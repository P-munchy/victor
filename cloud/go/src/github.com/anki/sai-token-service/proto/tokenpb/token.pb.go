// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/tokenpb/token.proto

/*
Package tokenpb is a generated protocol buffer package.

It is generated from these files:
	proto/tokenpb/token.proto

It has these top-level messages:
	TokenBundle
	StsToken
	AssociatePrimaryUserRequest
	ReassociatePrimaryUserRequest
	ReassociatePrimaryUserResponse
	AssociatePrimaryUserResponse
	AssociateSecondaryClientRequest
	AssociateSecondaryClientResponse
	DisassociatePrimaryUserRequest
	DisassociatePrimaryUserResponse
	RefreshTokenRequest
	RefreshTokenResponse
	TokensPage
	ListRevokedTokensRequest
	ListRevokedTokensResponse
	RevokeFactoryCertificateRequest
	RevokeFactoryCertificateResponse
	RevokeTokensRequest
	RevokeTokensResponse
*/
package tokenpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenBundle struct {
	Token       string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ClientToken string `protobuf:"bytes,2,opt,name=client_token,json=clientToken" json:"client_token,omitempty"`
	// string sts_token = 3;
	StsToken *StsToken `protobuf:"bytes,4,opt,name=sts_token,json=stsToken" json:"sts_token,omitempty"`
}

func (m *TokenBundle) Reset()                    { *m = TokenBundle{} }
func (m *TokenBundle) String() string            { return proto.CompactTextString(m) }
func (*TokenBundle) ProtoMessage()               {}
func (*TokenBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TokenBundle) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenBundle) GetClientToken() string {
	if m != nil {
		return m.ClientToken
	}
	return ""
}

func (m *TokenBundle) GetStsToken() *StsToken {
	if m != nil {
		return m.StsToken
	}
	return nil
}

type StsToken struct {
	AccessKeyId     string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId" json:"access_key_id,omitempty"`
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey" json:"secret_access_key,omitempty"`
	SessionToken    string `protobuf:"bytes,3,opt,name=session_token,json=sessionToken" json:"session_token,omitempty"`
	Expiration      string `protobuf:"bytes,4,opt,name=expiration" json:"expiration,omitempty"`
}

func (m *StsToken) Reset()                    { *m = StsToken{} }
func (m *StsToken) String() string            { return proto.CompactTextString(m) }
func (*StsToken) ProtoMessage()               {}
func (*StsToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StsToken) GetAccessKeyId() string {
	if m != nil {
		return m.AccessKeyId
	}
	return ""
}

func (m *StsToken) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *StsToken) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *StsToken) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

type AssociatePrimaryUserRequest struct {
	// string robot_id = 1;
	// string user_session = 2;
	GenerateStsToken   bool   `protobuf:"varint,3,opt,name=generate_sts_token,json=generateStsToken" json:"generate_sts_token,omitempty"`
	SessionCertificate []byte `protobuf:"bytes,4,opt,name=session_certificate,json=sessionCertificate,proto3" json:"session_certificate,omitempty"`
	ClientName         string `protobuf:"bytes,5,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	AppId              string `protobuf:"bytes,6,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *AssociatePrimaryUserRequest) Reset()                    { *m = AssociatePrimaryUserRequest{} }
func (m *AssociatePrimaryUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AssociatePrimaryUserRequest) ProtoMessage()               {}
func (*AssociatePrimaryUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AssociatePrimaryUserRequest) GetGenerateStsToken() bool {
	if m != nil {
		return m.GenerateStsToken
	}
	return false
}

func (m *AssociatePrimaryUserRequest) GetSessionCertificate() []byte {
	if m != nil {
		return m.SessionCertificate
	}
	return nil
}

func (m *AssociatePrimaryUserRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *AssociatePrimaryUserRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type ReassociatePrimaryUserRequest struct {
	GenerateStsToken bool   `protobuf:"varint,1,opt,name=generate_sts_token,json=generateStsToken" json:"generate_sts_token,omitempty"`
	ClientName       string `protobuf:"bytes,2,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	AppId            string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *ReassociatePrimaryUserRequest) Reset()                    { *m = ReassociatePrimaryUserRequest{} }
func (m *ReassociatePrimaryUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ReassociatePrimaryUserRequest) ProtoMessage()               {}
func (*ReassociatePrimaryUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReassociatePrimaryUserRequest) GetGenerateStsToken() bool {
	if m != nil {
		return m.GenerateStsToken
	}
	return false
}

func (m *ReassociatePrimaryUserRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ReassociatePrimaryUserRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type ReassociatePrimaryUserResponse struct {
	Data *TokenBundle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ReassociatePrimaryUserResponse) Reset()                    { *m = ReassociatePrimaryUserResponse{} }
func (m *ReassociatePrimaryUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ReassociatePrimaryUserResponse) ProtoMessage()               {}
func (*ReassociatePrimaryUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReassociatePrimaryUserResponse) GetData() *TokenBundle {
	if m != nil {
		return m.Data
	}
	return nil
}

type AssociatePrimaryUserResponse struct {
	Data *TokenBundle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *AssociatePrimaryUserResponse) Reset()                    { *m = AssociatePrimaryUserResponse{} }
func (m *AssociatePrimaryUserResponse) String() string            { return proto.CompactTextString(m) }
func (*AssociatePrimaryUserResponse) ProtoMessage()               {}
func (*AssociatePrimaryUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AssociatePrimaryUserResponse) GetData() *TokenBundle {
	if m != nil {
		return m.Data
	}
	return nil
}

type AssociateSecondaryClientRequest struct {
	// string token = 1;
	UserSession string `protobuf:"bytes,2,opt,name=user_session,json=userSession" json:"user_session,omitempty"`
	ClientName  string `protobuf:"bytes,3,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	AppId       string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *AssociateSecondaryClientRequest) Reset()                    { *m = AssociateSecondaryClientRequest{} }
func (m *AssociateSecondaryClientRequest) String() string            { return proto.CompactTextString(m) }
func (*AssociateSecondaryClientRequest) ProtoMessage()               {}
func (*AssociateSecondaryClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AssociateSecondaryClientRequest) GetUserSession() string {
	if m != nil {
		return m.UserSession
	}
	return ""
}

func (m *AssociateSecondaryClientRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *AssociateSecondaryClientRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type AssociateSecondaryClientResponse struct {
	Data *TokenBundle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *AssociateSecondaryClientResponse) Reset()         { *m = AssociateSecondaryClientResponse{} }
func (m *AssociateSecondaryClientResponse) String() string { return proto.CompactTextString(m) }
func (*AssociateSecondaryClientResponse) ProtoMessage()    {}
func (*AssociateSecondaryClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *AssociateSecondaryClientResponse) GetData() *TokenBundle {
	if m != nil {
		return m.Data
	}
	return nil
}

type DisassociatePrimaryUserRequest struct {
}

func (m *DisassociatePrimaryUserRequest) Reset()                    { *m = DisassociatePrimaryUserRequest{} }
func (m *DisassociatePrimaryUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DisassociatePrimaryUserRequest) ProtoMessage()               {}
func (*DisassociatePrimaryUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DisassociatePrimaryUserResponse struct {
}

func (m *DisassociatePrimaryUserResponse) Reset()                    { *m = DisassociatePrimaryUserResponse{} }
func (m *DisassociatePrimaryUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DisassociatePrimaryUserResponse) ProtoMessage()               {}
func (*DisassociatePrimaryUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RefreshTokenRequest struct {
	// string token = 1;
	RefreshJwtTokens bool `protobuf:"varint,2,opt,name=refresh_jwt_tokens,json=refreshJwtTokens" json:"refresh_jwt_tokens,omitempty"`
	RefreshStsTokens bool `protobuf:"varint,3,opt,name=refresh_sts_tokens,json=refreshStsTokens" json:"refresh_sts_tokens,omitempty"`
}

func (m *RefreshTokenRequest) Reset()                    { *m = RefreshTokenRequest{} }
func (m *RefreshTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenRequest) ProtoMessage()               {}
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RefreshTokenRequest) GetRefreshJwtTokens() bool {
	if m != nil {
		return m.RefreshJwtTokens
	}
	return false
}

func (m *RefreshTokenRequest) GetRefreshStsTokens() bool {
	if m != nil {
		return m.RefreshStsTokens
	}
	return false
}

type RefreshTokenResponse struct {
	Data *TokenBundle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *RefreshTokenResponse) Reset()                    { *m = RefreshTokenResponse{} }
func (m *RefreshTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenResponse) ProtoMessage()               {}
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RefreshTokenResponse) GetData() *TokenBundle {
	if m != nil {
		return m.Data
	}
	return nil
}

type TokensPage struct {
	Tokens  []string `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	LastKey string   `protobuf:"bytes,2,opt,name=last_key,json=lastKey" json:"last_key,omitempty"`
	Done    bool     `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
}

func (m *TokensPage) Reset()                    { *m = TokensPage{} }
func (m *TokensPage) String() string            { return proto.CompactTextString(m) }
func (*TokensPage) ProtoMessage()               {}
func (*TokensPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TokensPage) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *TokensPage) GetLastKey() string {
	if m != nil {
		return m.LastKey
	}
	return ""
}

func (m *TokensPage) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type ListRevokedTokensRequest struct {
	PreviousKey string `protobuf:"bytes,1,opt,name=previous_key,json=previousKey" json:"previous_key,omitempty"`
}

func (m *ListRevokedTokensRequest) Reset()                    { *m = ListRevokedTokensRequest{} }
func (m *ListRevokedTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRevokedTokensRequest) ProtoMessage()               {}
func (*ListRevokedTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListRevokedTokensRequest) GetPreviousKey() string {
	if m != nil {
		return m.PreviousKey
	}
	return ""
}

type ListRevokedTokensResponse struct {
	Data *TokensPage `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ListRevokedTokensResponse) Reset()                    { *m = ListRevokedTokensResponse{} }
func (m *ListRevokedTokensResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRevokedTokensResponse) ProtoMessage()               {}
func (*ListRevokedTokensResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListRevokedTokensResponse) GetData() *TokensPage {
	if m != nil {
		return m.Data
	}
	return nil
}

type RevokeFactoryCertificateRequest struct {
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
}

func (m *RevokeFactoryCertificateRequest) Reset()         { *m = RevokeFactoryCertificateRequest{} }
func (m *RevokeFactoryCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeFactoryCertificateRequest) ProtoMessage()    {}
func (*RevokeFactoryCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15}
}

func (m *RevokeFactoryCertificateRequest) GetCertificateId() string {
	if m != nil {
		return m.CertificateId
	}
	return ""
}

type RevokeFactoryCertificateResponse struct {
}

func (m *RevokeFactoryCertificateResponse) Reset()         { *m = RevokeFactoryCertificateResponse{} }
func (m *RevokeFactoryCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*RevokeFactoryCertificateResponse) ProtoMessage()    {}
func (*RevokeFactoryCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

type RevokeTokensRequest struct {
	SearchByIndex string `protobuf:"bytes,1,opt,name=search_by_index,json=searchByIndex" json:"search_by_index,omitempty"`
	Key           string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *RevokeTokensRequest) Reset()                    { *m = RevokeTokensRequest{} }
func (m *RevokeTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*RevokeTokensRequest) ProtoMessage()               {}
func (*RevokeTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RevokeTokensRequest) GetSearchByIndex() string {
	if m != nil {
		return m.SearchByIndex
	}
	return ""
}

func (m *RevokeTokensRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type RevokeTokensResponse struct {
	TokensRevoked uint32 `protobuf:"varint,1,opt,name=tokens_revoked,json=tokensRevoked" json:"tokens_revoked,omitempty"`
}

func (m *RevokeTokensResponse) Reset()                    { *m = RevokeTokensResponse{} }
func (m *RevokeTokensResponse) String() string            { return proto.CompactTextString(m) }
func (*RevokeTokensResponse) ProtoMessage()               {}
func (*RevokeTokensResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RevokeTokensResponse) GetTokensRevoked() uint32 {
	if m != nil {
		return m.TokensRevoked
	}
	return 0
}

func init() {
	proto.RegisterType((*TokenBundle)(nil), "tokenpb.TokenBundle")
	proto.RegisterType((*StsToken)(nil), "tokenpb.StsToken")
	proto.RegisterType((*AssociatePrimaryUserRequest)(nil), "tokenpb.AssociatePrimaryUserRequest")
	proto.RegisterType((*ReassociatePrimaryUserRequest)(nil), "tokenpb.ReassociatePrimaryUserRequest")
	proto.RegisterType((*ReassociatePrimaryUserResponse)(nil), "tokenpb.ReassociatePrimaryUserResponse")
	proto.RegisterType((*AssociatePrimaryUserResponse)(nil), "tokenpb.AssociatePrimaryUserResponse")
	proto.RegisterType((*AssociateSecondaryClientRequest)(nil), "tokenpb.AssociateSecondaryClientRequest")
	proto.RegisterType((*AssociateSecondaryClientResponse)(nil), "tokenpb.AssociateSecondaryClientResponse")
	proto.RegisterType((*DisassociatePrimaryUserRequest)(nil), "tokenpb.DisassociatePrimaryUserRequest")
	proto.RegisterType((*DisassociatePrimaryUserResponse)(nil), "tokenpb.DisassociatePrimaryUserResponse")
	proto.RegisterType((*RefreshTokenRequest)(nil), "tokenpb.RefreshTokenRequest")
	proto.RegisterType((*RefreshTokenResponse)(nil), "tokenpb.RefreshTokenResponse")
	proto.RegisterType((*TokensPage)(nil), "tokenpb.TokensPage")
	proto.RegisterType((*ListRevokedTokensRequest)(nil), "tokenpb.ListRevokedTokensRequest")
	proto.RegisterType((*ListRevokedTokensResponse)(nil), "tokenpb.ListRevokedTokensResponse")
	proto.RegisterType((*RevokeFactoryCertificateRequest)(nil), "tokenpb.RevokeFactoryCertificateRequest")
	proto.RegisterType((*RevokeFactoryCertificateResponse)(nil), "tokenpb.RevokeFactoryCertificateResponse")
	proto.RegisterType((*RevokeTokensRequest)(nil), "tokenpb.RevokeTokensRequest")
	proto.RegisterType((*RevokeTokensResponse)(nil), "tokenpb.RevokeTokensResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Token service

type TokenClient interface {
	// AssociatePrimaryUser
	// Authentication: cert + appkey + user session
	//
	// Sets the owner of a robot, issuing an access token for further
	// access and a client token for Chewy. Requires a valid user
	// session and revokes all previously existing tokens. The identity
	// of the robot is derived from the CN of the robot factory
	// certificate.
	AssociatePrimaryUser(ctx context.Context, in *AssociatePrimaryUserRequest, opts ...grpc.CallOption) (*AssociatePrimaryUserResponse, error)
	// ReassociatePrimaryUser
	// Authentication: cert + appkey + user session
	//
	// TODO - documentation
	ReassociatePrimaryUser(ctx context.Context, in *ReassociatePrimaryUserRequest, opts ...grpc.CallOption) (*ReassociatePrimaryUserResponse, error)
	// AssociateSecondaryClient
	// Authentication: cert + appkey + token
	//
	// Associates a secondary app for the primary user, generating a
	// client token for the secondary app to use. Associating a
	// non-primary user is not currently supported.
	AssociateSecondaryClient(ctx context.Context, in *AssociateSecondaryClientRequest, opts ...grpc.CallOption) (*AssociateSecondaryClientResponse, error)
	// DisassociatePrimaryUser
	// Authentication: cert + token
	//
	// Remove the primary user's access from the robot - immediately
	// revokes all access tokens for robot.
	DisassociatePrimaryUser(ctx context.Context, in *DisassociatePrimaryUserRequest, opts ...grpc.CallOption) (*DisassociatePrimaryUserResponse, error)
	// RefreshToken
	// Authentication: cert + token
	//
	// Refresh an existing access token. The access token may be
	// refreshed for up to one year, as long as it has not been revoked
	// (e.g. by DisassociatePrimaryUser).
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// ListRevokedTokens
	// Authentication: appkey
	//
	// Lists all currently revoked tokens, for populating the cache of
	// revoked tokens in each service which handles token-based
	// authentication. Only callable by other services (e.g. Chipper,
	// Jdocs, etc...)
	ListRevokedTokens(ctx context.Context, in *ListRevokedTokensRequest, opts ...grpc.CallOption) (*ListRevokedTokensResponse, error)
	// RevokeFactoryCertificate
	// Authentication: cert + appkey (TBD, admin only)
	//
	// RevokeFactoryCertificate blacklists one of the factory-issued
	// robot certificates.
	RevokeFactoryCertificate(ctx context.Context, in *RevokeFactoryCertificateRequest, opts ...grpc.CallOption) (*RevokeFactoryCertificateResponse, error)
	// RevokeTokens
	// Authentication: cert + appkey (TBD, admin only)
	//
	// Revoke tokens matching a user or robot.
	RevokeTokens(ctx context.Context, in *RevokeTokensRequest, opts ...grpc.CallOption) (*RevokeTokensResponse, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) AssociatePrimaryUser(ctx context.Context, in *AssociatePrimaryUserRequest, opts ...grpc.CallOption) (*AssociatePrimaryUserResponse, error) {
	out := new(AssociatePrimaryUserResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/AssociatePrimaryUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) ReassociatePrimaryUser(ctx context.Context, in *ReassociatePrimaryUserRequest, opts ...grpc.CallOption) (*ReassociatePrimaryUserResponse, error) {
	out := new(ReassociatePrimaryUserResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/ReassociatePrimaryUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) AssociateSecondaryClient(ctx context.Context, in *AssociateSecondaryClientRequest, opts ...grpc.CallOption) (*AssociateSecondaryClientResponse, error) {
	out := new(AssociateSecondaryClientResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/AssociateSecondaryClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) DisassociatePrimaryUser(ctx context.Context, in *DisassociatePrimaryUserRequest, opts ...grpc.CallOption) (*DisassociatePrimaryUserResponse, error) {
	out := new(DisassociatePrimaryUserResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/DisassociatePrimaryUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) ListRevokedTokens(ctx context.Context, in *ListRevokedTokensRequest, opts ...grpc.CallOption) (*ListRevokedTokensResponse, error) {
	out := new(ListRevokedTokensResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/ListRevokedTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RevokeFactoryCertificate(ctx context.Context, in *RevokeFactoryCertificateRequest, opts ...grpc.CallOption) (*RevokeFactoryCertificateResponse, error) {
	out := new(RevokeFactoryCertificateResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/RevokeFactoryCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RevokeTokens(ctx context.Context, in *RevokeTokensRequest, opts ...grpc.CallOption) (*RevokeTokensResponse, error) {
	out := new(RevokeTokensResponse)
	err := grpc.Invoke(ctx, "/tokenpb.Token/RevokeTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenServer interface {
	// AssociatePrimaryUser
	// Authentication: cert + appkey + user session
	//
	// Sets the owner of a robot, issuing an access token for further
	// access and a client token for Chewy. Requires a valid user
	// session and revokes all previously existing tokens. The identity
	// of the robot is derived from the CN of the robot factory
	// certificate.
	AssociatePrimaryUser(context.Context, *AssociatePrimaryUserRequest) (*AssociatePrimaryUserResponse, error)
	// ReassociatePrimaryUser
	// Authentication: cert + appkey + user session
	//
	// TODO - documentation
	ReassociatePrimaryUser(context.Context, *ReassociatePrimaryUserRequest) (*ReassociatePrimaryUserResponse, error)
	// AssociateSecondaryClient
	// Authentication: cert + appkey + token
	//
	// Associates a secondary app for the primary user, generating a
	// client token for the secondary app to use. Associating a
	// non-primary user is not currently supported.
	AssociateSecondaryClient(context.Context, *AssociateSecondaryClientRequest) (*AssociateSecondaryClientResponse, error)
	// DisassociatePrimaryUser
	// Authentication: cert + token
	//
	// Remove the primary user's access from the robot - immediately
	// revokes all access tokens for robot.
	DisassociatePrimaryUser(context.Context, *DisassociatePrimaryUserRequest) (*DisassociatePrimaryUserResponse, error)
	// RefreshToken
	// Authentication: cert + token
	//
	// Refresh an existing access token. The access token may be
	// refreshed for up to one year, as long as it has not been revoked
	// (e.g. by DisassociatePrimaryUser).
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// ListRevokedTokens
	// Authentication: appkey
	//
	// Lists all currently revoked tokens, for populating the cache of
	// revoked tokens in each service which handles token-based
	// authentication. Only callable by other services (e.g. Chipper,
	// Jdocs, etc...)
	ListRevokedTokens(context.Context, *ListRevokedTokensRequest) (*ListRevokedTokensResponse, error)
	// RevokeFactoryCertificate
	// Authentication: cert + appkey (TBD, admin only)
	//
	// RevokeFactoryCertificate blacklists one of the factory-issued
	// robot certificates.
	RevokeFactoryCertificate(context.Context, *RevokeFactoryCertificateRequest) (*RevokeFactoryCertificateResponse, error)
	// RevokeTokens
	// Authentication: cert + appkey (TBD, admin only)
	//
	// Revoke tokens matching a user or robot.
	RevokeTokens(context.Context, *RevokeTokensRequest) (*RevokeTokensResponse, error)
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_AssociatePrimaryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatePrimaryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).AssociatePrimaryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/AssociatePrimaryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).AssociatePrimaryUser(ctx, req.(*AssociatePrimaryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_ReassociatePrimaryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReassociatePrimaryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).ReassociatePrimaryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/ReassociatePrimaryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).ReassociatePrimaryUser(ctx, req.(*ReassociatePrimaryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_AssociateSecondaryClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateSecondaryClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).AssociateSecondaryClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/AssociateSecondaryClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).AssociateSecondaryClient(ctx, req.(*AssociateSecondaryClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_DisassociatePrimaryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisassociatePrimaryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).DisassociatePrimaryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/DisassociatePrimaryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).DisassociatePrimaryUser(ctx, req.(*DisassociatePrimaryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_ListRevokedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRevokedTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).ListRevokedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/ListRevokedTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).ListRevokedTokens(ctx, req.(*ListRevokedTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RevokeFactoryCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeFactoryCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RevokeFactoryCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/RevokeFactoryCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RevokeFactoryCertificate(ctx, req.(*RevokeFactoryCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RevokeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RevokeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenpb.Token/RevokeTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RevokeTokens(ctx, req.(*RevokeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenpb.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssociatePrimaryUser",
			Handler:    _Token_AssociatePrimaryUser_Handler,
		},
		{
			MethodName: "ReassociatePrimaryUser",
			Handler:    _Token_ReassociatePrimaryUser_Handler,
		},
		{
			MethodName: "AssociateSecondaryClient",
			Handler:    _Token_AssociateSecondaryClient_Handler,
		},
		{
			MethodName: "DisassociatePrimaryUser",
			Handler:    _Token_DisassociatePrimaryUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Token_RefreshToken_Handler,
		},
		{
			MethodName: "ListRevokedTokens",
			Handler:    _Token_ListRevokedTokens_Handler,
		},
		{
			MethodName: "RevokeFactoryCertificate",
			Handler:    _Token_RevokeFactoryCertificate_Handler,
		},
		{
			MethodName: "RevokeTokens",
			Handler:    _Token_RevokeTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tokenpb/token.proto",
}

func init() { proto.RegisterFile("proto/tokenpb/token.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x4e, 0xeb, 0x46,
	0x10, 0x96, 0x4f, 0x42, 0x4e, 0x32, 0x49, 0xce, 0x81, 0x25, 0x3d, 0x0d, 0xe9, 0x39, 0x24, 0x71,
	0x0b, 0xa4, 0x55, 0x15, 0x24, 0x7a, 0x8d, 0x54, 0x7e, 0x54, 0x35, 0x80, 0x5a, 0xe4, 0xb4, 0x37,
	0xbd, 0xb1, 0x16, 0x7b, 0x00, 0x97, 0x60, 0x9b, 0xdd, 0x0d, 0x60, 0xa9, 0xb7, 0x7d, 0x8c, 0xaa,
	0x2f, 0xd1, 0x07, 0xac, 0xbc, 0xbb, 0xfe, 0x09, 0x89, 0x93, 0x22, 0xf5, 0x2a, 0xf6, 0x37, 0xe3,
	0x99, 0x6f, 0x7e, 0xbe, 0x51, 0x60, 0x2b, 0x64, 0x81, 0x08, 0xf6, 0x45, 0x70, 0x87, 0x7e, 0x78,
	0xa5, 0x7e, 0x87, 0x12, 0x23, 0x6f, 0x35, 0x68, 0x3e, 0x42, 0xfd, 0x97, 0xf8, 0xf1, 0x78, 0xea,
	0xbb, 0x13, 0x24, 0x2d, 0x58, 0x93, 0x96, 0xb6, 0xd1, 0x33, 0x06, 0x35, 0x4b, 0xbd, 0x90, 0x3e,
	0x34, 0x9c, 0x89, 0x87, 0xbe, 0xb0, 0x95, 0xf1, 0x8d, 0x34, 0xd6, 0x15, 0x26, 0x3f, 0x27, 0x43,
	0xa8, 0x71, 0xc1, 0xb5, 0xbd, 0xdc, 0x33, 0x06, 0xf5, 0x83, 0x8d, 0xa1, 0x4e, 0x32, 0x1c, 0x0b,
	0x2e, 0xbd, 0xac, 0x2a, 0xd7, 0x4f, 0xe6, 0xdf, 0x06, 0x54, 0x13, 0x98, 0x98, 0xd0, 0xa4, 0x8e,
	0x83, 0x9c, 0xdb, 0x77, 0x18, 0xd9, 0x9e, 0xab, 0xb3, 0xd7, 0x15, 0x78, 0x8e, 0xd1, 0xc8, 0x25,
	0xdf, 0xc0, 0x06, 0x47, 0x87, 0xa1, 0xb0, 0x33, 0x57, 0x4d, 0xe4, 0xbd, 0x32, 0x1c, 0x25, 0xde,
	0xe4, 0x4b, 0x68, 0x72, 0xe4, 0xdc, 0x0b, 0x7c, 0x4d, 0xa8, 0x24, 0xfd, 0x1a, 0x1a, 0x54, 0x49,
	0xb7, 0x01, 0xf0, 0x39, 0xf4, 0x18, 0x15, 0x5e, 0xa0, 0x28, 0xd7, 0xac, 0x1c, 0x62, 0xfe, 0x63,
	0xc0, 0x17, 0x47, 0x9c, 0x07, 0x8e, 0x47, 0x05, 0x5e, 0x32, 0xef, 0x9e, 0xb2, 0xe8, 0x57, 0x8e,
	0xcc, 0xc2, 0x87, 0x29, 0x72, 0x41, 0xbe, 0x05, 0x72, 0x83, 0x3e, 0x32, 0x2a, 0xd0, 0xce, 0x4a,
	0x8f, 0x33, 0x55, 0xad, 0xf5, 0xc4, 0x92, 0x96, 0xb8, 0x0f, 0x9b, 0x09, 0x25, 0x07, 0x99, 0xf0,
	0xae, 0x3d, 0x87, 0x0a, 0x94, 0x69, 0x1b, 0x16, 0xd1, 0xa6, 0x93, 0xcc, 0x42, 0xba, 0xa0, 0xfb,
	0x6b, 0xfb, 0xf4, 0x1e, 0xdb, 0x6b, 0x8a, 0x9f, 0x82, 0x7e, 0xa2, 0xf7, 0x48, 0x3e, 0x83, 0x0a,
	0x0d, 0xc3, 0xb8, 0x5b, 0x15, 0x35, 0x2b, 0x1a, 0x86, 0x23, 0xd7, 0xfc, 0xd3, 0x80, 0x4f, 0x16,
	0xd2, 0x57, 0x13, 0x37, 0x0a, 0x88, 0xbf, 0xe0, 0xf1, 0x66, 0x09, 0x8f, 0x52, 0x9e, 0xc7, 0x19,
	0x6c, 0x17, 0xd1, 0xe0, 0x61, 0xe0, 0x73, 0x24, 0x03, 0x28, 0xbb, 0x54, 0x50, 0x99, 0xb9, 0x7e,
	0xd0, 0x4a, 0xb7, 0x25, 0xb7, 0x8f, 0x96, 0xf4, 0x30, 0x7f, 0x84, 0x8f, 0x47, 0xff, 0x4f, 0xa4,
	0x3f, 0xa0, 0x9b, 0x46, 0x1a, 0xa3, 0x13, 0xf8, 0x2e, 0x65, 0xd1, 0x89, 0x2c, 0x26, 0x69, 0x4f,
	0x1f, 0x1a, 0x53, 0x8e, 0xcc, 0xd6, 0x33, 0x49, 0x96, 0x3d, 0xc6, 0xc6, 0x0a, 0x7a, 0xd9, 0x93,
	0xd2, 0x92, 0x9e, 0x94, 0xf3, 0x3d, 0xb9, 0x80, 0x5e, 0x71, 0xf6, 0x57, 0xd7, 0xd2, 0x83, 0xed,
	0x53, 0x8f, 0x2f, 0x99, 0xb4, 0xd9, 0x87, 0x6e, 0xa1, 0x87, 0x4a, 0x67, 0x3e, 0xc0, 0xa6, 0x85,
	0xd7, 0x0c, 0xf9, 0xad, 0x52, 0x68, 0xb6, 0x23, 0x4c, 0xc1, 0xf6, 0xef, 0x4f, 0x5a, 0xf6, 0x5c,
	0xb6, 0xa2, 0x6a, 0xad, 0x6b, 0xcb, 0xd9, 0x93, 0xd2, 0x3e, 0xcf, 0x7b, 0xa7, 0x0b, 0xc5, 0x13,
	0x29, 0x68, 0x4b, 0xb2, 0x50, 0xdc, 0xfc, 0x1e, 0x5a, 0xb3, 0x29, 0x5f, 0x5d, 0xf9, 0x18, 0x40,
	0xc5, 0xba, 0xa4, 0x37, 0x48, 0x3e, 0x40, 0x45, 0x67, 0x34, 0x7a, 0xa5, 0x41, 0xcd, 0xd2, 0x6f,
	0x64, 0x0b, 0xaa, 0x13, 0xca, 0x45, 0xee, 0x50, 0xbc, 0x8d, 0xdf, 0xe3, 0x03, 0x41, 0xa0, 0xec,
	0x06, 0x3e, 0x6a, 0x8a, 0xf2, 0xd9, 0x3c, 0x84, 0xf6, 0x85, 0xc7, 0x85, 0x85, 0x8f, 0xc1, 0x1d,
	0xba, 0x2a, 0x7e, 0x6e, 0x27, 0x42, 0x86, 0x8f, 0x5e, 0x30, 0x55, 0x77, 0x47, 0xdf, 0xa7, 0x04,
	0x3b, 0xc7, 0xc8, 0x3c, 0x85, 0xad, 0x05, 0x9f, 0xeb, 0xd2, 0xf6, 0x66, 0x4a, 0xdb, 0x9c, 0x2d,
	0x4d, 0x56, 0x91, 0x6e, 0x7a, 0x57, 0x45, 0xf8, 0x81, 0x3a, 0x22, 0x60, 0x51, 0xee, 0x22, 0x24,
	0x5c, 0x76, 0xe0, 0x5d, 0xee, 0x82, 0x64, 0xd7, 0xb2, 0x99, 0x43, 0x47, 0xae, 0x69, 0x42, 0xaf,
	0x38, 0x92, 0x1e, 0xfe, 0xcf, 0xf1, 0xf0, 0x63, 0x9f, 0xd9, 0x6a, 0x77, 0xe1, 0x3d, 0x47, 0xca,
	0x9c, 0x5b, 0xfb, 0x2a, 0xb2, 0x3d, 0xdf, 0xc5, 0xe7, 0x24, 0x85, 0x82, 0x8f, 0xa3, 0x51, 0x0c,
	0x92, 0x75, 0x28, 0x65, 0xbd, 0x8d, 0x1f, 0xcd, 0xc3, 0x78, 0xb4, 0xf9, 0x80, 0xba, 0xfe, 0x1d,
	0x78, 0xa7, 0x86, 0x62, 0x33, 0xd5, 0x1f, 0x19, 0xb0, 0x69, 0x35, 0x85, 0xf6, 0x93, 0xe0, 0xc1,
	0x5f, 0x15, 0x58, 0x53, 0x57, 0xc7, 0x81, 0xd6, 0x22, 0xc5, 0x93, 0xaf, 0xd2, 0xd6, 0x2d, 0x39,
	0xcd, 0x9d, 0x9d, 0x15, 0x5e, 0x9a, 0x95, 0x07, 0x1f, 0x16, 0x9f, 0x28, 0xb2, 0x9b, 0x06, 0x58,
	0x7a, 0x4a, 0x3b, 0x7b, 0x2b, 0xfd, 0x74, 0xaa, 0x00, 0xda, 0x45, 0xca, 0x27, 0x83, 0x79, 0xb6,
	0x8b, 0x4f, 0x53, 0xe7, 0xeb, 0xff, 0xe0, 0xa9, 0x13, 0x4e, 0xe0, 0xf3, 0x02, 0xe9, 0x93, 0x8c,
	0xf4, 0xf2, 0xf3, 0xd1, 0x19, 0xac, 0x76, 0xd4, 0xd9, 0xce, 0xa1, 0x91, 0x97, 0x34, 0xf9, 0x98,
	0xeb, 0xcb, 0xdc, 0x71, 0xe9, 0x7c, 0x2a, 0xb0, 0xea, 0x60, 0xbf, 0xc1, 0xc6, 0x9c, 0x92, 0x48,
	0x3f, 0xfd, 0xa6, 0x48, 0xa4, 0x1d, 0x73, 0x99, 0x4b, 0x36, 0x87, 0x22, 0x55, 0xe4, 0xe6, 0xb0,
	0x42, 0x82, 0xb9, 0x39, 0xac, 0x92, 0x98, 0xea, 0x4c, 0xa6, 0x88, 0x99, 0xce, 0xcc, 0x29, 0x6f,
	0xa6, 0x33, 0xf3, 0x32, 0xba, 0xaa, 0xc8, 0x3f, 0x6f, 0xdf, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xae, 0xcf, 0xa8, 0xb5, 0xd9, 0x09, 0x00, 0x00,
}
