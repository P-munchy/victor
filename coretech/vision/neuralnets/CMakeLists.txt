# coretech/vision/neuralnets/CMakeLists.txt

cmake_minimum_required(VERSION 3.6)

message(STATUS "Building NeuralNets process using ${NEURAL_NET_PLATFORM}")

include(anki_build_cxx)
include(anki_build_strip)
include(protobuf)

set(PLATFORM_LIBS "")
set(PLATFORM_INCLUDES "")
set(PLATFORM_FLAGS "")
set(TARGET_NAME "")
set(PLATFORM_DEFINITIONS "")

set(TENSORFLOW_PATH ${ANKI_EXTERNAL_DIR}/tensorflow)

if(NEURAL_NET_PLATFORM STREQUAL "TensorFlow")

  if (VICOS)

    set(TARGET_NAME vic-neuralnets)

    set(PLATFORM_FLAGS
      --std=c++11 
      -stdlib=libc++    # NOTE: VicOS uses libc++, so TensorFlow must be built to match
      -fPIE 
      -mfloat-abi=softfp 
      -mfpu=neon 
      -pie 
    )
    
    set(PLATFORM_INCLUDES
      ${CORETECH_EXTERNAL_DIR}/build/opencv-3.4.0/vicos/include
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/proto
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/protobuf/armeabi-v7a/include
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/downloads/eigen
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/downloads/nsync/public
      ${TENSORFLOW_PATH}
    )

    set(PLATFORM_LIBS
      victorCrashReports
      -Wl,--whole-archive 
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/lib/libtensorflow-core.a
      -Wl,--no-whole-archive
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/protobuf/armeabi-v7a/lib/libprotobuf.a
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen_VICOS/downloads/nsync/builds/default.vicos.c++11/libnsync.a
      c++   # NOTE: VicOS uses libc++, so TensorFlow must be built to match
      dl
      log
      z
    )
    
  elseif (MACOSX)
    
    # Note that for Mac builds we are really building a Webots controller 
    # but since it shares the same main.cpp file as the vic-neuralnets process
    # we're doing it here instead of in simulator/CMakeLists.txt with the other
    # Webots controllers

    set(TARGET_NAME webotsCtrlNeuralNets) 

    include(webots)

    set(PLATFORM_FLAGS
      --std=c++11 
      -DSIMULATOR
    )
    
    set(PLATFORM_INCLUDES
      ${CORETECH_EXTERNAL_DIR}/build/opencv-3.4.0/mac
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/proto
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/protobuf/include
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/downloads/eigen
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/downloads/nsync/public
      ${TENSORFLOW_PATH}
    )

    set(PLATFORM_LIBS
      -Wl,-force_load
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/protobuf/lib/libprotobuf.a
      ${TENSORFLOW_PATH}/tensorflow/contrib/makefile/gen/downloads/nsync/builds/default.macos.c++11/libnsync.a
      ${WEBOTS_LIBS}
      stdc++
      m
    )

  endif()

  set(PLATFORM_DEFINITIONS 
    VIC_NEURALNETS_USE_TENSORFLOW
  )

elseif(NEURAL_NET_PLATFORM STREQUAL "TFLite")

  if (VICOS)

    set(TARGET_NAME vic-neuralnets)

    set(TFLITE_DOWNLOADS_PATH ${TENSORFLOW_PATH}/tensorflow/contrib/lite/gen_VICOS/downloads)
    
    set(PLATFORM_LIBS
      victorCrashReports
      ${TENSORFLOW_PATH}/tensorflow/contrib/lite/gen_VICOS/lib/libtensorflow-lite.a
      dl
    )

  elseif (MACOSX)

    set(TARGET_NAME webotsCtrlNeuralNets)

    set(TFLITE_DOWNLOADS_PATH ${TENSORFLOW_PATH}/tensorflow/contrib/lite/gen_OSX/downloads)
    
    include(webots)
    
    set(PLATFORM_FLAGS
      -DSIMULATOR
    )

    set(PLATFORM_LIBS
      ${TENSORFLOW_PATH}/tensorflow/contrib/lite/gen_OSX/lib/libtensorflow-lite.a
      ${WEBOTS_LIBS}
    )

  endif()

  set(PLATFORM_INCLUDES
    ${TENSORFLOW_PATH}
    ${TFLITE_DOWNLOADS_PATH}/flatbuffers/include
    ${TFLITE_DOWNLOADS_PATH}
  )

  set(PLATFORM_DEFINITIONS 
    VIC_NEURALNETS_USE_TFLITE
  )
  
else()

  message(FATAL_ERROR "NEURAL_NET_PLATFORM should be either 'TensorFlow' or 'TFLite'")

endif()

anki_build_cxx_executable(${TARGET_NAME} ${ANKI_SRCLIST_DIR})
anki_build_target_license(${TARGET_NAME} "ANKI")

target_compile_options(${TARGET_NAME}
  PRIVATE 
  -Wno-undef            # Tensorflow includes don't adhere to our lofty standards
  -Wno-shorten-64-to-32 #  "
  ${PLATFORM_FLAGS}
)

target_include_directories(${TARGET_NAME}
  PRIVATE
  ${PLATFORM_INCLUDES}
  ${OPENCV_INCLUDE_PATHS}
)

target_compile_definitions(${TARGET_NAME}
  PRIVATE
  ${PLATFORM_DEFINITIONS}
)
target_link_libraries(${TARGET_NAME}
  PRIVATE
  jsoncpp
  util
  cti_common
  cti_vision_clad               # Just vision CLAD, not the whole enchilada
  ${OPENCV_LIBS}                # NOTE: Order may matter here? (OpenCV before platform?)
  ${PLATFORM_LIBS}
)

anki_build_strip(TARGET ${TARGET_NAME})

