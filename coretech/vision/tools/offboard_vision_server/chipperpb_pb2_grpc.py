# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!	
import grpc	

import chipperpb_pb2 as chipperpb__pb2	


class ChipperGrpcStub(object):	
  # missing associated documentation comment in .proto file	
  pass	

  def __init__(self, channel):	
    """Constructor.	
     Args:	
      channel: A grpc.Channel.	
    """	
    self.TextIntent = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/TextIntent',	
        request_serializer=chipperpb__pb2.TextRequest.SerializeToString,	
        response_deserializer=chipperpb__pb2.IntentResponse.FromString,	
        )	
    self.StreamingIntent = channel.stream_stream(	
        '/chippergrpc2.ChipperGrpc/StreamingIntent',	
        request_serializer=chipperpb__pb2.StreamingIntentRequest.SerializeToString,	
        response_deserializer=chipperpb__pb2.IntentResponse.FromString,	
        )	
    self.StreamingKnowledgeGraph = channel.stream_stream(	
        '/chippergrpc2.ChipperGrpc/StreamingKnowledgeGraph',	
        request_serializer=chipperpb__pb2.StreamingKnowledgeGraphRequest.SerializeToString,	
        response_deserializer=chipperpb__pb2.KnowledgeGraphResponse.FromString,	
        )	
    self.StreamingConnectionCheck = channel.stream_stream(	
        '/chippergrpc2.ChipperGrpc/StreamingConnectionCheck',	
        request_serializer=chipperpb__pb2.StreamingConnectionCheckRequest.SerializeToString,	
        response_deserializer=chipperpb__pb2.ConnectionCheckResponse.FromString,	
        )	
    self.AnalyzeImage = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/AnalyzeImage',	
        request_serializer=chipperpb__pb2.ImageRequest.SerializeToString,	
        response_deserializer=chipperpb__pb2.ImageResponse.FromString,	
        )	
    self.PersonAction = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/PersonAction',	
        request_serializer=chipperpb__pb2.PersonRequest.SerializeToString,	
        response_deserializer=chipperpb__pb2.PersonResponse.FromString,	
        )	
    self.CreatePersonGroup = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/CreatePersonGroup',	
        request_serializer=chipperpb__pb2.PersonGroup.SerializeToString,	
        response_deserializer=chipperpb__pb2.PersonGroupResponse.FromString,	
        )	
    self.ListPersonGroup = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/ListPersonGroup',	
        request_serializer=chipperpb__pb2.PersonGroup.SerializeToString,	
        response_deserializer=chipperpb__pb2.PersonGroupList.FromString,	
        )	
    self.DeletePersonGroup = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/DeletePersonGroup',	
        request_serializer=chipperpb__pb2.PersonGroup.SerializeToString,	
        response_deserializer=chipperpb__pb2.PersonGroupResponse.FromString,	
        )	
    self.TrainPersonGroup = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/TrainPersonGroup',	
        request_serializer=chipperpb__pb2.PersonGroup.SerializeToString,	
        response_deserializer=chipperpb__pb2.PersonGroupResponse.FromString,	
        )	
    self.TrainStatus = channel.unary_unary(	
        '/chippergrpc2.ChipperGrpc/TrainStatus',	
        request_serializer=chipperpb__pb2.PersonGroup.SerializeToString,	
        response_deserializer=chipperpb__pb2.PersonGroupResponse.FromString,	
        )	


class ChipperGrpcServicer(object):	
  # missing associated documentation comment in .proto file	
  pass	

  def TextIntent(self, request, context):	
    """send text for intent matching	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def StreamingIntent(self, request_iterator, context):	
    """Sends a streaming audio request. Responses are streamed to the client. (bidirectional)	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def StreamingKnowledgeGraph(self, request_iterator, context):	
    """Sends a knowledge graph request. This requenst looks very similar to an intent request, but with a different response	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def StreamingConnectionCheck(self, request_iterator, context):	
    """Performs a conenction check. This will take in streaming audio, but not call out to any services.	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def AnalyzeImage(self, request, context):	
    """main elemental-box image demo	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def PersonAction(self, request, context):	
    """additional Face functionality	
     PersonAction will enroll a person into a group, and add face result for the person	
    also does add-face, delete-face, get-person and list persons in group	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def CreatePersonGroup(self, request, context):	
    """Person Group related	
    """	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def ListPersonGroup(self, request, context):	
    # missing associated documentation comment in .proto file	
    pass	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def DeletePersonGroup(self, request, context):	
    # missing associated documentation comment in .proto file	
    pass	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def TrainPersonGroup(self, request, context):	
    # missing associated documentation comment in .proto file	
    pass	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	

  def TrainStatus(self, request, context):	
    # missing associated documentation comment in .proto file	
    pass	
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)	
    context.set_details('Method not implemented!')	
    raise NotImplementedError('Method not implemented!')	


def add_ChipperGrpcServicer_to_server(servicer, server):	
  rpc_method_handlers = {	
      'TextIntent': grpc.unary_unary_rpc_method_handler(	
          servicer.TextIntent,	
          request_deserializer=chipperpb__pb2.TextRequest.FromString,	
          response_serializer=chipperpb__pb2.IntentResponse.SerializeToString,	
      ),	
      'StreamingIntent': grpc.stream_stream_rpc_method_handler(	
          servicer.StreamingIntent,	
          request_deserializer=chipperpb__pb2.StreamingIntentRequest.FromString,	
          response_serializer=chipperpb__pb2.IntentResponse.SerializeToString,	
      ),	
      'StreamingKnowledgeGraph': grpc.stream_stream_rpc_method_handler(	
          servicer.StreamingKnowledgeGraph,	
          request_deserializer=chipperpb__pb2.StreamingKnowledgeGraphRequest.FromString,	
          response_serializer=chipperpb__pb2.KnowledgeGraphResponse.SerializeToString,	
      ),	
      'StreamingConnectionCheck': grpc.stream_stream_rpc_method_handler(	
          servicer.StreamingConnectionCheck,	
          request_deserializer=chipperpb__pb2.StreamingConnectionCheckRequest.FromString,	
          response_serializer=chipperpb__pb2.ConnectionCheckResponse.SerializeToString,	
      ),	
      'AnalyzeImage': grpc.unary_unary_rpc_method_handler(	
          servicer.AnalyzeImage,	
          request_deserializer=chipperpb__pb2.ImageRequest.FromString,	
          response_serializer=chipperpb__pb2.ImageResponse.SerializeToString,	
      ),	
      'PersonAction': grpc.unary_unary_rpc_method_handler(	
          servicer.PersonAction,	
          request_deserializer=chipperpb__pb2.PersonRequest.FromString,	
          response_serializer=chipperpb__pb2.PersonResponse.SerializeToString,	
      ),	
      'CreatePersonGroup': grpc.unary_unary_rpc_method_handler(	
          servicer.CreatePersonGroup,	
          request_deserializer=chipperpb__pb2.PersonGroup.FromString,	
          response_serializer=chipperpb__pb2.PersonGroupResponse.SerializeToString,	
      ),	
      'ListPersonGroup': grpc.unary_unary_rpc_method_handler(	
          servicer.ListPersonGroup,	
          request_deserializer=chipperpb__pb2.PersonGroup.FromString,	
          response_serializer=chipperpb__pb2.PersonGroupList.SerializeToString,	
      ),	
      'DeletePersonGroup': grpc.unary_unary_rpc_method_handler(	
          servicer.DeletePersonGroup,	
          request_deserializer=chipperpb__pb2.PersonGroup.FromString,	
          response_serializer=chipperpb__pb2.PersonGroupResponse.SerializeToString,	
      ),	
      'TrainPersonGroup': grpc.unary_unary_rpc_method_handler(	
          servicer.TrainPersonGroup,	
          request_deserializer=chipperpb__pb2.PersonGroup.FromString,	
          response_serializer=chipperpb__pb2.PersonGroupResponse.SerializeToString,	
      ),	
      'TrainStatus': grpc.unary_unary_rpc_method_handler(	
          servicer.TrainStatus,	
          request_deserializer=chipperpb__pb2.PersonGroup.FromString,	
          response_serializer=chipperpb__pb2.PersonGroupResponse.SerializeToString,	
      ),	
  }	
  generic_handler = grpc.method_handlers_generic_handler(	
      'chippergrpc2.ChipperGrpc', rpc_method_handlers)	
  server.add_generic_rpc_handlers((generic_handler,))
