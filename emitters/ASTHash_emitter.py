#! /usr/bin/python

from __future__ import absolute_import
from __future__ import print_function

import inspect
import os
import sys
import textwrap

def _modify_path():
    currentpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
    searchpath = os.path.join(currentpath, '..')
    searchpath = os.path.normpath(os.path.abspath(os.path.realpath(searchpath)))
    if searchpath not in sys.path:
        sys.path.insert(0, searchpath)
_modify_path()

from clad import clad
from clad import ast

if __name__ == '__main__':
    "Emits md5 hash of a clad file with optional formatting"
    from clad import emitterutil
    option_parser = emitterutil.SimpleArgumentParser('Emit hash for clad file')
    option_parser.add_argument('-y', '--debuglevel', default=0, dest='debuglevel', type=int,
                               help='PLY debug level (0=none, 1=yacc, 2=lex)')
    option_parser.add_argument('-o', '--output', default="stdout",
                               help="Specify output, file type determines output format")
    options = option_parser.parse_args()

    tree = emitterutil.parse(options, yacc_optimize=False, debuglevel=options.debuglevel)
    visitor = ast.ASTHash()
    visitor.visit(tree)

    if options.output == "stdout":
        print(visitor.hash_str)
    else:
        outputBase, outputExt = os.path.splitext(options.output)

        const_name = os.path.splitext(os.path.split(options.input_file)[-1])[0] + "Hash"
        hash = int(visitor.hash_str, 16)

        if outputExt == '.h':
            C_UNIQUE_STRING = "__" + options.output.upper().replace("/", "_").replace(".", "_") + "__"
            hash_bytes = ["0x{:02x}".format(((hash >> (8*i))) & 0xff) for i in range(16)]

            fh = open(options.output, "w")
            fh.write("// Autogenerated CLAD hash include\n")
            fh.write("// Source: {}\n".format(options.input_file))
            fh.write("// Full command line: {}\n\n".format(" ".join(sys.argv)))
            fh.write("#ifndef {0}\n#define {0}\n\n".format(C_UNIQUE_STRING))
            fh.write("const unsigned char {}[] = {{ {} }};\n".format(const_name, ", ".join(hash_bytes)))
            fh.write("\n#endif\n")
            fh.close()
        elif outputExt == ".py":
            fh = open(options.output, "w")
            fh.write("# Autogenerated CLAD hash include\n")
            fh.write("# Source: {}\n".format(options.input_file))
            fh.write("# Full command line: {}\n\n".format(" ".join(sys.argv)))
            fh.write("{} = 0x{:x}\n".format(const_name, hash))
            fh.close()
        else:
            sys.exit("Unsupported output type: {}".format(outputExt))
