/**
* File: behaviorComponent.h
*
* Author: Kevin M. Karol
* Created: 9/22/17
*
* Description: Component responsible for maintaining all aspects of the AI system
* relating to behaviors
*
* Copyright: Anki, Inc. 2017
*
**/


#ifndef __Cozmo_Basestation_BehaviorSystem_BehaviorComponent_H__
#define __Cozmo_Basestation_BehaviorSystem_BehaviorComponent_H__

#include "engine/aiComponent/behaviorComponent/iBehaviorMessageSubscriber.h"

#include "clad/externalInterface/messageEngineToGameTag.h"
#include "clad/externalInterface/messageGameToEngineTag.h"
#include "clad/robotInterface/messageRobotToEngineTag.h"

#include "util/helpers/noncopyable.h"

#include <assert.h>
#include <memory>
#include <set>

namespace Anki {
namespace Cozmo {

// Forward declarations
class AIComponent;
class AsyncMessageGateComponent;
class BehaviorComponent;
class BehaviorComponentCloudReceiver;
class BehaviorContainer;
class BehaviorEventAnimResponseDirector;
class BehaviorExternalInterface;
class BehaviorHelperComponent;
class BehaviorManager;
class BehaviorSystemManager;
class BlockWorld;
class DelegationComponent;
class DevBaseBehavior;
class DevBehaviorComponentMessageHandler;
class FaceWorld;
class IBehavior;
class Robot;
class BehaviorEventComponent;
  
namespace Audio {
class BehaviorAudioComponent;
}
  
namespace ComponentWrappers{
class BehaviorComponentComponents{
public:
  BehaviorComponentComponents(Robot& robot,
                              AIComponent& aiComponent,
                              BlockWorld& blockWorld,
                              FaceWorld& faceWorld,
                              BehaviorSystemManager& behaviorSysMgr,
                              BehaviorExternalInterface& behaviorExternalInterface,
                              BehaviorContainer& behaviorContainer,
                              BehaviorEventComponent& behaviorEventComponent,
                              AsyncMessageGateComponent& asyncMessageComponent,
                              DelegationComponent& delegationComponent);
  virtual ~BehaviorComponentComponents();
  
  Robot&                     _robot;
  AIComponent&               _aiComponent;
  BlockWorld&                _blockWorld;
  FaceWorld&                 _faceWorld;
  BehaviorSystemManager&     _behaviorSysMgr;
  BehaviorExternalInterface& _behaviorExternalInterface;
  BehaviorContainer&         _behaviorContainer;
  BehaviorEventComponent&    _behaviorEventComponent;
  AsyncMessageGateComponent& _asyncMessageComponent;
  DelegationComponent&       _delegationComponent;
  
protected:
  // When generate default components is called, unique ptrs are generated
  // for the following classes referenced above - they are kept within hidden
  // scope so that if in other cases the references are passed in directly
  // these ptrs will go uninitialized/unused
  friend class Anki::Cozmo::BehaviorComponent;
  std::unique_ptr<BehaviorExternalInterface> _behaviorExternalInterfacePtr;
  std::unique_ptr<BehaviorContainer>         _behaviorContainerPtr;
  std::unique_ptr<BehaviorSystemManager>     _behaviorSysMgrPtr;
  std::unique_ptr<BehaviorEventComponent>    _behaviorEventComponentPtr;
  std::unique_ptr<AsyncMessageGateComponent> _asyncMessageComponentPtr;
  std::unique_ptr<DelegationComponent>       _delegationComponentPtr;
};
}

class BehaviorComponent : public IBehaviorMessageSubscriber, private Util::noncopyable
{
public:
  BehaviorComponent();
  ~BehaviorComponent();
  
  using ComponentsPtr = std::unique_ptr<ComponentWrappers::BehaviorComponentComponents>;
  
  // Pass in nullptr for any components you want generated by default
  // Pass in a pointer to use it as a reference for the behavior component
  static ComponentsPtr GenerateComponents(Robot& robot,
                                          BehaviorSystemManager*     behaviorSysMgrPtr = nullptr,
                                          BehaviorExternalInterface* behaviorExternalInterfacePtr = nullptr,
                                          BehaviorContainer*         behaviorContainerPtr = nullptr,
                                          BehaviorEventComponent*      behaviorEventComponentPtr = nullptr,
                                          AsyncMessageGateComponent* asyncMessageComponentPtr = nullptr,
                                          DelegationComponent*       delegationComponentPtr = nullptr);
  
  // Function which encapsalates the initialization dependency graph
  // for the behavior components - does not initialize behavior component
  static void InitializeSubComponents(Robot& robot,
                                      IBehavior* baseBehavior,
                                      BehaviorSystemManager& behaviorSysMgr,
                                      IBehaviorMessageSubscriber& messageSubscriber,
                                      BehaviorExternalInterface& behaviorExternalInterface,
                                      AIComponent& aiComponent,
                                      BehaviorContainer& behaviorContainer,
                                      BlockWorld& blockWorld,
                                      FaceWorld& faceWorld,
                                      BehaviorEventComponent& behaviorEventComponent,
                                      AsyncMessageGateComponent& asyncMessageComponent,
                                      DelegationComponent& delegationComponent);
  
  // Pass in unitialized components - behavior component will properly
  // initialize and composit the components
  void Init(ComponentsPtr&& components, IBehavior* baseBehavior = nullptr);
  
  void InitHelper(IBehavior* baseBehavior);
  
  void Update(Robot& robot,
              std::string& currentActivityName,
              std::string& behaviorDebugStr);
    
  virtual void SubscribeToTags(IBehavior* subscriber, std::set<ExternalInterface::MessageGameToEngineTag>&& tags) const override;
  virtual void SubscribeToTags(IBehavior* subscriber, std::set<ExternalInterface::MessageEngineToGameTag>&& tags) const override;
  virtual void SubscribeToTags(IBehavior* subscriber, std::set<RobotInterface::RobotToEngineTag>&& tags) const override;
  
  inline const BehaviorEventAnimResponseDirector& GetBehaviorEventAnimResponseDirector() const
           { assert(_behaviorEventAnimResponseDirector); return *_behaviorEventAnimResponseDirector; }

  inline BehaviorComponentCloudReceiver& GetCloudReceiver() const { assert(_cloudReceiver); return *_cloudReceiver;}
           
  
protected:
  // Support legacy cozmo code
  friend class Robot;
  friend class AIComponent;
  friend class DevBehaviorComponentMessageHandler;
  friend class TestBehaviorFramework; // for testing access to internals
  
  inline const BehaviorHelperComponent& GetBehaviorHelperComponent() const { assert(_behaviorHelperComponent); return *_behaviorHelperComponent; }
  inline BehaviorHelperComponent&       GetBehaviorHelperComponent()       { assert(_behaviorHelperComponent); return *_behaviorHelperComponent; }
  
  // For test only
  BehaviorContainer& GetBehaviorContainer();
  
private:
  ComponentsPtr _components;
  
  // Component which behaviors and helpers can query to find out the appropriate animation
  // to play in response to a user facing action result
  std::unique_ptr<BehaviorEventAnimResponseDirector> _behaviorEventAnimResponseDirector;
  
  // component which behaviors can delegate to for automatic action error handling
  std::unique_ptr<BehaviorHelperComponent> _behaviorHelperComponent;

  // component that receives dev messages and then sets properties in the behavior component as a result
  std::unique_ptr<DevBehaviorComponentMessageHandler> _messageHandler;
  
  // Behavior audio client is used to update the audio engine with the current sparked state (a.k.a. "round")
  std::unique_ptr<Audio::BehaviorAudioComponent> _audioClient;

  // Receives and processes messages from the cloud system
  std::unique_ptr<BehaviorComponentCloudReceiver> _cloudReceiver;
};

} // namespace Cozmo
} // namespace Anki


#endif // __Cozmo_Basestation_BehaviorSystem_BehaviorComponent_H__

