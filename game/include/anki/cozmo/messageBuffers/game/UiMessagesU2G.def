// Autogenerated C++ message buffer code.
// Source: anki/cozmo/messageBuffers/game/UiMessagesU2G.clad
// Full command line: ../lib/anki/cozmo-engine/tools/message-buffers/emitters/CPP_emitter.py -C src -r ../game/include -o ../game/src --header-output-extension .def anki/cozmo/messageBuffers/game/UiMessagesU2G.clad

#ifndef __ANKI_COZMO_MESSAGE_BUFFERS_GAME_UI_MESSAGES_U2_G_DEF__
#define __ANKI_COZMO_MESSAGE_BUFFERS_GAME_UI_MESSAGES_U2_G_DEF__

#include <CLAD/SafeMessageBuffer.h>
#include <array>
#include <cassert>
#include <cstdint>
#include <string>
#include <vector>

#include "anki/cozmo/messageBuffers/game/UiMessagesU2GTag.def"

namespace Anki {

namespace Cozmo {

namespace U2G {

// MESSAGE Ping
struct Ping
{
	uint32_t counter;
	
	/**** Constructors ****/
	Ping() = default;
	Ping(const Ping& other) = default;
	Ping(Ping& other) = default;
	Ping(Ping&& other) noexcept = default;
	Ping& operator=(const Ping& other) = default;
	Ping& operator=(Ping&& other) noexcept = default;
	
	explicit Ping(uint32_t counter)
	:counter(counter)
	{}

	explicit Ping(const uint8_t* buff, size_t len);
	explicit Ping(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const Ping& other) const;
	bool operator!=(const Ping& other) const;
};

// MESSAGE ConnectToRobot
struct ConnectToRobot
{
	uint8_t robotID;
	
	/**** Constructors ****/
	ConnectToRobot() = default;
	ConnectToRobot(const ConnectToRobot& other) = default;
	ConnectToRobot(ConnectToRobot& other) = default;
	ConnectToRobot(ConnectToRobot&& other) noexcept = default;
	ConnectToRobot& operator=(const ConnectToRobot& other) = default;
	ConnectToRobot& operator=(ConnectToRobot&& other) noexcept = default;
	
	explicit ConnectToRobot(uint8_t robotID)
	:robotID(robotID)
	{}

	explicit ConnectToRobot(const uint8_t* buff, size_t len);
	explicit ConnectToRobot(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ConnectToRobot& other) const;
	bool operator!=(const ConnectToRobot& other) const;
};

// MESSAGE ConnectToUiDevice
struct ConnectToUiDevice
{
	uint8_t deviceID;
	
	/**** Constructors ****/
	ConnectToUiDevice() = default;
	ConnectToUiDevice(const ConnectToUiDevice& other) = default;
	ConnectToUiDevice(ConnectToUiDevice& other) = default;
	ConnectToUiDevice(ConnectToUiDevice&& other) noexcept = default;
	ConnectToUiDevice& operator=(const ConnectToUiDevice& other) = default;
	ConnectToUiDevice& operator=(ConnectToUiDevice&& other) noexcept = default;
	
	explicit ConnectToUiDevice(uint8_t deviceID)
	:deviceID(deviceID)
	{}

	explicit ConnectToUiDevice(const uint8_t* buff, size_t len);
	explicit ConnectToUiDevice(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ConnectToUiDevice& other) const;
	bool operator!=(const ConnectToUiDevice& other) const;
};

// MESSAGE DisconnectFromUiDevice
struct DisconnectFromUiDevice
{
	uint8_t deviceID;
	
	/**** Constructors ****/
	DisconnectFromUiDevice() = default;
	DisconnectFromUiDevice(const DisconnectFromUiDevice& other) = default;
	DisconnectFromUiDevice(DisconnectFromUiDevice& other) = default;
	DisconnectFromUiDevice(DisconnectFromUiDevice&& other) noexcept = default;
	DisconnectFromUiDevice& operator=(const DisconnectFromUiDevice& other) = default;
	DisconnectFromUiDevice& operator=(DisconnectFromUiDevice&& other) noexcept = default;
	
	explicit DisconnectFromUiDevice(uint8_t deviceID)
	:deviceID(deviceID)
	{}

	explicit DisconnectFromUiDevice(const uint8_t* buff, size_t len);
	explicit DisconnectFromUiDevice(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const DisconnectFromUiDevice& other) const;
	bool operator!=(const DisconnectFromUiDevice& other) const;
};

// MESSAGE ForceAddRobot
struct ForceAddRobot
{
	std::array<uint8_t, 16> ipAddress;
	uint8_t robotID;
	uint8_t isSimulated;
	
	/**** Constructors ****/
	ForceAddRobot() = default;
	ForceAddRobot(const ForceAddRobot& other) = default;
	ForceAddRobot(ForceAddRobot& other) = default;
	ForceAddRobot(ForceAddRobot&& other) noexcept = default;
	ForceAddRobot& operator=(const ForceAddRobot& other) = default;
	ForceAddRobot& operator=(ForceAddRobot&& other) noexcept = default;
	
	explicit ForceAddRobot(const std::array<uint8_t, 16>& ipAddress
		,uint8_t robotID
		,uint8_t isSimulated)
	:ipAddress(ipAddress)
	,robotID(robotID)
	,isSimulated(isSimulated)
	{}

	explicit ForceAddRobot(const uint8_t* buff, size_t len);
	explicit ForceAddRobot(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ForceAddRobot& other) const;
	bool operator!=(const ForceAddRobot& other) const;
};

// MESSAGE StartEngine
struct StartEngine
{
	uint8_t asHost;
	std::array<uint8_t, 16> vizHostIP;
	
	/**** Constructors ****/
	StartEngine() = default;
	StartEngine(const StartEngine& other) = default;
	StartEngine(StartEngine& other) = default;
	StartEngine(StartEngine&& other) noexcept = default;
	StartEngine& operator=(const StartEngine& other) = default;
	StartEngine& operator=(StartEngine&& other) noexcept = default;
	
	explicit StartEngine(uint8_t asHost
		,const std::array<uint8_t, 16>& vizHostIP)
	:asHost(asHost)
	,vizHostIP(vizHostIP)
	{}

	explicit StartEngine(const uint8_t* buff, size_t len);
	explicit StartEngine(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StartEngine& other) const;
	bool operator!=(const StartEngine& other) const;
};

// MESSAGE DriveWheels
struct DriveWheels
{
	float lwheel_speed_mmps;
	float rwheel_speed_mmps;
	
	/**** Constructors ****/
	DriveWheels() = default;
	DriveWheels(const DriveWheels& other) = default;
	DriveWheels(DriveWheels& other) = default;
	DriveWheels(DriveWheels&& other) noexcept = default;
	DriveWheels& operator=(const DriveWheels& other) = default;
	DriveWheels& operator=(DriveWheels&& other) noexcept = default;
	
	explicit DriveWheels(float lwheel_speed_mmps
		,float rwheel_speed_mmps)
	:lwheel_speed_mmps(lwheel_speed_mmps)
	,rwheel_speed_mmps(rwheel_speed_mmps)
	{}

	explicit DriveWheels(const uint8_t* buff, size_t len);
	explicit DriveWheels(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const DriveWheels& other) const;
	bool operator!=(const DriveWheels& other) const;
};

// MESSAGE TurnInPlace
struct TurnInPlace
{
	float angle_rad;
	uint8_t robotID;
	
	/**** Constructors ****/
	TurnInPlace() = default;
	TurnInPlace(const TurnInPlace& other) = default;
	TurnInPlace(TurnInPlace& other) = default;
	TurnInPlace(TurnInPlace&& other) noexcept = default;
	TurnInPlace& operator=(const TurnInPlace& other) = default;
	TurnInPlace& operator=(TurnInPlace&& other) noexcept = default;
	
	explicit TurnInPlace(float angle_rad
		,uint8_t robotID)
	:angle_rad(angle_rad)
	,robotID(robotID)
	{}

	explicit TurnInPlace(const uint8_t* buff, size_t len);
	explicit TurnInPlace(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const TurnInPlace& other) const;
	bool operator!=(const TurnInPlace& other) const;
};

// MESSAGE FaceObject
struct FaceObject
{
	uint32_t objectID;
	float turnAngleTol;
	float maxTurnAngle;
	uint8_t robotID;
	uint8_t headTrackWhenDone;
	
	/**** Constructors ****/
	FaceObject() = default;
	FaceObject(const FaceObject& other) = default;
	FaceObject(FaceObject& other) = default;
	FaceObject(FaceObject&& other) noexcept = default;
	FaceObject& operator=(const FaceObject& other) = default;
	FaceObject& operator=(FaceObject&& other) noexcept = default;
	
	explicit FaceObject(uint32_t objectID
		,float turnAngleTol
		,float maxTurnAngle
		,uint8_t robotID
		,uint8_t headTrackWhenDone)
	:objectID(objectID)
	,turnAngleTol(turnAngleTol)
	,maxTurnAngle(maxTurnAngle)
	,robotID(robotID)
	,headTrackWhenDone(headTrackWhenDone)
	{}

	explicit FaceObject(const uint8_t* buff, size_t len);
	explicit FaceObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const FaceObject& other) const;
	bool operator!=(const FaceObject& other) const;
};

// MESSAGE MoveHead
struct MoveHead
{
	float speed_rad_per_sec;
	
	/**** Constructors ****/
	MoveHead() = default;
	MoveHead(const MoveHead& other) = default;
	MoveHead(MoveHead& other) = default;
	MoveHead(MoveHead&& other) noexcept = default;
	MoveHead& operator=(const MoveHead& other) = default;
	MoveHead& operator=(MoveHead&& other) noexcept = default;
	
	explicit MoveHead(float speed_rad_per_sec)
	:speed_rad_per_sec(speed_rad_per_sec)
	{}

	explicit MoveHead(const uint8_t* buff, size_t len);
	explicit MoveHead(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const MoveHead& other) const;
	bool operator!=(const MoveHead& other) const;
};

// MESSAGE MoveLift
struct MoveLift
{
	float speed_rad_per_sec;
	
	/**** Constructors ****/
	MoveLift() = default;
	MoveLift(const MoveLift& other) = default;
	MoveLift(MoveLift& other) = default;
	MoveLift(MoveLift&& other) noexcept = default;
	MoveLift& operator=(const MoveLift& other) = default;
	MoveLift& operator=(MoveLift&& other) noexcept = default;
	
	explicit MoveLift(float speed_rad_per_sec)
	:speed_rad_per_sec(speed_rad_per_sec)
	{}

	explicit MoveLift(const uint8_t* buff, size_t len);
	explicit MoveLift(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const MoveLift& other) const;
	bool operator!=(const MoveLift& other) const;
};

// MESSAGE SetLiftHeight
struct SetLiftHeight
{
	float height_mm;
	float max_speed_rad_per_sec;
	float accel_rad_per_sec2;
	
	/**** Constructors ****/
	SetLiftHeight() = default;
	SetLiftHeight(const SetLiftHeight& other) = default;
	SetLiftHeight(SetLiftHeight& other) = default;
	SetLiftHeight(SetLiftHeight&& other) noexcept = default;
	SetLiftHeight& operator=(const SetLiftHeight& other) = default;
	SetLiftHeight& operator=(SetLiftHeight&& other) noexcept = default;
	
	explicit SetLiftHeight(float height_mm
		,float max_speed_rad_per_sec
		,float accel_rad_per_sec2)
	:height_mm(height_mm)
	,max_speed_rad_per_sec(max_speed_rad_per_sec)
	,accel_rad_per_sec2(accel_rad_per_sec2)
	{}

	explicit SetLiftHeight(const uint8_t* buff, size_t len);
	explicit SetLiftHeight(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetLiftHeight& other) const;
	bool operator!=(const SetLiftHeight& other) const;
};

// MESSAGE SetHeadAngle
struct SetHeadAngle
{
	float angle_rad;
	float max_speed_rad_per_sec;
	float accel_rad_per_sec2;
	
	/**** Constructors ****/
	SetHeadAngle() = default;
	SetHeadAngle(const SetHeadAngle& other) = default;
	SetHeadAngle(SetHeadAngle& other) = default;
	SetHeadAngle(SetHeadAngle&& other) noexcept = default;
	SetHeadAngle& operator=(const SetHeadAngle& other) = default;
	SetHeadAngle& operator=(SetHeadAngle&& other) noexcept = default;
	
	explicit SetHeadAngle(float angle_rad
		,float max_speed_rad_per_sec
		,float accel_rad_per_sec2)
	:angle_rad(angle_rad)
	,max_speed_rad_per_sec(max_speed_rad_per_sec)
	,accel_rad_per_sec2(accel_rad_per_sec2)
	{}

	explicit SetHeadAngle(const uint8_t* buff, size_t len);
	explicit SetHeadAngle(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetHeadAngle& other) const;
	bool operator!=(const SetHeadAngle& other) const;
};

// MESSAGE TrackHeadToObject
struct TrackHeadToObject
{
	uint32_t objectID;
	uint8_t robotID;
	
	/**** Constructors ****/
	TrackHeadToObject() = default;
	TrackHeadToObject(const TrackHeadToObject& other) = default;
	TrackHeadToObject(TrackHeadToObject& other) = default;
	TrackHeadToObject(TrackHeadToObject&& other) noexcept = default;
	TrackHeadToObject& operator=(const TrackHeadToObject& other) = default;
	TrackHeadToObject& operator=(TrackHeadToObject&& other) noexcept = default;
	
	explicit TrackHeadToObject(uint32_t objectID
		,uint8_t robotID)
	:objectID(objectID)
	,robotID(robotID)
	{}

	explicit TrackHeadToObject(const uint8_t* buff, size_t len);
	explicit TrackHeadToObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const TrackHeadToObject& other) const;
	bool operator!=(const TrackHeadToObject& other) const;
};

// MESSAGE StopAllMotors
struct StopAllMotors
{
	
	/**** Constructors ****/
	StopAllMotors() = default;
	StopAllMotors(const StopAllMotors& other) = default;
	StopAllMotors(StopAllMotors& other) = default;
	StopAllMotors(StopAllMotors&& other) noexcept = default;
	StopAllMotors& operator=(const StopAllMotors& other) = default;
	StopAllMotors& operator=(StopAllMotors&& other) noexcept = default;
		explicit StopAllMotors(const uint8_t* buff, size_t len);
	explicit StopAllMotors(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StopAllMotors& other) const;
	bool operator!=(const StopAllMotors& other) const;
};

// MESSAGE ImageRequest
struct ImageRequest
{
	uint8_t robotID;
	uint8_t mode;
	
	/**** Constructors ****/
	ImageRequest() = default;
	ImageRequest(const ImageRequest& other) = default;
	ImageRequest(ImageRequest& other) = default;
	ImageRequest(ImageRequest&& other) noexcept = default;
	ImageRequest& operator=(const ImageRequest& other) = default;
	ImageRequest& operator=(ImageRequest&& other) noexcept = default;
	
	explicit ImageRequest(uint8_t robotID
		,uint8_t mode)
	:robotID(robotID)
	,mode(mode)
	{}

	explicit ImageRequest(const uint8_t* buff, size_t len);
	explicit ImageRequest(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ImageRequest& other) const;
	bool operator!=(const ImageRequest& other) const;
};

// MESSAGE SetRobotImageSendMode
struct SetRobotImageSendMode
{
	uint8_t mode;
	uint8_t resolution;
	
	/**** Constructors ****/
	SetRobotImageSendMode() = default;
	SetRobotImageSendMode(const SetRobotImageSendMode& other) = default;
	SetRobotImageSendMode(SetRobotImageSendMode& other) = default;
	SetRobotImageSendMode(SetRobotImageSendMode&& other) noexcept = default;
	SetRobotImageSendMode& operator=(const SetRobotImageSendMode& other) = default;
	SetRobotImageSendMode& operator=(SetRobotImageSendMode&& other) noexcept = default;
	
	explicit SetRobotImageSendMode(uint8_t mode
		,uint8_t resolution)
	:mode(mode)
	,resolution(resolution)
	{}

	explicit SetRobotImageSendMode(const uint8_t* buff, size_t len);
	explicit SetRobotImageSendMode(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetRobotImageSendMode& other) const;
	bool operator!=(const SetRobotImageSendMode& other) const;
};

// MESSAGE SaveImages
struct SaveImages
{
	uint8_t mode;
	
	/**** Constructors ****/
	SaveImages() = default;
	SaveImages(const SaveImages& other) = default;
	SaveImages(SaveImages& other) = default;
	SaveImages(SaveImages&& other) noexcept = default;
	SaveImages& operator=(const SaveImages& other) = default;
	SaveImages& operator=(SaveImages&& other) noexcept = default;
	
	explicit SaveImages(uint8_t mode)
	:mode(mode)
	{}

	explicit SaveImages(const uint8_t* buff, size_t len);
	explicit SaveImages(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SaveImages& other) const;
	bool operator!=(const SaveImages& other) const;
};

// MESSAGE SaveRobotState
struct SaveRobotState
{
	uint8_t mode;
	
	/**** Constructors ****/
	SaveRobotState() = default;
	SaveRobotState(const SaveRobotState& other) = default;
	SaveRobotState(SaveRobotState& other) = default;
	SaveRobotState(SaveRobotState&& other) noexcept = default;
	SaveRobotState& operator=(const SaveRobotState& other) = default;
	SaveRobotState& operator=(SaveRobotState&& other) noexcept = default;
	
	explicit SaveRobotState(uint8_t mode)
	:mode(mode)
	{}

	explicit SaveRobotState(const uint8_t* buff, size_t len);
	explicit SaveRobotState(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SaveRobotState& other) const;
	bool operator!=(const SaveRobotState& other) const;
};

// MESSAGE EnableDisplay
struct EnableDisplay
{
	uint8_t enable;
	
	/**** Constructors ****/
	EnableDisplay() = default;
	EnableDisplay(const EnableDisplay& other) = default;
	EnableDisplay(EnableDisplay& other) = default;
	EnableDisplay(EnableDisplay&& other) noexcept = default;
	EnableDisplay& operator=(const EnableDisplay& other) = default;
	EnableDisplay& operator=(EnableDisplay&& other) noexcept = default;
	
	explicit EnableDisplay(uint8_t enable)
	:enable(enable)
	{}

	explicit EnableDisplay(const uint8_t* buff, size_t len);
	explicit EnableDisplay(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const EnableDisplay& other) const;
	bool operator!=(const EnableDisplay& other) const;
};

// MESSAGE SetHeadlights
struct SetHeadlights
{
	uint8_t intensity;
	
	/**** Constructors ****/
	SetHeadlights() = default;
	SetHeadlights(const SetHeadlights& other) = default;
	SetHeadlights(SetHeadlights& other) = default;
	SetHeadlights(SetHeadlights&& other) noexcept = default;
	SetHeadlights& operator=(const SetHeadlights& other) = default;
	SetHeadlights& operator=(SetHeadlights&& other) noexcept = default;
	
	explicit SetHeadlights(uint8_t intensity)
	:intensity(intensity)
	{}

	explicit SetHeadlights(const uint8_t* buff, size_t len);
	explicit SetHeadlights(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetHeadlights& other) const;
	bool operator!=(const SetHeadlights& other) const;
};

// MESSAGE GotoPose
struct GotoPose
{
	float x_mm;
	float y_mm;
	float rad;
	uint8_t level;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	GotoPose() = default;
	GotoPose(const GotoPose& other) = default;
	GotoPose(GotoPose& other) = default;
	GotoPose(GotoPose&& other) noexcept = default;
	GotoPose& operator=(const GotoPose& other) = default;
	GotoPose& operator=(GotoPose&& other) noexcept = default;
	
	explicit GotoPose(float x_mm
		,float y_mm
		,float rad
		,uint8_t level
		,uint8_t useManualSpeed)
	:x_mm(x_mm)
	,y_mm(y_mm)
	,rad(rad)
	,level(level)
	,useManualSpeed(useManualSpeed)
	{}

	explicit GotoPose(const uint8_t* buff, size_t len);
	explicit GotoPose(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const GotoPose& other) const;
	bool operator!=(const GotoPose& other) const;
};

// MESSAGE PlaceObjectOnGround
struct PlaceObjectOnGround
{
	float x_mm;
	float y_mm;
	float rad;
	uint8_t level;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	PlaceObjectOnGround() = default;
	PlaceObjectOnGround(const PlaceObjectOnGround& other) = default;
	PlaceObjectOnGround(PlaceObjectOnGround& other) = default;
	PlaceObjectOnGround(PlaceObjectOnGround&& other) noexcept = default;
	PlaceObjectOnGround& operator=(const PlaceObjectOnGround& other) = default;
	PlaceObjectOnGround& operator=(PlaceObjectOnGround&& other) noexcept = default;
	
	explicit PlaceObjectOnGround(float x_mm
		,float y_mm
		,float rad
		,uint8_t level
		,uint8_t useManualSpeed)
	:x_mm(x_mm)
	,y_mm(y_mm)
	,rad(rad)
	,level(level)
	,useManualSpeed(useManualSpeed)
	{}

	explicit PlaceObjectOnGround(const uint8_t* buff, size_t len);
	explicit PlaceObjectOnGround(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const PlaceObjectOnGround& other) const;
	bool operator!=(const PlaceObjectOnGround& other) const;
};

// MESSAGE PlaceObjectOnGroundHere
struct PlaceObjectOnGroundHere
{
	
	/**** Constructors ****/
	PlaceObjectOnGroundHere() = default;
	PlaceObjectOnGroundHere(const PlaceObjectOnGroundHere& other) = default;
	PlaceObjectOnGroundHere(PlaceObjectOnGroundHere& other) = default;
	PlaceObjectOnGroundHere(PlaceObjectOnGroundHere&& other) noexcept = default;
	PlaceObjectOnGroundHere& operator=(const PlaceObjectOnGroundHere& other) = default;
	PlaceObjectOnGroundHere& operator=(PlaceObjectOnGroundHere&& other) noexcept = default;
		explicit PlaceObjectOnGroundHere(const uint8_t* buff, size_t len);
	explicit PlaceObjectOnGroundHere(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const PlaceObjectOnGroundHere& other) const;
	bool operator!=(const PlaceObjectOnGroundHere& other) const;
};

// MESSAGE ExecuteTestPlan
struct ExecuteTestPlan
{
	
	/**** Constructors ****/
	ExecuteTestPlan() = default;
	ExecuteTestPlan(const ExecuteTestPlan& other) = default;
	ExecuteTestPlan(ExecuteTestPlan& other) = default;
	ExecuteTestPlan(ExecuteTestPlan&& other) noexcept = default;
	ExecuteTestPlan& operator=(const ExecuteTestPlan& other) = default;
	ExecuteTestPlan& operator=(ExecuteTestPlan&& other) noexcept = default;
		explicit ExecuteTestPlan(const uint8_t* buff, size_t len);
	explicit ExecuteTestPlan(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ExecuteTestPlan& other) const;
	bool operator!=(const ExecuteTestPlan& other) const;
};

// MESSAGE SelectNextObject
struct SelectNextObject
{
	
	/**** Constructors ****/
	SelectNextObject() = default;
	SelectNextObject(const SelectNextObject& other) = default;
	SelectNextObject(SelectNextObject& other) = default;
	SelectNextObject(SelectNextObject&& other) noexcept = default;
	SelectNextObject& operator=(const SelectNextObject& other) = default;
	SelectNextObject& operator=(SelectNextObject&& other) noexcept = default;
		explicit SelectNextObject(const uint8_t* buff, size_t len);
	explicit SelectNextObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SelectNextObject& other) const;
	bool operator!=(const SelectNextObject& other) const;
};

// MESSAGE PickAndPlaceObject
struct PickAndPlaceObject
{
	int32_t objectID;
	uint8_t usePreDockPose;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	PickAndPlaceObject() = default;
	PickAndPlaceObject(const PickAndPlaceObject& other) = default;
	PickAndPlaceObject(PickAndPlaceObject& other) = default;
	PickAndPlaceObject(PickAndPlaceObject&& other) noexcept = default;
	PickAndPlaceObject& operator=(const PickAndPlaceObject& other) = default;
	PickAndPlaceObject& operator=(PickAndPlaceObject&& other) noexcept = default;
	
	explicit PickAndPlaceObject(int32_t objectID
		,uint8_t usePreDockPose
		,uint8_t useManualSpeed)
	:objectID(objectID)
	,usePreDockPose(usePreDockPose)
	,useManualSpeed(useManualSpeed)
	{}

	explicit PickAndPlaceObject(const uint8_t* buff, size_t len);
	explicit PickAndPlaceObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const PickAndPlaceObject& other) const;
	bool operator!=(const PickAndPlaceObject& other) const;
};

// MESSAGE TraverseObject
struct TraverseObject
{
	uint8_t usePreDockPose;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	TraverseObject() = default;
	TraverseObject(const TraverseObject& other) = default;
	TraverseObject(TraverseObject& other) = default;
	TraverseObject(TraverseObject&& other) noexcept = default;
	TraverseObject& operator=(const TraverseObject& other) = default;
	TraverseObject& operator=(TraverseObject&& other) noexcept = default;
	
	explicit TraverseObject(uint8_t usePreDockPose
		,uint8_t useManualSpeed)
	:usePreDockPose(usePreDockPose)
	,useManualSpeed(useManualSpeed)
	{}

	explicit TraverseObject(const uint8_t* buff, size_t len);
	explicit TraverseObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const TraverseObject& other) const;
	bool operator!=(const TraverseObject& other) const;
};

// MESSAGE SetRobotCarryingObject
struct SetRobotCarryingObject
{
	int32_t objectID;
	uint8_t robotID;
	
	/**** Constructors ****/
	SetRobotCarryingObject() = default;
	SetRobotCarryingObject(const SetRobotCarryingObject& other) = default;
	SetRobotCarryingObject(SetRobotCarryingObject& other) = default;
	SetRobotCarryingObject(SetRobotCarryingObject&& other) noexcept = default;
	SetRobotCarryingObject& operator=(const SetRobotCarryingObject& other) = default;
	SetRobotCarryingObject& operator=(SetRobotCarryingObject&& other) noexcept = default;
	
	explicit SetRobotCarryingObject(int32_t objectID
		,uint8_t robotID)
	:objectID(objectID)
	,robotID(robotID)
	{}

	explicit SetRobotCarryingObject(const uint8_t* buff, size_t len);
	explicit SetRobotCarryingObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetRobotCarryingObject& other) const;
	bool operator!=(const SetRobotCarryingObject& other) const;
};

// MESSAGE ClearAllBlocks
struct ClearAllBlocks
{
	
	/**** Constructors ****/
	ClearAllBlocks() = default;
	ClearAllBlocks(const ClearAllBlocks& other) = default;
	ClearAllBlocks(ClearAllBlocks& other) = default;
	ClearAllBlocks(ClearAllBlocks&& other) noexcept = default;
	ClearAllBlocks& operator=(const ClearAllBlocks& other) = default;
	ClearAllBlocks& operator=(ClearAllBlocks&& other) noexcept = default;
		explicit ClearAllBlocks(const uint8_t* buff, size_t len);
	explicit ClearAllBlocks(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ClearAllBlocks& other) const;
	bool operator!=(const ClearAllBlocks& other) const;
};

// MESSAGE VisionWhileMoving
struct VisionWhileMoving
{
	uint8_t enable;
	
	/**** Constructors ****/
	VisionWhileMoving() = default;
	VisionWhileMoving(const VisionWhileMoving& other) = default;
	VisionWhileMoving(VisionWhileMoving& other) = default;
	VisionWhileMoving(VisionWhileMoving&& other) noexcept = default;
	VisionWhileMoving& operator=(const VisionWhileMoving& other) = default;
	VisionWhileMoving& operator=(VisionWhileMoving&& other) noexcept = default;
	
	explicit VisionWhileMoving(uint8_t enable)
	:enable(enable)
	{}

	explicit VisionWhileMoving(const uint8_t* buff, size_t len);
	explicit VisionWhileMoving(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const VisionWhileMoving& other) const;
	bool operator!=(const VisionWhileMoving& other) const;
};

// MESSAGE ExecuteBehavior
struct ExecuteBehavior
{
	uint8_t behaviorMode;
	
	/**** Constructors ****/
	ExecuteBehavior() = default;
	ExecuteBehavior(const ExecuteBehavior& other) = default;
	ExecuteBehavior(ExecuteBehavior& other) = default;
	ExecuteBehavior(ExecuteBehavior&& other) noexcept = default;
	ExecuteBehavior& operator=(const ExecuteBehavior& other) = default;
	ExecuteBehavior& operator=(ExecuteBehavior&& other) noexcept = default;
	
	explicit ExecuteBehavior(uint8_t behaviorMode)
	:behaviorMode(behaviorMode)
	{}

	explicit ExecuteBehavior(const uint8_t* buff, size_t len);
	explicit ExecuteBehavior(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ExecuteBehavior& other) const;
	bool operator!=(const ExecuteBehavior& other) const;
};

// MESSAGE SetBehaviorState
struct SetBehaviorState
{
	uint8_t behaviorState;
	
	/**** Constructors ****/
	SetBehaviorState() = default;
	SetBehaviorState(const SetBehaviorState& other) = default;
	SetBehaviorState(SetBehaviorState& other) = default;
	SetBehaviorState(SetBehaviorState&& other) noexcept = default;
	SetBehaviorState& operator=(const SetBehaviorState& other) = default;
	SetBehaviorState& operator=(SetBehaviorState&& other) noexcept = default;
	
	explicit SetBehaviorState(uint8_t behaviorState)
	:behaviorState(behaviorState)
	{}

	explicit SetBehaviorState(const uint8_t* buff, size_t len);
	explicit SetBehaviorState(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetBehaviorState& other) const;
	bool operator!=(const SetBehaviorState& other) const;
};

// MESSAGE AbortPath
struct AbortPath
{
	
	/**** Constructors ****/
	AbortPath() = default;
	AbortPath(const AbortPath& other) = default;
	AbortPath(AbortPath& other) = default;
	AbortPath(AbortPath&& other) noexcept = default;
	AbortPath& operator=(const AbortPath& other) = default;
	AbortPath& operator=(AbortPath&& other) noexcept = default;
		explicit AbortPath(const uint8_t* buff, size_t len);
	explicit AbortPath(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const AbortPath& other) const;
	bool operator!=(const AbortPath& other) const;
};

// MESSAGE AbortAll
struct AbortAll
{
	
	/**** Constructors ****/
	AbortAll() = default;
	AbortAll(const AbortAll& other) = default;
	AbortAll(AbortAll& other) = default;
	AbortAll(AbortAll&& other) noexcept = default;
	AbortAll& operator=(const AbortAll& other) = default;
	AbortAll& operator=(AbortAll&& other) noexcept = default;
		explicit AbortAll(const uint8_t* buff, size_t len);
	explicit AbortAll(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const AbortAll& other) const;
	bool operator!=(const AbortAll& other) const;
};

// MESSAGE DrawPoseMarker
struct DrawPoseMarker
{
	float x_mm;
	float y_mm;
	float rad;
	uint8_t level;
	
	/**** Constructors ****/
	DrawPoseMarker() = default;
	DrawPoseMarker(const DrawPoseMarker& other) = default;
	DrawPoseMarker(DrawPoseMarker& other) = default;
	DrawPoseMarker(DrawPoseMarker&& other) noexcept = default;
	DrawPoseMarker& operator=(const DrawPoseMarker& other) = default;
	DrawPoseMarker& operator=(DrawPoseMarker&& other) noexcept = default;
	
	explicit DrawPoseMarker(float x_mm
		,float y_mm
		,float rad
		,uint8_t level)
	:x_mm(x_mm)
	,y_mm(y_mm)
	,rad(rad)
	,level(level)
	{}

	explicit DrawPoseMarker(const uint8_t* buff, size_t len);
	explicit DrawPoseMarker(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const DrawPoseMarker& other) const;
	bool operator!=(const DrawPoseMarker& other) const;
};

// MESSAGE ErasePoseMarker
struct ErasePoseMarker
{
	
	/**** Constructors ****/
	ErasePoseMarker() = default;
	ErasePoseMarker(const ErasePoseMarker& other) = default;
	ErasePoseMarker(ErasePoseMarker& other) = default;
	ErasePoseMarker(ErasePoseMarker&& other) noexcept = default;
	ErasePoseMarker& operator=(const ErasePoseMarker& other) = default;
	ErasePoseMarker& operator=(ErasePoseMarker&& other) noexcept = default;
		explicit ErasePoseMarker(const uint8_t* buff, size_t len);
	explicit ErasePoseMarker(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ErasePoseMarker& other) const;
	bool operator!=(const ErasePoseMarker& other) const;
};

// MESSAGE SetWheelControllerGains
struct SetWheelControllerGains
{
	float kpLeft;
	float kiLeft;
	float maxIntegralErrorLeft;
	float kpRight;
	float kiRight;
	float maxIntegralErrorRight;
	
	/**** Constructors ****/
	SetWheelControllerGains() = default;
	SetWheelControllerGains(const SetWheelControllerGains& other) = default;
	SetWheelControllerGains(SetWheelControllerGains& other) = default;
	SetWheelControllerGains(SetWheelControllerGains&& other) noexcept = default;
	SetWheelControllerGains& operator=(const SetWheelControllerGains& other) = default;
	SetWheelControllerGains& operator=(SetWheelControllerGains&& other) noexcept = default;
	
	explicit SetWheelControllerGains(float kpLeft
		,float kiLeft
		,float maxIntegralErrorLeft
		,float kpRight
		,float kiRight
		,float maxIntegralErrorRight)
	:kpLeft(kpLeft)
	,kiLeft(kiLeft)
	,maxIntegralErrorLeft(maxIntegralErrorLeft)
	,kpRight(kpRight)
	,kiRight(kiRight)
	,maxIntegralErrorRight(maxIntegralErrorRight)
	{}

	explicit SetWheelControllerGains(const uint8_t* buff, size_t len);
	explicit SetWheelControllerGains(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetWheelControllerGains& other) const;
	bool operator!=(const SetWheelControllerGains& other) const;
};

// MESSAGE SetHeadControllerGains
struct SetHeadControllerGains
{
	float kp;
	float ki;
	float maxIntegralError;
	
	/**** Constructors ****/
	SetHeadControllerGains() = default;
	SetHeadControllerGains(const SetHeadControllerGains& other) = default;
	SetHeadControllerGains(SetHeadControllerGains& other) = default;
	SetHeadControllerGains(SetHeadControllerGains&& other) noexcept = default;
	SetHeadControllerGains& operator=(const SetHeadControllerGains& other) = default;
	SetHeadControllerGains& operator=(SetHeadControllerGains&& other) noexcept = default;
	
	explicit SetHeadControllerGains(float kp
		,float ki
		,float maxIntegralError)
	:kp(kp)
	,ki(ki)
	,maxIntegralError(maxIntegralError)
	{}

	explicit SetHeadControllerGains(const uint8_t* buff, size_t len);
	explicit SetHeadControllerGains(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetHeadControllerGains& other) const;
	bool operator!=(const SetHeadControllerGains& other) const;
};

// MESSAGE SetLiftControllerGains
struct SetLiftControllerGains
{
	float kp;
	float kd;
	float ki;
	float maxIntegralError;
	
	/**** Constructors ****/
	SetLiftControllerGains() = default;
	SetLiftControllerGains(const SetLiftControllerGains& other) = default;
	SetLiftControllerGains(SetLiftControllerGains& other) = default;
	SetLiftControllerGains(SetLiftControllerGains&& other) noexcept = default;
	SetLiftControllerGains& operator=(const SetLiftControllerGains& other) = default;
	SetLiftControllerGains& operator=(SetLiftControllerGains&& other) noexcept = default;
	
	explicit SetLiftControllerGains(float kp
		,float kd
		,float ki
		,float maxIntegralError)
	:kp(kp)
	,kd(kd)
	,ki(ki)
	,maxIntegralError(maxIntegralError)
	{}

	explicit SetLiftControllerGains(const uint8_t* buff, size_t len);
	explicit SetLiftControllerGains(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetLiftControllerGains& other) const;
	bool operator!=(const SetLiftControllerGains& other) const;
};

// MESSAGE SelectNextSoundScheme
struct SelectNextSoundScheme
{
	
	/**** Constructors ****/
	SelectNextSoundScheme() = default;
	SelectNextSoundScheme(const SelectNextSoundScheme& other) = default;
	SelectNextSoundScheme(SelectNextSoundScheme& other) = default;
	SelectNextSoundScheme(SelectNextSoundScheme&& other) noexcept = default;
	SelectNextSoundScheme& operator=(const SelectNextSoundScheme& other) = default;
	SelectNextSoundScheme& operator=(SelectNextSoundScheme&& other) noexcept = default;
		explicit SelectNextSoundScheme(const uint8_t* buff, size_t len);
	explicit SelectNextSoundScheme(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SelectNextSoundScheme& other) const;
	bool operator!=(const SelectNextSoundScheme& other) const;
};

// MESSAGE StartTestMode
struct StartTestMode
{
	int32_t p1;
	int32_t p2;
	int32_t p3;
	uint8_t mode;
	
	/**** Constructors ****/
	StartTestMode() = default;
	StartTestMode(const StartTestMode& other) = default;
	StartTestMode(StartTestMode& other) = default;
	StartTestMode(StartTestMode&& other) noexcept = default;
	StartTestMode& operator=(const StartTestMode& other) = default;
	StartTestMode& operator=(StartTestMode&& other) noexcept = default;
	
	explicit StartTestMode(int32_t p1
		,int32_t p2
		,int32_t p3
		,uint8_t mode)
	:p1(p1)
	,p2(p2)
	,p3(p3)
	,mode(mode)
	{}

	explicit StartTestMode(const uint8_t* buff, size_t len);
	explicit StartTestMode(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StartTestMode& other) const;
	bool operator!=(const StartTestMode& other) const;
};

// MESSAGE IMURequest
struct IMURequest
{
	uint32_t length_ms;
	
	/**** Constructors ****/
	IMURequest() = default;
	IMURequest(const IMURequest& other) = default;
	IMURequest(IMURequest& other) = default;
	IMURequest(IMURequest&& other) noexcept = default;
	IMURequest& operator=(const IMURequest& other) = default;
	IMURequest& operator=(IMURequest&& other) noexcept = default;
	
	explicit IMURequest(uint32_t length_ms)
	:length_ms(length_ms)
	{}

	explicit IMURequest(const uint8_t* buff, size_t len);
	explicit IMURequest(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const IMURequest& other) const;
	bool operator!=(const IMURequest& other) const;
};

// MESSAGE PlayAnimation
struct PlayAnimation
{
	uint32_t numLoops;
	std::string animationName;
	
	/**** Constructors ****/
	PlayAnimation() = default;
	PlayAnimation(const PlayAnimation& other) = default;
	PlayAnimation(PlayAnimation& other) = default;
	PlayAnimation(PlayAnimation&& other) noexcept = default;
	PlayAnimation& operator=(const PlayAnimation& other) = default;
	PlayAnimation& operator=(PlayAnimation&& other) noexcept = default;
	
	explicit PlayAnimation(uint32_t numLoops
		,const std::string& animationName)
	:numLoops(numLoops)
	,animationName(animationName)
	{}

	explicit PlayAnimation(const uint8_t* buff, size_t len);
	explicit PlayAnimation(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const PlayAnimation& other) const;
	bool operator!=(const PlayAnimation& other) const;
};

// MESSAGE ReadAnimationFile
struct ReadAnimationFile
{
	
	/**** Constructors ****/
	ReadAnimationFile() = default;
	ReadAnimationFile(const ReadAnimationFile& other) = default;
	ReadAnimationFile(ReadAnimationFile& other) = default;
	ReadAnimationFile(ReadAnimationFile&& other) noexcept = default;
	ReadAnimationFile& operator=(const ReadAnimationFile& other) = default;
	ReadAnimationFile& operator=(ReadAnimationFile&& other) noexcept = default;
		explicit ReadAnimationFile(const uint8_t* buff, size_t len);
	explicit ReadAnimationFile(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ReadAnimationFile& other) const;
	bool operator!=(const ReadAnimationFile& other) const;
};

// MESSAGE StartFaceTracking
struct StartFaceTracking
{
	uint8_t timeout_sec;
	
	/**** Constructors ****/
	StartFaceTracking() = default;
	StartFaceTracking(const StartFaceTracking& other) = default;
	StartFaceTracking(StartFaceTracking& other) = default;
	StartFaceTracking(StartFaceTracking&& other) noexcept = default;
	StartFaceTracking& operator=(const StartFaceTracking& other) = default;
	StartFaceTracking& operator=(StartFaceTracking&& other) noexcept = default;
	
	explicit StartFaceTracking(uint8_t timeout_sec)
	:timeout_sec(timeout_sec)
	{}

	explicit StartFaceTracking(const uint8_t* buff, size_t len);
	explicit StartFaceTracking(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StartFaceTracking& other) const;
	bool operator!=(const StartFaceTracking& other) const;
};

// MESSAGE StopFaceTracking
struct StopFaceTracking
{
	
	/**** Constructors ****/
	StopFaceTracking() = default;
	StopFaceTracking(const StopFaceTracking& other) = default;
	StopFaceTracking(StopFaceTracking& other) = default;
	StopFaceTracking(StopFaceTracking&& other) noexcept = default;
	StopFaceTracking& operator=(const StopFaceTracking& other) = default;
	StopFaceTracking& operator=(StopFaceTracking&& other) noexcept = default;
		explicit StopFaceTracking(const uint8_t* buff, size_t len);
	explicit StopFaceTracking(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StopFaceTracking& other) const;
	bool operator!=(const StopFaceTracking& other) const;
};

// MESSAGE StartLookingForMarkers
struct StartLookingForMarkers
{
	
	/**** Constructors ****/
	StartLookingForMarkers() = default;
	StartLookingForMarkers(const StartLookingForMarkers& other) = default;
	StartLookingForMarkers(StartLookingForMarkers& other) = default;
	StartLookingForMarkers(StartLookingForMarkers&& other) noexcept = default;
	StartLookingForMarkers& operator=(const StartLookingForMarkers& other) = default;
	StartLookingForMarkers& operator=(StartLookingForMarkers&& other) noexcept = default;
		explicit StartLookingForMarkers(const uint8_t* buff, size_t len);
	explicit StartLookingForMarkers(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StartLookingForMarkers& other) const;
	bool operator!=(const StartLookingForMarkers& other) const;
};

// MESSAGE StopLookingForMarkers
struct StopLookingForMarkers
{
	
	/**** Constructors ****/
	StopLookingForMarkers() = default;
	StopLookingForMarkers(const StopLookingForMarkers& other) = default;
	StopLookingForMarkers(StopLookingForMarkers& other) = default;
	StopLookingForMarkers(StopLookingForMarkers&& other) noexcept = default;
	StopLookingForMarkers& operator=(const StopLookingForMarkers& other) = default;
	StopLookingForMarkers& operator=(StopLookingForMarkers&& other) noexcept = default;
		explicit StopLookingForMarkers(const uint8_t* buff, size_t len);
	explicit StopLookingForMarkers(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StopLookingForMarkers& other) const;
	bool operator!=(const StopLookingForMarkers& other) const;
};

// MESSAGE SetVisionSystemParams
struct SetVisionSystemParams
{
	int32_t autoexposureOn;
	float exposureTime;
	int32_t integerCountsIncrement;
	float minExposureTime;
	float maxExposureTime;
	float percentileToMakeHigh;
	int32_t limitFramerate;
	uint8_t highValue;
	
	/**** Constructors ****/
	SetVisionSystemParams() = default;
	SetVisionSystemParams(const SetVisionSystemParams& other) = default;
	SetVisionSystemParams(SetVisionSystemParams& other) = default;
	SetVisionSystemParams(SetVisionSystemParams&& other) noexcept = default;
	SetVisionSystemParams& operator=(const SetVisionSystemParams& other) = default;
	SetVisionSystemParams& operator=(SetVisionSystemParams&& other) noexcept = default;
	
	explicit SetVisionSystemParams(int32_t autoexposureOn
		,float exposureTime
		,int32_t integerCountsIncrement
		,float minExposureTime
		,float maxExposureTime
		,float percentileToMakeHigh
		,int32_t limitFramerate
		,uint8_t highValue)
	:autoexposureOn(autoexposureOn)
	,exposureTime(exposureTime)
	,integerCountsIncrement(integerCountsIncrement)
	,minExposureTime(minExposureTime)
	,maxExposureTime(maxExposureTime)
	,percentileToMakeHigh(percentileToMakeHigh)
	,limitFramerate(limitFramerate)
	,highValue(highValue)
	{}

	explicit SetVisionSystemParams(const uint8_t* buff, size_t len);
	explicit SetVisionSystemParams(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetVisionSystemParams& other) const;
	bool operator!=(const SetVisionSystemParams& other) const;
};

// MESSAGE SetFaceDetectParams
struct SetFaceDetectParams
{
	float scaleFactor;
	int32_t minNeighbors;
	int32_t minObjectHeight;
	int32_t minObjectWidth;
	int32_t maxObjectHeight;
	int32_t maxObjectWidth;
	
	/**** Constructors ****/
	SetFaceDetectParams() = default;
	SetFaceDetectParams(const SetFaceDetectParams& other) = default;
	SetFaceDetectParams(SetFaceDetectParams& other) = default;
	SetFaceDetectParams(SetFaceDetectParams&& other) noexcept = default;
	SetFaceDetectParams& operator=(const SetFaceDetectParams& other) = default;
	SetFaceDetectParams& operator=(SetFaceDetectParams&& other) noexcept = default;
	
	explicit SetFaceDetectParams(float scaleFactor
		,int32_t minNeighbors
		,int32_t minObjectHeight
		,int32_t minObjectWidth
		,int32_t maxObjectHeight
		,int32_t maxObjectWidth)
	:scaleFactor(scaleFactor)
	,minNeighbors(minNeighbors)
	,minObjectHeight(minObjectHeight)
	,minObjectWidth(minObjectWidth)
	,maxObjectHeight(maxObjectHeight)
	,maxObjectWidth(maxObjectWidth)
	{}

	explicit SetFaceDetectParams(const uint8_t* buff, size_t len);
	explicit SetFaceDetectParams(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetFaceDetectParams& other) const;
	bool operator!=(const SetFaceDetectParams& other) const;
};

// MESSAGE SetActiveObjectLEDs
struct SetActiveObjectLEDs
{
	uint32_t objectID;
	uint32_t onColor;
	uint32_t offColor;
	uint32_t onPeriod_ms;
	uint32_t offPeriod_ms;
	uint32_t transitionOnPeriod_ms;
	uint32_t transitionOffPeriod_ms;
	float relativeToX;
	float relativeToY;
	uint8_t whichLEDs;
	uint8_t makeRelative;
	uint8_t turnOffUnspecifiedLEDs;
	uint8_t robotID;
	
	/**** Constructors ****/
	SetActiveObjectLEDs() = default;
	SetActiveObjectLEDs(const SetActiveObjectLEDs& other) = default;
	SetActiveObjectLEDs(SetActiveObjectLEDs& other) = default;
	SetActiveObjectLEDs(SetActiveObjectLEDs&& other) noexcept = default;
	SetActiveObjectLEDs& operator=(const SetActiveObjectLEDs& other) = default;
	SetActiveObjectLEDs& operator=(SetActiveObjectLEDs&& other) noexcept = default;
	
	explicit SetActiveObjectLEDs(uint32_t objectID
		,uint32_t onColor
		,uint32_t offColor
		,uint32_t onPeriod_ms
		,uint32_t offPeriod_ms
		,uint32_t transitionOnPeriod_ms
		,uint32_t transitionOffPeriod_ms
		,float relativeToX
		,float relativeToY
		,uint8_t whichLEDs
		,uint8_t makeRelative
		,uint8_t turnOffUnspecifiedLEDs
		,uint8_t robotID)
	:objectID(objectID)
	,onColor(onColor)
	,offColor(offColor)
	,onPeriod_ms(onPeriod_ms)
	,offPeriod_ms(offPeriod_ms)
	,transitionOnPeriod_ms(transitionOnPeriod_ms)
	,transitionOffPeriod_ms(transitionOffPeriod_ms)
	,relativeToX(relativeToX)
	,relativeToY(relativeToY)
	,whichLEDs(whichLEDs)
	,makeRelative(makeRelative)
	,turnOffUnspecifiedLEDs(turnOffUnspecifiedLEDs)
	,robotID(robotID)
	{}

	explicit SetActiveObjectLEDs(const uint8_t* buff, size_t len);
	explicit SetActiveObjectLEDs(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetActiveObjectLEDs& other) const;
	bool operator!=(const SetActiveObjectLEDs& other) const;
};

// MESSAGE SetAllActiveObjectLEDs
struct SetAllActiveObjectLEDs
{
	uint32_t objectID;
	std::array<uint32_t, 8> onColor;
	std::array<uint32_t, 8> offColor;
	std::array<uint32_t, 8> onPeriod_ms;
	std::array<uint32_t, 8> offPeriod_ms;
	std::array<uint32_t, 8> transitionOnPeriod_ms;
	std::array<uint32_t, 8> transitionOffPeriod_ms;
	float relativeToX;
	float relativeToY;
	uint8_t makeRelative;
	uint8_t robotID;
	
	/**** Constructors ****/
	SetAllActiveObjectLEDs() = default;
	SetAllActiveObjectLEDs(const SetAllActiveObjectLEDs& other) = default;
	SetAllActiveObjectLEDs(SetAllActiveObjectLEDs& other) = default;
	SetAllActiveObjectLEDs(SetAllActiveObjectLEDs&& other) noexcept = default;
	SetAllActiveObjectLEDs& operator=(const SetAllActiveObjectLEDs& other) = default;
	SetAllActiveObjectLEDs& operator=(SetAllActiveObjectLEDs&& other) noexcept = default;
	
	explicit SetAllActiveObjectLEDs(uint32_t objectID
		,const std::array<uint32_t, 8>& onColor
		,const std::array<uint32_t, 8>& offColor
		,const std::array<uint32_t, 8>& onPeriod_ms
		,const std::array<uint32_t, 8>& offPeriod_ms
		,const std::array<uint32_t, 8>& transitionOnPeriod_ms
		,const std::array<uint32_t, 8>& transitionOffPeriod_ms
		,float relativeToX
		,float relativeToY
		,uint8_t makeRelative
		,uint8_t robotID)
	:objectID(objectID)
	,onColor(onColor)
	,offColor(offColor)
	,onPeriod_ms(onPeriod_ms)
	,offPeriod_ms(offPeriod_ms)
	,transitionOnPeriod_ms(transitionOnPeriod_ms)
	,transitionOffPeriod_ms(transitionOffPeriod_ms)
	,relativeToX(relativeToX)
	,relativeToY(relativeToY)
	,makeRelative(makeRelative)
	,robotID(robotID)
	{}

	explicit SetAllActiveObjectLEDs(const uint8_t* buff, size_t len);
	explicit SetAllActiveObjectLEDs(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetAllActiveObjectLEDs& other) const;
	bool operator!=(const SetAllActiveObjectLEDs& other) const;
};

// MESSAGE SetBackpackLEDs
struct SetBackpackLEDs
{
	std::array<uint32_t, 5> onColor;
	std::array<uint32_t, 5> offColor;
	std::array<uint32_t, 5> onPeriod_ms;
	std::array<uint32_t, 5> offPeriod_ms;
	std::array<uint32_t, 5> transitionOnPeriod_ms;
	std::array<uint32_t, 5> transitionOffPeriod_ms;
	uint8_t robotID;
	
	/**** Constructors ****/
	SetBackpackLEDs() = default;
	SetBackpackLEDs(const SetBackpackLEDs& other) = default;
	SetBackpackLEDs(SetBackpackLEDs& other) = default;
	SetBackpackLEDs(SetBackpackLEDs&& other) noexcept = default;
	SetBackpackLEDs& operator=(const SetBackpackLEDs& other) = default;
	SetBackpackLEDs& operator=(SetBackpackLEDs&& other) noexcept = default;
	
	explicit SetBackpackLEDs(const std::array<uint32_t, 5>& onColor
		,const std::array<uint32_t, 5>& offColor
		,const std::array<uint32_t, 5>& onPeriod_ms
		,const std::array<uint32_t, 5>& offPeriod_ms
		,const std::array<uint32_t, 5>& transitionOnPeriod_ms
		,const std::array<uint32_t, 5>& transitionOffPeriod_ms
		,uint8_t robotID)
	:onColor(onColor)
	,offColor(offColor)
	,onPeriod_ms(onPeriod_ms)
	,offPeriod_ms(offPeriod_ms)
	,transitionOnPeriod_ms(transitionOnPeriod_ms)
	,transitionOffPeriod_ms(transitionOffPeriod_ms)
	,robotID(robotID)
	{}

	explicit SetBackpackLEDs(const uint8_t* buff, size_t len);
	explicit SetBackpackLEDs(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const SetBackpackLEDs& other) const;
	bool operator!=(const SetBackpackLEDs& other) const;
};

// UNION Message
class Message
{
public:
	using Tag = MessageTag;
	/**** Constructors ****/
	Message() :_tag(Tag::INVALID) { }
	explicit Message(const CLAD::SafeMessageBuffer& buff);
	explicit Message(const uint8_t* buffer, size_t length);

	~Message() { ClearCurrent(); }
	Tag GetTag() const { return _tag; }

	/** Ping **/
	const Anki::Cozmo::U2G::Ping& Get_Ping() const;
	void Set_Ping(const Anki::Cozmo::U2G::Ping& new_Ping);
	void Set_Ping(Anki::Cozmo::U2G::Ping&& new_Ping);

	/** ConnectToRobot **/
	const Anki::Cozmo::U2G::ConnectToRobot& Get_ConnectToRobot() const;
	void Set_ConnectToRobot(const Anki::Cozmo::U2G::ConnectToRobot& new_ConnectToRobot);
	void Set_ConnectToRobot(Anki::Cozmo::U2G::ConnectToRobot&& new_ConnectToRobot);

	/** ConnectToUiDevice **/
	const Anki::Cozmo::U2G::ConnectToUiDevice& Get_ConnectToUiDevice() const;
	void Set_ConnectToUiDevice(const Anki::Cozmo::U2G::ConnectToUiDevice& new_ConnectToUiDevice);
	void Set_ConnectToUiDevice(Anki::Cozmo::U2G::ConnectToUiDevice&& new_ConnectToUiDevice);

	/** DisconnectFromUiDevice **/
	const Anki::Cozmo::U2G::DisconnectFromUiDevice& Get_DisconnectFromUiDevice() const;
	void Set_DisconnectFromUiDevice(const Anki::Cozmo::U2G::DisconnectFromUiDevice& new_DisconnectFromUiDevice);
	void Set_DisconnectFromUiDevice(Anki::Cozmo::U2G::DisconnectFromUiDevice&& new_DisconnectFromUiDevice);

	/** ForceAddRobot **/
	const Anki::Cozmo::U2G::ForceAddRobot& Get_ForceAddRobot() const;
	void Set_ForceAddRobot(const Anki::Cozmo::U2G::ForceAddRobot& new_ForceAddRobot);
	void Set_ForceAddRobot(Anki::Cozmo::U2G::ForceAddRobot&& new_ForceAddRobot);

	/** StartEngine **/
	const Anki::Cozmo::U2G::StartEngine& Get_StartEngine() const;
	void Set_StartEngine(const Anki::Cozmo::U2G::StartEngine& new_StartEngine);
	void Set_StartEngine(Anki::Cozmo::U2G::StartEngine&& new_StartEngine);

	/** DriveWheels **/
	const Anki::Cozmo::U2G::DriveWheels& Get_DriveWheels() const;
	void Set_DriveWheels(const Anki::Cozmo::U2G::DriveWheels& new_DriveWheels);
	void Set_DriveWheels(Anki::Cozmo::U2G::DriveWheels&& new_DriveWheels);

	/** TurnInPlace **/
	const Anki::Cozmo::U2G::TurnInPlace& Get_TurnInPlace() const;
	void Set_TurnInPlace(const Anki::Cozmo::U2G::TurnInPlace& new_TurnInPlace);
	void Set_TurnInPlace(Anki::Cozmo::U2G::TurnInPlace&& new_TurnInPlace);

	/** FaceObject **/
	const Anki::Cozmo::U2G::FaceObject& Get_FaceObject() const;
	void Set_FaceObject(const Anki::Cozmo::U2G::FaceObject& new_FaceObject);
	void Set_FaceObject(Anki::Cozmo::U2G::FaceObject&& new_FaceObject);

	/** MoveHead **/
	const Anki::Cozmo::U2G::MoveHead& Get_MoveHead() const;
	void Set_MoveHead(const Anki::Cozmo::U2G::MoveHead& new_MoveHead);
	void Set_MoveHead(Anki::Cozmo::U2G::MoveHead&& new_MoveHead);

	/** MoveLift **/
	const Anki::Cozmo::U2G::MoveLift& Get_MoveLift() const;
	void Set_MoveLift(const Anki::Cozmo::U2G::MoveLift& new_MoveLift);
	void Set_MoveLift(Anki::Cozmo::U2G::MoveLift&& new_MoveLift);

	/** SetLiftHeight **/
	const Anki::Cozmo::U2G::SetLiftHeight& Get_SetLiftHeight() const;
	void Set_SetLiftHeight(const Anki::Cozmo::U2G::SetLiftHeight& new_SetLiftHeight);
	void Set_SetLiftHeight(Anki::Cozmo::U2G::SetLiftHeight&& new_SetLiftHeight);

	/** SetHeadAngle **/
	const Anki::Cozmo::U2G::SetHeadAngle& Get_SetHeadAngle() const;
	void Set_SetHeadAngle(const Anki::Cozmo::U2G::SetHeadAngle& new_SetHeadAngle);
	void Set_SetHeadAngle(Anki::Cozmo::U2G::SetHeadAngle&& new_SetHeadAngle);

	/** TrackHeadToObject **/
	const Anki::Cozmo::U2G::TrackHeadToObject& Get_TrackHeadToObject() const;
	void Set_TrackHeadToObject(const Anki::Cozmo::U2G::TrackHeadToObject& new_TrackHeadToObject);
	void Set_TrackHeadToObject(Anki::Cozmo::U2G::TrackHeadToObject&& new_TrackHeadToObject);

	/** StopAllMotors **/
	const Anki::Cozmo::U2G::StopAllMotors& Get_StopAllMotors() const;
	void Set_StopAllMotors(const Anki::Cozmo::U2G::StopAllMotors& new_StopAllMotors);
	void Set_StopAllMotors(Anki::Cozmo::U2G::StopAllMotors&& new_StopAllMotors);

	/** ImageRequest **/
	const Anki::Cozmo::U2G::ImageRequest& Get_ImageRequest() const;
	void Set_ImageRequest(const Anki::Cozmo::U2G::ImageRequest& new_ImageRequest);
	void Set_ImageRequest(Anki::Cozmo::U2G::ImageRequest&& new_ImageRequest);

	/** SetRobotImageSendMode **/
	const Anki::Cozmo::U2G::SetRobotImageSendMode& Get_SetRobotImageSendMode() const;
	void Set_SetRobotImageSendMode(const Anki::Cozmo::U2G::SetRobotImageSendMode& new_SetRobotImageSendMode);
	void Set_SetRobotImageSendMode(Anki::Cozmo::U2G::SetRobotImageSendMode&& new_SetRobotImageSendMode);

	/** SaveImages **/
	const Anki::Cozmo::U2G::SaveImages& Get_SaveImages() const;
	void Set_SaveImages(const Anki::Cozmo::U2G::SaveImages& new_SaveImages);
	void Set_SaveImages(Anki::Cozmo::U2G::SaveImages&& new_SaveImages);

	/** SaveRobotState **/
	const Anki::Cozmo::U2G::SaveRobotState& Get_SaveRobotState() const;
	void Set_SaveRobotState(const Anki::Cozmo::U2G::SaveRobotState& new_SaveRobotState);
	void Set_SaveRobotState(Anki::Cozmo::U2G::SaveRobotState&& new_SaveRobotState);

	/** EnableDisplay **/
	const Anki::Cozmo::U2G::EnableDisplay& Get_EnableDisplay() const;
	void Set_EnableDisplay(const Anki::Cozmo::U2G::EnableDisplay& new_EnableDisplay);
	void Set_EnableDisplay(Anki::Cozmo::U2G::EnableDisplay&& new_EnableDisplay);

	/** SetHeadlights **/
	const Anki::Cozmo::U2G::SetHeadlights& Get_SetHeadlights() const;
	void Set_SetHeadlights(const Anki::Cozmo::U2G::SetHeadlights& new_SetHeadlights);
	void Set_SetHeadlights(Anki::Cozmo::U2G::SetHeadlights&& new_SetHeadlights);

	/** GotoPose **/
	const Anki::Cozmo::U2G::GotoPose& Get_GotoPose() const;
	void Set_GotoPose(const Anki::Cozmo::U2G::GotoPose& new_GotoPose);
	void Set_GotoPose(Anki::Cozmo::U2G::GotoPose&& new_GotoPose);

	/** PlaceObjectOnGround **/
	const Anki::Cozmo::U2G::PlaceObjectOnGround& Get_PlaceObjectOnGround() const;
	void Set_PlaceObjectOnGround(const Anki::Cozmo::U2G::PlaceObjectOnGround& new_PlaceObjectOnGround);
	void Set_PlaceObjectOnGround(Anki::Cozmo::U2G::PlaceObjectOnGround&& new_PlaceObjectOnGround);

	/** PlaceObjectOnGroundHere **/
	const Anki::Cozmo::U2G::PlaceObjectOnGroundHere& Get_PlaceObjectOnGroundHere() const;
	void Set_PlaceObjectOnGroundHere(const Anki::Cozmo::U2G::PlaceObjectOnGroundHere& new_PlaceObjectOnGroundHere);
	void Set_PlaceObjectOnGroundHere(Anki::Cozmo::U2G::PlaceObjectOnGroundHere&& new_PlaceObjectOnGroundHere);

	/** ExecuteTestPlan **/
	const Anki::Cozmo::U2G::ExecuteTestPlan& Get_ExecuteTestPlan() const;
	void Set_ExecuteTestPlan(const Anki::Cozmo::U2G::ExecuteTestPlan& new_ExecuteTestPlan);
	void Set_ExecuteTestPlan(Anki::Cozmo::U2G::ExecuteTestPlan&& new_ExecuteTestPlan);

	/** SelectNextObject **/
	const Anki::Cozmo::U2G::SelectNextObject& Get_SelectNextObject() const;
	void Set_SelectNextObject(const Anki::Cozmo::U2G::SelectNextObject& new_SelectNextObject);
	void Set_SelectNextObject(Anki::Cozmo::U2G::SelectNextObject&& new_SelectNextObject);

	/** PickAndPlaceObject **/
	const Anki::Cozmo::U2G::PickAndPlaceObject& Get_PickAndPlaceObject() const;
	void Set_PickAndPlaceObject(const Anki::Cozmo::U2G::PickAndPlaceObject& new_PickAndPlaceObject);
	void Set_PickAndPlaceObject(Anki::Cozmo::U2G::PickAndPlaceObject&& new_PickAndPlaceObject);

	/** TraverseObject **/
	const Anki::Cozmo::U2G::TraverseObject& Get_TraverseObject() const;
	void Set_TraverseObject(const Anki::Cozmo::U2G::TraverseObject& new_TraverseObject);
	void Set_TraverseObject(Anki::Cozmo::U2G::TraverseObject&& new_TraverseObject);

	/** SetRobotCarryingObject **/
	const Anki::Cozmo::U2G::SetRobotCarryingObject& Get_SetRobotCarryingObject() const;
	void Set_SetRobotCarryingObject(const Anki::Cozmo::U2G::SetRobotCarryingObject& new_SetRobotCarryingObject);
	void Set_SetRobotCarryingObject(Anki::Cozmo::U2G::SetRobotCarryingObject&& new_SetRobotCarryingObject);

	/** ClearAllBlocks **/
	const Anki::Cozmo::U2G::ClearAllBlocks& Get_ClearAllBlocks() const;
	void Set_ClearAllBlocks(const Anki::Cozmo::U2G::ClearAllBlocks& new_ClearAllBlocks);
	void Set_ClearAllBlocks(Anki::Cozmo::U2G::ClearAllBlocks&& new_ClearAllBlocks);

	/** VisionWhileMoving **/
	const Anki::Cozmo::U2G::VisionWhileMoving& Get_VisionWhileMoving() const;
	void Set_VisionWhileMoving(const Anki::Cozmo::U2G::VisionWhileMoving& new_VisionWhileMoving);
	void Set_VisionWhileMoving(Anki::Cozmo::U2G::VisionWhileMoving&& new_VisionWhileMoving);

	/** ExecuteBehavior **/
	const Anki::Cozmo::U2G::ExecuteBehavior& Get_ExecuteBehavior() const;
	void Set_ExecuteBehavior(const Anki::Cozmo::U2G::ExecuteBehavior& new_ExecuteBehavior);
	void Set_ExecuteBehavior(Anki::Cozmo::U2G::ExecuteBehavior&& new_ExecuteBehavior);

	/** SetBehaviorState **/
	const Anki::Cozmo::U2G::SetBehaviorState& Get_SetBehaviorState() const;
	void Set_SetBehaviorState(const Anki::Cozmo::U2G::SetBehaviorState& new_SetBehaviorState);
	void Set_SetBehaviorState(Anki::Cozmo::U2G::SetBehaviorState&& new_SetBehaviorState);

	/** AbortPath **/
	const Anki::Cozmo::U2G::AbortPath& Get_AbortPath() const;
	void Set_AbortPath(const Anki::Cozmo::U2G::AbortPath& new_AbortPath);
	void Set_AbortPath(Anki::Cozmo::U2G::AbortPath&& new_AbortPath);

	/** AbortAll **/
	const Anki::Cozmo::U2G::AbortAll& Get_AbortAll() const;
	void Set_AbortAll(const Anki::Cozmo::U2G::AbortAll& new_AbortAll);
	void Set_AbortAll(Anki::Cozmo::U2G::AbortAll&& new_AbortAll);

	/** DrawPoseMarker **/
	const Anki::Cozmo::U2G::DrawPoseMarker& Get_DrawPoseMarker() const;
	void Set_DrawPoseMarker(const Anki::Cozmo::U2G::DrawPoseMarker& new_DrawPoseMarker);
	void Set_DrawPoseMarker(Anki::Cozmo::U2G::DrawPoseMarker&& new_DrawPoseMarker);

	/** ErasePoseMarker **/
	const Anki::Cozmo::U2G::ErasePoseMarker& Get_ErasePoseMarker() const;
	void Set_ErasePoseMarker(const Anki::Cozmo::U2G::ErasePoseMarker& new_ErasePoseMarker);
	void Set_ErasePoseMarker(Anki::Cozmo::U2G::ErasePoseMarker&& new_ErasePoseMarker);

	/** SetWheelControllerGains **/
	const Anki::Cozmo::U2G::SetWheelControllerGains& Get_SetWheelControllerGains() const;
	void Set_SetWheelControllerGains(const Anki::Cozmo::U2G::SetWheelControllerGains& new_SetWheelControllerGains);
	void Set_SetWheelControllerGains(Anki::Cozmo::U2G::SetWheelControllerGains&& new_SetWheelControllerGains);

	/** SetHeadControllerGains **/
	const Anki::Cozmo::U2G::SetHeadControllerGains& Get_SetHeadControllerGains() const;
	void Set_SetHeadControllerGains(const Anki::Cozmo::U2G::SetHeadControllerGains& new_SetHeadControllerGains);
	void Set_SetHeadControllerGains(Anki::Cozmo::U2G::SetHeadControllerGains&& new_SetHeadControllerGains);

	/** SetLiftControllerGains **/
	const Anki::Cozmo::U2G::SetLiftControllerGains& Get_SetLiftControllerGains() const;
	void Set_SetLiftControllerGains(const Anki::Cozmo::U2G::SetLiftControllerGains& new_SetLiftControllerGains);
	void Set_SetLiftControllerGains(Anki::Cozmo::U2G::SetLiftControllerGains&& new_SetLiftControllerGains);

	/** SelectNextSoundScheme **/
	const Anki::Cozmo::U2G::SelectNextSoundScheme& Get_SelectNextSoundScheme() const;
	void Set_SelectNextSoundScheme(const Anki::Cozmo::U2G::SelectNextSoundScheme& new_SelectNextSoundScheme);
	void Set_SelectNextSoundScheme(Anki::Cozmo::U2G::SelectNextSoundScheme&& new_SelectNextSoundScheme);

	/** StartTestMode **/
	const Anki::Cozmo::U2G::StartTestMode& Get_StartTestMode() const;
	void Set_StartTestMode(const Anki::Cozmo::U2G::StartTestMode& new_StartTestMode);
	void Set_StartTestMode(Anki::Cozmo::U2G::StartTestMode&& new_StartTestMode);

	/** IMURequest **/
	const Anki::Cozmo::U2G::IMURequest& Get_IMURequest() const;
	void Set_IMURequest(const Anki::Cozmo::U2G::IMURequest& new_IMURequest);
	void Set_IMURequest(Anki::Cozmo::U2G::IMURequest&& new_IMURequest);

	/** PlayAnimation **/
	const Anki::Cozmo::U2G::PlayAnimation& Get_PlayAnimation() const;
	void Set_PlayAnimation(const Anki::Cozmo::U2G::PlayAnimation& new_PlayAnimation);
	void Set_PlayAnimation(Anki::Cozmo::U2G::PlayAnimation&& new_PlayAnimation);

	/** ReadAnimationFile **/
	const Anki::Cozmo::U2G::ReadAnimationFile& Get_ReadAnimationFile() const;
	void Set_ReadAnimationFile(const Anki::Cozmo::U2G::ReadAnimationFile& new_ReadAnimationFile);
	void Set_ReadAnimationFile(Anki::Cozmo::U2G::ReadAnimationFile&& new_ReadAnimationFile);

	/** StartFaceTracking **/
	const Anki::Cozmo::U2G::StartFaceTracking& Get_StartFaceTracking() const;
	void Set_StartFaceTracking(const Anki::Cozmo::U2G::StartFaceTracking& new_StartFaceTracking);
	void Set_StartFaceTracking(Anki::Cozmo::U2G::StartFaceTracking&& new_StartFaceTracking);

	/** StopFaceTracking **/
	const Anki::Cozmo::U2G::StopFaceTracking& Get_StopFaceTracking() const;
	void Set_StopFaceTracking(const Anki::Cozmo::U2G::StopFaceTracking& new_StopFaceTracking);
	void Set_StopFaceTracking(Anki::Cozmo::U2G::StopFaceTracking&& new_StopFaceTracking);

	/** StartLookingForMarkers **/
	const Anki::Cozmo::U2G::StartLookingForMarkers& Get_StartLookingForMarkers() const;
	void Set_StartLookingForMarkers(const Anki::Cozmo::U2G::StartLookingForMarkers& new_StartLookingForMarkers);
	void Set_StartLookingForMarkers(Anki::Cozmo::U2G::StartLookingForMarkers&& new_StartLookingForMarkers);

	/** StopLookingForMarkers **/
	const Anki::Cozmo::U2G::StopLookingForMarkers& Get_StopLookingForMarkers() const;
	void Set_StopLookingForMarkers(const Anki::Cozmo::U2G::StopLookingForMarkers& new_StopLookingForMarkers);
	void Set_StopLookingForMarkers(Anki::Cozmo::U2G::StopLookingForMarkers&& new_StopLookingForMarkers);

	/** SetVisionSystemParams **/
	const Anki::Cozmo::U2G::SetVisionSystemParams& Get_SetVisionSystemParams() const;
	void Set_SetVisionSystemParams(const Anki::Cozmo::U2G::SetVisionSystemParams& new_SetVisionSystemParams);
	void Set_SetVisionSystemParams(Anki::Cozmo::U2G::SetVisionSystemParams&& new_SetVisionSystemParams);

	/** SetFaceDetectParams **/
	const Anki::Cozmo::U2G::SetFaceDetectParams& Get_SetFaceDetectParams() const;
	void Set_SetFaceDetectParams(const Anki::Cozmo::U2G::SetFaceDetectParams& new_SetFaceDetectParams);
	void Set_SetFaceDetectParams(Anki::Cozmo::U2G::SetFaceDetectParams&& new_SetFaceDetectParams);

	/** SetActiveObjectLEDs **/
	const Anki::Cozmo::U2G::SetActiveObjectLEDs& Get_SetActiveObjectLEDs() const;
	void Set_SetActiveObjectLEDs(const Anki::Cozmo::U2G::SetActiveObjectLEDs& new_SetActiveObjectLEDs);
	void Set_SetActiveObjectLEDs(Anki::Cozmo::U2G::SetActiveObjectLEDs&& new_SetActiveObjectLEDs);

	/** SetAllActiveObjectLEDs **/
	const Anki::Cozmo::U2G::SetAllActiveObjectLEDs& Get_SetAllActiveObjectLEDs() const;
	void Set_SetAllActiveObjectLEDs(const Anki::Cozmo::U2G::SetAllActiveObjectLEDs& new_SetAllActiveObjectLEDs);
	void Set_SetAllActiveObjectLEDs(Anki::Cozmo::U2G::SetAllActiveObjectLEDs&& new_SetAllActiveObjectLEDs);

	/** SetBackpackLEDs **/
	const Anki::Cozmo::U2G::SetBackpackLEDs& Get_SetBackpackLEDs() const;
	void Set_SetBackpackLEDs(const Anki::Cozmo::U2G::SetBackpackLEDs& new_SetBackpackLEDs);
	void Set_SetBackpackLEDs(Anki::Cozmo::U2G::SetBackpackLEDs&& new_SetBackpackLEDs);


	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	size_t Size() const;
private:
	void ClearCurrent();
	Tag _tag;

	union {
		Anki::Cozmo::U2G::Ping _Ping;
		Anki::Cozmo::U2G::ConnectToRobot _ConnectToRobot;
		Anki::Cozmo::U2G::ConnectToUiDevice _ConnectToUiDevice;
		Anki::Cozmo::U2G::DisconnectFromUiDevice _DisconnectFromUiDevice;
		Anki::Cozmo::U2G::ForceAddRobot _ForceAddRobot;
		Anki::Cozmo::U2G::StartEngine _StartEngine;
		Anki::Cozmo::U2G::DriveWheels _DriveWheels;
		Anki::Cozmo::U2G::TurnInPlace _TurnInPlace;
		Anki::Cozmo::U2G::FaceObject _FaceObject;
		Anki::Cozmo::U2G::MoveHead _MoveHead;
		Anki::Cozmo::U2G::MoveLift _MoveLift;
		Anki::Cozmo::U2G::SetLiftHeight _SetLiftHeight;
		Anki::Cozmo::U2G::SetHeadAngle _SetHeadAngle;
		Anki::Cozmo::U2G::TrackHeadToObject _TrackHeadToObject;
		Anki::Cozmo::U2G::StopAllMotors _StopAllMotors;
		Anki::Cozmo::U2G::ImageRequest _ImageRequest;
		Anki::Cozmo::U2G::SetRobotImageSendMode _SetRobotImageSendMode;
		Anki::Cozmo::U2G::SaveImages _SaveImages;
		Anki::Cozmo::U2G::SaveRobotState _SaveRobotState;
		Anki::Cozmo::U2G::EnableDisplay _EnableDisplay;
		Anki::Cozmo::U2G::SetHeadlights _SetHeadlights;
		Anki::Cozmo::U2G::GotoPose _GotoPose;
		Anki::Cozmo::U2G::PlaceObjectOnGround _PlaceObjectOnGround;
		Anki::Cozmo::U2G::PlaceObjectOnGroundHere _PlaceObjectOnGroundHere;
		Anki::Cozmo::U2G::ExecuteTestPlan _ExecuteTestPlan;
		Anki::Cozmo::U2G::SelectNextObject _SelectNextObject;
		Anki::Cozmo::U2G::PickAndPlaceObject _PickAndPlaceObject;
		Anki::Cozmo::U2G::TraverseObject _TraverseObject;
		Anki::Cozmo::U2G::SetRobotCarryingObject _SetRobotCarryingObject;
		Anki::Cozmo::U2G::ClearAllBlocks _ClearAllBlocks;
		Anki::Cozmo::U2G::VisionWhileMoving _VisionWhileMoving;
		Anki::Cozmo::U2G::ExecuteBehavior _ExecuteBehavior;
		Anki::Cozmo::U2G::SetBehaviorState _SetBehaviorState;
		Anki::Cozmo::U2G::AbortPath _AbortPath;
		Anki::Cozmo::U2G::AbortAll _AbortAll;
		Anki::Cozmo::U2G::DrawPoseMarker _DrawPoseMarker;
		Anki::Cozmo::U2G::ErasePoseMarker _ErasePoseMarker;
		Anki::Cozmo::U2G::SetWheelControllerGains _SetWheelControllerGains;
		Anki::Cozmo::U2G::SetHeadControllerGains _SetHeadControllerGains;
		Anki::Cozmo::U2G::SetLiftControllerGains _SetLiftControllerGains;
		Anki::Cozmo::U2G::SelectNextSoundScheme _SelectNextSoundScheme;
		Anki::Cozmo::U2G::StartTestMode _StartTestMode;
		Anki::Cozmo::U2G::IMURequest _IMURequest;
		Anki::Cozmo::U2G::PlayAnimation _PlayAnimation;
		Anki::Cozmo::U2G::ReadAnimationFile _ReadAnimationFile;
		Anki::Cozmo::U2G::StartFaceTracking _StartFaceTracking;
		Anki::Cozmo::U2G::StopFaceTracking _StopFaceTracking;
		Anki::Cozmo::U2G::StartLookingForMarkers _StartLookingForMarkers;
		Anki::Cozmo::U2G::StopLookingForMarkers _StopLookingForMarkers;
		Anki::Cozmo::U2G::SetVisionSystemParams _SetVisionSystemParams;
		Anki::Cozmo::U2G::SetFaceDetectParams _SetFaceDetectParams;
		Anki::Cozmo::U2G::SetActiveObjectLEDs _SetActiveObjectLEDs;
		Anki::Cozmo::U2G::SetAllActiveObjectLEDs _SetAllActiveObjectLEDs;
		Anki::Cozmo::U2G::SetBackpackLEDs _SetBackpackLEDs;
	};
};

} // namespace U2G

} // namespace Cozmo

} // namespace Anki

#endif // __ANKI_COZMO_MESSAGE_BUFFERS_GAME_UI_MESSAGES_U2_G_DEF__
