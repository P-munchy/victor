// Autogenerated C++ message buffer code.
// Source: anki/cozmo/messageBuffers/game/UiMessagesU2G.clad
// Full command line: ../lib/anki/cozmo-engine/tools/anki-util/tools/message-buffers/emitters/CPP_emitter.py -C src -I ../lib/anki/cozmo-engine/clad/src -r ../game/include -o ../game/src --header-output-extension .def anki/cozmo/messageBuffers/game/UiMessagesU2G.clad

#include "anki/cozmo/messageBuffers/game/UiMessagesU2G.def"

namespace Anki {

namespace Cozmo {

namespace U2G {

// MESSAGE Ping

Ping::Ping(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

Ping::Ping(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t Ping::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t Ping::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->counter);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t Ping::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t Ping::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->counter);
	return buffer.GetBytesRead();
}

size_t Ping::Size() const
{
	size_t result = 0;
	//counter
	result += 4; // = uint_32
	return result;
}

bool Ping::operator==(const Ping& other) const
{
	if (counter != other.counter) {
		return false;
	}
	return true;
}

bool Ping::operator!=(const Ping& other) const
{
	return !(operator==(other));
}


// MESSAGE ConnectToRobot

ConnectToRobot::ConnectToRobot(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ConnectToRobot::ConnectToRobot(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ConnectToRobot::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ConnectToRobot::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ConnectToRobot::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ConnectToRobot::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t ConnectToRobot::Size() const
{
	size_t result = 0;
	//robotID
	result += 1; // = uint_8
	return result;
}

bool ConnectToRobot::operator==(const ConnectToRobot& other) const
{
	if (robotID != other.robotID) {
		return false;
	}
	return true;
}

bool ConnectToRobot::operator!=(const ConnectToRobot& other) const
{
	return !(operator==(other));
}


// MESSAGE ConnectToUiDevice

ConnectToUiDevice::ConnectToUiDevice(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ConnectToUiDevice::ConnectToUiDevice(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ConnectToUiDevice::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ConnectToUiDevice::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->deviceID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ConnectToUiDevice::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ConnectToUiDevice::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->deviceID);
	return buffer.GetBytesRead();
}

size_t ConnectToUiDevice::Size() const
{
	size_t result = 0;
	//deviceID
	result += 1; // = uint_8
	return result;
}

bool ConnectToUiDevice::operator==(const ConnectToUiDevice& other) const
{
	if (deviceID != other.deviceID) {
		return false;
	}
	return true;
}

bool ConnectToUiDevice::operator!=(const ConnectToUiDevice& other) const
{
	return !(operator==(other));
}


// MESSAGE DisconnectFromUiDevice

DisconnectFromUiDevice::DisconnectFromUiDevice(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

DisconnectFromUiDevice::DisconnectFromUiDevice(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t DisconnectFromUiDevice::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t DisconnectFromUiDevice::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->deviceID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t DisconnectFromUiDevice::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t DisconnectFromUiDevice::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->deviceID);
	return buffer.GetBytesRead();
}

size_t DisconnectFromUiDevice::Size() const
{
	size_t result = 0;
	//deviceID
	result += 1; // = uint_8
	return result;
}

bool DisconnectFromUiDevice::operator==(const DisconnectFromUiDevice& other) const
{
	if (deviceID != other.deviceID) {
		return false;
	}
	return true;
}

bool DisconnectFromUiDevice::operator!=(const DisconnectFromUiDevice& other) const
{
	return !(operator==(other));
}


// MESSAGE ForceAddRobot

ForceAddRobot::ForceAddRobot(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ForceAddRobot::ForceAddRobot(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ForceAddRobot::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ForceAddRobot::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.WriteFArray<uint8_t, 16>(this->ipAddress);
	buffer.Write(this->robotID);
	buffer.Write(this->isSimulated);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ForceAddRobot::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ForceAddRobot::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.ReadFArray<uint8_t, 16>(this->ipAddress);
	buffer.Read(this->robotID);
	buffer.Read(this->isSimulated);
	return buffer.GetBytesRead();
}

size_t ForceAddRobot::Size() const
{
	size_t result = 0;
	//ipAddress
	result += 1 * 16; // = uint_8 * 16
	//robotID
	result += 1; // = uint_8
	//isSimulated
	result += 1; // = uint_8
	return result;
}

bool ForceAddRobot::operator==(const ForceAddRobot& other) const
{
	if (ipAddress != other.ipAddress
	|| robotID != other.robotID
	|| isSimulated != other.isSimulated) {
		return false;
	}
	return true;
}

bool ForceAddRobot::operator!=(const ForceAddRobot& other) const
{
	return !(operator==(other));
}


// MESSAGE StartEngine

StartEngine::StartEngine(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StartEngine::StartEngine(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StartEngine::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StartEngine::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->asHost);
	buffer.WriteFArray<uint8_t, 16>(this->vizHostIP);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StartEngine::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StartEngine::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->asHost);
	buffer.ReadFArray<uint8_t, 16>(this->vizHostIP);
	return buffer.GetBytesRead();
}

size_t StartEngine::Size() const
{
	size_t result = 0;
	//asHost
	result += 1; // = uint_8
	//vizHostIP
	result += 1 * 16; // = uint_8 * 16
	return result;
}

bool StartEngine::operator==(const StartEngine& other) const
{
	if (asHost != other.asHost
	|| vizHostIP != other.vizHostIP) {
		return false;
	}
	return true;
}

bool StartEngine::operator!=(const StartEngine& other) const
{
	return !(operator==(other));
}


// MESSAGE DriveWheels

DriveWheels::DriveWheels(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

DriveWheels::DriveWheels(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t DriveWheels::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t DriveWheels::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->lwheel_speed_mmps);
	buffer.Write(this->rwheel_speed_mmps);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t DriveWheels::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t DriveWheels::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->lwheel_speed_mmps);
	buffer.Read(this->rwheel_speed_mmps);
	return buffer.GetBytesRead();
}

size_t DriveWheels::Size() const
{
	size_t result = 0;
	//lwheel_speed_mmps
	result += 4; // = float_32
	//rwheel_speed_mmps
	result += 4; // = float_32
	return result;
}

bool DriveWheels::operator==(const DriveWheels& other) const
{
	if (lwheel_speed_mmps != other.lwheel_speed_mmps
	|| rwheel_speed_mmps != other.rwheel_speed_mmps) {
		return false;
	}
	return true;
}

bool DriveWheels::operator!=(const DriveWheels& other) const
{
	return !(operator==(other));
}


// MESSAGE TurnInPlace

TurnInPlace::TurnInPlace(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

TurnInPlace::TurnInPlace(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t TurnInPlace::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t TurnInPlace::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->angle_rad);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t TurnInPlace::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t TurnInPlace::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->angle_rad);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t TurnInPlace::Size() const
{
	size_t result = 0;
	//angle_rad
	result += 4; // = float_32
	//robotID
	result += 1; // = uint_8
	return result;
}

bool TurnInPlace::operator==(const TurnInPlace& other) const
{
	if (angle_rad != other.angle_rad
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool TurnInPlace::operator!=(const TurnInPlace& other) const
{
	return !(operator==(other));
}


// MESSAGE FaceObject

FaceObject::FaceObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

FaceObject::FaceObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t FaceObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t FaceObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->turnAngleTol);
	buffer.Write(this->maxTurnAngle);
	buffer.Write(this->robotID);
	buffer.Write(this->headTrackWhenDone);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t FaceObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t FaceObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->turnAngleTol);
	buffer.Read(this->maxTurnAngle);
	buffer.Read(this->robotID);
	buffer.Read(this->headTrackWhenDone);
	return buffer.GetBytesRead();
}

size_t FaceObject::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = uint_32
	//turnAngleTol
	result += 4; // = float_32
	//maxTurnAngle
	result += 4; // = float_32
	//robotID
	result += 1; // = uint_8
	//headTrackWhenDone
	result += 1; // = uint_8
	return result;
}

bool FaceObject::operator==(const FaceObject& other) const
{
	if (objectID != other.objectID
	|| turnAngleTol != other.turnAngleTol
	|| maxTurnAngle != other.maxTurnAngle
	|| robotID != other.robotID
	|| headTrackWhenDone != other.headTrackWhenDone) {
		return false;
	}
	return true;
}

bool FaceObject::operator!=(const FaceObject& other) const
{
	return !(operator==(other));
}


// MESSAGE MoveHead

MoveHead::MoveHead(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

MoveHead::MoveHead(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t MoveHead::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t MoveHead::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->speed_rad_per_sec);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t MoveHead::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t MoveHead::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->speed_rad_per_sec);
	return buffer.GetBytesRead();
}

size_t MoveHead::Size() const
{
	size_t result = 0;
	//speed_rad_per_sec
	result += 4; // = float_32
	return result;
}

bool MoveHead::operator==(const MoveHead& other) const
{
	if (speed_rad_per_sec != other.speed_rad_per_sec) {
		return false;
	}
	return true;
}

bool MoveHead::operator!=(const MoveHead& other) const
{
	return !(operator==(other));
}


// MESSAGE MoveLift

MoveLift::MoveLift(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

MoveLift::MoveLift(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t MoveLift::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t MoveLift::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->speed_rad_per_sec);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t MoveLift::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t MoveLift::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->speed_rad_per_sec);
	return buffer.GetBytesRead();
}

size_t MoveLift::Size() const
{
	size_t result = 0;
	//speed_rad_per_sec
	result += 4; // = float_32
	return result;
}

bool MoveLift::operator==(const MoveLift& other) const
{
	if (speed_rad_per_sec != other.speed_rad_per_sec) {
		return false;
	}
	return true;
}

bool MoveLift::operator!=(const MoveLift& other) const
{
	return !(operator==(other));
}


// MESSAGE SetLiftHeight

SetLiftHeight::SetLiftHeight(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetLiftHeight::SetLiftHeight(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetLiftHeight::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetLiftHeight::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->height_mm);
	buffer.Write(this->max_speed_rad_per_sec);
	buffer.Write(this->accel_rad_per_sec2);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetLiftHeight::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetLiftHeight::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->height_mm);
	buffer.Read(this->max_speed_rad_per_sec);
	buffer.Read(this->accel_rad_per_sec2);
	return buffer.GetBytesRead();
}

size_t SetLiftHeight::Size() const
{
	size_t result = 0;
	//height_mm
	result += 4; // = float_32
	//max_speed_rad_per_sec
	result += 4; // = float_32
	//accel_rad_per_sec2
	result += 4; // = float_32
	return result;
}

bool SetLiftHeight::operator==(const SetLiftHeight& other) const
{
	if (height_mm != other.height_mm
	|| max_speed_rad_per_sec != other.max_speed_rad_per_sec
	|| accel_rad_per_sec2 != other.accel_rad_per_sec2) {
		return false;
	}
	return true;
}

bool SetLiftHeight::operator!=(const SetLiftHeight& other) const
{
	return !(operator==(other));
}


// MESSAGE SetHeadAngle

SetHeadAngle::SetHeadAngle(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetHeadAngle::SetHeadAngle(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetHeadAngle::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetHeadAngle::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->angle_rad);
	buffer.Write(this->max_speed_rad_per_sec);
	buffer.Write(this->accel_rad_per_sec2);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetHeadAngle::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetHeadAngle::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->angle_rad);
	buffer.Read(this->max_speed_rad_per_sec);
	buffer.Read(this->accel_rad_per_sec2);
	return buffer.GetBytesRead();
}

size_t SetHeadAngle::Size() const
{
	size_t result = 0;
	//angle_rad
	result += 4; // = float_32
	//max_speed_rad_per_sec
	result += 4; // = float_32
	//accel_rad_per_sec2
	result += 4; // = float_32
	return result;
}

bool SetHeadAngle::operator==(const SetHeadAngle& other) const
{
	if (angle_rad != other.angle_rad
	|| max_speed_rad_per_sec != other.max_speed_rad_per_sec
	|| accel_rad_per_sec2 != other.accel_rad_per_sec2) {
		return false;
	}
	return true;
}

bool SetHeadAngle::operator!=(const SetHeadAngle& other) const
{
	return !(operator==(other));
}


// MESSAGE TrackHeadToObject

TrackHeadToObject::TrackHeadToObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

TrackHeadToObject::TrackHeadToObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t TrackHeadToObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t TrackHeadToObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t TrackHeadToObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t TrackHeadToObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t TrackHeadToObject::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = uint_32
	//robotID
	result += 1; // = uint_8
	return result;
}

bool TrackHeadToObject::operator==(const TrackHeadToObject& other) const
{
	if (objectID != other.objectID
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool TrackHeadToObject::operator!=(const TrackHeadToObject& other) const
{
	return !(operator==(other));
}


// MESSAGE StopAllMotors

StopAllMotors::StopAllMotors(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StopAllMotors::StopAllMotors(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StopAllMotors::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StopAllMotors::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StopAllMotors::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StopAllMotors::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t StopAllMotors::Size() const
{
	size_t result = 0;
	return result;
}

bool StopAllMotors::operator==(const StopAllMotors& other) const
{
	return true;
}

bool StopAllMotors::operator!=(const StopAllMotors& other) const
{
	return !(operator==(other));
}


// MESSAGE ImageRequest

ImageRequest::ImageRequest(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ImageRequest::ImageRequest(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ImageRequest::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ImageRequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->mode);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ImageRequest::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ImageRequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->mode);
	return buffer.GetBytesRead();
}

size_t ImageRequest::Size() const
{
	size_t result = 0;
	//robotID
	result += 1; // = uint_8
	//mode
	result += 1; // = uint_8
	return result;
}

bool ImageRequest::operator==(const ImageRequest& other) const
{
	if (robotID != other.robotID
	|| mode != other.mode) {
		return false;
	}
	return true;
}

bool ImageRequest::operator!=(const ImageRequest& other) const
{
	return !(operator==(other));
}


// MESSAGE SetRobotImageSendMode

SetRobotImageSendMode::SetRobotImageSendMode(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetRobotImageSendMode::SetRobotImageSendMode(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetRobotImageSendMode::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetRobotImageSendMode::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->mode);
	buffer.Write(this->resolution);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetRobotImageSendMode::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetRobotImageSendMode::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->mode);
	buffer.Read(this->resolution);
	return buffer.GetBytesRead();
}

size_t SetRobotImageSendMode::Size() const
{
	size_t result = 0;
	//mode
	result += 1; // = uint_8
	//resolution
	result += 1; // = uint_8
	return result;
}

bool SetRobotImageSendMode::operator==(const SetRobotImageSendMode& other) const
{
	if (mode != other.mode
	|| resolution != other.resolution) {
		return false;
	}
	return true;
}

bool SetRobotImageSendMode::operator!=(const SetRobotImageSendMode& other) const
{
	return !(operator==(other));
}


// MESSAGE SaveImages

SaveImages::SaveImages(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SaveImages::SaveImages(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SaveImages::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SaveImages::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->mode);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SaveImages::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SaveImages::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->mode);
	return buffer.GetBytesRead();
}

size_t SaveImages::Size() const
{
	size_t result = 0;
	//mode
	result += 1; // = uint_8
	return result;
}

bool SaveImages::operator==(const SaveImages& other) const
{
	if (mode != other.mode) {
		return false;
	}
	return true;
}

bool SaveImages::operator!=(const SaveImages& other) const
{
	return !(operator==(other));
}


// MESSAGE SaveRobotState

SaveRobotState::SaveRobotState(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SaveRobotState::SaveRobotState(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SaveRobotState::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SaveRobotState::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->mode);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SaveRobotState::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SaveRobotState::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->mode);
	return buffer.GetBytesRead();
}

size_t SaveRobotState::Size() const
{
	size_t result = 0;
	//mode
	result += 1; // = uint_8
	return result;
}

bool SaveRobotState::operator==(const SaveRobotState& other) const
{
	if (mode != other.mode) {
		return false;
	}
	return true;
}

bool SaveRobotState::operator!=(const SaveRobotState& other) const
{
	return !(operator==(other));
}


// MESSAGE EnableDisplay

EnableDisplay::EnableDisplay(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

EnableDisplay::EnableDisplay(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t EnableDisplay::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t EnableDisplay::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->enable);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t EnableDisplay::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t EnableDisplay::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->enable);
	return buffer.GetBytesRead();
}

size_t EnableDisplay::Size() const
{
	size_t result = 0;
	//enable
	result += 1; // = uint_8
	return result;
}

bool EnableDisplay::operator==(const EnableDisplay& other) const
{
	if (enable != other.enable) {
		return false;
	}
	return true;
}

bool EnableDisplay::operator!=(const EnableDisplay& other) const
{
	return !(operator==(other));
}


// MESSAGE SetHeadlights

SetHeadlights::SetHeadlights(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetHeadlights::SetHeadlights(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetHeadlights::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetHeadlights::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->intensity);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetHeadlights::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetHeadlights::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->intensity);
	return buffer.GetBytesRead();
}

size_t SetHeadlights::Size() const
{
	size_t result = 0;
	//intensity
	result += 1; // = uint_8
	return result;
}

bool SetHeadlights::operator==(const SetHeadlights& other) const
{
	if (intensity != other.intensity) {
		return false;
	}
	return true;
}

bool SetHeadlights::operator!=(const SetHeadlights& other) const
{
	return !(operator==(other));
}


// MESSAGE GotoPose

GotoPose::GotoPose(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

GotoPose::GotoPose(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t GotoPose::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t GotoPose::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->x_mm);
	buffer.Write(this->y_mm);
	buffer.Write(this->rad);
	buffer.Write(this->level);
	buffer.Write(this->useManualSpeed);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t GotoPose::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t GotoPose::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->x_mm);
	buffer.Read(this->y_mm);
	buffer.Read(this->rad);
	buffer.Read(this->level);
	buffer.Read(this->useManualSpeed);
	return buffer.GetBytesRead();
}

size_t GotoPose::Size() const
{
	size_t result = 0;
	//x_mm
	result += 4; // = float_32
	//y_mm
	result += 4; // = float_32
	//rad
	result += 4; // = float_32
	//level
	result += 1; // = uint_8
	//useManualSpeed
	result += 1; // = uint_8
	return result;
}

bool GotoPose::operator==(const GotoPose& other) const
{
	if (x_mm != other.x_mm
	|| y_mm != other.y_mm
	|| rad != other.rad
	|| level != other.level
	|| useManualSpeed != other.useManualSpeed) {
		return false;
	}
	return true;
}

bool GotoPose::operator!=(const GotoPose& other) const
{
	return !(operator==(other));
}


// MESSAGE GotoObject

GotoObject::GotoObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

GotoObject::GotoObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t GotoObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t GotoObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->distance_mm);
	buffer.Write(this->useManualSpeed);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t GotoObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t GotoObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->distance_mm);
	buffer.Read(this->useManualSpeed);
	return buffer.GetBytesRead();
}

size_t GotoObject::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = int_32
	//distance_mm
	result += 4; // = float_32
	//useManualSpeed
	result += 1; // = uint_8
	return result;
}

bool GotoObject::operator==(const GotoObject& other) const
{
	if (objectID != other.objectID
	|| distance_mm != other.distance_mm
	|| useManualSpeed != other.useManualSpeed) {
		return false;
	}
	return true;
}

bool GotoObject::operator!=(const GotoObject& other) const
{
	return !(operator==(other));
}


// MESSAGE PlaceObjectOnGround

PlaceObjectOnGround::PlaceObjectOnGround(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

PlaceObjectOnGround::PlaceObjectOnGround(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t PlaceObjectOnGround::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t PlaceObjectOnGround::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->x_mm);
	buffer.Write(this->y_mm);
	buffer.Write(this->rad);
	buffer.Write(this->level);
	buffer.Write(this->useManualSpeed);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t PlaceObjectOnGround::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t PlaceObjectOnGround::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->x_mm);
	buffer.Read(this->y_mm);
	buffer.Read(this->rad);
	buffer.Read(this->level);
	buffer.Read(this->useManualSpeed);
	return buffer.GetBytesRead();
}

size_t PlaceObjectOnGround::Size() const
{
	size_t result = 0;
	//x_mm
	result += 4; // = float_32
	//y_mm
	result += 4; // = float_32
	//rad
	result += 4; // = float_32
	//level
	result += 1; // = uint_8
	//useManualSpeed
	result += 1; // = uint_8
	return result;
}

bool PlaceObjectOnGround::operator==(const PlaceObjectOnGround& other) const
{
	if (x_mm != other.x_mm
	|| y_mm != other.y_mm
	|| rad != other.rad
	|| level != other.level
	|| useManualSpeed != other.useManualSpeed) {
		return false;
	}
	return true;
}

bool PlaceObjectOnGround::operator!=(const PlaceObjectOnGround& other) const
{
	return !(operator==(other));
}


// MESSAGE PlaceObjectOnGroundHere

PlaceObjectOnGroundHere::PlaceObjectOnGroundHere(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

PlaceObjectOnGroundHere::PlaceObjectOnGroundHere(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t PlaceObjectOnGroundHere::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t PlaceObjectOnGroundHere::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t PlaceObjectOnGroundHere::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t PlaceObjectOnGroundHere::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t PlaceObjectOnGroundHere::Size() const
{
	size_t result = 0;
	return result;
}

bool PlaceObjectOnGroundHere::operator==(const PlaceObjectOnGroundHere& other) const
{
	return true;
}

bool PlaceObjectOnGroundHere::operator!=(const PlaceObjectOnGroundHere& other) const
{
	return !(operator==(other));
}


// MESSAGE ExecuteTestPlan

ExecuteTestPlan::ExecuteTestPlan(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ExecuteTestPlan::ExecuteTestPlan(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ExecuteTestPlan::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ExecuteTestPlan::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ExecuteTestPlan::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ExecuteTestPlan::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t ExecuteTestPlan::Size() const
{
	size_t result = 0;
	return result;
}

bool ExecuteTestPlan::operator==(const ExecuteTestPlan& other) const
{
	return true;
}

bool ExecuteTestPlan::operator!=(const ExecuteTestPlan& other) const
{
	return !(operator==(other));
}


// MESSAGE SelectNextObject

SelectNextObject::SelectNextObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SelectNextObject::SelectNextObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SelectNextObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SelectNextObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SelectNextObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SelectNextObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t SelectNextObject::Size() const
{
	size_t result = 0;
	return result;
}

bool SelectNextObject::operator==(const SelectNextObject& other) const
{
	return true;
}

bool SelectNextObject::operator!=(const SelectNextObject& other) const
{
	return !(operator==(other));
}


// MESSAGE PickAndPlaceObject

PickAndPlaceObject::PickAndPlaceObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

PickAndPlaceObject::PickAndPlaceObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t PickAndPlaceObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t PickAndPlaceObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->usePreDockPose);
	buffer.Write(this->useManualSpeed);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t PickAndPlaceObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t PickAndPlaceObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->usePreDockPose);
	buffer.Read(this->useManualSpeed);
	return buffer.GetBytesRead();
}

size_t PickAndPlaceObject::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = int_32
	//usePreDockPose
	result += 1; // = uint_8
	//useManualSpeed
	result += 1; // = uint_8
	return result;
}

bool PickAndPlaceObject::operator==(const PickAndPlaceObject& other) const
{
	if (objectID != other.objectID
	|| usePreDockPose != other.usePreDockPose
	|| useManualSpeed != other.useManualSpeed) {
		return false;
	}
	return true;
}

bool PickAndPlaceObject::operator!=(const PickAndPlaceObject& other) const
{
	return !(operator==(other));
}


// MESSAGE RollObject

RollObject::RollObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RollObject::RollObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RollObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RollObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->usePreDockPose);
	buffer.Write(this->useManualSpeed);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RollObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RollObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->usePreDockPose);
	buffer.Read(this->useManualSpeed);
	return buffer.GetBytesRead();
}

size_t RollObject::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = int_32
	//usePreDockPose
	result += 1; // = uint_8
	//useManualSpeed
	result += 1; // = uint_8
	return result;
}

bool RollObject::operator==(const RollObject& other) const
{
	if (objectID != other.objectID
	|| usePreDockPose != other.usePreDockPose
	|| useManualSpeed != other.useManualSpeed) {
		return false;
	}
	return true;
}

bool RollObject::operator!=(const RollObject& other) const
{
	return !(operator==(other));
}


// MESSAGE TraverseObject

TraverseObject::TraverseObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

TraverseObject::TraverseObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t TraverseObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t TraverseObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->usePreDockPose);
	buffer.Write(this->useManualSpeed);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t TraverseObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t TraverseObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->usePreDockPose);
	buffer.Read(this->useManualSpeed);
	return buffer.GetBytesRead();
}

size_t TraverseObject::Size() const
{
	size_t result = 0;
	//usePreDockPose
	result += 1; // = uint_8
	//useManualSpeed
	result += 1; // = uint_8
	return result;
}

bool TraverseObject::operator==(const TraverseObject& other) const
{
	if (usePreDockPose != other.usePreDockPose
	|| useManualSpeed != other.useManualSpeed) {
		return false;
	}
	return true;
}

bool TraverseObject::operator!=(const TraverseObject& other) const
{
	return !(operator==(other));
}


// MESSAGE SetRobotCarryingObject

SetRobotCarryingObject::SetRobotCarryingObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetRobotCarryingObject::SetRobotCarryingObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetRobotCarryingObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetRobotCarryingObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetRobotCarryingObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetRobotCarryingObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t SetRobotCarryingObject::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = int_32
	//robotID
	result += 1; // = uint_8
	return result;
}

bool SetRobotCarryingObject::operator==(const SetRobotCarryingObject& other) const
{
	if (objectID != other.objectID
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool SetRobotCarryingObject::operator!=(const SetRobotCarryingObject& other) const
{
	return !(operator==(other));
}


// MESSAGE ClearAllBlocks

ClearAllBlocks::ClearAllBlocks(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ClearAllBlocks::ClearAllBlocks(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ClearAllBlocks::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ClearAllBlocks::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ClearAllBlocks::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ClearAllBlocks::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t ClearAllBlocks::Size() const
{
	size_t result = 0;
	//robotID
	result += 1; // = uint_8
	return result;
}

bool ClearAllBlocks::operator==(const ClearAllBlocks& other) const
{
	if (robotID != other.robotID) {
		return false;
	}
	return true;
}

bool ClearAllBlocks::operator!=(const ClearAllBlocks& other) const
{
	return !(operator==(other));
}


// MESSAGE ClearAllObjects

ClearAllObjects::ClearAllObjects(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ClearAllObjects::ClearAllObjects(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ClearAllObjects::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ClearAllObjects::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ClearAllObjects::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ClearAllObjects::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t ClearAllObjects::Size() const
{
	size_t result = 0;
	//robotID
	result += 1; // = uint_8
	return result;
}

bool ClearAllObjects::operator==(const ClearAllObjects& other) const
{
	if (robotID != other.robotID) {
		return false;
	}
	return true;
}

bool ClearAllObjects::operator!=(const ClearAllObjects& other) const
{
	return !(operator==(other));
}


// MESSAGE SetObjectAdditionAndDeletion

SetObjectAdditionAndDeletion::SetObjectAdditionAndDeletion(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetObjectAdditionAndDeletion::SetObjectAdditionAndDeletion(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetObjectAdditionAndDeletion::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetObjectAdditionAndDeletion::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->enableAddition);
	buffer.Write(this->enableDeletion);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetObjectAdditionAndDeletion::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetObjectAdditionAndDeletion::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->enableAddition);
	buffer.Read(this->enableDeletion);
	return buffer.GetBytesRead();
}

size_t SetObjectAdditionAndDeletion::Size() const
{
	size_t result = 0;
	//robotID
	result += 1; // = uint_8
	//enableAddition
	result += 1; // = bool
	//enableDeletion
	result += 1; // = bool
	return result;
}

bool SetObjectAdditionAndDeletion::operator==(const SetObjectAdditionAndDeletion& other) const
{
	if (robotID != other.robotID
	|| enableAddition != other.enableAddition
	|| enableDeletion != other.enableDeletion) {
		return false;
	}
	return true;
}

bool SetObjectAdditionAndDeletion::operator!=(const SetObjectAdditionAndDeletion& other) const
{
	return !(operator==(other));
}


// MESSAGE VisionWhileMoving

VisionWhileMoving::VisionWhileMoving(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

VisionWhileMoving::VisionWhileMoving(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t VisionWhileMoving::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t VisionWhileMoving::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->enable);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t VisionWhileMoving::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t VisionWhileMoving::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->enable);
	return buffer.GetBytesRead();
}

size_t VisionWhileMoving::Size() const
{
	size_t result = 0;
	//enable
	result += 1; // = uint_8
	return result;
}

bool VisionWhileMoving::operator==(const VisionWhileMoving& other) const
{
	if (enable != other.enable) {
		return false;
	}
	return true;
}

bool VisionWhileMoving::operator!=(const VisionWhileMoving& other) const
{
	return !(operator==(other));
}


// MESSAGE ExecuteBehavior

ExecuteBehavior::ExecuteBehavior(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ExecuteBehavior::ExecuteBehavior(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ExecuteBehavior::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ExecuteBehavior::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->behaviorMode);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ExecuteBehavior::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ExecuteBehavior::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->behaviorMode);
	return buffer.GetBytesRead();
}

size_t ExecuteBehavior::Size() const
{
	size_t result = 0;
	//behaviorMode
	result += 1; // = uint_8
	return result;
}

bool ExecuteBehavior::operator==(const ExecuteBehavior& other) const
{
	if (behaviorMode != other.behaviorMode) {
		return false;
	}
	return true;
}

bool ExecuteBehavior::operator!=(const ExecuteBehavior& other) const
{
	return !(operator==(other));
}


// MESSAGE SetBehaviorState

SetBehaviorState::SetBehaviorState(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetBehaviorState::SetBehaviorState(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetBehaviorState::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetBehaviorState::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->behaviorState);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetBehaviorState::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetBehaviorState::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->behaviorState);
	return buffer.GetBytesRead();
}

size_t SetBehaviorState::Size() const
{
	size_t result = 0;
	//behaviorState
	result += 1; // = uint_8
	return result;
}

bool SetBehaviorState::operator==(const SetBehaviorState& other) const
{
	if (behaviorState != other.behaviorState) {
		return false;
	}
	return true;
}

bool SetBehaviorState::operator!=(const SetBehaviorState& other) const
{
	return !(operator==(other));
}


// MESSAGE AbortPath

AbortPath::AbortPath(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

AbortPath::AbortPath(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t AbortPath::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t AbortPath::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t AbortPath::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t AbortPath::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t AbortPath::Size() const
{
	size_t result = 0;
	return result;
}

bool AbortPath::operator==(const AbortPath& other) const
{
	return true;
}

bool AbortPath::operator!=(const AbortPath& other) const
{
	return !(operator==(other));
}


// MESSAGE AbortAll

AbortAll::AbortAll(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

AbortAll::AbortAll(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t AbortAll::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t AbortAll::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t AbortAll::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t AbortAll::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t AbortAll::Size() const
{
	size_t result = 0;
	return result;
}

bool AbortAll::operator==(const AbortAll& other) const
{
	return true;
}

bool AbortAll::operator!=(const AbortAll& other) const
{
	return !(operator==(other));
}


// MESSAGE CancelAction

CancelAction::CancelAction(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

CancelAction::CancelAction(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t CancelAction::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t CancelAction::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->actionType);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t CancelAction::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t CancelAction::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->actionType);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t CancelAction::Size() const
{
	size_t result = 0;
	//actionType
	result += 4; // = RobotActionType
	//robotID
	result += 1; // = uint_8
	return result;
}

bool CancelAction::operator==(const CancelAction& other) const
{
	if (actionType != other.actionType
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool CancelAction::operator!=(const CancelAction& other) const
{
	return !(operator==(other));
}


// MESSAGE DrawPoseMarker

DrawPoseMarker::DrawPoseMarker(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

DrawPoseMarker::DrawPoseMarker(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t DrawPoseMarker::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t DrawPoseMarker::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->x_mm);
	buffer.Write(this->y_mm);
	buffer.Write(this->rad);
	buffer.Write(this->level);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t DrawPoseMarker::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t DrawPoseMarker::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->x_mm);
	buffer.Read(this->y_mm);
	buffer.Read(this->rad);
	buffer.Read(this->level);
	return buffer.GetBytesRead();
}

size_t DrawPoseMarker::Size() const
{
	size_t result = 0;
	//x_mm
	result += 4; // = float_32
	//y_mm
	result += 4; // = float_32
	//rad
	result += 4; // = float_32
	//level
	result += 1; // = uint_8
	return result;
}

bool DrawPoseMarker::operator==(const DrawPoseMarker& other) const
{
	if (x_mm != other.x_mm
	|| y_mm != other.y_mm
	|| rad != other.rad
	|| level != other.level) {
		return false;
	}
	return true;
}

bool DrawPoseMarker::operator!=(const DrawPoseMarker& other) const
{
	return !(operator==(other));
}


// MESSAGE ErasePoseMarker

ErasePoseMarker::ErasePoseMarker(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ErasePoseMarker::ErasePoseMarker(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ErasePoseMarker::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ErasePoseMarker::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ErasePoseMarker::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ErasePoseMarker::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t ErasePoseMarker::Size() const
{
	size_t result = 0;
	return result;
}

bool ErasePoseMarker::operator==(const ErasePoseMarker& other) const
{
	return true;
}

bool ErasePoseMarker::operator!=(const ErasePoseMarker& other) const
{
	return !(operator==(other));
}


// MESSAGE SetWheelControllerGains

SetWheelControllerGains::SetWheelControllerGains(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetWheelControllerGains::SetWheelControllerGains(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetWheelControllerGains::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetWheelControllerGains::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->kpLeft);
	buffer.Write(this->kiLeft);
	buffer.Write(this->maxIntegralErrorLeft);
	buffer.Write(this->kpRight);
	buffer.Write(this->kiRight);
	buffer.Write(this->maxIntegralErrorRight);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetWheelControllerGains::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetWheelControllerGains::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->kpLeft);
	buffer.Read(this->kiLeft);
	buffer.Read(this->maxIntegralErrorLeft);
	buffer.Read(this->kpRight);
	buffer.Read(this->kiRight);
	buffer.Read(this->maxIntegralErrorRight);
	return buffer.GetBytesRead();
}

size_t SetWheelControllerGains::Size() const
{
	size_t result = 0;
	//kpLeft
	result += 4; // = float_32
	//kiLeft
	result += 4; // = float_32
	//maxIntegralErrorLeft
	result += 4; // = float_32
	//kpRight
	result += 4; // = float_32
	//kiRight
	result += 4; // = float_32
	//maxIntegralErrorRight
	result += 4; // = float_32
	return result;
}

bool SetWheelControllerGains::operator==(const SetWheelControllerGains& other) const
{
	if (kpLeft != other.kpLeft
	|| kiLeft != other.kiLeft
	|| maxIntegralErrorLeft != other.maxIntegralErrorLeft
	|| kpRight != other.kpRight
	|| kiRight != other.kiRight
	|| maxIntegralErrorRight != other.maxIntegralErrorRight) {
		return false;
	}
	return true;
}

bool SetWheelControllerGains::operator!=(const SetWheelControllerGains& other) const
{
	return !(operator==(other));
}


// MESSAGE SetHeadControllerGains

SetHeadControllerGains::SetHeadControllerGains(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetHeadControllerGains::SetHeadControllerGains(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetHeadControllerGains::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetHeadControllerGains::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->kp);
	buffer.Write(this->kd);
	buffer.Write(this->ki);
	buffer.Write(this->maxIntegralError);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetHeadControllerGains::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetHeadControllerGains::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->kp);
	buffer.Read(this->kd);
	buffer.Read(this->ki);
	buffer.Read(this->maxIntegralError);
	return buffer.GetBytesRead();
}

size_t SetHeadControllerGains::Size() const
{
	size_t result = 0;
	//kp
	result += 4; // = float_32
	//kd
	result += 4; // = float_32
	//ki
	result += 4; // = float_32
	//maxIntegralError
	result += 4; // = float_32
	return result;
}

bool SetHeadControllerGains::operator==(const SetHeadControllerGains& other) const
{
	if (kp != other.kp
	|| kd != other.kd
	|| ki != other.ki
	|| maxIntegralError != other.maxIntegralError) {
		return false;
	}
	return true;
}

bool SetHeadControllerGains::operator!=(const SetHeadControllerGains& other) const
{
	return !(operator==(other));
}


// MESSAGE SetLiftControllerGains

SetLiftControllerGains::SetLiftControllerGains(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetLiftControllerGains::SetLiftControllerGains(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetLiftControllerGains::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetLiftControllerGains::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->kp);
	buffer.Write(this->kd);
	buffer.Write(this->ki);
	buffer.Write(this->maxIntegralError);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetLiftControllerGains::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetLiftControllerGains::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->kp);
	buffer.Read(this->kd);
	buffer.Read(this->ki);
	buffer.Read(this->maxIntegralError);
	return buffer.GetBytesRead();
}

size_t SetLiftControllerGains::Size() const
{
	size_t result = 0;
	//kp
	result += 4; // = float_32
	//kd
	result += 4; // = float_32
	//ki
	result += 4; // = float_32
	//maxIntegralError
	result += 4; // = float_32
	return result;
}

bool SetLiftControllerGains::operator==(const SetLiftControllerGains& other) const
{
	if (kp != other.kp
	|| kd != other.kd
	|| ki != other.ki
	|| maxIntegralError != other.maxIntegralError) {
		return false;
	}
	return true;
}

bool SetLiftControllerGains::operator!=(const SetLiftControllerGains& other) const
{
	return !(operator==(other));
}


// MESSAGE SetSteeringControllerGains

SetSteeringControllerGains::SetSteeringControllerGains(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetSteeringControllerGains::SetSteeringControllerGains(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetSteeringControllerGains::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetSteeringControllerGains::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->k1);
	buffer.Write(this->k2);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetSteeringControllerGains::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetSteeringControllerGains::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->k1);
	buffer.Read(this->k2);
	return buffer.GetBytesRead();
}

size_t SetSteeringControllerGains::Size() const
{
	size_t result = 0;
	//k1
	result += 4; // = float_32
	//k2
	result += 4; // = float_32
	return result;
}

bool SetSteeringControllerGains::operator==(const SetSteeringControllerGains& other) const
{
	if (k1 != other.k1
	|| k2 != other.k2) {
		return false;
	}
	return true;
}

bool SetSteeringControllerGains::operator!=(const SetSteeringControllerGains& other) const
{
	return !(operator==(other));
}


// MESSAGE SelectNextSoundScheme

SelectNextSoundScheme::SelectNextSoundScheme(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SelectNextSoundScheme::SelectNextSoundScheme(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SelectNextSoundScheme::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SelectNextSoundScheme::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SelectNextSoundScheme::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SelectNextSoundScheme::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t SelectNextSoundScheme::Size() const
{
	size_t result = 0;
	return result;
}

bool SelectNextSoundScheme::operator==(const SelectNextSoundScheme& other) const
{
	return true;
}

bool SelectNextSoundScheme::operator!=(const SelectNextSoundScheme& other) const
{
	return !(operator==(other));
}


// MESSAGE StartTestMode

StartTestMode::StartTestMode(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StartTestMode::StartTestMode(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StartTestMode::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StartTestMode::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->p1);
	buffer.Write(this->p2);
	buffer.Write(this->p3);
	buffer.Write(this->mode);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StartTestMode::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StartTestMode::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->p1);
	buffer.Read(this->p2);
	buffer.Read(this->p3);
	buffer.Read(this->mode);
	return buffer.GetBytesRead();
}

size_t StartTestMode::Size() const
{
	size_t result = 0;
	//p1
	result += 4; // = int_32
	//p2
	result += 4; // = int_32
	//p3
	result += 4; // = int_32
	//mode
	result += 1; // = uint_8
	return result;
}

bool StartTestMode::operator==(const StartTestMode& other) const
{
	if (p1 != other.p1
	|| p2 != other.p2
	|| p3 != other.p3
	|| mode != other.mode) {
		return false;
	}
	return true;
}

bool StartTestMode::operator!=(const StartTestMode& other) const
{
	return !(operator==(other));
}


// MESSAGE IMURequest

IMURequest::IMURequest(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

IMURequest::IMURequest(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t IMURequest::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t IMURequest::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->length_ms);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t IMURequest::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t IMURequest::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->length_ms);
	return buffer.GetBytesRead();
}

size_t IMURequest::Size() const
{
	size_t result = 0;
	//length_ms
	result += 4; // = uint_32
	return result;
}

bool IMURequest::operator==(const IMURequest& other) const
{
	if (length_ms != other.length_ms) {
		return false;
	}
	return true;
}

bool IMURequest::operator!=(const IMURequest& other) const
{
	return !(operator==(other));
}


// MESSAGE PlayAnimation

PlayAnimation::PlayAnimation(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

PlayAnimation::PlayAnimation(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t PlayAnimation::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t PlayAnimation::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->numLoops);
	buffer.WritePString<uint8_t>(this->animationName);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t PlayAnimation::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t PlayAnimation::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->numLoops);
	buffer.ReadPString<uint8_t>(this->animationName);
	return buffer.GetBytesRead();
}

size_t PlayAnimation::Size() const
{
	size_t result = 0;
	//numLoops
	result += 4; // = uint_32
	//animationName
	result += 1; // length = uint_8
	result += 1 * animationName.size(); //string
	return result;
}

bool PlayAnimation::operator==(const PlayAnimation& other) const
{
	if (numLoops != other.numLoops
	|| animationName != other.animationName) {
		return false;
	}
	return true;
}

bool PlayAnimation::operator!=(const PlayAnimation& other) const
{
	return !(operator==(other));
}


// MESSAGE ReadAnimationFile

ReadAnimationFile::ReadAnimationFile(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ReadAnimationFile::ReadAnimationFile(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ReadAnimationFile::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ReadAnimationFile::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ReadAnimationFile::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ReadAnimationFile::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t ReadAnimationFile::Size() const
{
	size_t result = 0;
	return result;
}

bool ReadAnimationFile::operator==(const ReadAnimationFile& other) const
{
	return true;
}

bool ReadAnimationFile::operator!=(const ReadAnimationFile& other) const
{
	return !(operator==(other));
}


// MESSAGE StartFaceTracking

StartFaceTracking::StartFaceTracking(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StartFaceTracking::StartFaceTracking(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StartFaceTracking::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StartFaceTracking::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->timeout_sec);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StartFaceTracking::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StartFaceTracking::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->timeout_sec);
	return buffer.GetBytesRead();
}

size_t StartFaceTracking::Size() const
{
	size_t result = 0;
	//timeout_sec
	result += 1; // = uint_8
	return result;
}

bool StartFaceTracking::operator==(const StartFaceTracking& other) const
{
	if (timeout_sec != other.timeout_sec) {
		return false;
	}
	return true;
}

bool StartFaceTracking::operator!=(const StartFaceTracking& other) const
{
	return !(operator==(other));
}


// MESSAGE StopFaceTracking

StopFaceTracking::StopFaceTracking(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StopFaceTracking::StopFaceTracking(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StopFaceTracking::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StopFaceTracking::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StopFaceTracking::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StopFaceTracking::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t StopFaceTracking::Size() const
{
	size_t result = 0;
	return result;
}

bool StopFaceTracking::operator==(const StopFaceTracking& other) const
{
	return true;
}

bool StopFaceTracking::operator!=(const StopFaceTracking& other) const
{
	return !(operator==(other));
}


// MESSAGE StartLookingForMarkers

StartLookingForMarkers::StartLookingForMarkers(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StartLookingForMarkers::StartLookingForMarkers(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StartLookingForMarkers::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StartLookingForMarkers::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StartLookingForMarkers::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StartLookingForMarkers::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t StartLookingForMarkers::Size() const
{
	size_t result = 0;
	return result;
}

bool StartLookingForMarkers::operator==(const StartLookingForMarkers& other) const
{
	return true;
}

bool StartLookingForMarkers::operator!=(const StartLookingForMarkers& other) const
{
	return !(operator==(other));
}


// MESSAGE StopLookingForMarkers

StopLookingForMarkers::StopLookingForMarkers(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StopLookingForMarkers::StopLookingForMarkers(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StopLookingForMarkers::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StopLookingForMarkers::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StopLookingForMarkers::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StopLookingForMarkers::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t StopLookingForMarkers::Size() const
{
	size_t result = 0;
	return result;
}

bool StopLookingForMarkers::operator==(const StopLookingForMarkers& other) const
{
	return true;
}

bool StopLookingForMarkers::operator!=(const StopLookingForMarkers& other) const
{
	return !(operator==(other));
}


// MESSAGE SetVisionSystemParams

SetVisionSystemParams::SetVisionSystemParams(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetVisionSystemParams::SetVisionSystemParams(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetVisionSystemParams::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetVisionSystemParams::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->autoexposureOn);
	buffer.Write(this->exposureTime);
	buffer.Write(this->integerCountsIncrement);
	buffer.Write(this->minExposureTime);
	buffer.Write(this->maxExposureTime);
	buffer.Write(this->percentileToMakeHigh);
	buffer.Write(this->limitFramerate);
	buffer.Write(this->highValue);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetVisionSystemParams::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetVisionSystemParams::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->autoexposureOn);
	buffer.Read(this->exposureTime);
	buffer.Read(this->integerCountsIncrement);
	buffer.Read(this->minExposureTime);
	buffer.Read(this->maxExposureTime);
	buffer.Read(this->percentileToMakeHigh);
	buffer.Read(this->limitFramerate);
	buffer.Read(this->highValue);
	return buffer.GetBytesRead();
}

size_t SetVisionSystemParams::Size() const
{
	size_t result = 0;
	//autoexposureOn
	result += 4; // = int_32
	//exposureTime
	result += 4; // = float_32
	//integerCountsIncrement
	result += 4; // = int_32
	//minExposureTime
	result += 4; // = float_32
	//maxExposureTime
	result += 4; // = float_32
	//percentileToMakeHigh
	result += 4; // = float_32
	//limitFramerate
	result += 4; // = int_32
	//highValue
	result += 1; // = uint_8
	return result;
}

bool SetVisionSystemParams::operator==(const SetVisionSystemParams& other) const
{
	if (autoexposureOn != other.autoexposureOn
	|| exposureTime != other.exposureTime
	|| integerCountsIncrement != other.integerCountsIncrement
	|| minExposureTime != other.minExposureTime
	|| maxExposureTime != other.maxExposureTime
	|| percentileToMakeHigh != other.percentileToMakeHigh
	|| limitFramerate != other.limitFramerate
	|| highValue != other.highValue) {
		return false;
	}
	return true;
}

bool SetVisionSystemParams::operator!=(const SetVisionSystemParams& other) const
{
	return !(operator==(other));
}


// MESSAGE SetFaceDetectParams

SetFaceDetectParams::SetFaceDetectParams(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetFaceDetectParams::SetFaceDetectParams(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetFaceDetectParams::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetFaceDetectParams::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->scaleFactor);
	buffer.Write(this->minNeighbors);
	buffer.Write(this->minObjectHeight);
	buffer.Write(this->minObjectWidth);
	buffer.Write(this->maxObjectHeight);
	buffer.Write(this->maxObjectWidth);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetFaceDetectParams::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetFaceDetectParams::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->scaleFactor);
	buffer.Read(this->minNeighbors);
	buffer.Read(this->minObjectHeight);
	buffer.Read(this->minObjectWidth);
	buffer.Read(this->maxObjectHeight);
	buffer.Read(this->maxObjectWidth);
	return buffer.GetBytesRead();
}

size_t SetFaceDetectParams::Size() const
{
	size_t result = 0;
	//scaleFactor
	result += 4; // = float_32
	//minNeighbors
	result += 4; // = int_32
	//minObjectHeight
	result += 4; // = int_32
	//minObjectWidth
	result += 4; // = int_32
	//maxObjectHeight
	result += 4; // = int_32
	//maxObjectWidth
	result += 4; // = int_32
	return result;
}

bool SetFaceDetectParams::operator==(const SetFaceDetectParams& other) const
{
	if (scaleFactor != other.scaleFactor
	|| minNeighbors != other.minNeighbors
	|| minObjectHeight != other.minObjectHeight
	|| minObjectWidth != other.minObjectWidth
	|| maxObjectHeight != other.maxObjectHeight
	|| maxObjectWidth != other.maxObjectWidth) {
		return false;
	}
	return true;
}

bool SetFaceDetectParams::operator!=(const SetFaceDetectParams& other) const
{
	return !(operator==(other));
}


// MESSAGE SetActiveObjectLEDs

SetActiveObjectLEDs::SetActiveObjectLEDs(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetActiveObjectLEDs::SetActiveObjectLEDs(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetActiveObjectLEDs::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetActiveObjectLEDs::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.Write(this->onColor);
	buffer.Write(this->offColor);
	buffer.Write(this->onPeriod_ms);
	buffer.Write(this->offPeriod_ms);
	buffer.Write(this->transitionOnPeriod_ms);
	buffer.Write(this->transitionOffPeriod_ms);
	buffer.Write(this->relativeToX);
	buffer.Write(this->relativeToY);
	buffer.Write(this->whichLEDs);
	buffer.Write(this->makeRelative);
	buffer.Write(this->turnOffUnspecifiedLEDs);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetActiveObjectLEDs::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetActiveObjectLEDs::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.Read(this->onColor);
	buffer.Read(this->offColor);
	buffer.Read(this->onPeriod_ms);
	buffer.Read(this->offPeriod_ms);
	buffer.Read(this->transitionOnPeriod_ms);
	buffer.Read(this->transitionOffPeriod_ms);
	buffer.Read(this->relativeToX);
	buffer.Read(this->relativeToY);
	buffer.Read(this->whichLEDs);
	buffer.Read(this->makeRelative);
	buffer.Read(this->turnOffUnspecifiedLEDs);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t SetActiveObjectLEDs::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = uint_32
	//onColor
	result += 4; // = uint_32
	//offColor
	result += 4; // = uint_32
	//onPeriod_ms
	result += 4; // = uint_32
	//offPeriod_ms
	result += 4; // = uint_32
	//transitionOnPeriod_ms
	result += 4; // = uint_32
	//transitionOffPeriod_ms
	result += 4; // = uint_32
	//relativeToX
	result += 4; // = float_32
	//relativeToY
	result += 4; // = float_32
	//whichLEDs
	result += 1; // = uint_8
	//makeRelative
	result += 1; // = uint_8
	//turnOffUnspecifiedLEDs
	result += 1; // = uint_8
	//robotID
	result += 1; // = uint_8
	return result;
}

bool SetActiveObjectLEDs::operator==(const SetActiveObjectLEDs& other) const
{
	if (objectID != other.objectID
	|| onColor != other.onColor
	|| offColor != other.offColor
	|| onPeriod_ms != other.onPeriod_ms
	|| offPeriod_ms != other.offPeriod_ms
	|| transitionOnPeriod_ms != other.transitionOnPeriod_ms
	|| transitionOffPeriod_ms != other.transitionOffPeriod_ms
	|| relativeToX != other.relativeToX
	|| relativeToY != other.relativeToY
	|| whichLEDs != other.whichLEDs
	|| makeRelative != other.makeRelative
	|| turnOffUnspecifiedLEDs != other.turnOffUnspecifiedLEDs
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool SetActiveObjectLEDs::operator!=(const SetActiveObjectLEDs& other) const
{
	return !(operator==(other));
}


// MESSAGE SetAllActiveObjectLEDs

SetAllActiveObjectLEDs::SetAllActiveObjectLEDs(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetAllActiveObjectLEDs::SetAllActiveObjectLEDs(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetAllActiveObjectLEDs::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetAllActiveObjectLEDs::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->objectID);
	buffer.WriteFArray<uint32_t, 8>(this->onColor);
	buffer.WriteFArray<uint32_t, 8>(this->offColor);
	buffer.WriteFArray<uint32_t, 8>(this->onPeriod_ms);
	buffer.WriteFArray<uint32_t, 8>(this->offPeriod_ms);
	buffer.WriteFArray<uint32_t, 8>(this->transitionOnPeriod_ms);
	buffer.WriteFArray<uint32_t, 8>(this->transitionOffPeriod_ms);
	buffer.Write(this->relativeToX);
	buffer.Write(this->relativeToY);
	buffer.Write(this->makeRelative);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetAllActiveObjectLEDs::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetAllActiveObjectLEDs::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->objectID);
	buffer.ReadFArray<uint32_t, 8>(this->onColor);
	buffer.ReadFArray<uint32_t, 8>(this->offColor);
	buffer.ReadFArray<uint32_t, 8>(this->onPeriod_ms);
	buffer.ReadFArray<uint32_t, 8>(this->offPeriod_ms);
	buffer.ReadFArray<uint32_t, 8>(this->transitionOnPeriod_ms);
	buffer.ReadFArray<uint32_t, 8>(this->transitionOffPeriod_ms);
	buffer.Read(this->relativeToX);
	buffer.Read(this->relativeToY);
	buffer.Read(this->makeRelative);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t SetAllActiveObjectLEDs::Size() const
{
	size_t result = 0;
	//objectID
	result += 4; // = uint_32
	//onColor
	result += 4 * 8; // = uint_32 * 8
	//offColor
	result += 4 * 8; // = uint_32 * 8
	//onPeriod_ms
	result += 4 * 8; // = uint_32 * 8
	//offPeriod_ms
	result += 4 * 8; // = uint_32 * 8
	//transitionOnPeriod_ms
	result += 4 * 8; // = uint_32 * 8
	//transitionOffPeriod_ms
	result += 4 * 8; // = uint_32 * 8
	//relativeToX
	result += 4; // = float_32
	//relativeToY
	result += 4; // = float_32
	//makeRelative
	result += 1; // = uint_8
	//robotID
	result += 1; // = uint_8
	return result;
}

bool SetAllActiveObjectLEDs::operator==(const SetAllActiveObjectLEDs& other) const
{
	if (objectID != other.objectID
	|| onColor != other.onColor
	|| offColor != other.offColor
	|| onPeriod_ms != other.onPeriod_ms
	|| offPeriod_ms != other.offPeriod_ms
	|| transitionOnPeriod_ms != other.transitionOnPeriod_ms
	|| transitionOffPeriod_ms != other.transitionOffPeriod_ms
	|| relativeToX != other.relativeToX
	|| relativeToY != other.relativeToY
	|| makeRelative != other.makeRelative
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool SetAllActiveObjectLEDs::operator!=(const SetAllActiveObjectLEDs& other) const
{
	return !(operator==(other));
}


// MESSAGE SetBackpackLEDs

SetBackpackLEDs::SetBackpackLEDs(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

SetBackpackLEDs::SetBackpackLEDs(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t SetBackpackLEDs::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t SetBackpackLEDs::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.WriteFArray<uint32_t, 5>(this->onColor);
	buffer.WriteFArray<uint32_t, 5>(this->offColor);
	buffer.WriteFArray<uint32_t, 5>(this->onPeriod_ms);
	buffer.WriteFArray<uint32_t, 5>(this->offPeriod_ms);
	buffer.WriteFArray<uint32_t, 5>(this->transitionOnPeriod_ms);
	buffer.WriteFArray<uint32_t, 5>(this->transitionOffPeriod_ms);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t SetBackpackLEDs::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t SetBackpackLEDs::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.ReadFArray<uint32_t, 5>(this->onColor);
	buffer.ReadFArray<uint32_t, 5>(this->offColor);
	buffer.ReadFArray<uint32_t, 5>(this->onPeriod_ms);
	buffer.ReadFArray<uint32_t, 5>(this->offPeriod_ms);
	buffer.ReadFArray<uint32_t, 5>(this->transitionOnPeriod_ms);
	buffer.ReadFArray<uint32_t, 5>(this->transitionOffPeriod_ms);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t SetBackpackLEDs::Size() const
{
	size_t result = 0;
	//onColor
	result += 4 * 5; // = uint_32 * 5
	//offColor
	result += 4 * 5; // = uint_32 * 5
	//onPeriod_ms
	result += 4 * 5; // = uint_32 * 5
	//offPeriod_ms
	result += 4 * 5; // = uint_32 * 5
	//transitionOnPeriod_ms
	result += 4 * 5; // = uint_32 * 5
	//transitionOffPeriod_ms
	result += 4 * 5; // = uint_32 * 5
	//robotID
	result += 1; // = uint_8
	return result;
}

bool SetBackpackLEDs::operator==(const SetBackpackLEDs& other) const
{
	if (onColor != other.onColor
	|| offColor != other.offColor
	|| onPeriod_ms != other.onPeriod_ms
	|| offPeriod_ms != other.offPeriod_ms
	|| transitionOnPeriod_ms != other.transitionOnPeriod_ms
	|| transitionOffPeriod_ms != other.transitionOffPeriod_ms
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool SetBackpackLEDs::operator!=(const SetBackpackLEDs& other) const
{
	return !(operator==(other));
}


// MESSAGE VisualizeQuad

VisualizeQuad::VisualizeQuad(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

VisualizeQuad::VisualizeQuad(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t VisualizeQuad::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t VisualizeQuad::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->quadID);
	buffer.Write(this->color);
	buffer.Write(this->xUpperLeft);
	buffer.Write(this->yUpperLeft);
	buffer.Write(this->zUpperLeft);
	buffer.Write(this->xLowerLeft);
	buffer.Write(this->yLowerLeft);
	buffer.Write(this->zLowerLeft);
	buffer.Write(this->xUpperRight);
	buffer.Write(this->yUpperRight);
	buffer.Write(this->zUpperRight);
	buffer.Write(this->xLowerRight);
	buffer.Write(this->yLowerRight);
	buffer.Write(this->zLowerRight);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t VisualizeQuad::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t VisualizeQuad::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->quadID);
	buffer.Read(this->color);
	buffer.Read(this->xUpperLeft);
	buffer.Read(this->yUpperLeft);
	buffer.Read(this->zUpperLeft);
	buffer.Read(this->xLowerLeft);
	buffer.Read(this->yLowerLeft);
	buffer.Read(this->zLowerLeft);
	buffer.Read(this->xUpperRight);
	buffer.Read(this->yUpperRight);
	buffer.Read(this->zUpperRight);
	buffer.Read(this->xLowerRight);
	buffer.Read(this->yLowerRight);
	buffer.Read(this->zLowerRight);
	return buffer.GetBytesRead();
}

size_t VisualizeQuad::Size() const
{
	size_t result = 0;
	//quadID
	result += 4; // = uint_32
	//color
	result += 4; // = uint_32
	//xUpperLeft
	result += 4; // = float_32
	//yUpperLeft
	result += 4; // = float_32
	//zUpperLeft
	result += 4; // = float_32
	//xLowerLeft
	result += 4; // = float_32
	//yLowerLeft
	result += 4; // = float_32
	//zLowerLeft
	result += 4; // = float_32
	//xUpperRight
	result += 4; // = float_32
	//yUpperRight
	result += 4; // = float_32
	//zUpperRight
	result += 4; // = float_32
	//xLowerRight
	result += 4; // = float_32
	//yLowerRight
	result += 4; // = float_32
	//zLowerRight
	result += 4; // = float_32
	return result;
}

bool VisualizeQuad::operator==(const VisualizeQuad& other) const
{
	if (quadID != other.quadID
	|| color != other.color
	|| xUpperLeft != other.xUpperLeft
	|| yUpperLeft != other.yUpperLeft
	|| zUpperLeft != other.zUpperLeft
	|| xLowerLeft != other.xLowerLeft
	|| yLowerLeft != other.yLowerLeft
	|| zLowerLeft != other.zLowerLeft
	|| xUpperRight != other.xUpperRight
	|| yUpperRight != other.yUpperRight
	|| zUpperRight != other.zUpperRight
	|| xLowerRight != other.xLowerRight
	|| yLowerRight != other.yLowerRight
	|| zLowerRight != other.zLowerRight) {
		return false;
	}
	return true;
}

bool VisualizeQuad::operator!=(const VisualizeQuad& other) const
{
	return !(operator==(other));
}


// MESSAGE EraseQuad

EraseQuad::EraseQuad(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

EraseQuad::EraseQuad(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t EraseQuad::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t EraseQuad::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->quadID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t EraseQuad::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t EraseQuad::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->quadID);
	return buffer.GetBytesRead();
}

size_t EraseQuad::Size() const
{
	size_t result = 0;
	//quadID
	result += 4; // = uint_32
	return result;
}

bool EraseQuad::operator==(const EraseQuad& other) const
{
	if (quadID != other.quadID) {
		return false;
	}
	return true;
}

bool EraseQuad::operator!=(const EraseQuad& other) const
{
	return !(operator==(other));
}


// UNION Message

const char* MessageTagToString(const MessageTag tag) {
	switch (tag) {
	case MessageTag::Ping:
		return "Ping";
	case MessageTag::ConnectToRobot:
		return "ConnectToRobot";
	case MessageTag::ConnectToUiDevice:
		return "ConnectToUiDevice";
	case MessageTag::DisconnectFromUiDevice:
		return "DisconnectFromUiDevice";
	case MessageTag::ForceAddRobot:
		return "ForceAddRobot";
	case MessageTag::StartEngine:
		return "StartEngine";
	case MessageTag::DriveWheels:
		return "DriveWheels";
	case MessageTag::TurnInPlace:
		return "TurnInPlace";
	case MessageTag::FaceObject:
		return "FaceObject";
	case MessageTag::MoveHead:
		return "MoveHead";
	case MessageTag::MoveLift:
		return "MoveLift";
	case MessageTag::SetLiftHeight:
		return "SetLiftHeight";
	case MessageTag::SetHeadAngle:
		return "SetHeadAngle";
	case MessageTag::TrackHeadToObject:
		return "TrackHeadToObject";
	case MessageTag::StopAllMotors:
		return "StopAllMotors";
	case MessageTag::ImageRequest:
		return "ImageRequest";
	case MessageTag::SetRobotImageSendMode:
		return "SetRobotImageSendMode";
	case MessageTag::SaveImages:
		return "SaveImages";
	case MessageTag::SaveRobotState:
		return "SaveRobotState";
	case MessageTag::EnableDisplay:
		return "EnableDisplay";
	case MessageTag::SetHeadlights:
		return "SetHeadlights";
	case MessageTag::GotoPose:
		return "GotoPose";
	case MessageTag::GotoObject:
		return "GotoObject";
	case MessageTag::PlaceObjectOnGround:
		return "PlaceObjectOnGround";
	case MessageTag::PlaceObjectOnGroundHere:
		return "PlaceObjectOnGroundHere";
	case MessageTag::ExecuteTestPlan:
		return "ExecuteTestPlan";
	case MessageTag::SelectNextObject:
		return "SelectNextObject";
	case MessageTag::PickAndPlaceObject:
		return "PickAndPlaceObject";
	case MessageTag::RollObject:
		return "RollObject";
	case MessageTag::TraverseObject:
		return "TraverseObject";
	case MessageTag::SetRobotCarryingObject:
		return "SetRobotCarryingObject";
	case MessageTag::ClearAllBlocks:
		return "ClearAllBlocks";
	case MessageTag::ClearAllObjects:
		return "ClearAllObjects";
	case MessageTag::SetObjectAdditionAndDeletion:
		return "SetObjectAdditionAndDeletion";
	case MessageTag::VisionWhileMoving:
		return "VisionWhileMoving";
	case MessageTag::ExecuteBehavior:
		return "ExecuteBehavior";
	case MessageTag::SetBehaviorState:
		return "SetBehaviorState";
	case MessageTag::AbortPath:
		return "AbortPath";
	case MessageTag::AbortAll:
		return "AbortAll";
	case MessageTag::CancelAction:
		return "CancelAction";
	case MessageTag::DrawPoseMarker:
		return "DrawPoseMarker";
	case MessageTag::ErasePoseMarker:
		return "ErasePoseMarker";
	case MessageTag::SetWheelControllerGains:
		return "SetWheelControllerGains";
	case MessageTag::SetHeadControllerGains:
		return "SetHeadControllerGains";
	case MessageTag::SetLiftControllerGains:
		return "SetLiftControllerGains";
	case MessageTag::SetSteeringControllerGains:
		return "SetSteeringControllerGains";
	case MessageTag::SelectNextSoundScheme:
		return "SelectNextSoundScheme";
	case MessageTag::StartTestMode:
		return "StartTestMode";
	case MessageTag::IMURequest:
		return "IMURequest";
	case MessageTag::PlayAnimation:
		return "PlayAnimation";
	case MessageTag::ReadAnimationFile:
		return "ReadAnimationFile";
	case MessageTag::StartFaceTracking:
		return "StartFaceTracking";
	case MessageTag::StopFaceTracking:
		return "StopFaceTracking";
	case MessageTag::StartLookingForMarkers:
		return "StartLookingForMarkers";
	case MessageTag::StopLookingForMarkers:
		return "StopLookingForMarkers";
	case MessageTag::SetVisionSystemParams:
		return "SetVisionSystemParams";
	case MessageTag::SetFaceDetectParams:
		return "SetFaceDetectParams";
	case MessageTag::SetActiveObjectLEDs:
		return "SetActiveObjectLEDs";
	case MessageTag::SetAllActiveObjectLEDs:
		return "SetAllActiveObjectLEDs";
	case MessageTag::SetBackpackLEDs:
		return "SetBackpackLEDs";
	case MessageTag::VisualizeQuad:
		return "VisualizeQuad";
	case MessageTag::EraseQuad:
		return "EraseQuad";
	default:
		return "INVALID";
	}
}

Message::Message(const CLAD::SafeMessageBuffer& buff) :_tag(Tag::INVALID)
{
	Unpack(buff);
}

Message::Message(const uint8_t* buffer, size_t length) :_tag(Tag::INVALID)
{
	CLAD::SafeMessageBuffer buff(const_cast<uint8_t*>(buffer), length);
	Unpack(buff);
}

const Anki::Cozmo::U2G::Ping& Message::Get_Ping() const
{
	assert(_tag == Tag::Ping);
	return _Ping;
}
void Message::Set_Ping(const Anki::Cozmo::U2G::Ping& new_Ping)
{
	if(this->_tag == Tag::Ping) {
		_Ping = new_Ping;
	}
	else {
		ClearCurrent();
		new(&_Ping) Anki::Cozmo::U2G::Ping{new_Ping};
		_tag = Tag::Ping;
	}
}
void Message::Set_Ping(Anki::Cozmo::U2G::Ping&& new_Ping)
{
	if(this->_tag == Tag::Ping) {
		_Ping = std::move(new_Ping);
	}
	else {
		ClearCurrent();
		new(&_Ping) Anki::Cozmo::U2G::Ping{std::move(new_Ping)};
		_tag = Tag::Ping;
	}
}


const Anki::Cozmo::U2G::ConnectToRobot& Message::Get_ConnectToRobot() const
{
	assert(_tag == Tag::ConnectToRobot);
	return _ConnectToRobot;
}
void Message::Set_ConnectToRobot(const Anki::Cozmo::U2G::ConnectToRobot& new_ConnectToRobot)
{
	if(this->_tag == Tag::ConnectToRobot) {
		_ConnectToRobot = new_ConnectToRobot;
	}
	else {
		ClearCurrent();
		new(&_ConnectToRobot) Anki::Cozmo::U2G::ConnectToRobot{new_ConnectToRobot};
		_tag = Tag::ConnectToRobot;
	}
}
void Message::Set_ConnectToRobot(Anki::Cozmo::U2G::ConnectToRobot&& new_ConnectToRobot)
{
	if(this->_tag == Tag::ConnectToRobot) {
		_ConnectToRobot = std::move(new_ConnectToRobot);
	}
	else {
		ClearCurrent();
		new(&_ConnectToRobot) Anki::Cozmo::U2G::ConnectToRobot{std::move(new_ConnectToRobot)};
		_tag = Tag::ConnectToRobot;
	}
}


const Anki::Cozmo::U2G::ConnectToUiDevice& Message::Get_ConnectToUiDevice() const
{
	assert(_tag == Tag::ConnectToUiDevice);
	return _ConnectToUiDevice;
}
void Message::Set_ConnectToUiDevice(const Anki::Cozmo::U2G::ConnectToUiDevice& new_ConnectToUiDevice)
{
	if(this->_tag == Tag::ConnectToUiDevice) {
		_ConnectToUiDevice = new_ConnectToUiDevice;
	}
	else {
		ClearCurrent();
		new(&_ConnectToUiDevice) Anki::Cozmo::U2G::ConnectToUiDevice{new_ConnectToUiDevice};
		_tag = Tag::ConnectToUiDevice;
	}
}
void Message::Set_ConnectToUiDevice(Anki::Cozmo::U2G::ConnectToUiDevice&& new_ConnectToUiDevice)
{
	if(this->_tag == Tag::ConnectToUiDevice) {
		_ConnectToUiDevice = std::move(new_ConnectToUiDevice);
	}
	else {
		ClearCurrent();
		new(&_ConnectToUiDevice) Anki::Cozmo::U2G::ConnectToUiDevice{std::move(new_ConnectToUiDevice)};
		_tag = Tag::ConnectToUiDevice;
	}
}


const Anki::Cozmo::U2G::DisconnectFromUiDevice& Message::Get_DisconnectFromUiDevice() const
{
	assert(_tag == Tag::DisconnectFromUiDevice);
	return _DisconnectFromUiDevice;
}
void Message::Set_DisconnectFromUiDevice(const Anki::Cozmo::U2G::DisconnectFromUiDevice& new_DisconnectFromUiDevice)
{
	if(this->_tag == Tag::DisconnectFromUiDevice) {
		_DisconnectFromUiDevice = new_DisconnectFromUiDevice;
	}
	else {
		ClearCurrent();
		new(&_DisconnectFromUiDevice) Anki::Cozmo::U2G::DisconnectFromUiDevice{new_DisconnectFromUiDevice};
		_tag = Tag::DisconnectFromUiDevice;
	}
}
void Message::Set_DisconnectFromUiDevice(Anki::Cozmo::U2G::DisconnectFromUiDevice&& new_DisconnectFromUiDevice)
{
	if(this->_tag == Tag::DisconnectFromUiDevice) {
		_DisconnectFromUiDevice = std::move(new_DisconnectFromUiDevice);
	}
	else {
		ClearCurrent();
		new(&_DisconnectFromUiDevice) Anki::Cozmo::U2G::DisconnectFromUiDevice{std::move(new_DisconnectFromUiDevice)};
		_tag = Tag::DisconnectFromUiDevice;
	}
}


const Anki::Cozmo::U2G::ForceAddRobot& Message::Get_ForceAddRobot() const
{
	assert(_tag == Tag::ForceAddRobot);
	return _ForceAddRobot;
}
void Message::Set_ForceAddRobot(const Anki::Cozmo::U2G::ForceAddRobot& new_ForceAddRobot)
{
	if(this->_tag == Tag::ForceAddRobot) {
		_ForceAddRobot = new_ForceAddRobot;
	}
	else {
		ClearCurrent();
		new(&_ForceAddRobot) Anki::Cozmo::U2G::ForceAddRobot{new_ForceAddRobot};
		_tag = Tag::ForceAddRobot;
	}
}
void Message::Set_ForceAddRobot(Anki::Cozmo::U2G::ForceAddRobot&& new_ForceAddRobot)
{
	if(this->_tag == Tag::ForceAddRobot) {
		_ForceAddRobot = std::move(new_ForceAddRobot);
	}
	else {
		ClearCurrent();
		new(&_ForceAddRobot) Anki::Cozmo::U2G::ForceAddRobot{std::move(new_ForceAddRobot)};
		_tag = Tag::ForceAddRobot;
	}
}


const Anki::Cozmo::U2G::StartEngine& Message::Get_StartEngine() const
{
	assert(_tag == Tag::StartEngine);
	return _StartEngine;
}
void Message::Set_StartEngine(const Anki::Cozmo::U2G::StartEngine& new_StartEngine)
{
	if(this->_tag == Tag::StartEngine) {
		_StartEngine = new_StartEngine;
	}
	else {
		ClearCurrent();
		new(&_StartEngine) Anki::Cozmo::U2G::StartEngine{new_StartEngine};
		_tag = Tag::StartEngine;
	}
}
void Message::Set_StartEngine(Anki::Cozmo::U2G::StartEngine&& new_StartEngine)
{
	if(this->_tag == Tag::StartEngine) {
		_StartEngine = std::move(new_StartEngine);
	}
	else {
		ClearCurrent();
		new(&_StartEngine) Anki::Cozmo::U2G::StartEngine{std::move(new_StartEngine)};
		_tag = Tag::StartEngine;
	}
}


const Anki::Cozmo::U2G::DriveWheels& Message::Get_DriveWheels() const
{
	assert(_tag == Tag::DriveWheels);
	return _DriveWheels;
}
void Message::Set_DriveWheels(const Anki::Cozmo::U2G::DriveWheels& new_DriveWheels)
{
	if(this->_tag == Tag::DriveWheels) {
		_DriveWheels = new_DriveWheels;
	}
	else {
		ClearCurrent();
		new(&_DriveWheels) Anki::Cozmo::U2G::DriveWheels{new_DriveWheels};
		_tag = Tag::DriveWheels;
	}
}
void Message::Set_DriveWheels(Anki::Cozmo::U2G::DriveWheels&& new_DriveWheels)
{
	if(this->_tag == Tag::DriveWheels) {
		_DriveWheels = std::move(new_DriveWheels);
	}
	else {
		ClearCurrent();
		new(&_DriveWheels) Anki::Cozmo::U2G::DriveWheels{std::move(new_DriveWheels)};
		_tag = Tag::DriveWheels;
	}
}


const Anki::Cozmo::U2G::TurnInPlace& Message::Get_TurnInPlace() const
{
	assert(_tag == Tag::TurnInPlace);
	return _TurnInPlace;
}
void Message::Set_TurnInPlace(const Anki::Cozmo::U2G::TurnInPlace& new_TurnInPlace)
{
	if(this->_tag == Tag::TurnInPlace) {
		_TurnInPlace = new_TurnInPlace;
	}
	else {
		ClearCurrent();
		new(&_TurnInPlace) Anki::Cozmo::U2G::TurnInPlace{new_TurnInPlace};
		_tag = Tag::TurnInPlace;
	}
}
void Message::Set_TurnInPlace(Anki::Cozmo::U2G::TurnInPlace&& new_TurnInPlace)
{
	if(this->_tag == Tag::TurnInPlace) {
		_TurnInPlace = std::move(new_TurnInPlace);
	}
	else {
		ClearCurrent();
		new(&_TurnInPlace) Anki::Cozmo::U2G::TurnInPlace{std::move(new_TurnInPlace)};
		_tag = Tag::TurnInPlace;
	}
}


const Anki::Cozmo::U2G::FaceObject& Message::Get_FaceObject() const
{
	assert(_tag == Tag::FaceObject);
	return _FaceObject;
}
void Message::Set_FaceObject(const Anki::Cozmo::U2G::FaceObject& new_FaceObject)
{
	if(this->_tag == Tag::FaceObject) {
		_FaceObject = new_FaceObject;
	}
	else {
		ClearCurrent();
		new(&_FaceObject) Anki::Cozmo::U2G::FaceObject{new_FaceObject};
		_tag = Tag::FaceObject;
	}
}
void Message::Set_FaceObject(Anki::Cozmo::U2G::FaceObject&& new_FaceObject)
{
	if(this->_tag == Tag::FaceObject) {
		_FaceObject = std::move(new_FaceObject);
	}
	else {
		ClearCurrent();
		new(&_FaceObject) Anki::Cozmo::U2G::FaceObject{std::move(new_FaceObject)};
		_tag = Tag::FaceObject;
	}
}


const Anki::Cozmo::U2G::MoveHead& Message::Get_MoveHead() const
{
	assert(_tag == Tag::MoveHead);
	return _MoveHead;
}
void Message::Set_MoveHead(const Anki::Cozmo::U2G::MoveHead& new_MoveHead)
{
	if(this->_tag == Tag::MoveHead) {
		_MoveHead = new_MoveHead;
	}
	else {
		ClearCurrent();
		new(&_MoveHead) Anki::Cozmo::U2G::MoveHead{new_MoveHead};
		_tag = Tag::MoveHead;
	}
}
void Message::Set_MoveHead(Anki::Cozmo::U2G::MoveHead&& new_MoveHead)
{
	if(this->_tag == Tag::MoveHead) {
		_MoveHead = std::move(new_MoveHead);
	}
	else {
		ClearCurrent();
		new(&_MoveHead) Anki::Cozmo::U2G::MoveHead{std::move(new_MoveHead)};
		_tag = Tag::MoveHead;
	}
}


const Anki::Cozmo::U2G::MoveLift& Message::Get_MoveLift() const
{
	assert(_tag == Tag::MoveLift);
	return _MoveLift;
}
void Message::Set_MoveLift(const Anki::Cozmo::U2G::MoveLift& new_MoveLift)
{
	if(this->_tag == Tag::MoveLift) {
		_MoveLift = new_MoveLift;
	}
	else {
		ClearCurrent();
		new(&_MoveLift) Anki::Cozmo::U2G::MoveLift{new_MoveLift};
		_tag = Tag::MoveLift;
	}
}
void Message::Set_MoveLift(Anki::Cozmo::U2G::MoveLift&& new_MoveLift)
{
	if(this->_tag == Tag::MoveLift) {
		_MoveLift = std::move(new_MoveLift);
	}
	else {
		ClearCurrent();
		new(&_MoveLift) Anki::Cozmo::U2G::MoveLift{std::move(new_MoveLift)};
		_tag = Tag::MoveLift;
	}
}


const Anki::Cozmo::U2G::SetLiftHeight& Message::Get_SetLiftHeight() const
{
	assert(_tag == Tag::SetLiftHeight);
	return _SetLiftHeight;
}
void Message::Set_SetLiftHeight(const Anki::Cozmo::U2G::SetLiftHeight& new_SetLiftHeight)
{
	if(this->_tag == Tag::SetLiftHeight) {
		_SetLiftHeight = new_SetLiftHeight;
	}
	else {
		ClearCurrent();
		new(&_SetLiftHeight) Anki::Cozmo::U2G::SetLiftHeight{new_SetLiftHeight};
		_tag = Tag::SetLiftHeight;
	}
}
void Message::Set_SetLiftHeight(Anki::Cozmo::U2G::SetLiftHeight&& new_SetLiftHeight)
{
	if(this->_tag == Tag::SetLiftHeight) {
		_SetLiftHeight = std::move(new_SetLiftHeight);
	}
	else {
		ClearCurrent();
		new(&_SetLiftHeight) Anki::Cozmo::U2G::SetLiftHeight{std::move(new_SetLiftHeight)};
		_tag = Tag::SetLiftHeight;
	}
}


const Anki::Cozmo::U2G::SetHeadAngle& Message::Get_SetHeadAngle() const
{
	assert(_tag == Tag::SetHeadAngle);
	return _SetHeadAngle;
}
void Message::Set_SetHeadAngle(const Anki::Cozmo::U2G::SetHeadAngle& new_SetHeadAngle)
{
	if(this->_tag == Tag::SetHeadAngle) {
		_SetHeadAngle = new_SetHeadAngle;
	}
	else {
		ClearCurrent();
		new(&_SetHeadAngle) Anki::Cozmo::U2G::SetHeadAngle{new_SetHeadAngle};
		_tag = Tag::SetHeadAngle;
	}
}
void Message::Set_SetHeadAngle(Anki::Cozmo::U2G::SetHeadAngle&& new_SetHeadAngle)
{
	if(this->_tag == Tag::SetHeadAngle) {
		_SetHeadAngle = std::move(new_SetHeadAngle);
	}
	else {
		ClearCurrent();
		new(&_SetHeadAngle) Anki::Cozmo::U2G::SetHeadAngle{std::move(new_SetHeadAngle)};
		_tag = Tag::SetHeadAngle;
	}
}


const Anki::Cozmo::U2G::TrackHeadToObject& Message::Get_TrackHeadToObject() const
{
	assert(_tag == Tag::TrackHeadToObject);
	return _TrackHeadToObject;
}
void Message::Set_TrackHeadToObject(const Anki::Cozmo::U2G::TrackHeadToObject& new_TrackHeadToObject)
{
	if(this->_tag == Tag::TrackHeadToObject) {
		_TrackHeadToObject = new_TrackHeadToObject;
	}
	else {
		ClearCurrent();
		new(&_TrackHeadToObject) Anki::Cozmo::U2G::TrackHeadToObject{new_TrackHeadToObject};
		_tag = Tag::TrackHeadToObject;
	}
}
void Message::Set_TrackHeadToObject(Anki::Cozmo::U2G::TrackHeadToObject&& new_TrackHeadToObject)
{
	if(this->_tag == Tag::TrackHeadToObject) {
		_TrackHeadToObject = std::move(new_TrackHeadToObject);
	}
	else {
		ClearCurrent();
		new(&_TrackHeadToObject) Anki::Cozmo::U2G::TrackHeadToObject{std::move(new_TrackHeadToObject)};
		_tag = Tag::TrackHeadToObject;
	}
}


const Anki::Cozmo::U2G::StopAllMotors& Message::Get_StopAllMotors() const
{
	assert(_tag == Tag::StopAllMotors);
	return _StopAllMotors;
}
void Message::Set_StopAllMotors(const Anki::Cozmo::U2G::StopAllMotors& new_StopAllMotors)
{
	if(this->_tag == Tag::StopAllMotors) {
		_StopAllMotors = new_StopAllMotors;
	}
	else {
		ClearCurrent();
		new(&_StopAllMotors) Anki::Cozmo::U2G::StopAllMotors{new_StopAllMotors};
		_tag = Tag::StopAllMotors;
	}
}
void Message::Set_StopAllMotors(Anki::Cozmo::U2G::StopAllMotors&& new_StopAllMotors)
{
	if(this->_tag == Tag::StopAllMotors) {
		_StopAllMotors = std::move(new_StopAllMotors);
	}
	else {
		ClearCurrent();
		new(&_StopAllMotors) Anki::Cozmo::U2G::StopAllMotors{std::move(new_StopAllMotors)};
		_tag = Tag::StopAllMotors;
	}
}


const Anki::Cozmo::U2G::ImageRequest& Message::Get_ImageRequest() const
{
	assert(_tag == Tag::ImageRequest);
	return _ImageRequest;
}
void Message::Set_ImageRequest(const Anki::Cozmo::U2G::ImageRequest& new_ImageRequest)
{
	if(this->_tag == Tag::ImageRequest) {
		_ImageRequest = new_ImageRequest;
	}
	else {
		ClearCurrent();
		new(&_ImageRequest) Anki::Cozmo::U2G::ImageRequest{new_ImageRequest};
		_tag = Tag::ImageRequest;
	}
}
void Message::Set_ImageRequest(Anki::Cozmo::U2G::ImageRequest&& new_ImageRequest)
{
	if(this->_tag == Tag::ImageRequest) {
		_ImageRequest = std::move(new_ImageRequest);
	}
	else {
		ClearCurrent();
		new(&_ImageRequest) Anki::Cozmo::U2G::ImageRequest{std::move(new_ImageRequest)};
		_tag = Tag::ImageRequest;
	}
}


const Anki::Cozmo::U2G::SetRobotImageSendMode& Message::Get_SetRobotImageSendMode() const
{
	assert(_tag == Tag::SetRobotImageSendMode);
	return _SetRobotImageSendMode;
}
void Message::Set_SetRobotImageSendMode(const Anki::Cozmo::U2G::SetRobotImageSendMode& new_SetRobotImageSendMode)
{
	if(this->_tag == Tag::SetRobotImageSendMode) {
		_SetRobotImageSendMode = new_SetRobotImageSendMode;
	}
	else {
		ClearCurrent();
		new(&_SetRobotImageSendMode) Anki::Cozmo::U2G::SetRobotImageSendMode{new_SetRobotImageSendMode};
		_tag = Tag::SetRobotImageSendMode;
	}
}
void Message::Set_SetRobotImageSendMode(Anki::Cozmo::U2G::SetRobotImageSendMode&& new_SetRobotImageSendMode)
{
	if(this->_tag == Tag::SetRobotImageSendMode) {
		_SetRobotImageSendMode = std::move(new_SetRobotImageSendMode);
	}
	else {
		ClearCurrent();
		new(&_SetRobotImageSendMode) Anki::Cozmo::U2G::SetRobotImageSendMode{std::move(new_SetRobotImageSendMode)};
		_tag = Tag::SetRobotImageSendMode;
	}
}


const Anki::Cozmo::U2G::SaveImages& Message::Get_SaveImages() const
{
	assert(_tag == Tag::SaveImages);
	return _SaveImages;
}
void Message::Set_SaveImages(const Anki::Cozmo::U2G::SaveImages& new_SaveImages)
{
	if(this->_tag == Tag::SaveImages) {
		_SaveImages = new_SaveImages;
	}
	else {
		ClearCurrent();
		new(&_SaveImages) Anki::Cozmo::U2G::SaveImages{new_SaveImages};
		_tag = Tag::SaveImages;
	}
}
void Message::Set_SaveImages(Anki::Cozmo::U2G::SaveImages&& new_SaveImages)
{
	if(this->_tag == Tag::SaveImages) {
		_SaveImages = std::move(new_SaveImages);
	}
	else {
		ClearCurrent();
		new(&_SaveImages) Anki::Cozmo::U2G::SaveImages{std::move(new_SaveImages)};
		_tag = Tag::SaveImages;
	}
}


const Anki::Cozmo::U2G::SaveRobotState& Message::Get_SaveRobotState() const
{
	assert(_tag == Tag::SaveRobotState);
	return _SaveRobotState;
}
void Message::Set_SaveRobotState(const Anki::Cozmo::U2G::SaveRobotState& new_SaveRobotState)
{
	if(this->_tag == Tag::SaveRobotState) {
		_SaveRobotState = new_SaveRobotState;
	}
	else {
		ClearCurrent();
		new(&_SaveRobotState) Anki::Cozmo::U2G::SaveRobotState{new_SaveRobotState};
		_tag = Tag::SaveRobotState;
	}
}
void Message::Set_SaveRobotState(Anki::Cozmo::U2G::SaveRobotState&& new_SaveRobotState)
{
	if(this->_tag == Tag::SaveRobotState) {
		_SaveRobotState = std::move(new_SaveRobotState);
	}
	else {
		ClearCurrent();
		new(&_SaveRobotState) Anki::Cozmo::U2G::SaveRobotState{std::move(new_SaveRobotState)};
		_tag = Tag::SaveRobotState;
	}
}


const Anki::Cozmo::U2G::EnableDisplay& Message::Get_EnableDisplay() const
{
	assert(_tag == Tag::EnableDisplay);
	return _EnableDisplay;
}
void Message::Set_EnableDisplay(const Anki::Cozmo::U2G::EnableDisplay& new_EnableDisplay)
{
	if(this->_tag == Tag::EnableDisplay) {
		_EnableDisplay = new_EnableDisplay;
	}
	else {
		ClearCurrent();
		new(&_EnableDisplay) Anki::Cozmo::U2G::EnableDisplay{new_EnableDisplay};
		_tag = Tag::EnableDisplay;
	}
}
void Message::Set_EnableDisplay(Anki::Cozmo::U2G::EnableDisplay&& new_EnableDisplay)
{
	if(this->_tag == Tag::EnableDisplay) {
		_EnableDisplay = std::move(new_EnableDisplay);
	}
	else {
		ClearCurrent();
		new(&_EnableDisplay) Anki::Cozmo::U2G::EnableDisplay{std::move(new_EnableDisplay)};
		_tag = Tag::EnableDisplay;
	}
}


const Anki::Cozmo::U2G::SetHeadlights& Message::Get_SetHeadlights() const
{
	assert(_tag == Tag::SetHeadlights);
	return _SetHeadlights;
}
void Message::Set_SetHeadlights(const Anki::Cozmo::U2G::SetHeadlights& new_SetHeadlights)
{
	if(this->_tag == Tag::SetHeadlights) {
		_SetHeadlights = new_SetHeadlights;
	}
	else {
		ClearCurrent();
		new(&_SetHeadlights) Anki::Cozmo::U2G::SetHeadlights{new_SetHeadlights};
		_tag = Tag::SetHeadlights;
	}
}
void Message::Set_SetHeadlights(Anki::Cozmo::U2G::SetHeadlights&& new_SetHeadlights)
{
	if(this->_tag == Tag::SetHeadlights) {
		_SetHeadlights = std::move(new_SetHeadlights);
	}
	else {
		ClearCurrent();
		new(&_SetHeadlights) Anki::Cozmo::U2G::SetHeadlights{std::move(new_SetHeadlights)};
		_tag = Tag::SetHeadlights;
	}
}


const Anki::Cozmo::U2G::GotoPose& Message::Get_GotoPose() const
{
	assert(_tag == Tag::GotoPose);
	return _GotoPose;
}
void Message::Set_GotoPose(const Anki::Cozmo::U2G::GotoPose& new_GotoPose)
{
	if(this->_tag == Tag::GotoPose) {
		_GotoPose = new_GotoPose;
	}
	else {
		ClearCurrent();
		new(&_GotoPose) Anki::Cozmo::U2G::GotoPose{new_GotoPose};
		_tag = Tag::GotoPose;
	}
}
void Message::Set_GotoPose(Anki::Cozmo::U2G::GotoPose&& new_GotoPose)
{
	if(this->_tag == Tag::GotoPose) {
		_GotoPose = std::move(new_GotoPose);
	}
	else {
		ClearCurrent();
		new(&_GotoPose) Anki::Cozmo::U2G::GotoPose{std::move(new_GotoPose)};
		_tag = Tag::GotoPose;
	}
}


const Anki::Cozmo::U2G::GotoObject& Message::Get_GotoObject() const
{
	assert(_tag == Tag::GotoObject);
	return _GotoObject;
}
void Message::Set_GotoObject(const Anki::Cozmo::U2G::GotoObject& new_GotoObject)
{
	if(this->_tag == Tag::GotoObject) {
		_GotoObject = new_GotoObject;
	}
	else {
		ClearCurrent();
		new(&_GotoObject) Anki::Cozmo::U2G::GotoObject{new_GotoObject};
		_tag = Tag::GotoObject;
	}
}
void Message::Set_GotoObject(Anki::Cozmo::U2G::GotoObject&& new_GotoObject)
{
	if(this->_tag == Tag::GotoObject) {
		_GotoObject = std::move(new_GotoObject);
	}
	else {
		ClearCurrent();
		new(&_GotoObject) Anki::Cozmo::U2G::GotoObject{std::move(new_GotoObject)};
		_tag = Tag::GotoObject;
	}
}


const Anki::Cozmo::U2G::PlaceObjectOnGround& Message::Get_PlaceObjectOnGround() const
{
	assert(_tag == Tag::PlaceObjectOnGround);
	return _PlaceObjectOnGround;
}
void Message::Set_PlaceObjectOnGround(const Anki::Cozmo::U2G::PlaceObjectOnGround& new_PlaceObjectOnGround)
{
	if(this->_tag == Tag::PlaceObjectOnGround) {
		_PlaceObjectOnGround = new_PlaceObjectOnGround;
	}
	else {
		ClearCurrent();
		new(&_PlaceObjectOnGround) Anki::Cozmo::U2G::PlaceObjectOnGround{new_PlaceObjectOnGround};
		_tag = Tag::PlaceObjectOnGround;
	}
}
void Message::Set_PlaceObjectOnGround(Anki::Cozmo::U2G::PlaceObjectOnGround&& new_PlaceObjectOnGround)
{
	if(this->_tag == Tag::PlaceObjectOnGround) {
		_PlaceObjectOnGround = std::move(new_PlaceObjectOnGround);
	}
	else {
		ClearCurrent();
		new(&_PlaceObjectOnGround) Anki::Cozmo::U2G::PlaceObjectOnGround{std::move(new_PlaceObjectOnGround)};
		_tag = Tag::PlaceObjectOnGround;
	}
}


const Anki::Cozmo::U2G::PlaceObjectOnGroundHere& Message::Get_PlaceObjectOnGroundHere() const
{
	assert(_tag == Tag::PlaceObjectOnGroundHere);
	return _PlaceObjectOnGroundHere;
}
void Message::Set_PlaceObjectOnGroundHere(const Anki::Cozmo::U2G::PlaceObjectOnGroundHere& new_PlaceObjectOnGroundHere)
{
	if(this->_tag == Tag::PlaceObjectOnGroundHere) {
		_PlaceObjectOnGroundHere = new_PlaceObjectOnGroundHere;
	}
	else {
		ClearCurrent();
		new(&_PlaceObjectOnGroundHere) Anki::Cozmo::U2G::PlaceObjectOnGroundHere{new_PlaceObjectOnGroundHere};
		_tag = Tag::PlaceObjectOnGroundHere;
	}
}
void Message::Set_PlaceObjectOnGroundHere(Anki::Cozmo::U2G::PlaceObjectOnGroundHere&& new_PlaceObjectOnGroundHere)
{
	if(this->_tag == Tag::PlaceObjectOnGroundHere) {
		_PlaceObjectOnGroundHere = std::move(new_PlaceObjectOnGroundHere);
	}
	else {
		ClearCurrent();
		new(&_PlaceObjectOnGroundHere) Anki::Cozmo::U2G::PlaceObjectOnGroundHere{std::move(new_PlaceObjectOnGroundHere)};
		_tag = Tag::PlaceObjectOnGroundHere;
	}
}


const Anki::Cozmo::U2G::ExecuteTestPlan& Message::Get_ExecuteTestPlan() const
{
	assert(_tag == Tag::ExecuteTestPlan);
	return _ExecuteTestPlan;
}
void Message::Set_ExecuteTestPlan(const Anki::Cozmo::U2G::ExecuteTestPlan& new_ExecuteTestPlan)
{
	if(this->_tag == Tag::ExecuteTestPlan) {
		_ExecuteTestPlan = new_ExecuteTestPlan;
	}
	else {
		ClearCurrent();
		new(&_ExecuteTestPlan) Anki::Cozmo::U2G::ExecuteTestPlan{new_ExecuteTestPlan};
		_tag = Tag::ExecuteTestPlan;
	}
}
void Message::Set_ExecuteTestPlan(Anki::Cozmo::U2G::ExecuteTestPlan&& new_ExecuteTestPlan)
{
	if(this->_tag == Tag::ExecuteTestPlan) {
		_ExecuteTestPlan = std::move(new_ExecuteTestPlan);
	}
	else {
		ClearCurrent();
		new(&_ExecuteTestPlan) Anki::Cozmo::U2G::ExecuteTestPlan{std::move(new_ExecuteTestPlan)};
		_tag = Tag::ExecuteTestPlan;
	}
}


const Anki::Cozmo::U2G::SelectNextObject& Message::Get_SelectNextObject() const
{
	assert(_tag == Tag::SelectNextObject);
	return _SelectNextObject;
}
void Message::Set_SelectNextObject(const Anki::Cozmo::U2G::SelectNextObject& new_SelectNextObject)
{
	if(this->_tag == Tag::SelectNextObject) {
		_SelectNextObject = new_SelectNextObject;
	}
	else {
		ClearCurrent();
		new(&_SelectNextObject) Anki::Cozmo::U2G::SelectNextObject{new_SelectNextObject};
		_tag = Tag::SelectNextObject;
	}
}
void Message::Set_SelectNextObject(Anki::Cozmo::U2G::SelectNextObject&& new_SelectNextObject)
{
	if(this->_tag == Tag::SelectNextObject) {
		_SelectNextObject = std::move(new_SelectNextObject);
	}
	else {
		ClearCurrent();
		new(&_SelectNextObject) Anki::Cozmo::U2G::SelectNextObject{std::move(new_SelectNextObject)};
		_tag = Tag::SelectNextObject;
	}
}


const Anki::Cozmo::U2G::PickAndPlaceObject& Message::Get_PickAndPlaceObject() const
{
	assert(_tag == Tag::PickAndPlaceObject);
	return _PickAndPlaceObject;
}
void Message::Set_PickAndPlaceObject(const Anki::Cozmo::U2G::PickAndPlaceObject& new_PickAndPlaceObject)
{
	if(this->_tag == Tag::PickAndPlaceObject) {
		_PickAndPlaceObject = new_PickAndPlaceObject;
	}
	else {
		ClearCurrent();
		new(&_PickAndPlaceObject) Anki::Cozmo::U2G::PickAndPlaceObject{new_PickAndPlaceObject};
		_tag = Tag::PickAndPlaceObject;
	}
}
void Message::Set_PickAndPlaceObject(Anki::Cozmo::U2G::PickAndPlaceObject&& new_PickAndPlaceObject)
{
	if(this->_tag == Tag::PickAndPlaceObject) {
		_PickAndPlaceObject = std::move(new_PickAndPlaceObject);
	}
	else {
		ClearCurrent();
		new(&_PickAndPlaceObject) Anki::Cozmo::U2G::PickAndPlaceObject{std::move(new_PickAndPlaceObject)};
		_tag = Tag::PickAndPlaceObject;
	}
}


const Anki::Cozmo::U2G::RollObject& Message::Get_RollObject() const
{
	assert(_tag == Tag::RollObject);
	return _RollObject;
}
void Message::Set_RollObject(const Anki::Cozmo::U2G::RollObject& new_RollObject)
{
	if(this->_tag == Tag::RollObject) {
		_RollObject = new_RollObject;
	}
	else {
		ClearCurrent();
		new(&_RollObject) Anki::Cozmo::U2G::RollObject{new_RollObject};
		_tag = Tag::RollObject;
	}
}
void Message::Set_RollObject(Anki::Cozmo::U2G::RollObject&& new_RollObject)
{
	if(this->_tag == Tag::RollObject) {
		_RollObject = std::move(new_RollObject);
	}
	else {
		ClearCurrent();
		new(&_RollObject) Anki::Cozmo::U2G::RollObject{std::move(new_RollObject)};
		_tag = Tag::RollObject;
	}
}


const Anki::Cozmo::U2G::TraverseObject& Message::Get_TraverseObject() const
{
	assert(_tag == Tag::TraverseObject);
	return _TraverseObject;
}
void Message::Set_TraverseObject(const Anki::Cozmo::U2G::TraverseObject& new_TraverseObject)
{
	if(this->_tag == Tag::TraverseObject) {
		_TraverseObject = new_TraverseObject;
	}
	else {
		ClearCurrent();
		new(&_TraverseObject) Anki::Cozmo::U2G::TraverseObject{new_TraverseObject};
		_tag = Tag::TraverseObject;
	}
}
void Message::Set_TraverseObject(Anki::Cozmo::U2G::TraverseObject&& new_TraverseObject)
{
	if(this->_tag == Tag::TraverseObject) {
		_TraverseObject = std::move(new_TraverseObject);
	}
	else {
		ClearCurrent();
		new(&_TraverseObject) Anki::Cozmo::U2G::TraverseObject{std::move(new_TraverseObject)};
		_tag = Tag::TraverseObject;
	}
}


const Anki::Cozmo::U2G::SetRobotCarryingObject& Message::Get_SetRobotCarryingObject() const
{
	assert(_tag == Tag::SetRobotCarryingObject);
	return _SetRobotCarryingObject;
}
void Message::Set_SetRobotCarryingObject(const Anki::Cozmo::U2G::SetRobotCarryingObject& new_SetRobotCarryingObject)
{
	if(this->_tag == Tag::SetRobotCarryingObject) {
		_SetRobotCarryingObject = new_SetRobotCarryingObject;
	}
	else {
		ClearCurrent();
		new(&_SetRobotCarryingObject) Anki::Cozmo::U2G::SetRobotCarryingObject{new_SetRobotCarryingObject};
		_tag = Tag::SetRobotCarryingObject;
	}
}
void Message::Set_SetRobotCarryingObject(Anki::Cozmo::U2G::SetRobotCarryingObject&& new_SetRobotCarryingObject)
{
	if(this->_tag == Tag::SetRobotCarryingObject) {
		_SetRobotCarryingObject = std::move(new_SetRobotCarryingObject);
	}
	else {
		ClearCurrent();
		new(&_SetRobotCarryingObject) Anki::Cozmo::U2G::SetRobotCarryingObject{std::move(new_SetRobotCarryingObject)};
		_tag = Tag::SetRobotCarryingObject;
	}
}


const Anki::Cozmo::U2G::ClearAllBlocks& Message::Get_ClearAllBlocks() const
{
	assert(_tag == Tag::ClearAllBlocks);
	return _ClearAllBlocks;
}
void Message::Set_ClearAllBlocks(const Anki::Cozmo::U2G::ClearAllBlocks& new_ClearAllBlocks)
{
	if(this->_tag == Tag::ClearAllBlocks) {
		_ClearAllBlocks = new_ClearAllBlocks;
	}
	else {
		ClearCurrent();
		new(&_ClearAllBlocks) Anki::Cozmo::U2G::ClearAllBlocks{new_ClearAllBlocks};
		_tag = Tag::ClearAllBlocks;
	}
}
void Message::Set_ClearAllBlocks(Anki::Cozmo::U2G::ClearAllBlocks&& new_ClearAllBlocks)
{
	if(this->_tag == Tag::ClearAllBlocks) {
		_ClearAllBlocks = std::move(new_ClearAllBlocks);
	}
	else {
		ClearCurrent();
		new(&_ClearAllBlocks) Anki::Cozmo::U2G::ClearAllBlocks{std::move(new_ClearAllBlocks)};
		_tag = Tag::ClearAllBlocks;
	}
}


const Anki::Cozmo::U2G::ClearAllObjects& Message::Get_ClearAllObjects() const
{
	assert(_tag == Tag::ClearAllObjects);
	return _ClearAllObjects;
}
void Message::Set_ClearAllObjects(const Anki::Cozmo::U2G::ClearAllObjects& new_ClearAllObjects)
{
	if(this->_tag == Tag::ClearAllObjects) {
		_ClearAllObjects = new_ClearAllObjects;
	}
	else {
		ClearCurrent();
		new(&_ClearAllObjects) Anki::Cozmo::U2G::ClearAllObjects{new_ClearAllObjects};
		_tag = Tag::ClearAllObjects;
	}
}
void Message::Set_ClearAllObjects(Anki::Cozmo::U2G::ClearAllObjects&& new_ClearAllObjects)
{
	if(this->_tag == Tag::ClearAllObjects) {
		_ClearAllObjects = std::move(new_ClearAllObjects);
	}
	else {
		ClearCurrent();
		new(&_ClearAllObjects) Anki::Cozmo::U2G::ClearAllObjects{std::move(new_ClearAllObjects)};
		_tag = Tag::ClearAllObjects;
	}
}


const Anki::Cozmo::U2G::SetObjectAdditionAndDeletion& Message::Get_SetObjectAdditionAndDeletion() const
{
	assert(_tag == Tag::SetObjectAdditionAndDeletion);
	return _SetObjectAdditionAndDeletion;
}
void Message::Set_SetObjectAdditionAndDeletion(const Anki::Cozmo::U2G::SetObjectAdditionAndDeletion& new_SetObjectAdditionAndDeletion)
{
	if(this->_tag == Tag::SetObjectAdditionAndDeletion) {
		_SetObjectAdditionAndDeletion = new_SetObjectAdditionAndDeletion;
	}
	else {
		ClearCurrent();
		new(&_SetObjectAdditionAndDeletion) Anki::Cozmo::U2G::SetObjectAdditionAndDeletion{new_SetObjectAdditionAndDeletion};
		_tag = Tag::SetObjectAdditionAndDeletion;
	}
}
void Message::Set_SetObjectAdditionAndDeletion(Anki::Cozmo::U2G::SetObjectAdditionAndDeletion&& new_SetObjectAdditionAndDeletion)
{
	if(this->_tag == Tag::SetObjectAdditionAndDeletion) {
		_SetObjectAdditionAndDeletion = std::move(new_SetObjectAdditionAndDeletion);
	}
	else {
		ClearCurrent();
		new(&_SetObjectAdditionAndDeletion) Anki::Cozmo::U2G::SetObjectAdditionAndDeletion{std::move(new_SetObjectAdditionAndDeletion)};
		_tag = Tag::SetObjectAdditionAndDeletion;
	}
}


const Anki::Cozmo::U2G::VisionWhileMoving& Message::Get_VisionWhileMoving() const
{
	assert(_tag == Tag::VisionWhileMoving);
	return _VisionWhileMoving;
}
void Message::Set_VisionWhileMoving(const Anki::Cozmo::U2G::VisionWhileMoving& new_VisionWhileMoving)
{
	if(this->_tag == Tag::VisionWhileMoving) {
		_VisionWhileMoving = new_VisionWhileMoving;
	}
	else {
		ClearCurrent();
		new(&_VisionWhileMoving) Anki::Cozmo::U2G::VisionWhileMoving{new_VisionWhileMoving};
		_tag = Tag::VisionWhileMoving;
	}
}
void Message::Set_VisionWhileMoving(Anki::Cozmo::U2G::VisionWhileMoving&& new_VisionWhileMoving)
{
	if(this->_tag == Tag::VisionWhileMoving) {
		_VisionWhileMoving = std::move(new_VisionWhileMoving);
	}
	else {
		ClearCurrent();
		new(&_VisionWhileMoving) Anki::Cozmo::U2G::VisionWhileMoving{std::move(new_VisionWhileMoving)};
		_tag = Tag::VisionWhileMoving;
	}
}


const Anki::Cozmo::U2G::ExecuteBehavior& Message::Get_ExecuteBehavior() const
{
	assert(_tag == Tag::ExecuteBehavior);
	return _ExecuteBehavior;
}
void Message::Set_ExecuteBehavior(const Anki::Cozmo::U2G::ExecuteBehavior& new_ExecuteBehavior)
{
	if(this->_tag == Tag::ExecuteBehavior) {
		_ExecuteBehavior = new_ExecuteBehavior;
	}
	else {
		ClearCurrent();
		new(&_ExecuteBehavior) Anki::Cozmo::U2G::ExecuteBehavior{new_ExecuteBehavior};
		_tag = Tag::ExecuteBehavior;
	}
}
void Message::Set_ExecuteBehavior(Anki::Cozmo::U2G::ExecuteBehavior&& new_ExecuteBehavior)
{
	if(this->_tag == Tag::ExecuteBehavior) {
		_ExecuteBehavior = std::move(new_ExecuteBehavior);
	}
	else {
		ClearCurrent();
		new(&_ExecuteBehavior) Anki::Cozmo::U2G::ExecuteBehavior{std::move(new_ExecuteBehavior)};
		_tag = Tag::ExecuteBehavior;
	}
}


const Anki::Cozmo::U2G::SetBehaviorState& Message::Get_SetBehaviorState() const
{
	assert(_tag == Tag::SetBehaviorState);
	return _SetBehaviorState;
}
void Message::Set_SetBehaviorState(const Anki::Cozmo::U2G::SetBehaviorState& new_SetBehaviorState)
{
	if(this->_tag == Tag::SetBehaviorState) {
		_SetBehaviorState = new_SetBehaviorState;
	}
	else {
		ClearCurrent();
		new(&_SetBehaviorState) Anki::Cozmo::U2G::SetBehaviorState{new_SetBehaviorState};
		_tag = Tag::SetBehaviorState;
	}
}
void Message::Set_SetBehaviorState(Anki::Cozmo::U2G::SetBehaviorState&& new_SetBehaviorState)
{
	if(this->_tag == Tag::SetBehaviorState) {
		_SetBehaviorState = std::move(new_SetBehaviorState);
	}
	else {
		ClearCurrent();
		new(&_SetBehaviorState) Anki::Cozmo::U2G::SetBehaviorState{std::move(new_SetBehaviorState)};
		_tag = Tag::SetBehaviorState;
	}
}


const Anki::Cozmo::U2G::AbortPath& Message::Get_AbortPath() const
{
	assert(_tag == Tag::AbortPath);
	return _AbortPath;
}
void Message::Set_AbortPath(const Anki::Cozmo::U2G::AbortPath& new_AbortPath)
{
	if(this->_tag == Tag::AbortPath) {
		_AbortPath = new_AbortPath;
	}
	else {
		ClearCurrent();
		new(&_AbortPath) Anki::Cozmo::U2G::AbortPath{new_AbortPath};
		_tag = Tag::AbortPath;
	}
}
void Message::Set_AbortPath(Anki::Cozmo::U2G::AbortPath&& new_AbortPath)
{
	if(this->_tag == Tag::AbortPath) {
		_AbortPath = std::move(new_AbortPath);
	}
	else {
		ClearCurrent();
		new(&_AbortPath) Anki::Cozmo::U2G::AbortPath{std::move(new_AbortPath)};
		_tag = Tag::AbortPath;
	}
}


const Anki::Cozmo::U2G::AbortAll& Message::Get_AbortAll() const
{
	assert(_tag == Tag::AbortAll);
	return _AbortAll;
}
void Message::Set_AbortAll(const Anki::Cozmo::U2G::AbortAll& new_AbortAll)
{
	if(this->_tag == Tag::AbortAll) {
		_AbortAll = new_AbortAll;
	}
	else {
		ClearCurrent();
		new(&_AbortAll) Anki::Cozmo::U2G::AbortAll{new_AbortAll};
		_tag = Tag::AbortAll;
	}
}
void Message::Set_AbortAll(Anki::Cozmo::U2G::AbortAll&& new_AbortAll)
{
	if(this->_tag == Tag::AbortAll) {
		_AbortAll = std::move(new_AbortAll);
	}
	else {
		ClearCurrent();
		new(&_AbortAll) Anki::Cozmo::U2G::AbortAll{std::move(new_AbortAll)};
		_tag = Tag::AbortAll;
	}
}


const Anki::Cozmo::U2G::CancelAction& Message::Get_CancelAction() const
{
	assert(_tag == Tag::CancelAction);
	return _CancelAction;
}
void Message::Set_CancelAction(const Anki::Cozmo::U2G::CancelAction& new_CancelAction)
{
	if(this->_tag == Tag::CancelAction) {
		_CancelAction = new_CancelAction;
	}
	else {
		ClearCurrent();
		new(&_CancelAction) Anki::Cozmo::U2G::CancelAction{new_CancelAction};
		_tag = Tag::CancelAction;
	}
}
void Message::Set_CancelAction(Anki::Cozmo::U2G::CancelAction&& new_CancelAction)
{
	if(this->_tag == Tag::CancelAction) {
		_CancelAction = std::move(new_CancelAction);
	}
	else {
		ClearCurrent();
		new(&_CancelAction) Anki::Cozmo::U2G::CancelAction{std::move(new_CancelAction)};
		_tag = Tag::CancelAction;
	}
}


const Anki::Cozmo::U2G::DrawPoseMarker& Message::Get_DrawPoseMarker() const
{
	assert(_tag == Tag::DrawPoseMarker);
	return _DrawPoseMarker;
}
void Message::Set_DrawPoseMarker(const Anki::Cozmo::U2G::DrawPoseMarker& new_DrawPoseMarker)
{
	if(this->_tag == Tag::DrawPoseMarker) {
		_DrawPoseMarker = new_DrawPoseMarker;
	}
	else {
		ClearCurrent();
		new(&_DrawPoseMarker) Anki::Cozmo::U2G::DrawPoseMarker{new_DrawPoseMarker};
		_tag = Tag::DrawPoseMarker;
	}
}
void Message::Set_DrawPoseMarker(Anki::Cozmo::U2G::DrawPoseMarker&& new_DrawPoseMarker)
{
	if(this->_tag == Tag::DrawPoseMarker) {
		_DrawPoseMarker = std::move(new_DrawPoseMarker);
	}
	else {
		ClearCurrent();
		new(&_DrawPoseMarker) Anki::Cozmo::U2G::DrawPoseMarker{std::move(new_DrawPoseMarker)};
		_tag = Tag::DrawPoseMarker;
	}
}


const Anki::Cozmo::U2G::ErasePoseMarker& Message::Get_ErasePoseMarker() const
{
	assert(_tag == Tag::ErasePoseMarker);
	return _ErasePoseMarker;
}
void Message::Set_ErasePoseMarker(const Anki::Cozmo::U2G::ErasePoseMarker& new_ErasePoseMarker)
{
	if(this->_tag == Tag::ErasePoseMarker) {
		_ErasePoseMarker = new_ErasePoseMarker;
	}
	else {
		ClearCurrent();
		new(&_ErasePoseMarker) Anki::Cozmo::U2G::ErasePoseMarker{new_ErasePoseMarker};
		_tag = Tag::ErasePoseMarker;
	}
}
void Message::Set_ErasePoseMarker(Anki::Cozmo::U2G::ErasePoseMarker&& new_ErasePoseMarker)
{
	if(this->_tag == Tag::ErasePoseMarker) {
		_ErasePoseMarker = std::move(new_ErasePoseMarker);
	}
	else {
		ClearCurrent();
		new(&_ErasePoseMarker) Anki::Cozmo::U2G::ErasePoseMarker{std::move(new_ErasePoseMarker)};
		_tag = Tag::ErasePoseMarker;
	}
}


const Anki::Cozmo::U2G::SetWheelControllerGains& Message::Get_SetWheelControllerGains() const
{
	assert(_tag == Tag::SetWheelControllerGains);
	return _SetWheelControllerGains;
}
void Message::Set_SetWheelControllerGains(const Anki::Cozmo::U2G::SetWheelControllerGains& new_SetWheelControllerGains)
{
	if(this->_tag == Tag::SetWheelControllerGains) {
		_SetWheelControllerGains = new_SetWheelControllerGains;
	}
	else {
		ClearCurrent();
		new(&_SetWheelControllerGains) Anki::Cozmo::U2G::SetWheelControllerGains{new_SetWheelControllerGains};
		_tag = Tag::SetWheelControllerGains;
	}
}
void Message::Set_SetWheelControllerGains(Anki::Cozmo::U2G::SetWheelControllerGains&& new_SetWheelControllerGains)
{
	if(this->_tag == Tag::SetWheelControllerGains) {
		_SetWheelControllerGains = std::move(new_SetWheelControllerGains);
	}
	else {
		ClearCurrent();
		new(&_SetWheelControllerGains) Anki::Cozmo::U2G::SetWheelControllerGains{std::move(new_SetWheelControllerGains)};
		_tag = Tag::SetWheelControllerGains;
	}
}


const Anki::Cozmo::U2G::SetHeadControllerGains& Message::Get_SetHeadControllerGains() const
{
	assert(_tag == Tag::SetHeadControllerGains);
	return _SetHeadControllerGains;
}
void Message::Set_SetHeadControllerGains(const Anki::Cozmo::U2G::SetHeadControllerGains& new_SetHeadControllerGains)
{
	if(this->_tag == Tag::SetHeadControllerGains) {
		_SetHeadControllerGains = new_SetHeadControllerGains;
	}
	else {
		ClearCurrent();
		new(&_SetHeadControllerGains) Anki::Cozmo::U2G::SetHeadControllerGains{new_SetHeadControllerGains};
		_tag = Tag::SetHeadControllerGains;
	}
}
void Message::Set_SetHeadControllerGains(Anki::Cozmo::U2G::SetHeadControllerGains&& new_SetHeadControllerGains)
{
	if(this->_tag == Tag::SetHeadControllerGains) {
		_SetHeadControllerGains = std::move(new_SetHeadControllerGains);
	}
	else {
		ClearCurrent();
		new(&_SetHeadControllerGains) Anki::Cozmo::U2G::SetHeadControllerGains{std::move(new_SetHeadControllerGains)};
		_tag = Tag::SetHeadControllerGains;
	}
}


const Anki::Cozmo::U2G::SetLiftControllerGains& Message::Get_SetLiftControllerGains() const
{
	assert(_tag == Tag::SetLiftControllerGains);
	return _SetLiftControllerGains;
}
void Message::Set_SetLiftControllerGains(const Anki::Cozmo::U2G::SetLiftControllerGains& new_SetLiftControllerGains)
{
	if(this->_tag == Tag::SetLiftControllerGains) {
		_SetLiftControllerGains = new_SetLiftControllerGains;
	}
	else {
		ClearCurrent();
		new(&_SetLiftControllerGains) Anki::Cozmo::U2G::SetLiftControllerGains{new_SetLiftControllerGains};
		_tag = Tag::SetLiftControllerGains;
	}
}
void Message::Set_SetLiftControllerGains(Anki::Cozmo::U2G::SetLiftControllerGains&& new_SetLiftControllerGains)
{
	if(this->_tag == Tag::SetLiftControllerGains) {
		_SetLiftControllerGains = std::move(new_SetLiftControllerGains);
	}
	else {
		ClearCurrent();
		new(&_SetLiftControllerGains) Anki::Cozmo::U2G::SetLiftControllerGains{std::move(new_SetLiftControllerGains)};
		_tag = Tag::SetLiftControllerGains;
	}
}


const Anki::Cozmo::U2G::SetSteeringControllerGains& Message::Get_SetSteeringControllerGains() const
{
	assert(_tag == Tag::SetSteeringControllerGains);
	return _SetSteeringControllerGains;
}
void Message::Set_SetSteeringControllerGains(const Anki::Cozmo::U2G::SetSteeringControllerGains& new_SetSteeringControllerGains)
{
	if(this->_tag == Tag::SetSteeringControllerGains) {
		_SetSteeringControllerGains = new_SetSteeringControllerGains;
	}
	else {
		ClearCurrent();
		new(&_SetSteeringControllerGains) Anki::Cozmo::U2G::SetSteeringControllerGains{new_SetSteeringControllerGains};
		_tag = Tag::SetSteeringControllerGains;
	}
}
void Message::Set_SetSteeringControllerGains(Anki::Cozmo::U2G::SetSteeringControllerGains&& new_SetSteeringControllerGains)
{
	if(this->_tag == Tag::SetSteeringControllerGains) {
		_SetSteeringControllerGains = std::move(new_SetSteeringControllerGains);
	}
	else {
		ClearCurrent();
		new(&_SetSteeringControllerGains) Anki::Cozmo::U2G::SetSteeringControllerGains{std::move(new_SetSteeringControllerGains)};
		_tag = Tag::SetSteeringControllerGains;
	}
}


const Anki::Cozmo::U2G::SelectNextSoundScheme& Message::Get_SelectNextSoundScheme() const
{
	assert(_tag == Tag::SelectNextSoundScheme);
	return _SelectNextSoundScheme;
}
void Message::Set_SelectNextSoundScheme(const Anki::Cozmo::U2G::SelectNextSoundScheme& new_SelectNextSoundScheme)
{
	if(this->_tag == Tag::SelectNextSoundScheme) {
		_SelectNextSoundScheme = new_SelectNextSoundScheme;
	}
	else {
		ClearCurrent();
		new(&_SelectNextSoundScheme) Anki::Cozmo::U2G::SelectNextSoundScheme{new_SelectNextSoundScheme};
		_tag = Tag::SelectNextSoundScheme;
	}
}
void Message::Set_SelectNextSoundScheme(Anki::Cozmo::U2G::SelectNextSoundScheme&& new_SelectNextSoundScheme)
{
	if(this->_tag == Tag::SelectNextSoundScheme) {
		_SelectNextSoundScheme = std::move(new_SelectNextSoundScheme);
	}
	else {
		ClearCurrent();
		new(&_SelectNextSoundScheme) Anki::Cozmo::U2G::SelectNextSoundScheme{std::move(new_SelectNextSoundScheme)};
		_tag = Tag::SelectNextSoundScheme;
	}
}


const Anki::Cozmo::U2G::StartTestMode& Message::Get_StartTestMode() const
{
	assert(_tag == Tag::StartTestMode);
	return _StartTestMode;
}
void Message::Set_StartTestMode(const Anki::Cozmo::U2G::StartTestMode& new_StartTestMode)
{
	if(this->_tag == Tag::StartTestMode) {
		_StartTestMode = new_StartTestMode;
	}
	else {
		ClearCurrent();
		new(&_StartTestMode) Anki::Cozmo::U2G::StartTestMode{new_StartTestMode};
		_tag = Tag::StartTestMode;
	}
}
void Message::Set_StartTestMode(Anki::Cozmo::U2G::StartTestMode&& new_StartTestMode)
{
	if(this->_tag == Tag::StartTestMode) {
		_StartTestMode = std::move(new_StartTestMode);
	}
	else {
		ClearCurrent();
		new(&_StartTestMode) Anki::Cozmo::U2G::StartTestMode{std::move(new_StartTestMode)};
		_tag = Tag::StartTestMode;
	}
}


const Anki::Cozmo::U2G::IMURequest& Message::Get_IMURequest() const
{
	assert(_tag == Tag::IMURequest);
	return _IMURequest;
}
void Message::Set_IMURequest(const Anki::Cozmo::U2G::IMURequest& new_IMURequest)
{
	if(this->_tag == Tag::IMURequest) {
		_IMURequest = new_IMURequest;
	}
	else {
		ClearCurrent();
		new(&_IMURequest) Anki::Cozmo::U2G::IMURequest{new_IMURequest};
		_tag = Tag::IMURequest;
	}
}
void Message::Set_IMURequest(Anki::Cozmo::U2G::IMURequest&& new_IMURequest)
{
	if(this->_tag == Tag::IMURequest) {
		_IMURequest = std::move(new_IMURequest);
	}
	else {
		ClearCurrent();
		new(&_IMURequest) Anki::Cozmo::U2G::IMURequest{std::move(new_IMURequest)};
		_tag = Tag::IMURequest;
	}
}


const Anki::Cozmo::U2G::PlayAnimation& Message::Get_PlayAnimation() const
{
	assert(_tag == Tag::PlayAnimation);
	return _PlayAnimation;
}
void Message::Set_PlayAnimation(const Anki::Cozmo::U2G::PlayAnimation& new_PlayAnimation)
{
	if(this->_tag == Tag::PlayAnimation) {
		_PlayAnimation = new_PlayAnimation;
	}
	else {
		ClearCurrent();
		new(&_PlayAnimation) Anki::Cozmo::U2G::PlayAnimation{new_PlayAnimation};
		_tag = Tag::PlayAnimation;
	}
}
void Message::Set_PlayAnimation(Anki::Cozmo::U2G::PlayAnimation&& new_PlayAnimation)
{
	if(this->_tag == Tag::PlayAnimation) {
		_PlayAnimation = std::move(new_PlayAnimation);
	}
	else {
		ClearCurrent();
		new(&_PlayAnimation) Anki::Cozmo::U2G::PlayAnimation{std::move(new_PlayAnimation)};
		_tag = Tag::PlayAnimation;
	}
}


const Anki::Cozmo::U2G::ReadAnimationFile& Message::Get_ReadAnimationFile() const
{
	assert(_tag == Tag::ReadAnimationFile);
	return _ReadAnimationFile;
}
void Message::Set_ReadAnimationFile(const Anki::Cozmo::U2G::ReadAnimationFile& new_ReadAnimationFile)
{
	if(this->_tag == Tag::ReadAnimationFile) {
		_ReadAnimationFile = new_ReadAnimationFile;
	}
	else {
		ClearCurrent();
		new(&_ReadAnimationFile) Anki::Cozmo::U2G::ReadAnimationFile{new_ReadAnimationFile};
		_tag = Tag::ReadAnimationFile;
	}
}
void Message::Set_ReadAnimationFile(Anki::Cozmo::U2G::ReadAnimationFile&& new_ReadAnimationFile)
{
	if(this->_tag == Tag::ReadAnimationFile) {
		_ReadAnimationFile = std::move(new_ReadAnimationFile);
	}
	else {
		ClearCurrent();
		new(&_ReadAnimationFile) Anki::Cozmo::U2G::ReadAnimationFile{std::move(new_ReadAnimationFile)};
		_tag = Tag::ReadAnimationFile;
	}
}


const Anki::Cozmo::U2G::StartFaceTracking& Message::Get_StartFaceTracking() const
{
	assert(_tag == Tag::StartFaceTracking);
	return _StartFaceTracking;
}
void Message::Set_StartFaceTracking(const Anki::Cozmo::U2G::StartFaceTracking& new_StartFaceTracking)
{
	if(this->_tag == Tag::StartFaceTracking) {
		_StartFaceTracking = new_StartFaceTracking;
	}
	else {
		ClearCurrent();
		new(&_StartFaceTracking) Anki::Cozmo::U2G::StartFaceTracking{new_StartFaceTracking};
		_tag = Tag::StartFaceTracking;
	}
}
void Message::Set_StartFaceTracking(Anki::Cozmo::U2G::StartFaceTracking&& new_StartFaceTracking)
{
	if(this->_tag == Tag::StartFaceTracking) {
		_StartFaceTracking = std::move(new_StartFaceTracking);
	}
	else {
		ClearCurrent();
		new(&_StartFaceTracking) Anki::Cozmo::U2G::StartFaceTracking{std::move(new_StartFaceTracking)};
		_tag = Tag::StartFaceTracking;
	}
}


const Anki::Cozmo::U2G::StopFaceTracking& Message::Get_StopFaceTracking() const
{
	assert(_tag == Tag::StopFaceTracking);
	return _StopFaceTracking;
}
void Message::Set_StopFaceTracking(const Anki::Cozmo::U2G::StopFaceTracking& new_StopFaceTracking)
{
	if(this->_tag == Tag::StopFaceTracking) {
		_StopFaceTracking = new_StopFaceTracking;
	}
	else {
		ClearCurrent();
		new(&_StopFaceTracking) Anki::Cozmo::U2G::StopFaceTracking{new_StopFaceTracking};
		_tag = Tag::StopFaceTracking;
	}
}
void Message::Set_StopFaceTracking(Anki::Cozmo::U2G::StopFaceTracking&& new_StopFaceTracking)
{
	if(this->_tag == Tag::StopFaceTracking) {
		_StopFaceTracking = std::move(new_StopFaceTracking);
	}
	else {
		ClearCurrent();
		new(&_StopFaceTracking) Anki::Cozmo::U2G::StopFaceTracking{std::move(new_StopFaceTracking)};
		_tag = Tag::StopFaceTracking;
	}
}


const Anki::Cozmo::U2G::StartLookingForMarkers& Message::Get_StartLookingForMarkers() const
{
	assert(_tag == Tag::StartLookingForMarkers);
	return _StartLookingForMarkers;
}
void Message::Set_StartLookingForMarkers(const Anki::Cozmo::U2G::StartLookingForMarkers& new_StartLookingForMarkers)
{
	if(this->_tag == Tag::StartLookingForMarkers) {
		_StartLookingForMarkers = new_StartLookingForMarkers;
	}
	else {
		ClearCurrent();
		new(&_StartLookingForMarkers) Anki::Cozmo::U2G::StartLookingForMarkers{new_StartLookingForMarkers};
		_tag = Tag::StartLookingForMarkers;
	}
}
void Message::Set_StartLookingForMarkers(Anki::Cozmo::U2G::StartLookingForMarkers&& new_StartLookingForMarkers)
{
	if(this->_tag == Tag::StartLookingForMarkers) {
		_StartLookingForMarkers = std::move(new_StartLookingForMarkers);
	}
	else {
		ClearCurrent();
		new(&_StartLookingForMarkers) Anki::Cozmo::U2G::StartLookingForMarkers{std::move(new_StartLookingForMarkers)};
		_tag = Tag::StartLookingForMarkers;
	}
}


const Anki::Cozmo::U2G::StopLookingForMarkers& Message::Get_StopLookingForMarkers() const
{
	assert(_tag == Tag::StopLookingForMarkers);
	return _StopLookingForMarkers;
}
void Message::Set_StopLookingForMarkers(const Anki::Cozmo::U2G::StopLookingForMarkers& new_StopLookingForMarkers)
{
	if(this->_tag == Tag::StopLookingForMarkers) {
		_StopLookingForMarkers = new_StopLookingForMarkers;
	}
	else {
		ClearCurrent();
		new(&_StopLookingForMarkers) Anki::Cozmo::U2G::StopLookingForMarkers{new_StopLookingForMarkers};
		_tag = Tag::StopLookingForMarkers;
	}
}
void Message::Set_StopLookingForMarkers(Anki::Cozmo::U2G::StopLookingForMarkers&& new_StopLookingForMarkers)
{
	if(this->_tag == Tag::StopLookingForMarkers) {
		_StopLookingForMarkers = std::move(new_StopLookingForMarkers);
	}
	else {
		ClearCurrent();
		new(&_StopLookingForMarkers) Anki::Cozmo::U2G::StopLookingForMarkers{std::move(new_StopLookingForMarkers)};
		_tag = Tag::StopLookingForMarkers;
	}
}


const Anki::Cozmo::U2G::SetVisionSystemParams& Message::Get_SetVisionSystemParams() const
{
	assert(_tag == Tag::SetVisionSystemParams);
	return _SetVisionSystemParams;
}
void Message::Set_SetVisionSystemParams(const Anki::Cozmo::U2G::SetVisionSystemParams& new_SetVisionSystemParams)
{
	if(this->_tag == Tag::SetVisionSystemParams) {
		_SetVisionSystemParams = new_SetVisionSystemParams;
	}
	else {
		ClearCurrent();
		new(&_SetVisionSystemParams) Anki::Cozmo::U2G::SetVisionSystemParams{new_SetVisionSystemParams};
		_tag = Tag::SetVisionSystemParams;
	}
}
void Message::Set_SetVisionSystemParams(Anki::Cozmo::U2G::SetVisionSystemParams&& new_SetVisionSystemParams)
{
	if(this->_tag == Tag::SetVisionSystemParams) {
		_SetVisionSystemParams = std::move(new_SetVisionSystemParams);
	}
	else {
		ClearCurrent();
		new(&_SetVisionSystemParams) Anki::Cozmo::U2G::SetVisionSystemParams{std::move(new_SetVisionSystemParams)};
		_tag = Tag::SetVisionSystemParams;
	}
}


const Anki::Cozmo::U2G::SetFaceDetectParams& Message::Get_SetFaceDetectParams() const
{
	assert(_tag == Tag::SetFaceDetectParams);
	return _SetFaceDetectParams;
}
void Message::Set_SetFaceDetectParams(const Anki::Cozmo::U2G::SetFaceDetectParams& new_SetFaceDetectParams)
{
	if(this->_tag == Tag::SetFaceDetectParams) {
		_SetFaceDetectParams = new_SetFaceDetectParams;
	}
	else {
		ClearCurrent();
		new(&_SetFaceDetectParams) Anki::Cozmo::U2G::SetFaceDetectParams{new_SetFaceDetectParams};
		_tag = Tag::SetFaceDetectParams;
	}
}
void Message::Set_SetFaceDetectParams(Anki::Cozmo::U2G::SetFaceDetectParams&& new_SetFaceDetectParams)
{
	if(this->_tag == Tag::SetFaceDetectParams) {
		_SetFaceDetectParams = std::move(new_SetFaceDetectParams);
	}
	else {
		ClearCurrent();
		new(&_SetFaceDetectParams) Anki::Cozmo::U2G::SetFaceDetectParams{std::move(new_SetFaceDetectParams)};
		_tag = Tag::SetFaceDetectParams;
	}
}


const Anki::Cozmo::U2G::SetActiveObjectLEDs& Message::Get_SetActiveObjectLEDs() const
{
	assert(_tag == Tag::SetActiveObjectLEDs);
	return _SetActiveObjectLEDs;
}
void Message::Set_SetActiveObjectLEDs(const Anki::Cozmo::U2G::SetActiveObjectLEDs& new_SetActiveObjectLEDs)
{
	if(this->_tag == Tag::SetActiveObjectLEDs) {
		_SetActiveObjectLEDs = new_SetActiveObjectLEDs;
	}
	else {
		ClearCurrent();
		new(&_SetActiveObjectLEDs) Anki::Cozmo::U2G::SetActiveObjectLEDs{new_SetActiveObjectLEDs};
		_tag = Tag::SetActiveObjectLEDs;
	}
}
void Message::Set_SetActiveObjectLEDs(Anki::Cozmo::U2G::SetActiveObjectLEDs&& new_SetActiveObjectLEDs)
{
	if(this->_tag == Tag::SetActiveObjectLEDs) {
		_SetActiveObjectLEDs = std::move(new_SetActiveObjectLEDs);
	}
	else {
		ClearCurrent();
		new(&_SetActiveObjectLEDs) Anki::Cozmo::U2G::SetActiveObjectLEDs{std::move(new_SetActiveObjectLEDs)};
		_tag = Tag::SetActiveObjectLEDs;
	}
}


const Anki::Cozmo::U2G::SetAllActiveObjectLEDs& Message::Get_SetAllActiveObjectLEDs() const
{
	assert(_tag == Tag::SetAllActiveObjectLEDs);
	return _SetAllActiveObjectLEDs;
}
void Message::Set_SetAllActiveObjectLEDs(const Anki::Cozmo::U2G::SetAllActiveObjectLEDs& new_SetAllActiveObjectLEDs)
{
	if(this->_tag == Tag::SetAllActiveObjectLEDs) {
		_SetAllActiveObjectLEDs = new_SetAllActiveObjectLEDs;
	}
	else {
		ClearCurrent();
		new(&_SetAllActiveObjectLEDs) Anki::Cozmo::U2G::SetAllActiveObjectLEDs{new_SetAllActiveObjectLEDs};
		_tag = Tag::SetAllActiveObjectLEDs;
	}
}
void Message::Set_SetAllActiveObjectLEDs(Anki::Cozmo::U2G::SetAllActiveObjectLEDs&& new_SetAllActiveObjectLEDs)
{
	if(this->_tag == Tag::SetAllActiveObjectLEDs) {
		_SetAllActiveObjectLEDs = std::move(new_SetAllActiveObjectLEDs);
	}
	else {
		ClearCurrent();
		new(&_SetAllActiveObjectLEDs) Anki::Cozmo::U2G::SetAllActiveObjectLEDs{std::move(new_SetAllActiveObjectLEDs)};
		_tag = Tag::SetAllActiveObjectLEDs;
	}
}


const Anki::Cozmo::U2G::SetBackpackLEDs& Message::Get_SetBackpackLEDs() const
{
	assert(_tag == Tag::SetBackpackLEDs);
	return _SetBackpackLEDs;
}
void Message::Set_SetBackpackLEDs(const Anki::Cozmo::U2G::SetBackpackLEDs& new_SetBackpackLEDs)
{
	if(this->_tag == Tag::SetBackpackLEDs) {
		_SetBackpackLEDs = new_SetBackpackLEDs;
	}
	else {
		ClearCurrent();
		new(&_SetBackpackLEDs) Anki::Cozmo::U2G::SetBackpackLEDs{new_SetBackpackLEDs};
		_tag = Tag::SetBackpackLEDs;
	}
}
void Message::Set_SetBackpackLEDs(Anki::Cozmo::U2G::SetBackpackLEDs&& new_SetBackpackLEDs)
{
	if(this->_tag == Tag::SetBackpackLEDs) {
		_SetBackpackLEDs = std::move(new_SetBackpackLEDs);
	}
	else {
		ClearCurrent();
		new(&_SetBackpackLEDs) Anki::Cozmo::U2G::SetBackpackLEDs{std::move(new_SetBackpackLEDs)};
		_tag = Tag::SetBackpackLEDs;
	}
}


const Anki::Cozmo::U2G::VisualizeQuad& Message::Get_VisualizeQuad() const
{
	assert(_tag == Tag::VisualizeQuad);
	return _VisualizeQuad;
}
void Message::Set_VisualizeQuad(const Anki::Cozmo::U2G::VisualizeQuad& new_VisualizeQuad)
{
	if(this->_tag == Tag::VisualizeQuad) {
		_VisualizeQuad = new_VisualizeQuad;
	}
	else {
		ClearCurrent();
		new(&_VisualizeQuad) Anki::Cozmo::U2G::VisualizeQuad{new_VisualizeQuad};
		_tag = Tag::VisualizeQuad;
	}
}
void Message::Set_VisualizeQuad(Anki::Cozmo::U2G::VisualizeQuad&& new_VisualizeQuad)
{
	if(this->_tag == Tag::VisualizeQuad) {
		_VisualizeQuad = std::move(new_VisualizeQuad);
	}
	else {
		ClearCurrent();
		new(&_VisualizeQuad) Anki::Cozmo::U2G::VisualizeQuad{std::move(new_VisualizeQuad)};
		_tag = Tag::VisualizeQuad;
	}
}


const Anki::Cozmo::U2G::EraseQuad& Message::Get_EraseQuad() const
{
	assert(_tag == Tag::EraseQuad);
	return _EraseQuad;
}
void Message::Set_EraseQuad(const Anki::Cozmo::U2G::EraseQuad& new_EraseQuad)
{
	if(this->_tag == Tag::EraseQuad) {
		_EraseQuad = new_EraseQuad;
	}
	else {
		ClearCurrent();
		new(&_EraseQuad) Anki::Cozmo::U2G::EraseQuad{new_EraseQuad};
		_tag = Tag::EraseQuad;
	}
}
void Message::Set_EraseQuad(Anki::Cozmo::U2G::EraseQuad&& new_EraseQuad)
{
	if(this->_tag == Tag::EraseQuad) {
		_EraseQuad = std::move(new_EraseQuad);
	}
	else {
		ClearCurrent();
		new(&_EraseQuad) Anki::Cozmo::U2G::EraseQuad{std::move(new_EraseQuad)};
		_tag = Tag::EraseQuad;
	}
}


size_t Message::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t Message::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	Tag newTag {Tag::INVALID};
	const Tag oldTag {GetTag()};
	buffer.Read(newTag);
	if (newTag != oldTag) {
		ClearCurrent();
	}
	switch(newTag) {
	case Tag::Ping:
		if (newTag != oldTag) {
			new(&(this->_Ping)) Anki::Cozmo::U2G::Ping(buffer);
		}
		else {
			this->_Ping.Unpack(buffer);
		}
		break;
	case Tag::ConnectToRobot:
		if (newTag != oldTag) {
			new(&(this->_ConnectToRobot)) Anki::Cozmo::U2G::ConnectToRobot(buffer);
		}
		else {
			this->_ConnectToRobot.Unpack(buffer);
		}
		break;
	case Tag::ConnectToUiDevice:
		if (newTag != oldTag) {
			new(&(this->_ConnectToUiDevice)) Anki::Cozmo::U2G::ConnectToUiDevice(buffer);
		}
		else {
			this->_ConnectToUiDevice.Unpack(buffer);
		}
		break;
	case Tag::DisconnectFromUiDevice:
		if (newTag != oldTag) {
			new(&(this->_DisconnectFromUiDevice)) Anki::Cozmo::U2G::DisconnectFromUiDevice(buffer);
		}
		else {
			this->_DisconnectFromUiDevice.Unpack(buffer);
		}
		break;
	case Tag::ForceAddRobot:
		if (newTag != oldTag) {
			new(&(this->_ForceAddRobot)) Anki::Cozmo::U2G::ForceAddRobot(buffer);
		}
		else {
			this->_ForceAddRobot.Unpack(buffer);
		}
		break;
	case Tag::StartEngine:
		if (newTag != oldTag) {
			new(&(this->_StartEngine)) Anki::Cozmo::U2G::StartEngine(buffer);
		}
		else {
			this->_StartEngine.Unpack(buffer);
		}
		break;
	case Tag::DriveWheels:
		if (newTag != oldTag) {
			new(&(this->_DriveWheels)) Anki::Cozmo::U2G::DriveWheels(buffer);
		}
		else {
			this->_DriveWheels.Unpack(buffer);
		}
		break;
	case Tag::TurnInPlace:
		if (newTag != oldTag) {
			new(&(this->_TurnInPlace)) Anki::Cozmo::U2G::TurnInPlace(buffer);
		}
		else {
			this->_TurnInPlace.Unpack(buffer);
		}
		break;
	case Tag::FaceObject:
		if (newTag != oldTag) {
			new(&(this->_FaceObject)) Anki::Cozmo::U2G::FaceObject(buffer);
		}
		else {
			this->_FaceObject.Unpack(buffer);
		}
		break;
	case Tag::MoveHead:
		if (newTag != oldTag) {
			new(&(this->_MoveHead)) Anki::Cozmo::U2G::MoveHead(buffer);
		}
		else {
			this->_MoveHead.Unpack(buffer);
		}
		break;
	case Tag::MoveLift:
		if (newTag != oldTag) {
			new(&(this->_MoveLift)) Anki::Cozmo::U2G::MoveLift(buffer);
		}
		else {
			this->_MoveLift.Unpack(buffer);
		}
		break;
	case Tag::SetLiftHeight:
		if (newTag != oldTag) {
			new(&(this->_SetLiftHeight)) Anki::Cozmo::U2G::SetLiftHeight(buffer);
		}
		else {
			this->_SetLiftHeight.Unpack(buffer);
		}
		break;
	case Tag::SetHeadAngle:
		if (newTag != oldTag) {
			new(&(this->_SetHeadAngle)) Anki::Cozmo::U2G::SetHeadAngle(buffer);
		}
		else {
			this->_SetHeadAngle.Unpack(buffer);
		}
		break;
	case Tag::TrackHeadToObject:
		if (newTag != oldTag) {
			new(&(this->_TrackHeadToObject)) Anki::Cozmo::U2G::TrackHeadToObject(buffer);
		}
		else {
			this->_TrackHeadToObject.Unpack(buffer);
		}
		break;
	case Tag::StopAllMotors:
		if (newTag != oldTag) {
			new(&(this->_StopAllMotors)) Anki::Cozmo::U2G::StopAllMotors(buffer);
		}
		else {
			this->_StopAllMotors.Unpack(buffer);
		}
		break;
	case Tag::ImageRequest:
		if (newTag != oldTag) {
			new(&(this->_ImageRequest)) Anki::Cozmo::U2G::ImageRequest(buffer);
		}
		else {
			this->_ImageRequest.Unpack(buffer);
		}
		break;
	case Tag::SetRobotImageSendMode:
		if (newTag != oldTag) {
			new(&(this->_SetRobotImageSendMode)) Anki::Cozmo::U2G::SetRobotImageSendMode(buffer);
		}
		else {
			this->_SetRobotImageSendMode.Unpack(buffer);
		}
		break;
	case Tag::SaveImages:
		if (newTag != oldTag) {
			new(&(this->_SaveImages)) Anki::Cozmo::U2G::SaveImages(buffer);
		}
		else {
			this->_SaveImages.Unpack(buffer);
		}
		break;
	case Tag::SaveRobotState:
		if (newTag != oldTag) {
			new(&(this->_SaveRobotState)) Anki::Cozmo::U2G::SaveRobotState(buffer);
		}
		else {
			this->_SaveRobotState.Unpack(buffer);
		}
		break;
	case Tag::EnableDisplay:
		if (newTag != oldTag) {
			new(&(this->_EnableDisplay)) Anki::Cozmo::U2G::EnableDisplay(buffer);
		}
		else {
			this->_EnableDisplay.Unpack(buffer);
		}
		break;
	case Tag::SetHeadlights:
		if (newTag != oldTag) {
			new(&(this->_SetHeadlights)) Anki::Cozmo::U2G::SetHeadlights(buffer);
		}
		else {
			this->_SetHeadlights.Unpack(buffer);
		}
		break;
	case Tag::GotoPose:
		if (newTag != oldTag) {
			new(&(this->_GotoPose)) Anki::Cozmo::U2G::GotoPose(buffer);
		}
		else {
			this->_GotoPose.Unpack(buffer);
		}
		break;
	case Tag::GotoObject:
		if (newTag != oldTag) {
			new(&(this->_GotoObject)) Anki::Cozmo::U2G::GotoObject(buffer);
		}
		else {
			this->_GotoObject.Unpack(buffer);
		}
		break;
	case Tag::PlaceObjectOnGround:
		if (newTag != oldTag) {
			new(&(this->_PlaceObjectOnGround)) Anki::Cozmo::U2G::PlaceObjectOnGround(buffer);
		}
		else {
			this->_PlaceObjectOnGround.Unpack(buffer);
		}
		break;
	case Tag::PlaceObjectOnGroundHere:
		if (newTag != oldTag) {
			new(&(this->_PlaceObjectOnGroundHere)) Anki::Cozmo::U2G::PlaceObjectOnGroundHere(buffer);
		}
		else {
			this->_PlaceObjectOnGroundHere.Unpack(buffer);
		}
		break;
	case Tag::ExecuteTestPlan:
		if (newTag != oldTag) {
			new(&(this->_ExecuteTestPlan)) Anki::Cozmo::U2G::ExecuteTestPlan(buffer);
		}
		else {
			this->_ExecuteTestPlan.Unpack(buffer);
		}
		break;
	case Tag::SelectNextObject:
		if (newTag != oldTag) {
			new(&(this->_SelectNextObject)) Anki::Cozmo::U2G::SelectNextObject(buffer);
		}
		else {
			this->_SelectNextObject.Unpack(buffer);
		}
		break;
	case Tag::PickAndPlaceObject:
		if (newTag != oldTag) {
			new(&(this->_PickAndPlaceObject)) Anki::Cozmo::U2G::PickAndPlaceObject(buffer);
		}
		else {
			this->_PickAndPlaceObject.Unpack(buffer);
		}
		break;
	case Tag::RollObject:
		if (newTag != oldTag) {
			new(&(this->_RollObject)) Anki::Cozmo::U2G::RollObject(buffer);
		}
		else {
			this->_RollObject.Unpack(buffer);
		}
		break;
	case Tag::TraverseObject:
		if (newTag != oldTag) {
			new(&(this->_TraverseObject)) Anki::Cozmo::U2G::TraverseObject(buffer);
		}
		else {
			this->_TraverseObject.Unpack(buffer);
		}
		break;
	case Tag::SetRobotCarryingObject:
		if (newTag != oldTag) {
			new(&(this->_SetRobotCarryingObject)) Anki::Cozmo::U2G::SetRobotCarryingObject(buffer);
		}
		else {
			this->_SetRobotCarryingObject.Unpack(buffer);
		}
		break;
	case Tag::ClearAllBlocks:
		if (newTag != oldTag) {
			new(&(this->_ClearAllBlocks)) Anki::Cozmo::U2G::ClearAllBlocks(buffer);
		}
		else {
			this->_ClearAllBlocks.Unpack(buffer);
		}
		break;
	case Tag::ClearAllObjects:
		if (newTag != oldTag) {
			new(&(this->_ClearAllObjects)) Anki::Cozmo::U2G::ClearAllObjects(buffer);
		}
		else {
			this->_ClearAllObjects.Unpack(buffer);
		}
		break;
	case Tag::SetObjectAdditionAndDeletion:
		if (newTag != oldTag) {
			new(&(this->_SetObjectAdditionAndDeletion)) Anki::Cozmo::U2G::SetObjectAdditionAndDeletion(buffer);
		}
		else {
			this->_SetObjectAdditionAndDeletion.Unpack(buffer);
		}
		break;
	case Tag::VisionWhileMoving:
		if (newTag != oldTag) {
			new(&(this->_VisionWhileMoving)) Anki::Cozmo::U2G::VisionWhileMoving(buffer);
		}
		else {
			this->_VisionWhileMoving.Unpack(buffer);
		}
		break;
	case Tag::ExecuteBehavior:
		if (newTag != oldTag) {
			new(&(this->_ExecuteBehavior)) Anki::Cozmo::U2G::ExecuteBehavior(buffer);
		}
		else {
			this->_ExecuteBehavior.Unpack(buffer);
		}
		break;
	case Tag::SetBehaviorState:
		if (newTag != oldTag) {
			new(&(this->_SetBehaviorState)) Anki::Cozmo::U2G::SetBehaviorState(buffer);
		}
		else {
			this->_SetBehaviorState.Unpack(buffer);
		}
		break;
	case Tag::AbortPath:
		if (newTag != oldTag) {
			new(&(this->_AbortPath)) Anki::Cozmo::U2G::AbortPath(buffer);
		}
		else {
			this->_AbortPath.Unpack(buffer);
		}
		break;
	case Tag::AbortAll:
		if (newTag != oldTag) {
			new(&(this->_AbortAll)) Anki::Cozmo::U2G::AbortAll(buffer);
		}
		else {
			this->_AbortAll.Unpack(buffer);
		}
		break;
	case Tag::CancelAction:
		if (newTag != oldTag) {
			new(&(this->_CancelAction)) Anki::Cozmo::U2G::CancelAction(buffer);
		}
		else {
			this->_CancelAction.Unpack(buffer);
		}
		break;
	case Tag::DrawPoseMarker:
		if (newTag != oldTag) {
			new(&(this->_DrawPoseMarker)) Anki::Cozmo::U2G::DrawPoseMarker(buffer);
		}
		else {
			this->_DrawPoseMarker.Unpack(buffer);
		}
		break;
	case Tag::ErasePoseMarker:
		if (newTag != oldTag) {
			new(&(this->_ErasePoseMarker)) Anki::Cozmo::U2G::ErasePoseMarker(buffer);
		}
		else {
			this->_ErasePoseMarker.Unpack(buffer);
		}
		break;
	case Tag::SetWheelControllerGains:
		if (newTag != oldTag) {
			new(&(this->_SetWheelControllerGains)) Anki::Cozmo::U2G::SetWheelControllerGains(buffer);
		}
		else {
			this->_SetWheelControllerGains.Unpack(buffer);
		}
		break;
	case Tag::SetHeadControllerGains:
		if (newTag != oldTag) {
			new(&(this->_SetHeadControllerGains)) Anki::Cozmo::U2G::SetHeadControllerGains(buffer);
		}
		else {
			this->_SetHeadControllerGains.Unpack(buffer);
		}
		break;
	case Tag::SetLiftControllerGains:
		if (newTag != oldTag) {
			new(&(this->_SetLiftControllerGains)) Anki::Cozmo::U2G::SetLiftControllerGains(buffer);
		}
		else {
			this->_SetLiftControllerGains.Unpack(buffer);
		}
		break;
	case Tag::SetSteeringControllerGains:
		if (newTag != oldTag) {
			new(&(this->_SetSteeringControllerGains)) Anki::Cozmo::U2G::SetSteeringControllerGains(buffer);
		}
		else {
			this->_SetSteeringControllerGains.Unpack(buffer);
		}
		break;
	case Tag::SelectNextSoundScheme:
		if (newTag != oldTag) {
			new(&(this->_SelectNextSoundScheme)) Anki::Cozmo::U2G::SelectNextSoundScheme(buffer);
		}
		else {
			this->_SelectNextSoundScheme.Unpack(buffer);
		}
		break;
	case Tag::StartTestMode:
		if (newTag != oldTag) {
			new(&(this->_StartTestMode)) Anki::Cozmo::U2G::StartTestMode(buffer);
		}
		else {
			this->_StartTestMode.Unpack(buffer);
		}
		break;
	case Tag::IMURequest:
		if (newTag != oldTag) {
			new(&(this->_IMURequest)) Anki::Cozmo::U2G::IMURequest(buffer);
		}
		else {
			this->_IMURequest.Unpack(buffer);
		}
		break;
	case Tag::PlayAnimation:
		if (newTag != oldTag) {
			new(&(this->_PlayAnimation)) Anki::Cozmo::U2G::PlayAnimation(buffer);
		}
		else {
			this->_PlayAnimation.Unpack(buffer);
		}
		break;
	case Tag::ReadAnimationFile:
		if (newTag != oldTag) {
			new(&(this->_ReadAnimationFile)) Anki::Cozmo::U2G::ReadAnimationFile(buffer);
		}
		else {
			this->_ReadAnimationFile.Unpack(buffer);
		}
		break;
	case Tag::StartFaceTracking:
		if (newTag != oldTag) {
			new(&(this->_StartFaceTracking)) Anki::Cozmo::U2G::StartFaceTracking(buffer);
		}
		else {
			this->_StartFaceTracking.Unpack(buffer);
		}
		break;
	case Tag::StopFaceTracking:
		if (newTag != oldTag) {
			new(&(this->_StopFaceTracking)) Anki::Cozmo::U2G::StopFaceTracking(buffer);
		}
		else {
			this->_StopFaceTracking.Unpack(buffer);
		}
		break;
	case Tag::StartLookingForMarkers:
		if (newTag != oldTag) {
			new(&(this->_StartLookingForMarkers)) Anki::Cozmo::U2G::StartLookingForMarkers(buffer);
		}
		else {
			this->_StartLookingForMarkers.Unpack(buffer);
		}
		break;
	case Tag::StopLookingForMarkers:
		if (newTag != oldTag) {
			new(&(this->_StopLookingForMarkers)) Anki::Cozmo::U2G::StopLookingForMarkers(buffer);
		}
		else {
			this->_StopLookingForMarkers.Unpack(buffer);
		}
		break;
	case Tag::SetVisionSystemParams:
		if (newTag != oldTag) {
			new(&(this->_SetVisionSystemParams)) Anki::Cozmo::U2G::SetVisionSystemParams(buffer);
		}
		else {
			this->_SetVisionSystemParams.Unpack(buffer);
		}
		break;
	case Tag::SetFaceDetectParams:
		if (newTag != oldTag) {
			new(&(this->_SetFaceDetectParams)) Anki::Cozmo::U2G::SetFaceDetectParams(buffer);
		}
		else {
			this->_SetFaceDetectParams.Unpack(buffer);
		}
		break;
	case Tag::SetActiveObjectLEDs:
		if (newTag != oldTag) {
			new(&(this->_SetActiveObjectLEDs)) Anki::Cozmo::U2G::SetActiveObjectLEDs(buffer);
		}
		else {
			this->_SetActiveObjectLEDs.Unpack(buffer);
		}
		break;
	case Tag::SetAllActiveObjectLEDs:
		if (newTag != oldTag) {
			new(&(this->_SetAllActiveObjectLEDs)) Anki::Cozmo::U2G::SetAllActiveObjectLEDs(buffer);
		}
		else {
			this->_SetAllActiveObjectLEDs.Unpack(buffer);
		}
		break;
	case Tag::SetBackpackLEDs:
		if (newTag != oldTag) {
			new(&(this->_SetBackpackLEDs)) Anki::Cozmo::U2G::SetBackpackLEDs(buffer);
		}
		else {
			this->_SetBackpackLEDs.Unpack(buffer);
		}
		break;
	case Tag::VisualizeQuad:
		if (newTag != oldTag) {
			new(&(this->_VisualizeQuad)) Anki::Cozmo::U2G::VisualizeQuad(buffer);
		}
		else {
			this->_VisualizeQuad.Unpack(buffer);
		}
		break;
	case Tag::EraseQuad:
		if (newTag != oldTag) {
			new(&(this->_EraseQuad)) Anki::Cozmo::U2G::EraseQuad(buffer);
		}
		else {
			this->_EraseQuad.Unpack(buffer);
		}
		break;
	default:
		break;
	}
	_tag = newTag;
	return buffer.GetBytesRead();
}

size_t Message::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t Message::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(_tag);
	switch(GetTag()) {
	case Tag::Ping:
		this->_Ping.Pack(buffer);
		break;
	case Tag::ConnectToRobot:
		this->_ConnectToRobot.Pack(buffer);
		break;
	case Tag::ConnectToUiDevice:
		this->_ConnectToUiDevice.Pack(buffer);
		break;
	case Tag::DisconnectFromUiDevice:
		this->_DisconnectFromUiDevice.Pack(buffer);
		break;
	case Tag::ForceAddRobot:
		this->_ForceAddRobot.Pack(buffer);
		break;
	case Tag::StartEngine:
		this->_StartEngine.Pack(buffer);
		break;
	case Tag::DriveWheels:
		this->_DriveWheels.Pack(buffer);
		break;
	case Tag::TurnInPlace:
		this->_TurnInPlace.Pack(buffer);
		break;
	case Tag::FaceObject:
		this->_FaceObject.Pack(buffer);
		break;
	case Tag::MoveHead:
		this->_MoveHead.Pack(buffer);
		break;
	case Tag::MoveLift:
		this->_MoveLift.Pack(buffer);
		break;
	case Tag::SetLiftHeight:
		this->_SetLiftHeight.Pack(buffer);
		break;
	case Tag::SetHeadAngle:
		this->_SetHeadAngle.Pack(buffer);
		break;
	case Tag::TrackHeadToObject:
		this->_TrackHeadToObject.Pack(buffer);
		break;
	case Tag::StopAllMotors:
		this->_StopAllMotors.Pack(buffer);
		break;
	case Tag::ImageRequest:
		this->_ImageRequest.Pack(buffer);
		break;
	case Tag::SetRobotImageSendMode:
		this->_SetRobotImageSendMode.Pack(buffer);
		break;
	case Tag::SaveImages:
		this->_SaveImages.Pack(buffer);
		break;
	case Tag::SaveRobotState:
		this->_SaveRobotState.Pack(buffer);
		break;
	case Tag::EnableDisplay:
		this->_EnableDisplay.Pack(buffer);
		break;
	case Tag::SetHeadlights:
		this->_SetHeadlights.Pack(buffer);
		break;
	case Tag::GotoPose:
		this->_GotoPose.Pack(buffer);
		break;
	case Tag::GotoObject:
		this->_GotoObject.Pack(buffer);
		break;
	case Tag::PlaceObjectOnGround:
		this->_PlaceObjectOnGround.Pack(buffer);
		break;
	case Tag::PlaceObjectOnGroundHere:
		this->_PlaceObjectOnGroundHere.Pack(buffer);
		break;
	case Tag::ExecuteTestPlan:
		this->_ExecuteTestPlan.Pack(buffer);
		break;
	case Tag::SelectNextObject:
		this->_SelectNextObject.Pack(buffer);
		break;
	case Tag::PickAndPlaceObject:
		this->_PickAndPlaceObject.Pack(buffer);
		break;
	case Tag::RollObject:
		this->_RollObject.Pack(buffer);
		break;
	case Tag::TraverseObject:
		this->_TraverseObject.Pack(buffer);
		break;
	case Tag::SetRobotCarryingObject:
		this->_SetRobotCarryingObject.Pack(buffer);
		break;
	case Tag::ClearAllBlocks:
		this->_ClearAllBlocks.Pack(buffer);
		break;
	case Tag::ClearAllObjects:
		this->_ClearAllObjects.Pack(buffer);
		break;
	case Tag::SetObjectAdditionAndDeletion:
		this->_SetObjectAdditionAndDeletion.Pack(buffer);
		break;
	case Tag::VisionWhileMoving:
		this->_VisionWhileMoving.Pack(buffer);
		break;
	case Tag::ExecuteBehavior:
		this->_ExecuteBehavior.Pack(buffer);
		break;
	case Tag::SetBehaviorState:
		this->_SetBehaviorState.Pack(buffer);
		break;
	case Tag::AbortPath:
		this->_AbortPath.Pack(buffer);
		break;
	case Tag::AbortAll:
		this->_AbortAll.Pack(buffer);
		break;
	case Tag::CancelAction:
		this->_CancelAction.Pack(buffer);
		break;
	case Tag::DrawPoseMarker:
		this->_DrawPoseMarker.Pack(buffer);
		break;
	case Tag::ErasePoseMarker:
		this->_ErasePoseMarker.Pack(buffer);
		break;
	case Tag::SetWheelControllerGains:
		this->_SetWheelControllerGains.Pack(buffer);
		break;
	case Tag::SetHeadControllerGains:
		this->_SetHeadControllerGains.Pack(buffer);
		break;
	case Tag::SetLiftControllerGains:
		this->_SetLiftControllerGains.Pack(buffer);
		break;
	case Tag::SetSteeringControllerGains:
		this->_SetSteeringControllerGains.Pack(buffer);
		break;
	case Tag::SelectNextSoundScheme:
		this->_SelectNextSoundScheme.Pack(buffer);
		break;
	case Tag::StartTestMode:
		this->_StartTestMode.Pack(buffer);
		break;
	case Tag::IMURequest:
		this->_IMURequest.Pack(buffer);
		break;
	case Tag::PlayAnimation:
		this->_PlayAnimation.Pack(buffer);
		break;
	case Tag::ReadAnimationFile:
		this->_ReadAnimationFile.Pack(buffer);
		break;
	case Tag::StartFaceTracking:
		this->_StartFaceTracking.Pack(buffer);
		break;
	case Tag::StopFaceTracking:
		this->_StopFaceTracking.Pack(buffer);
		break;
	case Tag::StartLookingForMarkers:
		this->_StartLookingForMarkers.Pack(buffer);
		break;
	case Tag::StopLookingForMarkers:
		this->_StopLookingForMarkers.Pack(buffer);
		break;
	case Tag::SetVisionSystemParams:
		this->_SetVisionSystemParams.Pack(buffer);
		break;
	case Tag::SetFaceDetectParams:
		this->_SetFaceDetectParams.Pack(buffer);
		break;
	case Tag::SetActiveObjectLEDs:
		this->_SetActiveObjectLEDs.Pack(buffer);
		break;
	case Tag::SetAllActiveObjectLEDs:
		this->_SetAllActiveObjectLEDs.Pack(buffer);
		break;
	case Tag::SetBackpackLEDs:
		this->_SetBackpackLEDs.Pack(buffer);
		break;
	case Tag::VisualizeQuad:
		this->_VisualizeQuad.Pack(buffer);
		break;
	case Tag::EraseQuad:
		this->_EraseQuad.Pack(buffer);
		break;
	default:
		break;
	}
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t Message::Size() const
{
	size_t result {1}; // tag = uint_8
	switch(GetTag()) {
	case Tag::Ping:
		result += _Ping.Size();
		break;
	case Tag::ConnectToRobot:
		result += _ConnectToRobot.Size();
		break;
	case Tag::ConnectToUiDevice:
		result += _ConnectToUiDevice.Size();
		break;
	case Tag::DisconnectFromUiDevice:
		result += _DisconnectFromUiDevice.Size();
		break;
	case Tag::ForceAddRobot:
		result += _ForceAddRobot.Size();
		break;
	case Tag::StartEngine:
		result += _StartEngine.Size();
		break;
	case Tag::DriveWheels:
		result += _DriveWheels.Size();
		break;
	case Tag::TurnInPlace:
		result += _TurnInPlace.Size();
		break;
	case Tag::FaceObject:
		result += _FaceObject.Size();
		break;
	case Tag::MoveHead:
		result += _MoveHead.Size();
		break;
	case Tag::MoveLift:
		result += _MoveLift.Size();
		break;
	case Tag::SetLiftHeight:
		result += _SetLiftHeight.Size();
		break;
	case Tag::SetHeadAngle:
		result += _SetHeadAngle.Size();
		break;
	case Tag::TrackHeadToObject:
		result += _TrackHeadToObject.Size();
		break;
	case Tag::StopAllMotors:
		result += _StopAllMotors.Size();
		break;
	case Tag::ImageRequest:
		result += _ImageRequest.Size();
		break;
	case Tag::SetRobotImageSendMode:
		result += _SetRobotImageSendMode.Size();
		break;
	case Tag::SaveImages:
		result += _SaveImages.Size();
		break;
	case Tag::SaveRobotState:
		result += _SaveRobotState.Size();
		break;
	case Tag::EnableDisplay:
		result += _EnableDisplay.Size();
		break;
	case Tag::SetHeadlights:
		result += _SetHeadlights.Size();
		break;
	case Tag::GotoPose:
		result += _GotoPose.Size();
		break;
	case Tag::GotoObject:
		result += _GotoObject.Size();
		break;
	case Tag::PlaceObjectOnGround:
		result += _PlaceObjectOnGround.Size();
		break;
	case Tag::PlaceObjectOnGroundHere:
		result += _PlaceObjectOnGroundHere.Size();
		break;
	case Tag::ExecuteTestPlan:
		result += _ExecuteTestPlan.Size();
		break;
	case Tag::SelectNextObject:
		result += _SelectNextObject.Size();
		break;
	case Tag::PickAndPlaceObject:
		result += _PickAndPlaceObject.Size();
		break;
	case Tag::RollObject:
		result += _RollObject.Size();
		break;
	case Tag::TraverseObject:
		result += _TraverseObject.Size();
		break;
	case Tag::SetRobotCarryingObject:
		result += _SetRobotCarryingObject.Size();
		break;
	case Tag::ClearAllBlocks:
		result += _ClearAllBlocks.Size();
		break;
	case Tag::ClearAllObjects:
		result += _ClearAllObjects.Size();
		break;
	case Tag::SetObjectAdditionAndDeletion:
		result += _SetObjectAdditionAndDeletion.Size();
		break;
	case Tag::VisionWhileMoving:
		result += _VisionWhileMoving.Size();
		break;
	case Tag::ExecuteBehavior:
		result += _ExecuteBehavior.Size();
		break;
	case Tag::SetBehaviorState:
		result += _SetBehaviorState.Size();
		break;
	case Tag::AbortPath:
		result += _AbortPath.Size();
		break;
	case Tag::AbortAll:
		result += _AbortAll.Size();
		break;
	case Tag::CancelAction:
		result += _CancelAction.Size();
		break;
	case Tag::DrawPoseMarker:
		result += _DrawPoseMarker.Size();
		break;
	case Tag::ErasePoseMarker:
		result += _ErasePoseMarker.Size();
		break;
	case Tag::SetWheelControllerGains:
		result += _SetWheelControllerGains.Size();
		break;
	case Tag::SetHeadControllerGains:
		result += _SetHeadControllerGains.Size();
		break;
	case Tag::SetLiftControllerGains:
		result += _SetLiftControllerGains.Size();
		break;
	case Tag::SetSteeringControllerGains:
		result += _SetSteeringControllerGains.Size();
		break;
	case Tag::SelectNextSoundScheme:
		result += _SelectNextSoundScheme.Size();
		break;
	case Tag::StartTestMode:
		result += _StartTestMode.Size();
		break;
	case Tag::IMURequest:
		result += _IMURequest.Size();
		break;
	case Tag::PlayAnimation:
		result += _PlayAnimation.Size();
		break;
	case Tag::ReadAnimationFile:
		result += _ReadAnimationFile.Size();
		break;
	case Tag::StartFaceTracking:
		result += _StartFaceTracking.Size();
		break;
	case Tag::StopFaceTracking:
		result += _StopFaceTracking.Size();
		break;
	case Tag::StartLookingForMarkers:
		result += _StartLookingForMarkers.Size();
		break;
	case Tag::StopLookingForMarkers:
		result += _StopLookingForMarkers.Size();
		break;
	case Tag::SetVisionSystemParams:
		result += _SetVisionSystemParams.Size();
		break;
	case Tag::SetFaceDetectParams:
		result += _SetFaceDetectParams.Size();
		break;
	case Tag::SetActiveObjectLEDs:
		result += _SetActiveObjectLEDs.Size();
		break;
	case Tag::SetAllActiveObjectLEDs:
		result += _SetAllActiveObjectLEDs.Size();
		break;
	case Tag::SetBackpackLEDs:
		result += _SetBackpackLEDs.Size();
		break;
	case Tag::VisualizeQuad:
		result += _VisualizeQuad.Size();
		break;
	case Tag::EraseQuad:
		result += _EraseQuad.Size();
		break;
	default:
		return 0;
	}
	return result;
}


void Message::ClearCurrent()
{
	switch(GetTag()) {
	case Tag::Ping:
		_Ping.~Ping();
		break;
	case Tag::ConnectToRobot:
		_ConnectToRobot.~ConnectToRobot();
		break;
	case Tag::ConnectToUiDevice:
		_ConnectToUiDevice.~ConnectToUiDevice();
		break;
	case Tag::DisconnectFromUiDevice:
		_DisconnectFromUiDevice.~DisconnectFromUiDevice();
		break;
	case Tag::ForceAddRobot:
		_ForceAddRobot.~ForceAddRobot();
		break;
	case Tag::StartEngine:
		_StartEngine.~StartEngine();
		break;
	case Tag::DriveWheels:
		_DriveWheels.~DriveWheels();
		break;
	case Tag::TurnInPlace:
		_TurnInPlace.~TurnInPlace();
		break;
	case Tag::FaceObject:
		_FaceObject.~FaceObject();
		break;
	case Tag::MoveHead:
		_MoveHead.~MoveHead();
		break;
	case Tag::MoveLift:
		_MoveLift.~MoveLift();
		break;
	case Tag::SetLiftHeight:
		_SetLiftHeight.~SetLiftHeight();
		break;
	case Tag::SetHeadAngle:
		_SetHeadAngle.~SetHeadAngle();
		break;
	case Tag::TrackHeadToObject:
		_TrackHeadToObject.~TrackHeadToObject();
		break;
	case Tag::StopAllMotors:
		_StopAllMotors.~StopAllMotors();
		break;
	case Tag::ImageRequest:
		_ImageRequest.~ImageRequest();
		break;
	case Tag::SetRobotImageSendMode:
		_SetRobotImageSendMode.~SetRobotImageSendMode();
		break;
	case Tag::SaveImages:
		_SaveImages.~SaveImages();
		break;
	case Tag::SaveRobotState:
		_SaveRobotState.~SaveRobotState();
		break;
	case Tag::EnableDisplay:
		_EnableDisplay.~EnableDisplay();
		break;
	case Tag::SetHeadlights:
		_SetHeadlights.~SetHeadlights();
		break;
	case Tag::GotoPose:
		_GotoPose.~GotoPose();
		break;
	case Tag::GotoObject:
		_GotoObject.~GotoObject();
		break;
	case Tag::PlaceObjectOnGround:
		_PlaceObjectOnGround.~PlaceObjectOnGround();
		break;
	case Tag::PlaceObjectOnGroundHere:
		_PlaceObjectOnGroundHere.~PlaceObjectOnGroundHere();
		break;
	case Tag::ExecuteTestPlan:
		_ExecuteTestPlan.~ExecuteTestPlan();
		break;
	case Tag::SelectNextObject:
		_SelectNextObject.~SelectNextObject();
		break;
	case Tag::PickAndPlaceObject:
		_PickAndPlaceObject.~PickAndPlaceObject();
		break;
	case Tag::RollObject:
		_RollObject.~RollObject();
		break;
	case Tag::TraverseObject:
		_TraverseObject.~TraverseObject();
		break;
	case Tag::SetRobotCarryingObject:
		_SetRobotCarryingObject.~SetRobotCarryingObject();
		break;
	case Tag::ClearAllBlocks:
		_ClearAllBlocks.~ClearAllBlocks();
		break;
	case Tag::ClearAllObjects:
		_ClearAllObjects.~ClearAllObjects();
		break;
	case Tag::SetObjectAdditionAndDeletion:
		_SetObjectAdditionAndDeletion.~SetObjectAdditionAndDeletion();
		break;
	case Tag::VisionWhileMoving:
		_VisionWhileMoving.~VisionWhileMoving();
		break;
	case Tag::ExecuteBehavior:
		_ExecuteBehavior.~ExecuteBehavior();
		break;
	case Tag::SetBehaviorState:
		_SetBehaviorState.~SetBehaviorState();
		break;
	case Tag::AbortPath:
		_AbortPath.~AbortPath();
		break;
	case Tag::AbortAll:
		_AbortAll.~AbortAll();
		break;
	case Tag::CancelAction:
		_CancelAction.~CancelAction();
		break;
	case Tag::DrawPoseMarker:
		_DrawPoseMarker.~DrawPoseMarker();
		break;
	case Tag::ErasePoseMarker:
		_ErasePoseMarker.~ErasePoseMarker();
		break;
	case Tag::SetWheelControllerGains:
		_SetWheelControllerGains.~SetWheelControllerGains();
		break;
	case Tag::SetHeadControllerGains:
		_SetHeadControllerGains.~SetHeadControllerGains();
		break;
	case Tag::SetLiftControllerGains:
		_SetLiftControllerGains.~SetLiftControllerGains();
		break;
	case Tag::SetSteeringControllerGains:
		_SetSteeringControllerGains.~SetSteeringControllerGains();
		break;
	case Tag::SelectNextSoundScheme:
		_SelectNextSoundScheme.~SelectNextSoundScheme();
		break;
	case Tag::StartTestMode:
		_StartTestMode.~StartTestMode();
		break;
	case Tag::IMURequest:
		_IMURequest.~IMURequest();
		break;
	case Tag::PlayAnimation:
		_PlayAnimation.~PlayAnimation();
		break;
	case Tag::ReadAnimationFile:
		_ReadAnimationFile.~ReadAnimationFile();
		break;
	case Tag::StartFaceTracking:
		_StartFaceTracking.~StartFaceTracking();
		break;
	case Tag::StopFaceTracking:
		_StopFaceTracking.~StopFaceTracking();
		break;
	case Tag::StartLookingForMarkers:
		_StartLookingForMarkers.~StartLookingForMarkers();
		break;
	case Tag::StopLookingForMarkers:
		_StopLookingForMarkers.~StopLookingForMarkers();
		break;
	case Tag::SetVisionSystemParams:
		_SetVisionSystemParams.~SetVisionSystemParams();
		break;
	case Tag::SetFaceDetectParams:
		_SetFaceDetectParams.~SetFaceDetectParams();
		break;
	case Tag::SetActiveObjectLEDs:
		_SetActiveObjectLEDs.~SetActiveObjectLEDs();
		break;
	case Tag::SetAllActiveObjectLEDs:
		_SetAllActiveObjectLEDs.~SetAllActiveObjectLEDs();
		break;
	case Tag::SetBackpackLEDs:
		_SetBackpackLEDs.~SetBackpackLEDs();
		break;
	case Tag::VisualizeQuad:
		_VisualizeQuad.~VisualizeQuad();
		break;
	case Tag::EraseQuad:
		_EraseQuad.~EraseQuad();
		break;
	default:
		break;
	}
	_tag = Tag::INVALID;
}

} // namespace U2G

} // namespace Cozmo

} // namespace Anki

