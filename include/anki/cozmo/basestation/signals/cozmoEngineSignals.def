// Definition of signals emitted from CozmoEngine to be handled by the game layer
//
// All definitions should look like
//
//   DEF_SIGNAL( <Signal name>, <args of the signals> )
//
//   e.g. DEF_SIGNAL(RobotAvailable, RobotID_t robotID)
//

#include "anki/cozmo/basestation/signals/SignalDefMacros.h"

DEF_SIGNAL(RobotConnected, RobotID_t robotID, bool successful)
DEF_SIGNAL(RobotAvailable, RobotID_t robotID)
DEF_SIGNAL(RobotDisconnected, RobotID_t robotID)
      
// Robot signals
DEF_SIGNAL(PlaySoundForRobot, RobotID_t robotID, u32 soundID, u8 numLoops, u8 volume)

DEF_SIGNAL(StopSoundForRobot, RobotID_t robotID)
      
      
// Vision signals
DEF_SIGNAL(RobotImageAvailable,
           uint8_t robotID)

DEF_SIGNAL(RobotImageChunkAvailable,
           uint8_t robotID,
           const void *imageChunkMsg)

DEF_SIGNAL(DeviceDetectedVisionMarker,
           uint8_t engineID, uint32_t markerType,
           float x_upperLeft,  float y_upperLeft,
           float x_lowerLeft,  float y_lowerLeft,
           float x_upperRight, float y_upperRight,
           float x_lowerRight, float y_lowerRight)

DEF_SIGNAL(RobotObservedObject,
           uint8_t robotID,
           uint32_t objectFamily,
           uint32_t objectType,
           uint32_t objectID,
           uint8_t  markersVisible,
           float img_x_upperLeft,  float img_y_upperLeft,
           float img_width,  float img_height,
           float world_x, float world_y, float world_z,  // Absolute translation vector
           float q0, float q1, float q2, float q3,       // Absolute rotation, as a quaternion
           float topFaceOrientation_rad,                 // Absolute rotation of top face, iff isActive==true
           bool isActive)

DEF_SIGNAL(RobotObservedNothing, uint8_t robotID)

DEF_SIGNAL(RobotDeletedObject, uint8_t robotID, uint32_t objectID) // TODO: Add "reason" for deletion?

DEF_SIGNAL(RobotObservedFace,
           uint8_t robotID,
           float x_upperLeft, float y_upperLeft,
           float width, float height)

// Generic message when an Action completes, what type it was, and whether it succeeded.
// Additional fields (marked with "Optional" below) can be used by specific actions
// to provide other info. Use the type to determine which fields are valid.
// TODO: currently success is just true/false, acutally return ActionResult codes
DEF_SIGNAL(RobotCompletedAction,
           uint8_t robotID,
           int32_t actionType,
           int32_t objectID0,  // Optional
           int32_t objectID1,  // Optional
           int32_t objectID2,  // Optional
           int32_t objectID3,  // Optional
           int32_t objectID4,  // Optional
           uint8_t numObjects, // Optional
           uint8_t success)



