// Autogenerated C++ message buffer code.
// Source: comms/messaging/UiMessageDefinitionsG2U.clad
// Full command line: emitters/cozmo_CPP_main_emitter.py -C src -r ../include/anki/cozmo/game -o ../src --header-path-prefix anki/cozmo/game/ --header-output-extension .def comms/messaging/UiMessageDefinitionsG2U.clad

#ifndef __COMMS_MESSAGING_UI_MESSAGE_DEFINITIONS_G2_U_DEF__
#define __COMMS_MESSAGING_UI_MESSAGE_DEFINITIONS_G2_U_DEF__

#include <CLAD/SafeMessageBuffer.h>
#include <array>
#include <cassert>
#include <cstdint>
#include <string>
#include <vector>

#include "anki/cozmo/game/comms/messaging/UiMessageDefinitionsG2UTag.def"

namespace Anki {

namespace Cozmo {

namespace G2U {

// MESSAGE Ping
struct Ping
{
	uint32_t counter;
	
	/**** Constructors ****/
	Ping() = default;
	Ping(const Ping& other) = default;
	Ping(Ping& other) = default;
	Ping(Ping&& other) noexcept = default;
	Ping& operator=(const Ping& other) = default;
	Ping& operator=(Ping&& other) noexcept = default;
	
	explicit Ping(uint32_t counter)
	:counter(counter)
	{}

	explicit Ping(const uint8_t* buff, size_t len);
	explicit Ping(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const Ping& other) const;
	bool operator!=(const Ping& other) const;
};

// MESSAGE RobotAvailable
struct RobotAvailable
{
	uint32_t robotID;
	
	/**** Constructors ****/
	RobotAvailable() = default;
	RobotAvailable(const RobotAvailable& other) = default;
	RobotAvailable(RobotAvailable& other) = default;
	RobotAvailable(RobotAvailable&& other) noexcept = default;
	RobotAvailable& operator=(const RobotAvailable& other) = default;
	RobotAvailable& operator=(RobotAvailable&& other) noexcept = default;
	
	explicit RobotAvailable(uint32_t robotID)
	:robotID(robotID)
	{}

	explicit RobotAvailable(const uint8_t* buff, size_t len);
	explicit RobotAvailable(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotAvailable& other) const;
	bool operator!=(const RobotAvailable& other) const;
};

// MESSAGE UiDeviceAvailable
struct UiDeviceAvailable
{
	uint32_t deviceID;
	
	/**** Constructors ****/
	UiDeviceAvailable() = default;
	UiDeviceAvailable(const UiDeviceAvailable& other) = default;
	UiDeviceAvailable(UiDeviceAvailable& other) = default;
	UiDeviceAvailable(UiDeviceAvailable&& other) noexcept = default;
	UiDeviceAvailable& operator=(const UiDeviceAvailable& other) = default;
	UiDeviceAvailable& operator=(UiDeviceAvailable&& other) noexcept = default;
	
	explicit UiDeviceAvailable(uint32_t deviceID)
	:deviceID(deviceID)
	{}

	explicit UiDeviceAvailable(const uint8_t* buff, size_t len);
	explicit UiDeviceAvailable(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const UiDeviceAvailable& other) const;
	bool operator!=(const UiDeviceAvailable& other) const;
};

// MESSAGE RobotConnected
struct RobotConnected
{
	uint32_t robotID;
	uint8_t successful;
	
	/**** Constructors ****/
	RobotConnected() = default;
	RobotConnected(const RobotConnected& other) = default;
	RobotConnected(RobotConnected& other) = default;
	RobotConnected(RobotConnected&& other) noexcept = default;
	RobotConnected& operator=(const RobotConnected& other) = default;
	RobotConnected& operator=(RobotConnected&& other) noexcept = default;
	
	explicit RobotConnected(uint32_t robotID
		,uint8_t successful)
	:robotID(robotID)
	,successful(successful)
	{}

	explicit RobotConnected(const uint8_t* buff, size_t len);
	explicit RobotConnected(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotConnected& other) const;
	bool operator!=(const RobotConnected& other) const;
};

// MESSAGE RobotDisconnected
struct RobotDisconnected
{
	uint32_t robotID;
	float timeSinceLastMsg_sec;
	
	/**** Constructors ****/
	RobotDisconnected() = default;
	RobotDisconnected(const RobotDisconnected& other) = default;
	RobotDisconnected(RobotDisconnected& other) = default;
	RobotDisconnected(RobotDisconnected&& other) noexcept = default;
	RobotDisconnected& operator=(const RobotDisconnected& other) = default;
	RobotDisconnected& operator=(RobotDisconnected&& other) noexcept = default;
	
	explicit RobotDisconnected(uint32_t robotID
		,float timeSinceLastMsg_sec)
	:robotID(robotID)
	,timeSinceLastMsg_sec(timeSinceLastMsg_sec)
	{}

	explicit RobotDisconnected(const uint8_t* buff, size_t len);
	explicit RobotDisconnected(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotDisconnected& other) const;
	bool operator!=(const RobotDisconnected& other) const;
};

// MESSAGE UiDeviceConnected
struct UiDeviceConnected
{
	uint32_t deviceID;
	uint8_t successful;
	
	/**** Constructors ****/
	UiDeviceConnected() = default;
	UiDeviceConnected(const UiDeviceConnected& other) = default;
	UiDeviceConnected(UiDeviceConnected& other) = default;
	UiDeviceConnected(UiDeviceConnected&& other) noexcept = default;
	UiDeviceConnected& operator=(const UiDeviceConnected& other) = default;
	UiDeviceConnected& operator=(UiDeviceConnected&& other) noexcept = default;
	
	explicit UiDeviceConnected(uint32_t deviceID
		,uint8_t successful)
	:deviceID(deviceID)
	,successful(successful)
	{}

	explicit UiDeviceConnected(const uint8_t* buff, size_t len);
	explicit UiDeviceConnected(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const UiDeviceConnected& other) const;
	bool operator!=(const UiDeviceConnected& other) const;
};

// MESSAGE RobotState
struct RobotState
{
	float pose_x;
	float pose_y;
	float pose_z;
	float poseAngle_rad;
	float pose_quaternion0;
	float pose_quaternion1;
	float pose_quaternion2;
	float pose_quaternion3;
	float leftWheelSpeed_mmps;
	float rightWheelSpeed_mmps;
	float headAngle_rad;
	float liftHeight_mm;
	float batteryVoltage;
	int32_t carryingObjectID;
	int32_t carryingObjectOnTopID;
	int32_t headTrackingObjectID;
	uint8_t status;
	uint8_t robotID;
	
	/**** Constructors ****/
	RobotState() = default;
	RobotState(const RobotState& other) = default;
	RobotState(RobotState& other) = default;
	RobotState(RobotState&& other) noexcept = default;
	RobotState& operator=(const RobotState& other) = default;
	RobotState& operator=(RobotState&& other) noexcept = default;
	
	explicit RobotState(float pose_x
		,float pose_y
		,float pose_z
		,float poseAngle_rad
		,float pose_quaternion0
		,float pose_quaternion1
		,float pose_quaternion2
		,float pose_quaternion3
		,float leftWheelSpeed_mmps
		,float rightWheelSpeed_mmps
		,float headAngle_rad
		,float liftHeight_mm
		,float batteryVoltage
		,int32_t carryingObjectID
		,int32_t carryingObjectOnTopID
		,int32_t headTrackingObjectID
		,uint8_t status
		,uint8_t robotID)
	:pose_x(pose_x)
	,pose_y(pose_y)
	,pose_z(pose_z)
	,poseAngle_rad(poseAngle_rad)
	,pose_quaternion0(pose_quaternion0)
	,pose_quaternion1(pose_quaternion1)
	,pose_quaternion2(pose_quaternion2)
	,pose_quaternion3(pose_quaternion3)
	,leftWheelSpeed_mmps(leftWheelSpeed_mmps)
	,rightWheelSpeed_mmps(rightWheelSpeed_mmps)
	,headAngle_rad(headAngle_rad)
	,liftHeight_mm(liftHeight_mm)
	,batteryVoltage(batteryVoltage)
	,carryingObjectID(carryingObjectID)
	,carryingObjectOnTopID(carryingObjectOnTopID)
	,headTrackingObjectID(headTrackingObjectID)
	,status(status)
	,robotID(robotID)
	{}

	explicit RobotState(const uint8_t* buff, size_t len);
	explicit RobotState(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotState& other) const;
	bool operator!=(const RobotState& other) const;
};

// MESSAGE ImageChunk
struct ImageChunk
{
	uint32_t imageId;
	uint32_t frameTimeStamp;
	uint16_t nrows;
	uint16_t ncols;
	uint16_t chunkSize;
	uint8_t imageEncoding;
	uint8_t imageChunkCount;
	uint8_t chunkId;
	std::array<uint8_t, 1400> data;
	
	/**** Constructors ****/
	ImageChunk() = default;
	ImageChunk(const ImageChunk& other) = default;
	ImageChunk(ImageChunk& other) = default;
	ImageChunk(ImageChunk&& other) noexcept = default;
	ImageChunk& operator=(const ImageChunk& other) = default;
	ImageChunk& operator=(ImageChunk&& other) noexcept = default;
	
	explicit ImageChunk(uint32_t imageId
		,uint32_t frameTimeStamp
		,uint16_t nrows
		,uint16_t ncols
		,uint16_t chunkSize
		,uint8_t imageEncoding
		,uint8_t imageChunkCount
		,uint8_t chunkId
		,const std::array<uint8_t, 1400>& data)
	:imageId(imageId)
	,frameTimeStamp(frameTimeStamp)
	,nrows(nrows)
	,ncols(ncols)
	,chunkSize(chunkSize)
	,imageEncoding(imageEncoding)
	,imageChunkCount(imageChunkCount)
	,chunkId(chunkId)
	,data(data)
	{}

	explicit ImageChunk(const uint8_t* buff, size_t len);
	explicit ImageChunk(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const ImageChunk& other) const;
	bool operator!=(const ImageChunk& other) const;
};

// MESSAGE RobotObservedObject
struct RobotObservedObject
{
	uint32_t robotID;
	uint32_t objectFamily;
	uint32_t objectType;
	int32_t objectID;
	float img_topLeft_x;
	float img_topLeft_y;
	float img_width;
	float img_height;
	float world_x;
	float world_y;
	float world_z;
	float quaternion0;
	float quaternion1;
	float quaternion2;
	float quaternion3;
	uint8_t markersVisible;
	uint8_t isActive;
	
	/**** Constructors ****/
	RobotObservedObject() = default;
	RobotObservedObject(const RobotObservedObject& other) = default;
	RobotObservedObject(RobotObservedObject& other) = default;
	RobotObservedObject(RobotObservedObject&& other) noexcept = default;
	RobotObservedObject& operator=(const RobotObservedObject& other) = default;
	RobotObservedObject& operator=(RobotObservedObject&& other) noexcept = default;
	
	explicit RobotObservedObject(uint32_t robotID
		,uint32_t objectFamily
		,uint32_t objectType
		,int32_t objectID
		,float img_topLeft_x
		,float img_topLeft_y
		,float img_width
		,float img_height
		,float world_x
		,float world_y
		,float world_z
		,float quaternion0
		,float quaternion1
		,float quaternion2
		,float quaternion3
		,uint8_t markersVisible
		,uint8_t isActive)
	:robotID(robotID)
	,objectFamily(objectFamily)
	,objectType(objectType)
	,objectID(objectID)
	,img_topLeft_x(img_topLeft_x)
	,img_topLeft_y(img_topLeft_y)
	,img_width(img_width)
	,img_height(img_height)
	,world_x(world_x)
	,world_y(world_y)
	,world_z(world_z)
	,quaternion0(quaternion0)
	,quaternion1(quaternion1)
	,quaternion2(quaternion2)
	,quaternion3(quaternion3)
	,markersVisible(markersVisible)
	,isActive(isActive)
	{}

	explicit RobotObservedObject(const uint8_t* buff, size_t len);
	explicit RobotObservedObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotObservedObject& other) const;
	bool operator!=(const RobotObservedObject& other) const;
};

// MESSAGE RobotObservedNothing
struct RobotObservedNothing
{
	uint32_t robotID;
	
	/**** Constructors ****/
	RobotObservedNothing() = default;
	RobotObservedNothing(const RobotObservedNothing& other) = default;
	RobotObservedNothing(RobotObservedNothing& other) = default;
	RobotObservedNothing(RobotObservedNothing&& other) noexcept = default;
	RobotObservedNothing& operator=(const RobotObservedNothing& other) = default;
	RobotObservedNothing& operator=(RobotObservedNothing&& other) noexcept = default;
	
	explicit RobotObservedNothing(uint32_t robotID)
	:robotID(robotID)
	{}

	explicit RobotObservedNothing(const uint8_t* buff, size_t len);
	explicit RobotObservedNothing(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotObservedNothing& other) const;
	bool operator!=(const RobotObservedNothing& other) const;
};

// MESSAGE RobotDeletedObject
struct RobotDeletedObject
{
	uint32_t robotID;
	uint32_t objectID;
	
	/**** Constructors ****/
	RobotDeletedObject() = default;
	RobotDeletedObject(const RobotDeletedObject& other) = default;
	RobotDeletedObject(RobotDeletedObject& other) = default;
	RobotDeletedObject(RobotDeletedObject&& other) noexcept = default;
	RobotDeletedObject& operator=(const RobotDeletedObject& other) = default;
	RobotDeletedObject& operator=(RobotDeletedObject&& other) noexcept = default;
	
	explicit RobotDeletedObject(uint32_t robotID
		,uint32_t objectID)
	:robotID(robotID)
	,objectID(objectID)
	{}

	explicit RobotDeletedObject(const uint8_t* buff, size_t len);
	explicit RobotDeletedObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotDeletedObject& other) const;
	bool operator!=(const RobotDeletedObject& other) const;
};

// MESSAGE DeviceDetectedVisionMarker
struct DeviceDetectedVisionMarker
{
	uint32_t markerType;
	float x_upperLeft;
	float y_upperLeft;
	float x_lowerLeft;
	float y_lowerLeft;
	float x_upperRight;
	float y_upperRight;
	float x_lowerRight;
	float y_lowerRight;
	
	/**** Constructors ****/
	DeviceDetectedVisionMarker() = default;
	DeviceDetectedVisionMarker(const DeviceDetectedVisionMarker& other) = default;
	DeviceDetectedVisionMarker(DeviceDetectedVisionMarker& other) = default;
	DeviceDetectedVisionMarker(DeviceDetectedVisionMarker&& other) noexcept = default;
	DeviceDetectedVisionMarker& operator=(const DeviceDetectedVisionMarker& other) = default;
	DeviceDetectedVisionMarker& operator=(DeviceDetectedVisionMarker&& other) noexcept = default;
	
	explicit DeviceDetectedVisionMarker(uint32_t markerType
		,float x_upperLeft
		,float y_upperLeft
		,float x_lowerLeft
		,float y_lowerLeft
		,float x_upperRight
		,float y_upperRight
		,float x_lowerRight
		,float y_lowerRight)
	:markerType(markerType)
	,x_upperLeft(x_upperLeft)
	,y_upperLeft(y_upperLeft)
	,x_lowerLeft(x_lowerLeft)
	,y_lowerLeft(y_lowerLeft)
	,x_upperRight(x_upperRight)
	,y_upperRight(y_upperRight)
	,x_lowerRight(x_lowerRight)
	,y_lowerRight(y_lowerRight)
	{}

	explicit DeviceDetectedVisionMarker(const uint8_t* buff, size_t len);
	explicit DeviceDetectedVisionMarker(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const DeviceDetectedVisionMarker& other) const;
	bool operator!=(const DeviceDetectedVisionMarker& other) const;
};

// MESSAGE RobotCompletedAction
struct RobotCompletedAction
{
	uint32_t robotID;
	int32_t actionType;
	std::array<int32_t, 5> objectIDs;
	uint8_t numObjects;
	uint8_t success;
	
	/**** Constructors ****/
	RobotCompletedAction() = default;
	RobotCompletedAction(const RobotCompletedAction& other) = default;
	RobotCompletedAction(RobotCompletedAction& other) = default;
	RobotCompletedAction(RobotCompletedAction&& other) noexcept = default;
	RobotCompletedAction& operator=(const RobotCompletedAction& other) = default;
	RobotCompletedAction& operator=(RobotCompletedAction&& other) noexcept = default;
	
	explicit RobotCompletedAction(uint32_t robotID
		,int32_t actionType
		,const std::array<int32_t, 5>& objectIDs
		,uint8_t numObjects
		,uint8_t success)
	:robotID(robotID)
	,actionType(actionType)
	,objectIDs(objectIDs)
	,numObjects(numObjects)
	,success(success)
	{}

	explicit RobotCompletedAction(const uint8_t* buff, size_t len);
	explicit RobotCompletedAction(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const RobotCompletedAction& other) const;
	bool operator!=(const RobotCompletedAction& other) const;
};

// MESSAGE PlaySound
struct PlaySound
{
	std::string soundFilename;
	uint8_t numLoops;
	uint8_t volume;
	
	/**** Constructors ****/
	PlaySound() = default;
	PlaySound(const PlaySound& other) = default;
	PlaySound(PlaySound& other) = default;
	PlaySound(PlaySound&& other) noexcept = default;
	PlaySound& operator=(const PlaySound& other) = default;
	PlaySound& operator=(PlaySound&& other) noexcept = default;
	
	explicit PlaySound(const std::string& soundFilename
		,uint8_t numLoops
		,uint8_t volume)
	:soundFilename(soundFilename)
	,numLoops(numLoops)
	,volume(volume)
	{}

	explicit PlaySound(const uint8_t* buff, size_t len);
	explicit PlaySound(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const PlaySound& other) const;
	bool operator!=(const PlaySound& other) const;
};

// MESSAGE StopSound
struct StopSound
{
	
	/**** Constructors ****/
	StopSound() = default;
	StopSound(const StopSound& other) = default;
	StopSound(StopSound& other) = default;
	StopSound(StopSound&& other) noexcept = default;
	StopSound& operator=(const StopSound& other) = default;
	StopSound& operator=(StopSound&& other) noexcept = default;
		explicit StopSound(const uint8_t* buff, size_t len);
	explicit StopSound(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const StopSound& other) const;
	bool operator!=(const StopSound& other) const;
};

// UNION Message
class Message
{
public:
	using Tag = MessageTag;
	/**** Constructors ****/
	Message() :_tag(Tag::INVALID) { }
	explicit Message(const CLAD::SafeMessageBuffer& buff);
	explicit Message(const uint8_t* buffer, size_t length);

	~Message() { ClearCurrent(); }
	Tag GetTag() const { return _tag; }

	/** Ping **/
	const Anki::Cozmo::G2U::Ping& Get_Ping() const;
	void Set_Ping(const Anki::Cozmo::G2U::Ping& new_Ping);
	void Set_Ping(Anki::Cozmo::G2U::Ping&& new_Ping);

	/** RobotAvailable **/
	const Anki::Cozmo::G2U::RobotAvailable& Get_RobotAvailable() const;
	void Set_RobotAvailable(const Anki::Cozmo::G2U::RobotAvailable& new_RobotAvailable);
	void Set_RobotAvailable(Anki::Cozmo::G2U::RobotAvailable&& new_RobotAvailable);

	/** UiDeviceAvailable **/
	const Anki::Cozmo::G2U::UiDeviceAvailable& Get_UiDeviceAvailable() const;
	void Set_UiDeviceAvailable(const Anki::Cozmo::G2U::UiDeviceAvailable& new_UiDeviceAvailable);
	void Set_UiDeviceAvailable(Anki::Cozmo::G2U::UiDeviceAvailable&& new_UiDeviceAvailable);

	/** RobotConnected **/
	const Anki::Cozmo::G2U::RobotConnected& Get_RobotConnected() const;
	void Set_RobotConnected(const Anki::Cozmo::G2U::RobotConnected& new_RobotConnected);
	void Set_RobotConnected(Anki::Cozmo::G2U::RobotConnected&& new_RobotConnected);

	/** RobotDisconnected **/
	const Anki::Cozmo::G2U::RobotDisconnected& Get_RobotDisconnected() const;
	void Set_RobotDisconnected(const Anki::Cozmo::G2U::RobotDisconnected& new_RobotDisconnected);
	void Set_RobotDisconnected(Anki::Cozmo::G2U::RobotDisconnected&& new_RobotDisconnected);

	/** UiDeviceConnected **/
	const Anki::Cozmo::G2U::UiDeviceConnected& Get_UiDeviceConnected() const;
	void Set_UiDeviceConnected(const Anki::Cozmo::G2U::UiDeviceConnected& new_UiDeviceConnected);
	void Set_UiDeviceConnected(Anki::Cozmo::G2U::UiDeviceConnected&& new_UiDeviceConnected);

	/** RobotState **/
	const Anki::Cozmo::G2U::RobotState& Get_RobotState() const;
	void Set_RobotState(const Anki::Cozmo::G2U::RobotState& new_RobotState);
	void Set_RobotState(Anki::Cozmo::G2U::RobotState&& new_RobotState);

	/** ImageChunk **/
	const Anki::Cozmo::G2U::ImageChunk& Get_ImageChunk() const;
	void Set_ImageChunk(const Anki::Cozmo::G2U::ImageChunk& new_ImageChunk);
	void Set_ImageChunk(Anki::Cozmo::G2U::ImageChunk&& new_ImageChunk);

	/** RobotObservedObject **/
	const Anki::Cozmo::G2U::RobotObservedObject& Get_RobotObservedObject() const;
	void Set_RobotObservedObject(const Anki::Cozmo::G2U::RobotObservedObject& new_RobotObservedObject);
	void Set_RobotObservedObject(Anki::Cozmo::G2U::RobotObservedObject&& new_RobotObservedObject);

	/** RobotObservedNothing **/
	const Anki::Cozmo::G2U::RobotObservedNothing& Get_RobotObservedNothing() const;
	void Set_RobotObservedNothing(const Anki::Cozmo::G2U::RobotObservedNothing& new_RobotObservedNothing);
	void Set_RobotObservedNothing(Anki::Cozmo::G2U::RobotObservedNothing&& new_RobotObservedNothing);

	/** RobotDeletedObject **/
	const Anki::Cozmo::G2U::RobotDeletedObject& Get_RobotDeletedObject() const;
	void Set_RobotDeletedObject(const Anki::Cozmo::G2U::RobotDeletedObject& new_RobotDeletedObject);
	void Set_RobotDeletedObject(Anki::Cozmo::G2U::RobotDeletedObject&& new_RobotDeletedObject);

	/** DeviceDetectedVisionMarker **/
	const Anki::Cozmo::G2U::DeviceDetectedVisionMarker& Get_DeviceDetectedVisionMarker() const;
	void Set_DeviceDetectedVisionMarker(const Anki::Cozmo::G2U::DeviceDetectedVisionMarker& new_DeviceDetectedVisionMarker);
	void Set_DeviceDetectedVisionMarker(Anki::Cozmo::G2U::DeviceDetectedVisionMarker&& new_DeviceDetectedVisionMarker);

	/** RobotCompletedAction **/
	const Anki::Cozmo::G2U::RobotCompletedAction& Get_RobotCompletedAction() const;
	void Set_RobotCompletedAction(const Anki::Cozmo::G2U::RobotCompletedAction& new_RobotCompletedAction);
	void Set_RobotCompletedAction(Anki::Cozmo::G2U::RobotCompletedAction&& new_RobotCompletedAction);

	/** PlaySound **/
	const Anki::Cozmo::G2U::PlaySound& Get_PlaySound() const;
	void Set_PlaySound(const Anki::Cozmo::G2U::PlaySound& new_PlaySound);
	void Set_PlaySound(Anki::Cozmo::G2U::PlaySound&& new_PlaySound);

	/** StopSound **/
	const Anki::Cozmo::G2U::StopSound& Get_StopSound() const;
	void Set_StopSound(const Anki::Cozmo::G2U::StopSound& new_StopSound);
	void Set_StopSound(Anki::Cozmo::G2U::StopSound&& new_StopSound);


	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	size_t Size() const;
private:
	void ClearCurrent();
	Tag _tag;

	union {
		Anki::Cozmo::G2U::Ping _Ping;
		Anki::Cozmo::G2U::RobotAvailable _RobotAvailable;
		Anki::Cozmo::G2U::UiDeviceAvailable _UiDeviceAvailable;
		Anki::Cozmo::G2U::RobotConnected _RobotConnected;
		Anki::Cozmo::G2U::RobotDisconnected _RobotDisconnected;
		Anki::Cozmo::G2U::UiDeviceConnected _UiDeviceConnected;
		Anki::Cozmo::G2U::RobotState _RobotState;
		Anki::Cozmo::G2U::ImageChunk _ImageChunk;
		Anki::Cozmo::G2U::RobotObservedObject _RobotObservedObject;
		Anki::Cozmo::G2U::RobotObservedNothing _RobotObservedNothing;
		Anki::Cozmo::G2U::RobotDeletedObject _RobotDeletedObject;
		Anki::Cozmo::G2U::DeviceDetectedVisionMarker _DeviceDetectedVisionMarker;
		Anki::Cozmo::G2U::RobotCompletedAction _RobotCompletedAction;
		Anki::Cozmo::G2U::PlaySound _PlaySound;
		Anki::Cozmo::G2U::StopSound _StopSound;
	};
};

} // namespace G2U

} // namespace Cozmo

} // namespace Anki

#endif // __COMMS_MESSAGING_UI_MESSAGE_DEFINITIONS_G2_U_DEF__
