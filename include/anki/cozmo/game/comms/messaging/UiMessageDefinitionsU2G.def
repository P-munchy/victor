// Autogenerated C++ message buffer code.
// Source: comms/messaging/UiMessageDefinitionsU2G.clad
// Full command line: emitters/cozmo_CPP_main_emitter.py -C src -r ../include/anki/cozmo/game -o ../src --header-path-prefix anki/cozmo/game/ --header-output-extension .def comms/messaging/UiMessageDefinitionsU2G.clad

#ifndef __COMMS_MESSAGING_UI_MESSAGE_DEFINITIONS_U2_G_DEF__
#define __COMMS_MESSAGING_UI_MESSAGE_DEFINITIONS_U2_G_DEF__

#include <CLAD/SafeMessageBuffer.h>
#include <array>
#include <cassert>
#include <cstdint>
#include <string>
#include <vector>

#include "anki/cozmo/game/comms/messaging/UiMessageDefinitionsU2GTag.def"

namespace Anki {

namespace Cozmo {

// MESSAGE U2G_Ping
struct U2G_Ping
{
	uint32_t counter;
	
	/**** Constructors ****/
	U2G_Ping() = default;
	U2G_Ping(const U2G_Ping& other) = default;
	U2G_Ping(U2G_Ping& other) = default;
	U2G_Ping(U2G_Ping&& other) noexcept = default;
	U2G_Ping& operator=(const U2G_Ping& other) = default;
	U2G_Ping& operator=(U2G_Ping&& other) noexcept = default;
	
	explicit U2G_Ping(uint32_t counter)
	:counter(counter)
	{}

	explicit U2G_Ping(const uint8_t* buff, size_t len);
	explicit U2G_Ping(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_Ping& other) const;
	bool operator!=(const U2G_Ping& other) const;
};

// MESSAGE U2G_ConnectToRobot
struct U2G_ConnectToRobot
{
	uint8_t robotID;
	
	/**** Constructors ****/
	U2G_ConnectToRobot() = default;
	U2G_ConnectToRobot(const U2G_ConnectToRobot& other) = default;
	U2G_ConnectToRobot(U2G_ConnectToRobot& other) = default;
	U2G_ConnectToRobot(U2G_ConnectToRobot&& other) noexcept = default;
	U2G_ConnectToRobot& operator=(const U2G_ConnectToRobot& other) = default;
	U2G_ConnectToRobot& operator=(U2G_ConnectToRobot&& other) noexcept = default;
	
	explicit U2G_ConnectToRobot(uint8_t robotID)
	:robotID(robotID)
	{}

	explicit U2G_ConnectToRobot(const uint8_t* buff, size_t len);
	explicit U2G_ConnectToRobot(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ConnectToRobot& other) const;
	bool operator!=(const U2G_ConnectToRobot& other) const;
};

// MESSAGE U2G_ConnectToUiDevice
struct U2G_ConnectToUiDevice
{
	uint8_t deviceID;
	
	/**** Constructors ****/
	U2G_ConnectToUiDevice() = default;
	U2G_ConnectToUiDevice(const U2G_ConnectToUiDevice& other) = default;
	U2G_ConnectToUiDevice(U2G_ConnectToUiDevice& other) = default;
	U2G_ConnectToUiDevice(U2G_ConnectToUiDevice&& other) noexcept = default;
	U2G_ConnectToUiDevice& operator=(const U2G_ConnectToUiDevice& other) = default;
	U2G_ConnectToUiDevice& operator=(U2G_ConnectToUiDevice&& other) noexcept = default;
	
	explicit U2G_ConnectToUiDevice(uint8_t deviceID)
	:deviceID(deviceID)
	{}

	explicit U2G_ConnectToUiDevice(const uint8_t* buff, size_t len);
	explicit U2G_ConnectToUiDevice(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ConnectToUiDevice& other) const;
	bool operator!=(const U2G_ConnectToUiDevice& other) const;
};

// MESSAGE U2G_DisconnectFromUiDevice
struct U2G_DisconnectFromUiDevice
{
	uint8_t deviceID;
	
	/**** Constructors ****/
	U2G_DisconnectFromUiDevice() = default;
	U2G_DisconnectFromUiDevice(const U2G_DisconnectFromUiDevice& other) = default;
	U2G_DisconnectFromUiDevice(U2G_DisconnectFromUiDevice& other) = default;
	U2G_DisconnectFromUiDevice(U2G_DisconnectFromUiDevice&& other) noexcept = default;
	U2G_DisconnectFromUiDevice& operator=(const U2G_DisconnectFromUiDevice& other) = default;
	U2G_DisconnectFromUiDevice& operator=(U2G_DisconnectFromUiDevice&& other) noexcept = default;
	
	explicit U2G_DisconnectFromUiDevice(uint8_t deviceID)
	:deviceID(deviceID)
	{}

	explicit U2G_DisconnectFromUiDevice(const uint8_t* buff, size_t len);
	explicit U2G_DisconnectFromUiDevice(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_DisconnectFromUiDevice& other) const;
	bool operator!=(const U2G_DisconnectFromUiDevice& other) const;
};

// MESSAGE U2G_ForceAddRobot
struct U2G_ForceAddRobot
{
	std::array<uint8_t, 16> ipAddress;
	uint8_t robotID;
	uint8_t isSimulated;
	
	/**** Constructors ****/
	U2G_ForceAddRobot() = default;
	U2G_ForceAddRobot(const U2G_ForceAddRobot& other) = default;
	U2G_ForceAddRobot(U2G_ForceAddRobot& other) = default;
	U2G_ForceAddRobot(U2G_ForceAddRobot&& other) noexcept = default;
	U2G_ForceAddRobot& operator=(const U2G_ForceAddRobot& other) = default;
	U2G_ForceAddRobot& operator=(U2G_ForceAddRobot&& other) noexcept = default;
	
	explicit U2G_ForceAddRobot(const std::array<uint8_t, 16>& ipAddress
		,uint8_t robotID
		,uint8_t isSimulated)
	:ipAddress(ipAddress)
	,robotID(robotID)
	,isSimulated(isSimulated)
	{}

	explicit U2G_ForceAddRobot(const uint8_t* buff, size_t len);
	explicit U2G_ForceAddRobot(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ForceAddRobot& other) const;
	bool operator!=(const U2G_ForceAddRobot& other) const;
};

// MESSAGE U2G_StartEngine
struct U2G_StartEngine
{
	uint8_t asHost;
	std::array<uint8_t, 16> vizHostIP;
	
	/**** Constructors ****/
	U2G_StartEngine() = default;
	U2G_StartEngine(const U2G_StartEngine& other) = default;
	U2G_StartEngine(U2G_StartEngine& other) = default;
	U2G_StartEngine(U2G_StartEngine&& other) noexcept = default;
	U2G_StartEngine& operator=(const U2G_StartEngine& other) = default;
	U2G_StartEngine& operator=(U2G_StartEngine&& other) noexcept = default;
	
	explicit U2G_StartEngine(uint8_t asHost
		,const std::array<uint8_t, 16>& vizHostIP)
	:asHost(asHost)
	,vizHostIP(vizHostIP)
	{}

	explicit U2G_StartEngine(const uint8_t* buff, size_t len);
	explicit U2G_StartEngine(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StartEngine& other) const;
	bool operator!=(const U2G_StartEngine& other) const;
};

// MESSAGE U2G_DriveWheels
struct U2G_DriveWheels
{
	float lwheel_speed_mmps;
	float rwheel_speed_mmps;
	
	/**** Constructors ****/
	U2G_DriveWheels() = default;
	U2G_DriveWheels(const U2G_DriveWheels& other) = default;
	U2G_DriveWheels(U2G_DriveWheels& other) = default;
	U2G_DriveWheels(U2G_DriveWheels&& other) noexcept = default;
	U2G_DriveWheels& operator=(const U2G_DriveWheels& other) = default;
	U2G_DriveWheels& operator=(U2G_DriveWheels&& other) noexcept = default;
	
	explicit U2G_DriveWheels(float lwheel_speed_mmps
		,float rwheel_speed_mmps)
	:lwheel_speed_mmps(lwheel_speed_mmps)
	,rwheel_speed_mmps(rwheel_speed_mmps)
	{}

	explicit U2G_DriveWheels(const uint8_t* buff, size_t len);
	explicit U2G_DriveWheels(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_DriveWheels& other) const;
	bool operator!=(const U2G_DriveWheels& other) const;
};

// MESSAGE U2G_TurnInPlace
struct U2G_TurnInPlace
{
	float angle_rad;
	uint8_t robotID;
	
	/**** Constructors ****/
	U2G_TurnInPlace() = default;
	U2G_TurnInPlace(const U2G_TurnInPlace& other) = default;
	U2G_TurnInPlace(U2G_TurnInPlace& other) = default;
	U2G_TurnInPlace(U2G_TurnInPlace&& other) noexcept = default;
	U2G_TurnInPlace& operator=(const U2G_TurnInPlace& other) = default;
	U2G_TurnInPlace& operator=(U2G_TurnInPlace&& other) noexcept = default;
	
	explicit U2G_TurnInPlace(float angle_rad
		,uint8_t robotID)
	:angle_rad(angle_rad)
	,robotID(robotID)
	{}

	explicit U2G_TurnInPlace(const uint8_t* buff, size_t len);
	explicit U2G_TurnInPlace(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_TurnInPlace& other) const;
	bool operator!=(const U2G_TurnInPlace& other) const;
};

// MESSAGE U2G_MoveHead
struct U2G_MoveHead
{
	float speed_rad_per_sec;
	
	/**** Constructors ****/
	U2G_MoveHead() = default;
	U2G_MoveHead(const U2G_MoveHead& other) = default;
	U2G_MoveHead(U2G_MoveHead& other) = default;
	U2G_MoveHead(U2G_MoveHead&& other) noexcept = default;
	U2G_MoveHead& operator=(const U2G_MoveHead& other) = default;
	U2G_MoveHead& operator=(U2G_MoveHead&& other) noexcept = default;
	
	explicit U2G_MoveHead(float speed_rad_per_sec)
	:speed_rad_per_sec(speed_rad_per_sec)
	{}

	explicit U2G_MoveHead(const uint8_t* buff, size_t len);
	explicit U2G_MoveHead(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_MoveHead& other) const;
	bool operator!=(const U2G_MoveHead& other) const;
};

// MESSAGE U2G_MoveLift
struct U2G_MoveLift
{
	float speed_rad_per_sec;
	
	/**** Constructors ****/
	U2G_MoveLift() = default;
	U2G_MoveLift(const U2G_MoveLift& other) = default;
	U2G_MoveLift(U2G_MoveLift& other) = default;
	U2G_MoveLift(U2G_MoveLift&& other) noexcept = default;
	U2G_MoveLift& operator=(const U2G_MoveLift& other) = default;
	U2G_MoveLift& operator=(U2G_MoveLift&& other) noexcept = default;
	
	explicit U2G_MoveLift(float speed_rad_per_sec)
	:speed_rad_per_sec(speed_rad_per_sec)
	{}

	explicit U2G_MoveLift(const uint8_t* buff, size_t len);
	explicit U2G_MoveLift(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_MoveLift& other) const;
	bool operator!=(const U2G_MoveLift& other) const;
};

// MESSAGE U2G_SetLiftHeight
struct U2G_SetLiftHeight
{
	float height_mm;
	float max_speed_rad_per_sec;
	float accel_rad_per_sec2;
	
	/**** Constructors ****/
	U2G_SetLiftHeight() = default;
	U2G_SetLiftHeight(const U2G_SetLiftHeight& other) = default;
	U2G_SetLiftHeight(U2G_SetLiftHeight& other) = default;
	U2G_SetLiftHeight(U2G_SetLiftHeight&& other) noexcept = default;
	U2G_SetLiftHeight& operator=(const U2G_SetLiftHeight& other) = default;
	U2G_SetLiftHeight& operator=(U2G_SetLiftHeight&& other) noexcept = default;
	
	explicit U2G_SetLiftHeight(float height_mm
		,float max_speed_rad_per_sec
		,float accel_rad_per_sec2)
	:height_mm(height_mm)
	,max_speed_rad_per_sec(max_speed_rad_per_sec)
	,accel_rad_per_sec2(accel_rad_per_sec2)
	{}

	explicit U2G_SetLiftHeight(const uint8_t* buff, size_t len);
	explicit U2G_SetLiftHeight(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetLiftHeight& other) const;
	bool operator!=(const U2G_SetLiftHeight& other) const;
};

// MESSAGE U2G_SetHeadAngle
struct U2G_SetHeadAngle
{
	float angle_rad;
	float max_speed_rad_per_sec;
	float accel_rad_per_sec2;
	
	/**** Constructors ****/
	U2G_SetHeadAngle() = default;
	U2G_SetHeadAngle(const U2G_SetHeadAngle& other) = default;
	U2G_SetHeadAngle(U2G_SetHeadAngle& other) = default;
	U2G_SetHeadAngle(U2G_SetHeadAngle&& other) noexcept = default;
	U2G_SetHeadAngle& operator=(const U2G_SetHeadAngle& other) = default;
	U2G_SetHeadAngle& operator=(U2G_SetHeadAngle&& other) noexcept = default;
	
	explicit U2G_SetHeadAngle(float angle_rad
		,float max_speed_rad_per_sec
		,float accel_rad_per_sec2)
	:angle_rad(angle_rad)
	,max_speed_rad_per_sec(max_speed_rad_per_sec)
	,accel_rad_per_sec2(accel_rad_per_sec2)
	{}

	explicit U2G_SetHeadAngle(const uint8_t* buff, size_t len);
	explicit U2G_SetHeadAngle(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetHeadAngle& other) const;
	bool operator!=(const U2G_SetHeadAngle& other) const;
};

// MESSAGE U2G_TrackHeadToObject
struct U2G_TrackHeadToObject
{
	uint32_t objectID;
	uint8_t robotID;
	
	/**** Constructors ****/
	U2G_TrackHeadToObject() = default;
	U2G_TrackHeadToObject(const U2G_TrackHeadToObject& other) = default;
	U2G_TrackHeadToObject(U2G_TrackHeadToObject& other) = default;
	U2G_TrackHeadToObject(U2G_TrackHeadToObject&& other) noexcept = default;
	U2G_TrackHeadToObject& operator=(const U2G_TrackHeadToObject& other) = default;
	U2G_TrackHeadToObject& operator=(U2G_TrackHeadToObject&& other) noexcept = default;
	
	explicit U2G_TrackHeadToObject(uint32_t objectID
		,uint8_t robotID)
	:objectID(objectID)
	,robotID(robotID)
	{}

	explicit U2G_TrackHeadToObject(const uint8_t* buff, size_t len);
	explicit U2G_TrackHeadToObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_TrackHeadToObject& other) const;
	bool operator!=(const U2G_TrackHeadToObject& other) const;
};

// MESSAGE U2G_StopAllMotors
struct U2G_StopAllMotors
{
	
	/**** Constructors ****/
	U2G_StopAllMotors() = default;
	U2G_StopAllMotors(const U2G_StopAllMotors& other) = default;
	U2G_StopAllMotors(U2G_StopAllMotors& other) = default;
	U2G_StopAllMotors(U2G_StopAllMotors&& other) noexcept = default;
	U2G_StopAllMotors& operator=(const U2G_StopAllMotors& other) = default;
	U2G_StopAllMotors& operator=(U2G_StopAllMotors&& other) noexcept = default;
		explicit U2G_StopAllMotors(const uint8_t* buff, size_t len);
	explicit U2G_StopAllMotors(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StopAllMotors& other) const;
	bool operator!=(const U2G_StopAllMotors& other) const;
};

// MESSAGE U2G_ImageRequest
struct U2G_ImageRequest
{
	uint8_t robotID;
	uint8_t mode;
	
	/**** Constructors ****/
	U2G_ImageRequest() = default;
	U2G_ImageRequest(const U2G_ImageRequest& other) = default;
	U2G_ImageRequest(U2G_ImageRequest& other) = default;
	U2G_ImageRequest(U2G_ImageRequest&& other) noexcept = default;
	U2G_ImageRequest& operator=(const U2G_ImageRequest& other) = default;
	U2G_ImageRequest& operator=(U2G_ImageRequest&& other) noexcept = default;
	
	explicit U2G_ImageRequest(uint8_t robotID
		,uint8_t mode)
	:robotID(robotID)
	,mode(mode)
	{}

	explicit U2G_ImageRequest(const uint8_t* buff, size_t len);
	explicit U2G_ImageRequest(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ImageRequest& other) const;
	bool operator!=(const U2G_ImageRequest& other) const;
};

// MESSAGE U2G_SetRobotImageSendMode
struct U2G_SetRobotImageSendMode
{
	uint8_t mode;
	uint8_t resolution;
	
	/**** Constructors ****/
	U2G_SetRobotImageSendMode() = default;
	U2G_SetRobotImageSendMode(const U2G_SetRobotImageSendMode& other) = default;
	U2G_SetRobotImageSendMode(U2G_SetRobotImageSendMode& other) = default;
	U2G_SetRobotImageSendMode(U2G_SetRobotImageSendMode&& other) noexcept = default;
	U2G_SetRobotImageSendMode& operator=(const U2G_SetRobotImageSendMode& other) = default;
	U2G_SetRobotImageSendMode& operator=(U2G_SetRobotImageSendMode&& other) noexcept = default;
	
	explicit U2G_SetRobotImageSendMode(uint8_t mode
		,uint8_t resolution)
	:mode(mode)
	,resolution(resolution)
	{}

	explicit U2G_SetRobotImageSendMode(const uint8_t* buff, size_t len);
	explicit U2G_SetRobotImageSendMode(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetRobotImageSendMode& other) const;
	bool operator!=(const U2G_SetRobotImageSendMode& other) const;
};

// MESSAGE U2G_SaveImages
struct U2G_SaveImages
{
	uint8_t mode;
	
	/**** Constructors ****/
	U2G_SaveImages() = default;
	U2G_SaveImages(const U2G_SaveImages& other) = default;
	U2G_SaveImages(U2G_SaveImages& other) = default;
	U2G_SaveImages(U2G_SaveImages&& other) noexcept = default;
	U2G_SaveImages& operator=(const U2G_SaveImages& other) = default;
	U2G_SaveImages& operator=(U2G_SaveImages&& other) noexcept = default;
	
	explicit U2G_SaveImages(uint8_t mode)
	:mode(mode)
	{}

	explicit U2G_SaveImages(const uint8_t* buff, size_t len);
	explicit U2G_SaveImages(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SaveImages& other) const;
	bool operator!=(const U2G_SaveImages& other) const;
};

// MESSAGE U2G_SaveRobotState
struct U2G_SaveRobotState
{
	uint8_t mode;
	
	/**** Constructors ****/
	U2G_SaveRobotState() = default;
	U2G_SaveRobotState(const U2G_SaveRobotState& other) = default;
	U2G_SaveRobotState(U2G_SaveRobotState& other) = default;
	U2G_SaveRobotState(U2G_SaveRobotState&& other) noexcept = default;
	U2G_SaveRobotState& operator=(const U2G_SaveRobotState& other) = default;
	U2G_SaveRobotState& operator=(U2G_SaveRobotState&& other) noexcept = default;
	
	explicit U2G_SaveRobotState(uint8_t mode)
	:mode(mode)
	{}

	explicit U2G_SaveRobotState(const uint8_t* buff, size_t len);
	explicit U2G_SaveRobotState(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SaveRobotState& other) const;
	bool operator!=(const U2G_SaveRobotState& other) const;
};

// MESSAGE U2G_EnableDisplay
struct U2G_EnableDisplay
{
	uint8_t enable;
	
	/**** Constructors ****/
	U2G_EnableDisplay() = default;
	U2G_EnableDisplay(const U2G_EnableDisplay& other) = default;
	U2G_EnableDisplay(U2G_EnableDisplay& other) = default;
	U2G_EnableDisplay(U2G_EnableDisplay&& other) noexcept = default;
	U2G_EnableDisplay& operator=(const U2G_EnableDisplay& other) = default;
	U2G_EnableDisplay& operator=(U2G_EnableDisplay&& other) noexcept = default;
	
	explicit U2G_EnableDisplay(uint8_t enable)
	:enable(enable)
	{}

	explicit U2G_EnableDisplay(const uint8_t* buff, size_t len);
	explicit U2G_EnableDisplay(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_EnableDisplay& other) const;
	bool operator!=(const U2G_EnableDisplay& other) const;
};

// MESSAGE U2G_SetHeadlights
struct U2G_SetHeadlights
{
	uint8_t intensity;
	
	/**** Constructors ****/
	U2G_SetHeadlights() = default;
	U2G_SetHeadlights(const U2G_SetHeadlights& other) = default;
	U2G_SetHeadlights(U2G_SetHeadlights& other) = default;
	U2G_SetHeadlights(U2G_SetHeadlights&& other) noexcept = default;
	U2G_SetHeadlights& operator=(const U2G_SetHeadlights& other) = default;
	U2G_SetHeadlights& operator=(U2G_SetHeadlights&& other) noexcept = default;
	
	explicit U2G_SetHeadlights(uint8_t intensity)
	:intensity(intensity)
	{}

	explicit U2G_SetHeadlights(const uint8_t* buff, size_t len);
	explicit U2G_SetHeadlights(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetHeadlights& other) const;
	bool operator!=(const U2G_SetHeadlights& other) const;
};

// MESSAGE U2G_GotoPose
struct U2G_GotoPose
{
	float x_mm;
	float y_mm;
	float rad;
	uint8_t level;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	U2G_GotoPose() = default;
	U2G_GotoPose(const U2G_GotoPose& other) = default;
	U2G_GotoPose(U2G_GotoPose& other) = default;
	U2G_GotoPose(U2G_GotoPose&& other) noexcept = default;
	U2G_GotoPose& operator=(const U2G_GotoPose& other) = default;
	U2G_GotoPose& operator=(U2G_GotoPose&& other) noexcept = default;
	
	explicit U2G_GotoPose(float x_mm
		,float y_mm
		,float rad
		,uint8_t level
		,uint8_t useManualSpeed)
	:x_mm(x_mm)
	,y_mm(y_mm)
	,rad(rad)
	,level(level)
	,useManualSpeed(useManualSpeed)
	{}

	explicit U2G_GotoPose(const uint8_t* buff, size_t len);
	explicit U2G_GotoPose(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_GotoPose& other) const;
	bool operator!=(const U2G_GotoPose& other) const;
};

// MESSAGE U2G_PlaceObjectOnGround
struct U2G_PlaceObjectOnGround
{
	float x_mm;
	float y_mm;
	float rad;
	uint8_t level;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	U2G_PlaceObjectOnGround() = default;
	U2G_PlaceObjectOnGround(const U2G_PlaceObjectOnGround& other) = default;
	U2G_PlaceObjectOnGround(U2G_PlaceObjectOnGround& other) = default;
	U2G_PlaceObjectOnGround(U2G_PlaceObjectOnGround&& other) noexcept = default;
	U2G_PlaceObjectOnGround& operator=(const U2G_PlaceObjectOnGround& other) = default;
	U2G_PlaceObjectOnGround& operator=(U2G_PlaceObjectOnGround&& other) noexcept = default;
	
	explicit U2G_PlaceObjectOnGround(float x_mm
		,float y_mm
		,float rad
		,uint8_t level
		,uint8_t useManualSpeed)
	:x_mm(x_mm)
	,y_mm(y_mm)
	,rad(rad)
	,level(level)
	,useManualSpeed(useManualSpeed)
	{}

	explicit U2G_PlaceObjectOnGround(const uint8_t* buff, size_t len);
	explicit U2G_PlaceObjectOnGround(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_PlaceObjectOnGround& other) const;
	bool operator!=(const U2G_PlaceObjectOnGround& other) const;
};

// MESSAGE U2G_PlaceObjectOnGroundHere
struct U2G_PlaceObjectOnGroundHere
{
	
	/**** Constructors ****/
	U2G_PlaceObjectOnGroundHere() = default;
	U2G_PlaceObjectOnGroundHere(const U2G_PlaceObjectOnGroundHere& other) = default;
	U2G_PlaceObjectOnGroundHere(U2G_PlaceObjectOnGroundHere& other) = default;
	U2G_PlaceObjectOnGroundHere(U2G_PlaceObjectOnGroundHere&& other) noexcept = default;
	U2G_PlaceObjectOnGroundHere& operator=(const U2G_PlaceObjectOnGroundHere& other) = default;
	U2G_PlaceObjectOnGroundHere& operator=(U2G_PlaceObjectOnGroundHere&& other) noexcept = default;
		explicit U2G_PlaceObjectOnGroundHere(const uint8_t* buff, size_t len);
	explicit U2G_PlaceObjectOnGroundHere(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_PlaceObjectOnGroundHere& other) const;
	bool operator!=(const U2G_PlaceObjectOnGroundHere& other) const;
};

// MESSAGE U2G_ExecuteTestPlan
struct U2G_ExecuteTestPlan
{
	
	/**** Constructors ****/
	U2G_ExecuteTestPlan() = default;
	U2G_ExecuteTestPlan(const U2G_ExecuteTestPlan& other) = default;
	U2G_ExecuteTestPlan(U2G_ExecuteTestPlan& other) = default;
	U2G_ExecuteTestPlan(U2G_ExecuteTestPlan&& other) noexcept = default;
	U2G_ExecuteTestPlan& operator=(const U2G_ExecuteTestPlan& other) = default;
	U2G_ExecuteTestPlan& operator=(U2G_ExecuteTestPlan&& other) noexcept = default;
		explicit U2G_ExecuteTestPlan(const uint8_t* buff, size_t len);
	explicit U2G_ExecuteTestPlan(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ExecuteTestPlan& other) const;
	bool operator!=(const U2G_ExecuteTestPlan& other) const;
};

// MESSAGE U2G_SelectNextObject
struct U2G_SelectNextObject
{
	
	/**** Constructors ****/
	U2G_SelectNextObject() = default;
	U2G_SelectNextObject(const U2G_SelectNextObject& other) = default;
	U2G_SelectNextObject(U2G_SelectNextObject& other) = default;
	U2G_SelectNextObject(U2G_SelectNextObject&& other) noexcept = default;
	U2G_SelectNextObject& operator=(const U2G_SelectNextObject& other) = default;
	U2G_SelectNextObject& operator=(U2G_SelectNextObject&& other) noexcept = default;
		explicit U2G_SelectNextObject(const uint8_t* buff, size_t len);
	explicit U2G_SelectNextObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SelectNextObject& other) const;
	bool operator!=(const U2G_SelectNextObject& other) const;
};

// MESSAGE U2G_PickAndPlaceObject
struct U2G_PickAndPlaceObject
{
	int32_t objectID;
	uint8_t usePreDockPose;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	U2G_PickAndPlaceObject() = default;
	U2G_PickAndPlaceObject(const U2G_PickAndPlaceObject& other) = default;
	U2G_PickAndPlaceObject(U2G_PickAndPlaceObject& other) = default;
	U2G_PickAndPlaceObject(U2G_PickAndPlaceObject&& other) noexcept = default;
	U2G_PickAndPlaceObject& operator=(const U2G_PickAndPlaceObject& other) = default;
	U2G_PickAndPlaceObject& operator=(U2G_PickAndPlaceObject&& other) noexcept = default;
	
	explicit U2G_PickAndPlaceObject(int32_t objectID
		,uint8_t usePreDockPose
		,uint8_t useManualSpeed)
	:objectID(objectID)
	,usePreDockPose(usePreDockPose)
	,useManualSpeed(useManualSpeed)
	{}

	explicit U2G_PickAndPlaceObject(const uint8_t* buff, size_t len);
	explicit U2G_PickAndPlaceObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_PickAndPlaceObject& other) const;
	bool operator!=(const U2G_PickAndPlaceObject& other) const;
};

// MESSAGE U2G_TraverseObject
struct U2G_TraverseObject
{
	uint8_t usePreDockPose;
	uint8_t useManualSpeed;
	
	/**** Constructors ****/
	U2G_TraverseObject() = default;
	U2G_TraverseObject(const U2G_TraverseObject& other) = default;
	U2G_TraverseObject(U2G_TraverseObject& other) = default;
	U2G_TraverseObject(U2G_TraverseObject&& other) noexcept = default;
	U2G_TraverseObject& operator=(const U2G_TraverseObject& other) = default;
	U2G_TraverseObject& operator=(U2G_TraverseObject&& other) noexcept = default;
	
	explicit U2G_TraverseObject(uint8_t usePreDockPose
		,uint8_t useManualSpeed)
	:usePreDockPose(usePreDockPose)
	,useManualSpeed(useManualSpeed)
	{}

	explicit U2G_TraverseObject(const uint8_t* buff, size_t len);
	explicit U2G_TraverseObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_TraverseObject& other) const;
	bool operator!=(const U2G_TraverseObject& other) const;
};

// MESSAGE U2G_SetRobotCarryingObject
struct U2G_SetRobotCarryingObject
{
	int32_t objectID;
	uint8_t robotID;
	
	/**** Constructors ****/
	U2G_SetRobotCarryingObject() = default;
	U2G_SetRobotCarryingObject(const U2G_SetRobotCarryingObject& other) = default;
	U2G_SetRobotCarryingObject(U2G_SetRobotCarryingObject& other) = default;
	U2G_SetRobotCarryingObject(U2G_SetRobotCarryingObject&& other) noexcept = default;
	U2G_SetRobotCarryingObject& operator=(const U2G_SetRobotCarryingObject& other) = default;
	U2G_SetRobotCarryingObject& operator=(U2G_SetRobotCarryingObject&& other) noexcept = default;
	
	explicit U2G_SetRobotCarryingObject(int32_t objectID
		,uint8_t robotID)
	:objectID(objectID)
	,robotID(robotID)
	{}

	explicit U2G_SetRobotCarryingObject(const uint8_t* buff, size_t len);
	explicit U2G_SetRobotCarryingObject(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetRobotCarryingObject& other) const;
	bool operator!=(const U2G_SetRobotCarryingObject& other) const;
};

// MESSAGE U2G_ClearAllBlocks
struct U2G_ClearAllBlocks
{
	
	/**** Constructors ****/
	U2G_ClearAllBlocks() = default;
	U2G_ClearAllBlocks(const U2G_ClearAllBlocks& other) = default;
	U2G_ClearAllBlocks(U2G_ClearAllBlocks& other) = default;
	U2G_ClearAllBlocks(U2G_ClearAllBlocks&& other) noexcept = default;
	U2G_ClearAllBlocks& operator=(const U2G_ClearAllBlocks& other) = default;
	U2G_ClearAllBlocks& operator=(U2G_ClearAllBlocks&& other) noexcept = default;
		explicit U2G_ClearAllBlocks(const uint8_t* buff, size_t len);
	explicit U2G_ClearAllBlocks(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ClearAllBlocks& other) const;
	bool operator!=(const U2G_ClearAllBlocks& other) const;
};

// MESSAGE U2G_VisionWhileMoving
struct U2G_VisionWhileMoving
{
	uint8_t enable;
	
	/**** Constructors ****/
	U2G_VisionWhileMoving() = default;
	U2G_VisionWhileMoving(const U2G_VisionWhileMoving& other) = default;
	U2G_VisionWhileMoving(U2G_VisionWhileMoving& other) = default;
	U2G_VisionWhileMoving(U2G_VisionWhileMoving&& other) noexcept = default;
	U2G_VisionWhileMoving& operator=(const U2G_VisionWhileMoving& other) = default;
	U2G_VisionWhileMoving& operator=(U2G_VisionWhileMoving&& other) noexcept = default;
	
	explicit U2G_VisionWhileMoving(uint8_t enable)
	:enable(enable)
	{}

	explicit U2G_VisionWhileMoving(const uint8_t* buff, size_t len);
	explicit U2G_VisionWhileMoving(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_VisionWhileMoving& other) const;
	bool operator!=(const U2G_VisionWhileMoving& other) const;
};

// MESSAGE U2G_ExecuteBehavior
struct U2G_ExecuteBehavior
{
	uint8_t behaviorMode;
	
	/**** Constructors ****/
	U2G_ExecuteBehavior() = default;
	U2G_ExecuteBehavior(const U2G_ExecuteBehavior& other) = default;
	U2G_ExecuteBehavior(U2G_ExecuteBehavior& other) = default;
	U2G_ExecuteBehavior(U2G_ExecuteBehavior&& other) noexcept = default;
	U2G_ExecuteBehavior& operator=(const U2G_ExecuteBehavior& other) = default;
	U2G_ExecuteBehavior& operator=(U2G_ExecuteBehavior&& other) noexcept = default;
	
	explicit U2G_ExecuteBehavior(uint8_t behaviorMode)
	:behaviorMode(behaviorMode)
	{}

	explicit U2G_ExecuteBehavior(const uint8_t* buff, size_t len);
	explicit U2G_ExecuteBehavior(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ExecuteBehavior& other) const;
	bool operator!=(const U2G_ExecuteBehavior& other) const;
};

// MESSAGE U2G_SetBehaviorState
struct U2G_SetBehaviorState
{
	uint8_t behaviorState;
	
	/**** Constructors ****/
	U2G_SetBehaviorState() = default;
	U2G_SetBehaviorState(const U2G_SetBehaviorState& other) = default;
	U2G_SetBehaviorState(U2G_SetBehaviorState& other) = default;
	U2G_SetBehaviorState(U2G_SetBehaviorState&& other) noexcept = default;
	U2G_SetBehaviorState& operator=(const U2G_SetBehaviorState& other) = default;
	U2G_SetBehaviorState& operator=(U2G_SetBehaviorState&& other) noexcept = default;
	
	explicit U2G_SetBehaviorState(uint8_t behaviorState)
	:behaviorState(behaviorState)
	{}

	explicit U2G_SetBehaviorState(const uint8_t* buff, size_t len);
	explicit U2G_SetBehaviorState(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetBehaviorState& other) const;
	bool operator!=(const U2G_SetBehaviorState& other) const;
};

// MESSAGE U2G_AbortPath
struct U2G_AbortPath
{
	
	/**** Constructors ****/
	U2G_AbortPath() = default;
	U2G_AbortPath(const U2G_AbortPath& other) = default;
	U2G_AbortPath(U2G_AbortPath& other) = default;
	U2G_AbortPath(U2G_AbortPath&& other) noexcept = default;
	U2G_AbortPath& operator=(const U2G_AbortPath& other) = default;
	U2G_AbortPath& operator=(U2G_AbortPath&& other) noexcept = default;
		explicit U2G_AbortPath(const uint8_t* buff, size_t len);
	explicit U2G_AbortPath(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_AbortPath& other) const;
	bool operator!=(const U2G_AbortPath& other) const;
};

// MESSAGE U2G_AbortAll
struct U2G_AbortAll
{
	
	/**** Constructors ****/
	U2G_AbortAll() = default;
	U2G_AbortAll(const U2G_AbortAll& other) = default;
	U2G_AbortAll(U2G_AbortAll& other) = default;
	U2G_AbortAll(U2G_AbortAll&& other) noexcept = default;
	U2G_AbortAll& operator=(const U2G_AbortAll& other) = default;
	U2G_AbortAll& operator=(U2G_AbortAll&& other) noexcept = default;
		explicit U2G_AbortAll(const uint8_t* buff, size_t len);
	explicit U2G_AbortAll(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_AbortAll& other) const;
	bool operator!=(const U2G_AbortAll& other) const;
};

// MESSAGE U2G_DrawPoseMarker
struct U2G_DrawPoseMarker
{
	float x_mm;
	float y_mm;
	float rad;
	uint8_t level;
	
	/**** Constructors ****/
	U2G_DrawPoseMarker() = default;
	U2G_DrawPoseMarker(const U2G_DrawPoseMarker& other) = default;
	U2G_DrawPoseMarker(U2G_DrawPoseMarker& other) = default;
	U2G_DrawPoseMarker(U2G_DrawPoseMarker&& other) noexcept = default;
	U2G_DrawPoseMarker& operator=(const U2G_DrawPoseMarker& other) = default;
	U2G_DrawPoseMarker& operator=(U2G_DrawPoseMarker&& other) noexcept = default;
	
	explicit U2G_DrawPoseMarker(float x_mm
		,float y_mm
		,float rad
		,uint8_t level)
	:x_mm(x_mm)
	,y_mm(y_mm)
	,rad(rad)
	,level(level)
	{}

	explicit U2G_DrawPoseMarker(const uint8_t* buff, size_t len);
	explicit U2G_DrawPoseMarker(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_DrawPoseMarker& other) const;
	bool operator!=(const U2G_DrawPoseMarker& other) const;
};

// MESSAGE U2G_ErasePoseMarker
struct U2G_ErasePoseMarker
{
	
	/**** Constructors ****/
	U2G_ErasePoseMarker() = default;
	U2G_ErasePoseMarker(const U2G_ErasePoseMarker& other) = default;
	U2G_ErasePoseMarker(U2G_ErasePoseMarker& other) = default;
	U2G_ErasePoseMarker(U2G_ErasePoseMarker&& other) noexcept = default;
	U2G_ErasePoseMarker& operator=(const U2G_ErasePoseMarker& other) = default;
	U2G_ErasePoseMarker& operator=(U2G_ErasePoseMarker&& other) noexcept = default;
		explicit U2G_ErasePoseMarker(const uint8_t* buff, size_t len);
	explicit U2G_ErasePoseMarker(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ErasePoseMarker& other) const;
	bool operator!=(const U2G_ErasePoseMarker& other) const;
};

// MESSAGE U2G_SetWheelControllerGains
struct U2G_SetWheelControllerGains
{
	float kpLeft;
	float kiLeft;
	float maxIntegralErrorLeft;
	float kpRight;
	float kiRight;
	float maxIntegralErrorRight;
	
	/**** Constructors ****/
	U2G_SetWheelControllerGains() = default;
	U2G_SetWheelControllerGains(const U2G_SetWheelControllerGains& other) = default;
	U2G_SetWheelControllerGains(U2G_SetWheelControllerGains& other) = default;
	U2G_SetWheelControllerGains(U2G_SetWheelControllerGains&& other) noexcept = default;
	U2G_SetWheelControllerGains& operator=(const U2G_SetWheelControllerGains& other) = default;
	U2G_SetWheelControllerGains& operator=(U2G_SetWheelControllerGains&& other) noexcept = default;
	
	explicit U2G_SetWheelControllerGains(float kpLeft
		,float kiLeft
		,float maxIntegralErrorLeft
		,float kpRight
		,float kiRight
		,float maxIntegralErrorRight)
	:kpLeft(kpLeft)
	,kiLeft(kiLeft)
	,maxIntegralErrorLeft(maxIntegralErrorLeft)
	,kpRight(kpRight)
	,kiRight(kiRight)
	,maxIntegralErrorRight(maxIntegralErrorRight)
	{}

	explicit U2G_SetWheelControllerGains(const uint8_t* buff, size_t len);
	explicit U2G_SetWheelControllerGains(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetWheelControllerGains& other) const;
	bool operator!=(const U2G_SetWheelControllerGains& other) const;
};

// MESSAGE U2G_SetHeadControllerGains
struct U2G_SetHeadControllerGains
{
	float kp;
	float ki;
	float maxIntegralError;
	
	/**** Constructors ****/
	U2G_SetHeadControllerGains() = default;
	U2G_SetHeadControllerGains(const U2G_SetHeadControllerGains& other) = default;
	U2G_SetHeadControllerGains(U2G_SetHeadControllerGains& other) = default;
	U2G_SetHeadControllerGains(U2G_SetHeadControllerGains&& other) noexcept = default;
	U2G_SetHeadControllerGains& operator=(const U2G_SetHeadControllerGains& other) = default;
	U2G_SetHeadControllerGains& operator=(U2G_SetHeadControllerGains&& other) noexcept = default;
	
	explicit U2G_SetHeadControllerGains(float kp
		,float ki
		,float maxIntegralError)
	:kp(kp)
	,ki(ki)
	,maxIntegralError(maxIntegralError)
	{}

	explicit U2G_SetHeadControllerGains(const uint8_t* buff, size_t len);
	explicit U2G_SetHeadControllerGains(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetHeadControllerGains& other) const;
	bool operator!=(const U2G_SetHeadControllerGains& other) const;
};

// MESSAGE U2G_SetLiftControllerGains
struct U2G_SetLiftControllerGains
{
	float kp;
	float ki;
	float maxIntegralError;
	
	/**** Constructors ****/
	U2G_SetLiftControllerGains() = default;
	U2G_SetLiftControllerGains(const U2G_SetLiftControllerGains& other) = default;
	U2G_SetLiftControllerGains(U2G_SetLiftControllerGains& other) = default;
	U2G_SetLiftControllerGains(U2G_SetLiftControllerGains&& other) noexcept = default;
	U2G_SetLiftControllerGains& operator=(const U2G_SetLiftControllerGains& other) = default;
	U2G_SetLiftControllerGains& operator=(U2G_SetLiftControllerGains&& other) noexcept = default;
	
	explicit U2G_SetLiftControllerGains(float kp
		,float ki
		,float maxIntegralError)
	:kp(kp)
	,ki(ki)
	,maxIntegralError(maxIntegralError)
	{}

	explicit U2G_SetLiftControllerGains(const uint8_t* buff, size_t len);
	explicit U2G_SetLiftControllerGains(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetLiftControllerGains& other) const;
	bool operator!=(const U2G_SetLiftControllerGains& other) const;
};

// MESSAGE U2G_SelectNextSoundScheme
struct U2G_SelectNextSoundScheme
{
	
	/**** Constructors ****/
	U2G_SelectNextSoundScheme() = default;
	U2G_SelectNextSoundScheme(const U2G_SelectNextSoundScheme& other) = default;
	U2G_SelectNextSoundScheme(U2G_SelectNextSoundScheme& other) = default;
	U2G_SelectNextSoundScheme(U2G_SelectNextSoundScheme&& other) noexcept = default;
	U2G_SelectNextSoundScheme& operator=(const U2G_SelectNextSoundScheme& other) = default;
	U2G_SelectNextSoundScheme& operator=(U2G_SelectNextSoundScheme&& other) noexcept = default;
		explicit U2G_SelectNextSoundScheme(const uint8_t* buff, size_t len);
	explicit U2G_SelectNextSoundScheme(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SelectNextSoundScheme& other) const;
	bool operator!=(const U2G_SelectNextSoundScheme& other) const;
};

// MESSAGE U2G_StartTestMode
struct U2G_StartTestMode
{
	int32_t p1;
	int32_t p2;
	int32_t p3;
	uint8_t mode;
	
	/**** Constructors ****/
	U2G_StartTestMode() = default;
	U2G_StartTestMode(const U2G_StartTestMode& other) = default;
	U2G_StartTestMode(U2G_StartTestMode& other) = default;
	U2G_StartTestMode(U2G_StartTestMode&& other) noexcept = default;
	U2G_StartTestMode& operator=(const U2G_StartTestMode& other) = default;
	U2G_StartTestMode& operator=(U2G_StartTestMode&& other) noexcept = default;
	
	explicit U2G_StartTestMode(int32_t p1
		,int32_t p2
		,int32_t p3
		,uint8_t mode)
	:p1(p1)
	,p2(p2)
	,p3(p3)
	,mode(mode)
	{}

	explicit U2G_StartTestMode(const uint8_t* buff, size_t len);
	explicit U2G_StartTestMode(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StartTestMode& other) const;
	bool operator!=(const U2G_StartTestMode& other) const;
};

// MESSAGE U2G_IMURequest
struct U2G_IMURequest
{
	uint32_t length_ms;
	
	/**** Constructors ****/
	U2G_IMURequest() = default;
	U2G_IMURequest(const U2G_IMURequest& other) = default;
	U2G_IMURequest(U2G_IMURequest& other) = default;
	U2G_IMURequest(U2G_IMURequest&& other) noexcept = default;
	U2G_IMURequest& operator=(const U2G_IMURequest& other) = default;
	U2G_IMURequest& operator=(U2G_IMURequest&& other) noexcept = default;
	
	explicit U2G_IMURequest(uint32_t length_ms)
	:length_ms(length_ms)
	{}

	explicit U2G_IMURequest(const uint8_t* buff, size_t len);
	explicit U2G_IMURequest(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_IMURequest& other) const;
	bool operator!=(const U2G_IMURequest& other) const;
};

// MESSAGE U2G_PlayAnimation
struct U2G_PlayAnimation
{
	uint32_t numLoops;
	std::string animationName;
	
	/**** Constructors ****/
	U2G_PlayAnimation() = default;
	U2G_PlayAnimation(const U2G_PlayAnimation& other) = default;
	U2G_PlayAnimation(U2G_PlayAnimation& other) = default;
	U2G_PlayAnimation(U2G_PlayAnimation&& other) noexcept = default;
	U2G_PlayAnimation& operator=(const U2G_PlayAnimation& other) = default;
	U2G_PlayAnimation& operator=(U2G_PlayAnimation&& other) noexcept = default;
	
	explicit U2G_PlayAnimation(uint32_t numLoops
		,const std::string& animationName)
	:numLoops(numLoops)
	,animationName(animationName)
	{}

	explicit U2G_PlayAnimation(const uint8_t* buff, size_t len);
	explicit U2G_PlayAnimation(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_PlayAnimation& other) const;
	bool operator!=(const U2G_PlayAnimation& other) const;
};

// MESSAGE U2G_ReadAnimationFile
struct U2G_ReadAnimationFile
{
	
	/**** Constructors ****/
	U2G_ReadAnimationFile() = default;
	U2G_ReadAnimationFile(const U2G_ReadAnimationFile& other) = default;
	U2G_ReadAnimationFile(U2G_ReadAnimationFile& other) = default;
	U2G_ReadAnimationFile(U2G_ReadAnimationFile&& other) noexcept = default;
	U2G_ReadAnimationFile& operator=(const U2G_ReadAnimationFile& other) = default;
	U2G_ReadAnimationFile& operator=(U2G_ReadAnimationFile&& other) noexcept = default;
		explicit U2G_ReadAnimationFile(const uint8_t* buff, size_t len);
	explicit U2G_ReadAnimationFile(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_ReadAnimationFile& other) const;
	bool operator!=(const U2G_ReadAnimationFile& other) const;
};

// MESSAGE U2G_StartFaceTracking
struct U2G_StartFaceTracking
{
	uint8_t timeout_sec;
	
	/**** Constructors ****/
	U2G_StartFaceTracking() = default;
	U2G_StartFaceTracking(const U2G_StartFaceTracking& other) = default;
	U2G_StartFaceTracking(U2G_StartFaceTracking& other) = default;
	U2G_StartFaceTracking(U2G_StartFaceTracking&& other) noexcept = default;
	U2G_StartFaceTracking& operator=(const U2G_StartFaceTracking& other) = default;
	U2G_StartFaceTracking& operator=(U2G_StartFaceTracking&& other) noexcept = default;
	
	explicit U2G_StartFaceTracking(uint8_t timeout_sec)
	:timeout_sec(timeout_sec)
	{}

	explicit U2G_StartFaceTracking(const uint8_t* buff, size_t len);
	explicit U2G_StartFaceTracking(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StartFaceTracking& other) const;
	bool operator!=(const U2G_StartFaceTracking& other) const;
};

// MESSAGE U2G_StopFaceTracking
struct U2G_StopFaceTracking
{
	
	/**** Constructors ****/
	U2G_StopFaceTracking() = default;
	U2G_StopFaceTracking(const U2G_StopFaceTracking& other) = default;
	U2G_StopFaceTracking(U2G_StopFaceTracking& other) = default;
	U2G_StopFaceTracking(U2G_StopFaceTracking&& other) noexcept = default;
	U2G_StopFaceTracking& operator=(const U2G_StopFaceTracking& other) = default;
	U2G_StopFaceTracking& operator=(U2G_StopFaceTracking&& other) noexcept = default;
		explicit U2G_StopFaceTracking(const uint8_t* buff, size_t len);
	explicit U2G_StopFaceTracking(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StopFaceTracking& other) const;
	bool operator!=(const U2G_StopFaceTracking& other) const;
};

// MESSAGE U2G_StartLookingForMarkers
struct U2G_StartLookingForMarkers
{
	
	/**** Constructors ****/
	U2G_StartLookingForMarkers() = default;
	U2G_StartLookingForMarkers(const U2G_StartLookingForMarkers& other) = default;
	U2G_StartLookingForMarkers(U2G_StartLookingForMarkers& other) = default;
	U2G_StartLookingForMarkers(U2G_StartLookingForMarkers&& other) noexcept = default;
	U2G_StartLookingForMarkers& operator=(const U2G_StartLookingForMarkers& other) = default;
	U2G_StartLookingForMarkers& operator=(U2G_StartLookingForMarkers&& other) noexcept = default;
		explicit U2G_StartLookingForMarkers(const uint8_t* buff, size_t len);
	explicit U2G_StartLookingForMarkers(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StartLookingForMarkers& other) const;
	bool operator!=(const U2G_StartLookingForMarkers& other) const;
};

// MESSAGE U2G_StopLookingForMarkers
struct U2G_StopLookingForMarkers
{
	
	/**** Constructors ****/
	U2G_StopLookingForMarkers() = default;
	U2G_StopLookingForMarkers(const U2G_StopLookingForMarkers& other) = default;
	U2G_StopLookingForMarkers(U2G_StopLookingForMarkers& other) = default;
	U2G_StopLookingForMarkers(U2G_StopLookingForMarkers&& other) noexcept = default;
	U2G_StopLookingForMarkers& operator=(const U2G_StopLookingForMarkers& other) = default;
	U2G_StopLookingForMarkers& operator=(U2G_StopLookingForMarkers&& other) noexcept = default;
		explicit U2G_StopLookingForMarkers(const uint8_t* buff, size_t len);
	explicit U2G_StopLookingForMarkers(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_StopLookingForMarkers& other) const;
	bool operator!=(const U2G_StopLookingForMarkers& other) const;
};

// MESSAGE U2G_SetVisionSystemParams
struct U2G_SetVisionSystemParams
{
	int32_t autoexposureOn;
	float exposureTime;
	int32_t integerCountsIncrement;
	float minExposureTime;
	float maxExposureTime;
	float percentileToMakeHigh;
	int32_t limitFramerate;
	uint8_t highValue;
	
	/**** Constructors ****/
	U2G_SetVisionSystemParams() = default;
	U2G_SetVisionSystemParams(const U2G_SetVisionSystemParams& other) = default;
	U2G_SetVisionSystemParams(U2G_SetVisionSystemParams& other) = default;
	U2G_SetVisionSystemParams(U2G_SetVisionSystemParams&& other) noexcept = default;
	U2G_SetVisionSystemParams& operator=(const U2G_SetVisionSystemParams& other) = default;
	U2G_SetVisionSystemParams& operator=(U2G_SetVisionSystemParams&& other) noexcept = default;
	
	explicit U2G_SetVisionSystemParams(int32_t autoexposureOn
		,float exposureTime
		,int32_t integerCountsIncrement
		,float minExposureTime
		,float maxExposureTime
		,float percentileToMakeHigh
		,int32_t limitFramerate
		,uint8_t highValue)
	:autoexposureOn(autoexposureOn)
	,exposureTime(exposureTime)
	,integerCountsIncrement(integerCountsIncrement)
	,minExposureTime(minExposureTime)
	,maxExposureTime(maxExposureTime)
	,percentileToMakeHigh(percentileToMakeHigh)
	,limitFramerate(limitFramerate)
	,highValue(highValue)
	{}

	explicit U2G_SetVisionSystemParams(const uint8_t* buff, size_t len);
	explicit U2G_SetVisionSystemParams(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetVisionSystemParams& other) const;
	bool operator!=(const U2G_SetVisionSystemParams& other) const;
};

// MESSAGE U2G_SetFaceDetectParams
struct U2G_SetFaceDetectParams
{
	float scaleFactor;
	int32_t minNeighbors;
	int32_t minObjectHeight;
	int32_t minObjectWidth;
	int32_t maxObjectHeight;
	int32_t maxObjectWidth;
	
	/**** Constructors ****/
	U2G_SetFaceDetectParams() = default;
	U2G_SetFaceDetectParams(const U2G_SetFaceDetectParams& other) = default;
	U2G_SetFaceDetectParams(U2G_SetFaceDetectParams& other) = default;
	U2G_SetFaceDetectParams(U2G_SetFaceDetectParams&& other) noexcept = default;
	U2G_SetFaceDetectParams& operator=(const U2G_SetFaceDetectParams& other) = default;
	U2G_SetFaceDetectParams& operator=(U2G_SetFaceDetectParams&& other) noexcept = default;
	
	explicit U2G_SetFaceDetectParams(float scaleFactor
		,int32_t minNeighbors
		,int32_t minObjectHeight
		,int32_t minObjectWidth
		,int32_t maxObjectHeight
		,int32_t maxObjectWidth)
	:scaleFactor(scaleFactor)
	,minNeighbors(minNeighbors)
	,minObjectHeight(minObjectHeight)
	,minObjectWidth(minObjectWidth)
	,maxObjectHeight(maxObjectHeight)
	,maxObjectWidth(maxObjectWidth)
	{}

	explicit U2G_SetFaceDetectParams(const uint8_t* buff, size_t len);
	explicit U2G_SetFaceDetectParams(const CLAD::SafeMessageBuffer& buffer);
	
	/**** Pack ****/
	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	/**** Unpack ****/
	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Size() const;

	bool operator==(const U2G_SetFaceDetectParams& other) const;
	bool operator!=(const U2G_SetFaceDetectParams& other) const;
};

// UNION U2G_Message
class U2G_Message
{
public:
	using Tag = U2G_MessageTag;
	/**** Constructors ****/
	U2G_Message() :_tag(Tag::INVALID) { }
	explicit U2G_Message(const CLAD::SafeMessageBuffer& buff);
	explicit U2G_Message(const uint8_t* buffer, size_t length);

	~U2G_Message() { ClearCurrent(); }
	Tag GetTag() const { return _tag; }

	/** Ping **/
	const Anki::Cozmo::U2G_Ping& Get_Ping() const;
	void Set_Ping(const Anki::Cozmo::U2G_Ping& new_Ping);
	void Set_Ping(Anki::Cozmo::U2G_Ping&& new_Ping);

	/** ConnectToRobot **/
	const Anki::Cozmo::U2G_ConnectToRobot& Get_ConnectToRobot() const;
	void Set_ConnectToRobot(const Anki::Cozmo::U2G_ConnectToRobot& new_ConnectToRobot);
	void Set_ConnectToRobot(Anki::Cozmo::U2G_ConnectToRobot&& new_ConnectToRobot);

	/** ConnectToUiDevice **/
	const Anki::Cozmo::U2G_ConnectToUiDevice& Get_ConnectToUiDevice() const;
	void Set_ConnectToUiDevice(const Anki::Cozmo::U2G_ConnectToUiDevice& new_ConnectToUiDevice);
	void Set_ConnectToUiDevice(Anki::Cozmo::U2G_ConnectToUiDevice&& new_ConnectToUiDevice);

	/** DisconnectFromUiDevice **/
	const Anki::Cozmo::U2G_DisconnectFromUiDevice& Get_DisconnectFromUiDevice() const;
	void Set_DisconnectFromUiDevice(const Anki::Cozmo::U2G_DisconnectFromUiDevice& new_DisconnectFromUiDevice);
	void Set_DisconnectFromUiDevice(Anki::Cozmo::U2G_DisconnectFromUiDevice&& new_DisconnectFromUiDevice);

	/** ForceAddRobot **/
	const Anki::Cozmo::U2G_ForceAddRobot& Get_ForceAddRobot() const;
	void Set_ForceAddRobot(const Anki::Cozmo::U2G_ForceAddRobot& new_ForceAddRobot);
	void Set_ForceAddRobot(Anki::Cozmo::U2G_ForceAddRobot&& new_ForceAddRobot);

	/** StartEngine **/
	const Anki::Cozmo::U2G_StartEngine& Get_StartEngine() const;
	void Set_StartEngine(const Anki::Cozmo::U2G_StartEngine& new_StartEngine);
	void Set_StartEngine(Anki::Cozmo::U2G_StartEngine&& new_StartEngine);

	/** DriveWheels **/
	const Anki::Cozmo::U2G_DriveWheels& Get_DriveWheels() const;
	void Set_DriveWheels(const Anki::Cozmo::U2G_DriveWheels& new_DriveWheels);
	void Set_DriveWheels(Anki::Cozmo::U2G_DriveWheels&& new_DriveWheels);

	/** TurnInPlace **/
	const Anki::Cozmo::U2G_TurnInPlace& Get_TurnInPlace() const;
	void Set_TurnInPlace(const Anki::Cozmo::U2G_TurnInPlace& new_TurnInPlace);
	void Set_TurnInPlace(Anki::Cozmo::U2G_TurnInPlace&& new_TurnInPlace);

	/** MoveHead **/
	const Anki::Cozmo::U2G_MoveHead& Get_MoveHead() const;
	void Set_MoveHead(const Anki::Cozmo::U2G_MoveHead& new_MoveHead);
	void Set_MoveHead(Anki::Cozmo::U2G_MoveHead&& new_MoveHead);

	/** MoveLift **/
	const Anki::Cozmo::U2G_MoveLift& Get_MoveLift() const;
	void Set_MoveLift(const Anki::Cozmo::U2G_MoveLift& new_MoveLift);
	void Set_MoveLift(Anki::Cozmo::U2G_MoveLift&& new_MoveLift);

	/** SetLiftHeight **/
	const Anki::Cozmo::U2G_SetLiftHeight& Get_SetLiftHeight() const;
	void Set_SetLiftHeight(const Anki::Cozmo::U2G_SetLiftHeight& new_SetLiftHeight);
	void Set_SetLiftHeight(Anki::Cozmo::U2G_SetLiftHeight&& new_SetLiftHeight);

	/** SetHeadAngle **/
	const Anki::Cozmo::U2G_SetHeadAngle& Get_SetHeadAngle() const;
	void Set_SetHeadAngle(const Anki::Cozmo::U2G_SetHeadAngle& new_SetHeadAngle);
	void Set_SetHeadAngle(Anki::Cozmo::U2G_SetHeadAngle&& new_SetHeadAngle);

	/** TrackHeadToObject **/
	const Anki::Cozmo::U2G_TrackHeadToObject& Get_TrackHeadToObject() const;
	void Set_TrackHeadToObject(const Anki::Cozmo::U2G_TrackHeadToObject& new_TrackHeadToObject);
	void Set_TrackHeadToObject(Anki::Cozmo::U2G_TrackHeadToObject&& new_TrackHeadToObject);

	/** StopAllMotors **/
	const Anki::Cozmo::U2G_StopAllMotors& Get_StopAllMotors() const;
	void Set_StopAllMotors(const Anki::Cozmo::U2G_StopAllMotors& new_StopAllMotors);
	void Set_StopAllMotors(Anki::Cozmo::U2G_StopAllMotors&& new_StopAllMotors);

	/** ImageRequest **/
	const Anki::Cozmo::U2G_ImageRequest& Get_ImageRequest() const;
	void Set_ImageRequest(const Anki::Cozmo::U2G_ImageRequest& new_ImageRequest);
	void Set_ImageRequest(Anki::Cozmo::U2G_ImageRequest&& new_ImageRequest);

	/** SetRobotImageSendMode **/
	const Anki::Cozmo::U2G_SetRobotImageSendMode& Get_SetRobotImageSendMode() const;
	void Set_SetRobotImageSendMode(const Anki::Cozmo::U2G_SetRobotImageSendMode& new_SetRobotImageSendMode);
	void Set_SetRobotImageSendMode(Anki::Cozmo::U2G_SetRobotImageSendMode&& new_SetRobotImageSendMode);

	/** SaveImages **/
	const Anki::Cozmo::U2G_SaveImages& Get_SaveImages() const;
	void Set_SaveImages(const Anki::Cozmo::U2G_SaveImages& new_SaveImages);
	void Set_SaveImages(Anki::Cozmo::U2G_SaveImages&& new_SaveImages);

	/** SaveRobotState **/
	const Anki::Cozmo::U2G_SaveRobotState& Get_SaveRobotState() const;
	void Set_SaveRobotState(const Anki::Cozmo::U2G_SaveRobotState& new_SaveRobotState);
	void Set_SaveRobotState(Anki::Cozmo::U2G_SaveRobotState&& new_SaveRobotState);

	/** EnableDisplay **/
	const Anki::Cozmo::U2G_EnableDisplay& Get_EnableDisplay() const;
	void Set_EnableDisplay(const Anki::Cozmo::U2G_EnableDisplay& new_EnableDisplay);
	void Set_EnableDisplay(Anki::Cozmo::U2G_EnableDisplay&& new_EnableDisplay);

	/** SetHeadlights **/
	const Anki::Cozmo::U2G_SetHeadlights& Get_SetHeadlights() const;
	void Set_SetHeadlights(const Anki::Cozmo::U2G_SetHeadlights& new_SetHeadlights);
	void Set_SetHeadlights(Anki::Cozmo::U2G_SetHeadlights&& new_SetHeadlights);

	/** GotoPose **/
	const Anki::Cozmo::U2G_GotoPose& Get_GotoPose() const;
	void Set_GotoPose(const Anki::Cozmo::U2G_GotoPose& new_GotoPose);
	void Set_GotoPose(Anki::Cozmo::U2G_GotoPose&& new_GotoPose);

	/** PlaceObjectOnGround **/
	const Anki::Cozmo::U2G_PlaceObjectOnGround& Get_PlaceObjectOnGround() const;
	void Set_PlaceObjectOnGround(const Anki::Cozmo::U2G_PlaceObjectOnGround& new_PlaceObjectOnGround);
	void Set_PlaceObjectOnGround(Anki::Cozmo::U2G_PlaceObjectOnGround&& new_PlaceObjectOnGround);

	/** PlaceObjectOnGroundHere **/
	const Anki::Cozmo::U2G_PlaceObjectOnGroundHere& Get_PlaceObjectOnGroundHere() const;
	void Set_PlaceObjectOnGroundHere(const Anki::Cozmo::U2G_PlaceObjectOnGroundHere& new_PlaceObjectOnGroundHere);
	void Set_PlaceObjectOnGroundHere(Anki::Cozmo::U2G_PlaceObjectOnGroundHere&& new_PlaceObjectOnGroundHere);

	/** ExecuteTestPlan **/
	const Anki::Cozmo::U2G_ExecuteTestPlan& Get_ExecuteTestPlan() const;
	void Set_ExecuteTestPlan(const Anki::Cozmo::U2G_ExecuteTestPlan& new_ExecuteTestPlan);
	void Set_ExecuteTestPlan(Anki::Cozmo::U2G_ExecuteTestPlan&& new_ExecuteTestPlan);

	/** SelectNextObject **/
	const Anki::Cozmo::U2G_SelectNextObject& Get_SelectNextObject() const;
	void Set_SelectNextObject(const Anki::Cozmo::U2G_SelectNextObject& new_SelectNextObject);
	void Set_SelectNextObject(Anki::Cozmo::U2G_SelectNextObject&& new_SelectNextObject);

	/** PickAndPlaceObject **/
	const Anki::Cozmo::U2G_PickAndPlaceObject& Get_PickAndPlaceObject() const;
	void Set_PickAndPlaceObject(const Anki::Cozmo::U2G_PickAndPlaceObject& new_PickAndPlaceObject);
	void Set_PickAndPlaceObject(Anki::Cozmo::U2G_PickAndPlaceObject&& new_PickAndPlaceObject);

	/** TraverseObject **/
	const Anki::Cozmo::U2G_TraverseObject& Get_TraverseObject() const;
	void Set_TraverseObject(const Anki::Cozmo::U2G_TraverseObject& new_TraverseObject);
	void Set_TraverseObject(Anki::Cozmo::U2G_TraverseObject&& new_TraverseObject);

	/** SetRobotCarryingObject **/
	const Anki::Cozmo::U2G_SetRobotCarryingObject& Get_SetRobotCarryingObject() const;
	void Set_SetRobotCarryingObject(const Anki::Cozmo::U2G_SetRobotCarryingObject& new_SetRobotCarryingObject);
	void Set_SetRobotCarryingObject(Anki::Cozmo::U2G_SetRobotCarryingObject&& new_SetRobotCarryingObject);

	/** ClearAllBlocks **/
	const Anki::Cozmo::U2G_ClearAllBlocks& Get_ClearAllBlocks() const;
	void Set_ClearAllBlocks(const Anki::Cozmo::U2G_ClearAllBlocks& new_ClearAllBlocks);
	void Set_ClearAllBlocks(Anki::Cozmo::U2G_ClearAllBlocks&& new_ClearAllBlocks);

	/** VisionWhileMoving **/
	const Anki::Cozmo::U2G_VisionWhileMoving& Get_VisionWhileMoving() const;
	void Set_VisionWhileMoving(const Anki::Cozmo::U2G_VisionWhileMoving& new_VisionWhileMoving);
	void Set_VisionWhileMoving(Anki::Cozmo::U2G_VisionWhileMoving&& new_VisionWhileMoving);

	/** ExecuteBehavior **/
	const Anki::Cozmo::U2G_ExecuteBehavior& Get_ExecuteBehavior() const;
	void Set_ExecuteBehavior(const Anki::Cozmo::U2G_ExecuteBehavior& new_ExecuteBehavior);
	void Set_ExecuteBehavior(Anki::Cozmo::U2G_ExecuteBehavior&& new_ExecuteBehavior);

	/** SetBehaviorState **/
	const Anki::Cozmo::U2G_SetBehaviorState& Get_SetBehaviorState() const;
	void Set_SetBehaviorState(const Anki::Cozmo::U2G_SetBehaviorState& new_SetBehaviorState);
	void Set_SetBehaviorState(Anki::Cozmo::U2G_SetBehaviorState&& new_SetBehaviorState);

	/** AbortPath **/
	const Anki::Cozmo::U2G_AbortPath& Get_AbortPath() const;
	void Set_AbortPath(const Anki::Cozmo::U2G_AbortPath& new_AbortPath);
	void Set_AbortPath(Anki::Cozmo::U2G_AbortPath&& new_AbortPath);

	/** AbortAll **/
	const Anki::Cozmo::U2G_AbortAll& Get_AbortAll() const;
	void Set_AbortAll(const Anki::Cozmo::U2G_AbortAll& new_AbortAll);
	void Set_AbortAll(Anki::Cozmo::U2G_AbortAll&& new_AbortAll);

	/** DrawPoseMarker **/
	const Anki::Cozmo::U2G_DrawPoseMarker& Get_DrawPoseMarker() const;
	void Set_DrawPoseMarker(const Anki::Cozmo::U2G_DrawPoseMarker& new_DrawPoseMarker);
	void Set_DrawPoseMarker(Anki::Cozmo::U2G_DrawPoseMarker&& new_DrawPoseMarker);

	/** ErasePoseMarker **/
	const Anki::Cozmo::U2G_ErasePoseMarker& Get_ErasePoseMarker() const;
	void Set_ErasePoseMarker(const Anki::Cozmo::U2G_ErasePoseMarker& new_ErasePoseMarker);
	void Set_ErasePoseMarker(Anki::Cozmo::U2G_ErasePoseMarker&& new_ErasePoseMarker);

	/** SetWheelControllerGains **/
	const Anki::Cozmo::U2G_SetWheelControllerGains& Get_SetWheelControllerGains() const;
	void Set_SetWheelControllerGains(const Anki::Cozmo::U2G_SetWheelControllerGains& new_SetWheelControllerGains);
	void Set_SetWheelControllerGains(Anki::Cozmo::U2G_SetWheelControllerGains&& new_SetWheelControllerGains);

	/** SetHeadControllerGains **/
	const Anki::Cozmo::U2G_SetHeadControllerGains& Get_SetHeadControllerGains() const;
	void Set_SetHeadControllerGains(const Anki::Cozmo::U2G_SetHeadControllerGains& new_SetHeadControllerGains);
	void Set_SetHeadControllerGains(Anki::Cozmo::U2G_SetHeadControllerGains&& new_SetHeadControllerGains);

	/** SetLiftControllerGains **/
	const Anki::Cozmo::U2G_SetLiftControllerGains& Get_SetLiftControllerGains() const;
	void Set_SetLiftControllerGains(const Anki::Cozmo::U2G_SetLiftControllerGains& new_SetLiftControllerGains);
	void Set_SetLiftControllerGains(Anki::Cozmo::U2G_SetLiftControllerGains&& new_SetLiftControllerGains);

	/** SelectNextSoundScheme **/
	const Anki::Cozmo::U2G_SelectNextSoundScheme& Get_SelectNextSoundScheme() const;
	void Set_SelectNextSoundScheme(const Anki::Cozmo::U2G_SelectNextSoundScheme& new_SelectNextSoundScheme);
	void Set_SelectNextSoundScheme(Anki::Cozmo::U2G_SelectNextSoundScheme&& new_SelectNextSoundScheme);

	/** StartTestMode **/
	const Anki::Cozmo::U2G_StartTestMode& Get_StartTestMode() const;
	void Set_StartTestMode(const Anki::Cozmo::U2G_StartTestMode& new_StartTestMode);
	void Set_StartTestMode(Anki::Cozmo::U2G_StartTestMode&& new_StartTestMode);

	/** IMURequest **/
	const Anki::Cozmo::U2G_IMURequest& Get_IMURequest() const;
	void Set_IMURequest(const Anki::Cozmo::U2G_IMURequest& new_IMURequest);
	void Set_IMURequest(Anki::Cozmo::U2G_IMURequest&& new_IMURequest);

	/** PlayAnimation **/
	const Anki::Cozmo::U2G_PlayAnimation& Get_PlayAnimation() const;
	void Set_PlayAnimation(const Anki::Cozmo::U2G_PlayAnimation& new_PlayAnimation);
	void Set_PlayAnimation(Anki::Cozmo::U2G_PlayAnimation&& new_PlayAnimation);

	/** ReadAnimationFile **/
	const Anki::Cozmo::U2G_ReadAnimationFile& Get_ReadAnimationFile() const;
	void Set_ReadAnimationFile(const Anki::Cozmo::U2G_ReadAnimationFile& new_ReadAnimationFile);
	void Set_ReadAnimationFile(Anki::Cozmo::U2G_ReadAnimationFile&& new_ReadAnimationFile);

	/** StartFaceTracking **/
	const Anki::Cozmo::U2G_StartFaceTracking& Get_StartFaceTracking() const;
	void Set_StartFaceTracking(const Anki::Cozmo::U2G_StartFaceTracking& new_StartFaceTracking);
	void Set_StartFaceTracking(Anki::Cozmo::U2G_StartFaceTracking&& new_StartFaceTracking);

	/** StopFaceTracking **/
	const Anki::Cozmo::U2G_StopFaceTracking& Get_StopFaceTracking() const;
	void Set_StopFaceTracking(const Anki::Cozmo::U2G_StopFaceTracking& new_StopFaceTracking);
	void Set_StopFaceTracking(Anki::Cozmo::U2G_StopFaceTracking&& new_StopFaceTracking);

	/** StartLookingForMarkers **/
	const Anki::Cozmo::U2G_StartLookingForMarkers& Get_StartLookingForMarkers() const;
	void Set_StartLookingForMarkers(const Anki::Cozmo::U2G_StartLookingForMarkers& new_StartLookingForMarkers);
	void Set_StartLookingForMarkers(Anki::Cozmo::U2G_StartLookingForMarkers&& new_StartLookingForMarkers);

	/** StopLookingForMarkers **/
	const Anki::Cozmo::U2G_StopLookingForMarkers& Get_StopLookingForMarkers() const;
	void Set_StopLookingForMarkers(const Anki::Cozmo::U2G_StopLookingForMarkers& new_StopLookingForMarkers);
	void Set_StopLookingForMarkers(Anki::Cozmo::U2G_StopLookingForMarkers&& new_StopLookingForMarkers);

	/** SetVisionSystemParams **/
	const Anki::Cozmo::U2G_SetVisionSystemParams& Get_SetVisionSystemParams() const;
	void Set_SetVisionSystemParams(const Anki::Cozmo::U2G_SetVisionSystemParams& new_SetVisionSystemParams);
	void Set_SetVisionSystemParams(Anki::Cozmo::U2G_SetVisionSystemParams&& new_SetVisionSystemParams);

	/** SetFaceDetectParams **/
	const Anki::Cozmo::U2G_SetFaceDetectParams& Get_SetFaceDetectParams() const;
	void Set_SetFaceDetectParams(const Anki::Cozmo::U2G_SetFaceDetectParams& new_SetFaceDetectParams);
	void Set_SetFaceDetectParams(Anki::Cozmo::U2G_SetFaceDetectParams&& new_SetFaceDetectParams);


	size_t Unpack(const uint8_t* buff, const size_t len);
	size_t Unpack(const CLAD::SafeMessageBuffer& buffer);

	size_t Pack(uint8_t* buff, size_t len) const;
	size_t Pack(CLAD::SafeMessageBuffer& buffer) const;

	size_t Size() const;
private:
	void ClearCurrent();
	Tag _tag;

	union {
		Anki::Cozmo::U2G_Ping _Ping;
		Anki::Cozmo::U2G_ConnectToRobot _ConnectToRobot;
		Anki::Cozmo::U2G_ConnectToUiDevice _ConnectToUiDevice;
		Anki::Cozmo::U2G_DisconnectFromUiDevice _DisconnectFromUiDevice;
		Anki::Cozmo::U2G_ForceAddRobot _ForceAddRobot;
		Anki::Cozmo::U2G_StartEngine _StartEngine;
		Anki::Cozmo::U2G_DriveWheels _DriveWheels;
		Anki::Cozmo::U2G_TurnInPlace _TurnInPlace;
		Anki::Cozmo::U2G_MoveHead _MoveHead;
		Anki::Cozmo::U2G_MoveLift _MoveLift;
		Anki::Cozmo::U2G_SetLiftHeight _SetLiftHeight;
		Anki::Cozmo::U2G_SetHeadAngle _SetHeadAngle;
		Anki::Cozmo::U2G_TrackHeadToObject _TrackHeadToObject;
		Anki::Cozmo::U2G_StopAllMotors _StopAllMotors;
		Anki::Cozmo::U2G_ImageRequest _ImageRequest;
		Anki::Cozmo::U2G_SetRobotImageSendMode _SetRobotImageSendMode;
		Anki::Cozmo::U2G_SaveImages _SaveImages;
		Anki::Cozmo::U2G_SaveRobotState _SaveRobotState;
		Anki::Cozmo::U2G_EnableDisplay _EnableDisplay;
		Anki::Cozmo::U2G_SetHeadlights _SetHeadlights;
		Anki::Cozmo::U2G_GotoPose _GotoPose;
		Anki::Cozmo::U2G_PlaceObjectOnGround _PlaceObjectOnGround;
		Anki::Cozmo::U2G_PlaceObjectOnGroundHere _PlaceObjectOnGroundHere;
		Anki::Cozmo::U2G_ExecuteTestPlan _ExecuteTestPlan;
		Anki::Cozmo::U2G_SelectNextObject _SelectNextObject;
		Anki::Cozmo::U2G_PickAndPlaceObject _PickAndPlaceObject;
		Anki::Cozmo::U2G_TraverseObject _TraverseObject;
		Anki::Cozmo::U2G_SetRobotCarryingObject _SetRobotCarryingObject;
		Anki::Cozmo::U2G_ClearAllBlocks _ClearAllBlocks;
		Anki::Cozmo::U2G_VisionWhileMoving _VisionWhileMoving;
		Anki::Cozmo::U2G_ExecuteBehavior _ExecuteBehavior;
		Anki::Cozmo::U2G_SetBehaviorState _SetBehaviorState;
		Anki::Cozmo::U2G_AbortPath _AbortPath;
		Anki::Cozmo::U2G_AbortAll _AbortAll;
		Anki::Cozmo::U2G_DrawPoseMarker _DrawPoseMarker;
		Anki::Cozmo::U2G_ErasePoseMarker _ErasePoseMarker;
		Anki::Cozmo::U2G_SetWheelControllerGains _SetWheelControllerGains;
		Anki::Cozmo::U2G_SetHeadControllerGains _SetHeadControllerGains;
		Anki::Cozmo::U2G_SetLiftControllerGains _SetLiftControllerGains;
		Anki::Cozmo::U2G_SelectNextSoundScheme _SelectNextSoundScheme;
		Anki::Cozmo::U2G_StartTestMode _StartTestMode;
		Anki::Cozmo::U2G_IMURequest _IMURequest;
		Anki::Cozmo::U2G_PlayAnimation _PlayAnimation;
		Anki::Cozmo::U2G_ReadAnimationFile _ReadAnimationFile;
		Anki::Cozmo::U2G_StartFaceTracking _StartFaceTracking;
		Anki::Cozmo::U2G_StopFaceTracking _StopFaceTracking;
		Anki::Cozmo::U2G_StartLookingForMarkers _StartLookingForMarkers;
		Anki::Cozmo::U2G_StopLookingForMarkers _StopLookingForMarkers;
		Anki::Cozmo::U2G_SetVisionSystemParams _SetVisionSystemParams;
		Anki::Cozmo::U2G_SetFaceDetectParams _SetFaceDetectParams;
	};
};

} // namespace Cozmo

} // namespace Anki

#endif // __COMMS_MESSAGING_UI_MESSAGE_DEFINITIONS_U2_G_DEF__
