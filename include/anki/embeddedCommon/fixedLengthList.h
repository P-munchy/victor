/*

This file was automatically generated by the python script generateFixedLengthList_h.py. Rather than editing this file, edit that script, then run "python generateFixedLengthList_h.py".

*/

#ifndef _ANKICORETECHEMBEDDED_COMMON_FIXED_LENGTH_LIST_H_
#define _ANKICORETECHEMBEDDED_COMMON_FIXED_LENGTH_LIST_H_

#include "anki/embeddedCommon/config.h"
#include "anki/embeddedCommon/array2d.h"

namespace Anki
{
  namespace Embedded
  {
    template<typename Type> class FixedLengthList : public Array<Type>
    {
    public:
      FixedLengthList();

      // Constructor for a FixedLengthList, pointing to user-allocated data.
      FixedLengthList(s32 maximumSize, void * data, s32 dataLength, bool useBoundaryFillPatterns=false);

      // Constructor for a FixedLengthList, pointing to user-allocated MemoryStack
      FixedLengthList(s32 maximumSize, MemoryStack &memory, bool useBoundaryFillPatterns=false);

      bool IsValid() const;

      Result PushBack(const Type &value);

      // Will act as a normal pop, except when the list is empty. Then subsequent
      // calls will keep returning the first value in the list.
      Type PopBack();

      // Sets the size to zero, but does not modify any data. Equivalent to set_size(0)
      void Clear();

      // Does this ever need to be declared explicitly?
      //FixedLengthList& operator= (const FixedLengthList & rightHandSide);

      // Pointer to the data, at a given location
      inline Type* Pointer(const s32 index);

      // Pointer to the data, at a given location
      inline const Type* Pointer(const s32 index) const;

      // Print out the contents of this FixedLengthList
      Result Print(const char * const variableName = "FixedLengthList", const s32 minIndex = 0, const s32 maxIndex = 0x7FFFFFE) const;

      s32 get_maximumSize() const;

      s32 get_size() const;

      // Attempt to set the size to newSize. Returns the value that was actually set.
      s32 set_size(s32 newSize);

    protected:
      s32 capacityUsed;
    }; // class FixedLengthList

#pragma mark --- FixedLengthList Implementations ---

#ifndef USING_MOVIDIUS_COMPILER
    template<typename Type> FixedLengthList<Type> AllocateFixedLengthListFromHeap(s32 maximumSize, bool useBoundaryFillPatterns=false)
    {
      // const s32 stride = FixedLengthList<Type>::ComputeRequiredStride(maximumSize, useBoundaryFillPatterns);
      const s32 requiredMemory = 64 + 2*MEMORY_ALIGNMENT + Array<Type>::ComputeMinimumRequiredMemory(1, maximumSize, useBoundaryFillPatterns); // The required memory, plus a bit more

      FixedLengthList<Type> mat(maximumSize, calloc(requiredMemory, 1), requiredMemory, useBoundaryFillPatterns);

      return mat;
    } // FixedLengthList AllocateFixedLengthListFromHeap_Type(s32 maximumSize, bool useBoundaryFillPatterns)
#endif // #ifndef USING_MOVIDIUS_COMPILER

    template<typename Type> inline Type* FixedLengthList<Type>::Pointer(const s32 index)
    {
      return Array<Type>::Pointer(0, index);
    }

    // Pointer to the data, at a given location
    template<typename Type> inline const Type* FixedLengthList<Type>::Pointer(const s32 index) const
    {
      return Array<Type>::Pointer(0, index);
    }

    template<typename Type> FixedLengthList<Type>::FixedLengthList()
      : Array<Type>(), capacityUsed(0)
    {
    } // FixedLengthList<Type>::FixedLengthList()

    template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, void * data, s32 dataLength, bool useBoundaryFillPatterns)
      : Array<Type>(1, maximumSize, data, dataLength, useBoundaryFillPatterns), capacityUsed(0)
    {
    } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, void * data, s32 dataLength, bool useBoundaryFillPatterns)

    template<typename Type> FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, bool useBoundaryFillPatterns)
      : Array<Type>(1, maximumSize, memory, useBoundaryFillPatterns), capacityUsed(0)
    {
    } // FixedLengthList<Type>::FixedLengthList(s32 maximumSize, MemoryStack &memory, bool useBoundaryFillPatterns)

    template<typename Type> bool FixedLengthList<Type>::IsValid() const
    {
      if(capacityUsed > this->get_maximumSize()) {
        return false;
      }

      return Array<Type>::IsValid();
    } // bool FixedLengthList<Type>::IsValid() const

    template<typename Type> Result FixedLengthList<Type>::PushBack(const Type &value)
    {
      if(capacityUsed >= this->get_maximumSize()) {
        return RESULT_FAIL;
      }

      *this->Pointer(capacityUsed) = value;
      capacityUsed++;

      return RESULT_OK;
    } // Result FixedLengthList<Type>::PushBack(const Type &value)

    template<typename Type> Type FixedLengthList<Type>::PopBack()
    {
      if(capacityUsed == 0) {
        return *this->Pointer(0);
      }

      const Type value = *this->Pointer(capacityUsed-1);
      capacityUsed--;

      return value;
    } // Type FixedLengthList<Type>::PopBack()

    template<typename Type> void FixedLengthList<Type>::Clear()
    {
      this->capacityUsed = 0;
    } // void FixedLengthList<Type>::Clear()

    // Does this ever need to be declared explicitly?
    /*FixedLengthList& FixedLengthList<Type>::operator= (const FixedLengthList & rightHandSide)
    {
    Array<Type>::operator=(static_cast<Array<Type>>(rightHandSide));
    this->capacityUsed = rightHandSide.capacityUsed;

    return *this;
    }*/ // FixedLengthList& FixedLengthList<Type>::operator= (const FixedLengthList & rightHandSide)

    template<typename Type> s32 FixedLengthList<Type>::get_maximumSize() const
    {
      return Array<Type>::get_size(1);
    } // s32 FixedLengthList<Type>::get_maximumSize() const

    template<typename Type> s32 FixedLengthList<Type>::get_size() const
    {
      return capacityUsed;
    } // s32 FixedLengthList<Type>::get_size() const

    // Attempt to set the size to newSize. Returns the value that was actually set.
    template<typename Type> s32 FixedLengthList<Type>::set_size(s32 newSize)
    {
      this->capacityUsed = MIN(this->get_maximumSize(), MAX(0,newSize));
      return this->capacityUsed;
    } // s32 FixedLengthList<Type>::set_size(s32 newSize)

    // Print out the contents of this FixedLengthList
    template<typename Type> Result FixedLengthList<Type>::Print(const char * const variableName, const s32 minIndex, const s32 maxIndex) const
    {
      return Array<Type>::Print(variableName, 0, 0, MAX(0,minIndex), MIN(maxIndex, this->get_size()-1));
    } // Result FixedLengthList<Type>::Print(const char * const variableName, const s32 minIndex, const s32 maxIndex) const
  } // namespace Embedded
} //namespace Anki

#endif // _ANKICORETECHEMBEDDED_COMMON_FIXEDLENGTHLIST_H_
