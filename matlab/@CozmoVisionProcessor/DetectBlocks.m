function DetectBlocks(this, img, timestamp)

markers = simpleDetector(img);

% Send a message about each marker we found
for i = 1:length(markers)
    markers{i}.draw('where', this.h_axes);
    
    msgStruct = struct( ...
        'timestamp', timestamp, ...
        'headAngle', single(0), ... ???
        'x_imgUpperLeft',  single(markers{i}.corners(1,1)), ...
        'y_imgUpperLeft',  single(markers{i}.corners(1,2)), ...
        'x_imgLowerLeft',  single(markers{i}.corners(2,1)), ...
        'y_imgLowerLeft',  single(markers{i}.corners(2,2)), ...
        'x_imgUpperRight', single(markers{i}.corners(3,1)), ...
        'y_imgUpperRight', single(markers{i}.corners(3,2)), ...
        'x_imgLowerRight', single(markers{i}.corners(4,1)), ...
        'y_imgLowerRight', single(markers{i}.corners(4,2)), ...
        'blockType',       uint16(markers{i}.blockType), ...
        'faceType',        uint8(markers{i}.faceType), ...
        'upDirection',     uint8(markers{i}.upDirection));
    
    packet = this.SerializeMessageStruct(msgStruct);
    this.SendPacket('CozmoMsg_BlockMarkerObserved', packet);
    
    if ~isempty(this.dockingBlock) && ...
            this.dockingBlock > 0 && ...
            markers{i}.blockType == this.dockingBlock
        
        % Initialize the tracker
        this.LKtracker = LucasKanadeTracker(img, ...
            markers{i}.unorderedCorners([3 1 4 2],:), ...
            'Type', this.trackerType, 'RidgeWeight', 1e-3, ...
            'DebugDisplay', false, 'UseBlurring', false, ...
            'UseNormalization', true, ...
            'TrackingResolution', this.trackingResolution);
        
        if strcmp(this.trackerType, 'homography')
            this.H_init = compute_homography( ...
                this.headCalibrationMatrix\[this.LKtracker.corners';ones(1,4)], ...
                this.marker3d(:,1:2)');
        end
                
        % Let the robot know we've initialized the
        % tracker
        msgStruct = struct('success', uint8(true));
        
        packet = this.SerializeMessageStruct(msgStruct);
        this.SendPacket('CozmoMsg_TemplateInitialized', packet);
        
        % Show the tracking template
        template = this.LKtracker.target{this.LKtracker.finestScale};
        set(this.h_template, 'CData', template);
        set(this.h_templateAxes, 'Visible', 'on', ...
            'XLim', [0.5 size(template,2)+.5], ...
            'YLim', [0.5 size(template,1)+.5]);
       
        % We are about to switch to tracking mode, so reduce the desired
        % buffer read size
        this.desiredBufferSize = this.computeDesiredBufferLength(this.trackingResolution);
    end
end

set(this.h_title, 'String', ...
    sprintf('Detected %d Markers', length(markers)));

% Send a message indicating there are no more block
% marker messages coming
msgStruct = struct('numBlocks', uint8(length(markers)) );

packet = this.SerializeMessageStruct(msgStruct);
this.SendPacket('CozmoMsg_TotalBlocksDetected', packet);


end % FUNCTION DetectBlocks()