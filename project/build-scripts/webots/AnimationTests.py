#!/usr/bin/python

import webotsTest
import os
import re
import logging

# UtilLog = logging.getLogger('webots.test')
# stdout_handler = logging.StreamHandler()
# formatter = logging.Formatter('%(name)s - %(message)s')
# stdout_handler.setFormatter(formatter)
# UtilLog.addHandler(stdout_handler)

def main():
  # build_type used to make sure to specify the webotsTest instead of relying on default; also used to
  # make sure we're accessing the right log/build folder
  build_type = "Debug"
  animation_test_name_placeholder = "%ANIMATION_TEST_NAME%"
  test_controller_name = "CST_Animations"
  wbt_file_name = "get_animations.wbt"
  generated_cfg_name = "__GENERATED_ANIMATIONS_TEST__.cfg"

  # UtilLog.info("Fetching available animations...")
  assert( webotsTest.main(["--buildType", build_type, "--configFile", "get_animations.cfg"]) == 0 )

  project_root = webotsTest.find_project_root()
  build_folder = os.path.join(project_root, webotsTest.BUILD_SUBPATH, build_type, '')
  log_file_path = webotsTest.get_log_file_path(build_folder, test_controller_name)

  available_animations = []
  with open(log_file_path, 'r') as log_file:
    regex = "(?<=HandleAnimationAvailable Animation available: )\w+"
    available_animations = re.findall(regex, log_file.read())

  wbt_dir = os.path.join(project_root, webotsTest.WEBOTS_WORLD_SUBPATH, '')
  wbt_file = wbt_dir + wbt_file_name 

  with open(wbt_file, 'r') as webots_world_file:
    template_data = webots_world_file.read()

  wbt_file_placeholder = "$WBT_FILE$"
  cfg_entry_template = "[CST_Animations]\nworld_file : {0}\n\n".format(wbt_file_placeholder)
  title_comment = "# This is a file auto-generated by {0}.\n\n".format(os.path.realpath(__file__))
  generated_cfg_file_data = title_comment

  for animation in available_animations:
    generated_file_name = "__GENERATED_FOR_{0}__.wbt".format(animation)
    generated_file_path = wbt_dir + generated_file_name

    webotsTest.generate_file_with_replace_pass_data(
      generated_file_path, template_data, animation_test_name_placeholder, animation)

    # Generate the .cfg file
    generated_cfg_file_data += cfg_entry_template.replace(wbt_file_placeholder, generated_file_name)

  with open(os.path.join(os.getcwd(), '') + generated_cfg_name, 'w+') as generated_cfg_file:
    generated_cfg_file.write(generated_cfg_file_data)

  # Run all the webots animation tests with the newly generated cfg file.
  assert( webotsTest.main(["--buildType", build_type, "--configFile", generated_cfg_name]) == 0 )


if __name__ == '__main__':
  main()