#!/usr/bin/python

import os
import re
import json
import argparse
import sys
import webotsTest

def main(cli_args):
  """Fetches available animations and generates all the needed files to run tests for all animations.

  First, a dummy test run occurs so that the logs for a run exist. This then crawls through that log
  file to check for all the lines that specify the available animation. It then generates a .wbt
  webots world file for each available animation, as this is the only way to pass information from
  here (python scripts) to the test controller. The animation names are passed as a parameter to the
  CozmoBot proto. A config file is then generated with all the newly generated .wbt files so
  webotsTest can run through them.

  Args:
    args -- command line arguments
  """

  # build_type used to make sure to specify the webotsTest instead of relying on default; also used
  # to make sure we're accessing the right log/build folder
  build_type = "Debug"
  animation_test_name_placeholder = "%ANIMATION_TEST_NAME%"
  test_controller_name = "CST_Animations"
  wbt_file_name = "get_animations.wbt"
  generated_cfg_name = "__GENERATED_ANIMATIONS_TEST__.cfg"

  parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    description="Runs tests on all available animations in webots"
    )

  parser.add_argument('--numRuns',
                      dest='numRuns',
                      action='store',
                      default=1,
                      help="Number of runs through all available animations.")

  parser.add_argument('--password',
                      dest='password',
                      action='store',
                      help="""Your password is needed to add the webots executables to the firewall exception list. Can
                      be omitted if your firewall is disabled. It is requested in plaintext so this script can be re-ran 
                      easily and also for build server/steps reasons.""")

  (options, _) = parser.parse_known_args(cli_args)

  # Run a test once to populate the logs and search for the available animations
  assert webotsTest.main([
    "--buildType", build_type,
    "--configFile", "get_animations.cfg",
    "--password", options.password
    ]) == 0

  project_root = webotsTest.find_project_root()
  build_folder = os.path.join(project_root, webotsTest.BUILD_SUBPATH, build_type, '')
  log_file_path = webotsTest.get_log_file_path(build_folder, test_controller_name, wbt_file_name)

  available_animations = []
  with open(log_file_path, 'r') as log_file:
    regex = r"(?<=HandleAnimationAvailable Animation available: )\w+"
    available_animations = re.findall(regex, log_file.read())


  # Open an exisiting .wbt file so that it can be used to generate a wbt file with all the available
  # animations
  wbt_dir = os.path.join(project_root, webotsTest.WEBOTS_WORLD_SUBPATH, '')
  wbt_file = wbt_dir + wbt_file_name

  with open(wbt_file, 'r') as webots_world_file:
    template_data = webots_world_file.read()

  # Generate .wbt world files with each animation name subsituted into animationTestName
  generated_files = []
  for animation in available_animations:
    generated_file_name = "__GENERATED_FOR_{0}__.wbt".format(animation)
    generated_file_path = wbt_dir + generated_file_name
    generated_files.append(generated_file_name)

    webotsTest.generate_file_with_replace_pass_data(
      generated_file_path, template_data, animation_test_name_placeholder, animation)

  # Generate the config file with all the generated wbt worlds for each animation
  generated_cfg_file_data = (
    "# This is a file auto-generated by {0}.\n".format(os.path.realpath(__file__)) +
    "\n" +
    "[CST_Animations]\n" +
    "world_file : {0}".format(json.JSONEncoder().encode(generated_files))
  )
  with open(os.path.join(os.getcwd(), '') + generated_cfg_name, 'w+') as generated_cfg_file:
    generated_cfg_file.write(generated_cfg_file_data)

  # Run all the webots animation tests with the newly generated cfg file.
  assert webotsTest.main([
    "--buildType", build_type,
    "--configFile", generated_cfg_name,
    "--numRuns", str(options.numRuns),
    "--password", options.password
    ]) == 0


if __name__ == '__main__':
  args = sys.argv
  sys.exit(main(args))
