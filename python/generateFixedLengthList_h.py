"""
This file generated a c++ file, by automatically "instantiating templates"
To add some lines to this file, find replace (without the quotes) "\r\n" into "\\n' +\\\r\n            '"
"""

def __GenerateTopOfFile():
    topString = \
        '/*\n\n\n\n\n\n\n\n\n\nThis file was automatically generated by the python script generateFixedLengthList_h.py. Rather than editing this file, edit that script, then run "python generateFixedLengthList_h.py".\n\n\n\n\n\n\n\n\n\n*/\n\n';

    topString += \
        '#ifndef _ANKICORETECHEMBEDDED_COMMON_FIXED_LENGTH_LIST_H_\n' +\
        '#define _ANKICORETECHEMBEDDED_COMMON_FIXED_LENGTH_LIST_H_\n' +\
        '\n' +\
        '#include "anki/embeddedCommon/config.h"\n' +\
        '\n' +\
        'namespace Anki\n' +\
        '{\n' +\
        '  namespace Embedded\n' +\
        '  {\n'

    return topString

def __GenerateBottomOfFile():
    bottomString = \
        '    } // namespace Embedded\n' +\
        '} //namespace Anki\n' +\
        '\n' +\
        '#endif // _ANKICORETECHEMBEDDED_COMMON_FIXEDLENGTHLIST_H_\n'

    return bottomString

def __GenerateDeclarations(whichTypes, includeAllMethods):
    '''
    This function creates the declarations for the Array Class. Basic types (like int or long long) should have includeAllMethods==true, while non-basic types should have includeAllMethods == false
    '''

    methodsString = ''

    for type in whichTypes:
        methodsString +=\
            '    class FixedLengthList_' + type + ' : public Array_' + type + '\n' +\
            '    {\n' +\
            '    public:\n' +\
            '      FixedLengthList_' + type + '();\n' +\
            '\n' +\
            '      // Constructor for a FixedLengthList_' + type + ', pointing to user-allocated data.\n' +\
            '      FixedLengthList_' + type + '(s32 maximumSize, void * data, s32 dataLength, bool useBoundaryFillPatterns=false);\n' +\
            '\n' +\
            '      // Constructor for a FixedLengthList_' + type + ', pointing to user-allocated MemoryStack\n' +\
            '      FixedLengthList_' + type + '(s32 maximumSize, MemoryStack &memory, bool useBoundaryFillPatterns=false);\n' +\
            '\n' +\
            '      bool IsValid() const;\n' +\
            '\n' +\
            '      Result PushBack(const ' + type + ' &value);\n' +\
            '\n' +\
            '      // Will act as a normal pop, except when the list is empty. Then subsequent\n' +\
            '      // calls will keep returning the first value in the list.\n' +\
            '      ' + type + ' PopBack();\n' +\
            '\n' +\
            '      void Clear();\n' +\
            '\n' +\
            '      // Does this ever need to be declared explicitly?\n' +\
            '      //FixedLengthList_' + type + '& operator= (const FixedLengthList_' + type + ' & rightHandSide);\n' +\
            '\n' +\
            '      // Pointer to the data, at a given location\n' +\
            '      inline ' + type + '* Pointer(s32 index);\n' +\
            '\n' +\
            '      // Pointer to the data, at a given location\n' +\
            '      inline const ' + type + '* Pointer(s32 index) const;\n' +\
            '\n' +\
            '      s32 get_maximumSize() const;\n' +\
            '\n' +\
            '      s32 get_size() const;\n' +\
            '\n' +\
            '    protected:\n' +\
            '      s32 capacityUsed;\n' +\
            '    }; // class FixedLengthList_' + type + '\n' +\
            '\n' +\
            '    inline ' + type + '* FixedLengthList_' + type + '::Pointer(s32 index)\n' +\
            '    {\n' +\
            '      return Array_' + type + '::Pointer(0, index);\n' +\
            '    }\n' +\
            '\n' +\
            '    // Pointer to the data, at a given location\n' +\
            '    inline const ' + type + '* FixedLengthList_' + type + '::Pointer(s32 index) const\n' +\
            '    {\n' +\
            '      return Array_' + type + '::Pointer(0, index);\n' +\
            '    }\n' +\
            '\n' +\
            '    FixedLengthList_' + type + ' AllocateFixedLengthListFromHeap_' + type + '(s32 maximumSize, bool useBoundaryFillPatterns=false);\n\n\n'

    return methodsString

def GenerateAndWriteFile(filename = '../include/anki/embeddedCommon/fixedLengthList.h'):
    topString = __GenerateTopOfFile()

    methodsDeclarations = __GenerateDeclarations(['Point_s16', 'Point_f32', 'Point_f64'], False)

    bottomString = __GenerateBottomOfFile()

    f = open(filename, 'w')
    f.write(topString)
    f.write(methodsDeclarations)
    f.write(bottomString)

    f.close()

if __name__ == "__main__":
    GenerateAndWriteFile()