
def __GenerateTopOfFile():
    topString = \
        '/*\n\n\n\n\n\n\n\n\n\nThis file was automatically generated by the python script generateMexEmbeddedWrappers_h.py. Rather than editing this file, edit that script, then run "python generateMexEmbeddedWrappers_h.py".\n\n\n\n\n\n\n\n\n\n*/\n\n';
    
    topString += \
        '#ifndef _MEX_EMBEDDED_WRAPPERS_H_\n' +\
        '#define _MEX_EMBEDDED_WRAPPERS_H_\n' +\
        '\n' +\
        '#include "mex.h"\n' +\
        '#include "anki/embeddedCommon.h"\n\n' +\
        'namespace Anki\n' +\
        '{\n' +\
        '  namespace Embedded\n' +\
        '  {\n'
    
    return topString
    
def __GenerateBottomOfFile():
    bottomString = \
        '  } // namespace Embedded\n' +\
        '} // namespace Anki\n\n' +\
        '#endif // #ifndef _MEX_EMBEDDED_WRAPPERS_H_\n\n'

    return bottomString
    
def __GenerateDeclarations(whichTypes, includeAllMethods):
    '''
    This function creates the declarations for the Point Class. Basic types (like int or long long) should have includeAllMethods==true, while non-basic types should have includeAllMethods == false
    '''

    methodsString = ''
    
    for type in whichTypes:
        methodsString +=\
            '    void mxArrayToArray_' + type + '(const mxArray * const array, Array_' + type + ' &mat);\n\n' +\
            '    Array_' + type + ' mxArrayToArray_' + type + '(const mxArray * const array);\n\n' +\
            '    mxArray* arrayToMxArray_' + type + '(const Array_' + type + ' &array_' + type + ');\n\n'
        
    return methodsString
        
def GenerateAndWriteFile(filename = '../matlab/mex/mexEmbeddedWrappers.h'):
    topString = __GenerateTopOfFile()
    
    methodsDeclarations  = __GenerateDeclarations(['u8', 's8', 'u16', 's16', 'u32', 's32', 'u64', 's64', 'f32', 'f64'], True)
            
    bottomString = __GenerateBottomOfFile()
    
    f = open(filename, 'w')
    f.write(topString)
    f.write(methodsDeclarations)
    f.write(bottomString)
    
    f.close()
    
if __name__ == "__main__":    
    GenerateAndWriteFile()    