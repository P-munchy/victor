
def __GenerateTopOfFile():
    topString = \
        '/*\n\n\n\n\n\n\n\n\n\nThis file was automatically generated by the python script generatePoint_cpp.py. Rather than editing this file, edit that script, then run "python generatePoint_cpp.py".\n\n\n\n\n\n\n\n\n\n*/\n\n';

    topString += \
        '#include "anki/embeddedCommon.h"\n' +\
        '\n' +\
        'namespace Anki\n' +\
        '{\n' +\
        '  namespace Embedded\n' +\
        '  {\n'

    return topString

def __GenerateBottomOfFile():
    bottomString = \
        '  } // namespace Embedded\n' +\
        '} // namespace Anki\n\n'

    return bottomString

def __GenerateDefinitions(whichTypes, includeAllMethods):
    '''
    This function creates the definitions for the Point Class. Basic types (like int or long long) should have includeAllMethods==true, while non-basic types should have includeAllMethods == false
    '''
    methodsString = ''

    for type in whichTypes:
        if type[0] == 'u':
            printfCharacter = 'u'
        elif type[0] == 'f':
            printfCharacter = 'f'
        else:
            printfCharacter = 'd'

        methodsString +=\
            '    Point_' + type + '::Point_' + type + '()\n' +\
            '      : x(static_cast<' + type + '>(0)), y(static_cast<' + type + '>(0))\n' +\
            '    {\n' +\
            '    }\n' +\
            '\n' +\
            '    Point_' + type + '::Point_' + type + '(const ' + type + ' x, const ' + type + ' y)\n' +\
            '      : x(x), y(y)\n' +\
            '    {\n' +\
            '    }\n' +\
            '\n' +\
            '    Point_' + type + '::Point_' + type + '(const Point_' + type + '& pt)\n' +\
            '      : x(pt.x), y(pt.y)\n' +\
            '    {\n' +\
            '    }\n' +\
            '\n' +\
            '#if defined(ANKICORETECHEMBEDDED_USE_OPENCV)\n' +\
            '    Point_' + type + '::Point_' + type + '(const cv::Point_<' + type + '>& pt)\n' +\
            '      : x(pt.x), y(pt.y)\n' +\
            '    {\n' +\
            '    }\n'

        if includeAllMethods:
            methodsString +=\
                '\n' +\
                '    cv::Point_<' + type + '> Point_' + type + '::get_CvPoint_()\n' +\
                '    {\n' +\
                '      return cv::Point_<' + type + '>(x,y);\n' +\
                '    }\n'

        methodsString +=\
            '#endif\n' +\
            '\n' +\
            '    void' + ' Point_' + type + '::Print() const\n' +\
            '    {\n' +\
            '      printf("(%' + printfCharacter + ',%' + printfCharacter + ')", this->x, this->y);\n' +\
            '    }\n\n' +\
            '    bool Point_' + type + '::operator== (const Point_' + type + ' &point2) const\n' +\
            '    {\n' +\
            '      if(this->x == point2.x && this->y == point2.y)\n' +\
            '        return true;\n' +\
            '\n' +\
            '      return false;\n' +\
            '    }\n' +\
            '\n' +\
            '    Point_' + type + ' Point_' + type + '::operator+ (const Point_' + type + ' &point2) const\n' +\
            '    {\n' +\
            '      return Point_' + type + '(this->x+point2.x, this->y+point2.y);\n' +\
            '    }\n' +\
            '\n' +\
            '    Point_' + type + ' Point_' + type + '::operator- (const Point_' + type + ' &point2) const\n' +\
            '    {\n' +\
            '      return Point_' + type + '(this->x-point2.x, this->y-point2.y);\n' +\
            '    }\n' +\
            '\n' +\
            '    void Point_' + type + '::operator*=(const ' + type + ' value)\n' +\
            '    {\n' +\
            '      this->x *= value;\n' +\
            '      this->y *= value;\n' +\
            '    }\n\n'


    return methodsString


def GenerateAndWriteFile(filename = '../src/embedded/point.cpp'):
    topString = __GenerateTopOfFile()

    methodsDefinitions  = __GenerateDefinitions(['u8', 's8', 'u16', 's16', 'u32', 's32', 'f32', 'f64'], True)

    methodsDefinitions += __GenerateDefinitions(['u64', 's64'], False)

    bottomString = __GenerateBottomOfFile()

    f = open(filename, 'w')
    f.write(topString)
    f.write(methodsDefinitions)
    f.write(bottomString)

    f.close()

if __name__ == "__main__":
    GenerateAndWriteFile()