"""
This file generated a c++ file, by automatically "instantiating templates"
To add some lines to this file, find replace (without the quotes) "\r\n" into "\\n' +\\\r\n            '"
"""

def __GenerateTopOfFile():
    topString = \
        '/*\n\n\n\n\n\n\n\n\n\nThis file was automatically generated by the python script generatePoint_h.py. Rather than editing this file, edit that script, then run "python generatePoint_h.py".\n\n\n\n\n\n\n\n\n\n*/\n\n';

    topString += \
        '#ifndef _ANKICORETECHEMBEDDED_COMMON_POINT_H_\n' +\
        '#define _ANKICORETECHEMBEDDED_COMMON_POINT_H_\n' +\
        '\n' +\
        '#include "anki/embeddedCommon/config.h"\n' +\
        '\n' +\
        '#if defined(ANKICORETECHEMBEDDED_USE_OPENCV)\n' +\
        '#include "opencv2/opencv.hpp"\n' +\
        '#endif\n\n' +\
        'namespace Anki\n' +\
        '{\n' +\
        '  namespace Embedded\n' +\
        '  {\n'

    return topString

def __GenerateBottomOfFile():
    bottomString = \
        '  } // namespace Embedded\n' +\
        '} // namespace Anki\n' +\
        '\n' +\
        '#endif // _ANKICORETECHEMBEDDED_COMMON_POINT_H_\n\n'

    return bottomString

def __GenerateDeclarations(whichTypes, includeAllMethods):
    '''
    This function creates the declarations for the Point Class. Basic types (like int or long long) should have includeAllMethods==true, while non-basic types should have includeAllMethods == false
    '''

    methodsString = ''

    for type in whichTypes:
        methodsString +=\
            '    // 2D Point Class:\n' +\
            '    class Point_' + type + '\n' +\
            '    {\n' +\
            '    public:\n' +\
            '      Point_' + type + '();\n' +\
            '\n' +\
            '      Point_' + type + '(const ' + type + ' x, const ' + type + ' y);\n' +\
            '\n' +\
            '      Point_' + type + '(const Point_' + type + '& pt);\n' +\
            '      \n' +\
            '#if defined(ANKICORETECHEMBEDDED_USE_OPENCV)\n' +\
            '      Point_' + type + '(const cv::Point_<' + type + '>& pt);\n'

        if includeAllMethods:
            methodsString +=\
            '\n' +\
            '      cv::Point_<' + type + '> get_CvPoint_();\n'

        methodsString +=\
            '#endif\n' +\
            '\n' +\
            '      void Print() const;\n' +\
            '\n' +\
            '      bool operator== (const Point_' + type + ' &point2) const;\n' +\
            '\n' +\
            '      Point_' + type + ' operator+ (const Point_' + type + ' &point2) const;\n' +\
            '\n' +\
            '      Point_' + type + ' operator- (const Point_' + type + ' &point2) const;\n' +\
            '\n' +\
            '      void operator*= (const ' + type + ' value);\n' +\
            '\n' +\
            '      ' + type + ' x, y;\n' +\
            '    }; // class Point_' + type + '\n\n'

    return methodsString

def GenerateAndWriteFile(filename = '../include/anki/embeddedCommon/point.h'):
    topString = __GenerateTopOfFile()

    methodsDeclarations  = __GenerateDeclarations(['u8', 's8', 'u16', 's16', 'u32', 's32', 'f32', 'f64'], True)

    methodsDeclarations += __GenerateDeclarations(['u64', 's64'], False)

    bottomString = __GenerateBottomOfFile()

    f = open(filename, 'w')
    f.write(topString)
    f.write(methodsDeclarations)
    f.write(bottomString)

    f.close()

if __name__ == "__main__":
    GenerateAndWriteFile()