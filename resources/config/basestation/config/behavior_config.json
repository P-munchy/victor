{
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Selection
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  "selectionBehaviorChooserConfig" :
  {
    "type" : "selection"
  },
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Demo
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  "demoBehaviorChooserConfig" :
  {
    // chooser type
    "type" : "demo",
    
    // these groups are the behaviors that are allowed in this behavior chooser
    "behaviorGroups" : [ "Demo" ],
  
    // By default all behaviors are enabled, the following are then applied in order
    // 1) anything belonging to a group in disabledGroups is disabled
    // 2) anything belonging to a group in enabledGroups is re-enabled (to e.g. re-enable a subgroup disabled in 1)
    // 3) anything belonging in disabledBehaviors is disabled (to e.g. disable a few specific behaviors)
    // 4) anything belonging in enabledBehaviors is re-enabled (to e.g. re-enable a few specific behaviors)
    
    "disabledGroups" : [
    ],
    "enabledGroups" : [
    ],
    "disabledBehaviors" : [
    ],
    "enabledBehaviors" : [
    ],
    // For current behavior, X = time running, Y = bonus (can be -ve, to encourage switching away from a long-running behavior)
    "scoreBonusForCurrentBehavior" : {
      "nodes" : [
        { "x" :   0.0, "y" :  0.0 }
      ]
    }
  },
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Regular play / goals
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  "freeplayBehaviorChooserConfig" :
  {
    "type" : "goal",
    
    // parameters to decide between goals
    "evaluator" :
    {

    },
    // goals to create
    "goals" :
    [
      // Sparks only
      {
        "name" : "sparksRollBlock",
        "requireSpark":"RollCube",
        "priority": 0, // lower is better

        "behaviorChooser" :
        {
          "type" : "sparks",
          "minTimeSecs": 0,
          "maxTimeSecs": 60,
          "numberOfRepetitions": 1,
          "behaviorObjective": "BlockRolled",
          "softSparkTrigger": "SoftSparkUpgradeLift",
          // these groups are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksRollBlock" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      {
        "name" : "sparksStackBlock",
        "requireSpark":"StackTwoCubes",
        "priority": 0, // lower is better
        "behaviorChooser" :
        {
         "type" : "sparks",
         "minTimeSecs": 0,
         "maxTimeSecs": 60,
         "numberOfRepetitions": 1,
         "behaviorObjective": "StackedBlock",
         "softSparkTrigger": "SoftSparkUpgradeLift",
          // these groups are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksStackBlock" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      {
        "name" : "sparksPounceOnMotion",
        "requireSpark":"PounceOnMotionAction",
        "priority": 0, // lower is better
        "behaviorChooser" :
        {
         "type" : "sparks",
         "minTimeSecs": 0,
         "maxTimeSecs": 60,
         "numberOfRepetitions": 0,
         "behaviorObjective": "PouncedAndCaught",
         "softSparkTrigger": "SoftSparkUpgradeLift",
          // these groups are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksPounceOnMotion" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      {
        "name" : "sparksPopAWheelie",
        "requireSpark":"PopAWheelieAction",
        "priority": 0, // lower is better
        "behaviorChooser" :
        {
         "type" : "sparks",
         "minTimeSecs": 0,
         "maxTimeSecs": 60,
         "numberOfRepetitions": 1,
         "behaviorObjective": "PoppedWheelie",
         "softSparkTrigger": "SoftSparkUpgradeTracks",
          // these groups are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksPopAWheelie" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      {
        "name" : "sparksKnockOverCubes",
        "requireSpark":"KnockOverThreeCubeStack",
        "priority": 0, // lower is better
        "behaviorChooser" :
        {
         "type" : "sparks",
         "minTimeSecs": 0,
         "maxTimeSecs": 60,
         "numberOfRepetitions": 1,
         "behaviorObjective": "KnockedOverBlocks",
         "softSparkTrigger": "SoftSparkUpgradeTracks",
          // these groups are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksKnockOverCubes" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      {
        "name" : "SparksPickUpCube",
        "requireSpark":"PickupCube",
        "priority": 0, // lower is better
        "behaviorChooser" :
        {
         "type" : "sparks",
         "minTimeSecs": 0,
         "maxTimeSecs": 60,
         "numberOfRepetitions": 1,
         "behaviorObjective": "PickedupBlock",
         "softSparkTrigger": "SoftSparkUpgradeLift",
          // these groups are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksPickUpCube" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      {
        "name" : "SparksBuildPyramid",
        "requireSpark":"BuildPyramid",
        "priority": 0, // lower is better
        "behaviorChooser" :
        {
          "type" : "sparks",
          "minTimeSecs": 0,
          "maxTimeSecs": 60,
          "numberOfRepetitions": 1,
          "behaviorObjective": "BuiltPyramid",
          "softSparkTrigger": "SoftSparkUpgradeLift",
          // this are the behaviors that are allowed in this behavior chooser
          "behaviorGroups" : [ "SparksBuildPyramid" ]
        },
        "goalStrategy":
        {
          "type" : "Spark"
        }
      },
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      // Freeplay goals:
      // FP_Hiking          - when Cozmo is exploring its surroundings on his own
      // FP_PlayWithHumans  - when Cozmo requests games to play with the player
      // FP_PlayAlone       - when Cozmo does stuff in place on his own, showing off, playing with cubes, ..
      // FP_Socialize       - when Cozmo wants to interact with faces and players, but without playing games
      // FP_NothingToDo     - fallback when Cozmo can't do anything else
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      {
        "name" : "FP_NothingToDo",
        "priority": 5, // lower is better
        "behaviorChooser" :
        {
          "type" : "simple",
          "behaviorGroups" : [ "FP_NothingToDo" ]
        },
        "goalStrategy":
        {
          "type" : "FP_Socialize",
          // goals need to give up so that higher priority can take over. Give up as soon as we finish one
          // iteration
          "goalShouldEndDurationSecs" : 1.0,
          "maxTimeWithoutInteractionSecs" : 0.0
        }
      },
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      {
        "name" : "FP_Hiking",
        "priority": 4, // lower is better
        "driveStartAnimTrigger" : "HikingDrivingStart",
        "driveLoopAnimTrigger" : "HikingDrivingLoop",
        "driveEndAnimTrigger" : "HikingDrivingEnd",
        "behaviorChooser" :
        {
          "type" : "simple",
          "behaviorGroups" : [ "FP_Hiking" ],

          "scoreBonusForCurrentBehavior" : {
            "nodes" : [
              { "x" :   0.0, "y" :  1.0 } // give this bonus to continue the same behavior unless score changes by that much
            ]
          }
        },
        "goalStrategy":
        {
          "type" : "FP_Hiking",
          "goalShouldEndDurationSecs" : 120.0, // hiking will automatically finish when it completes, so a higher max time is ok
          "cooldownSecs" : 10.0,
          "createBeacons" : true,
          "visitInterestingEdges" : true,
          "gatherUsableCubesOutOfBeacons" : true
        }
      },
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      {
        // we want this play alone to be higher priority than exploring, but its activation is more
        // restrictive than PlayingAlone when there's nothing else to do
        "name" : "FP_PlayAlone",
        "priority": 3, // lower is better
        "behaviorChooser" :
        {
          "type" : "simple",
          "behaviorGroups" : [ "FP_PlayAlone" ]
        },
        "goalStrategy":
        {
          "type" : "FP_PlayAlone",
          // future: it might be a good idea to check how many behaviors are available to tune the duration based on that
          "goalShouldEndDurationSecs" : 25.0,
          "cooldownSecs" : 30.0,
          // require a minimum playful score
          "requiredMinStartMoodScore" : 0.5,
          "startMoodScorer" :
          [
            {
              // intended meaning: show that Cozmo is playful emotionally. Note this can be tweaked differently
              // from PlayWithHumans.
              "emotionType" : "WantToPlay",
              "scoreGraph" : {
                "nodes" : [
                  { "x" : -1.0, "y" : 0.0 },
                  { "x" :  0.5, "y" : 0.0 },  // if WantToPlay is below X, score low
                  { "x" :  0.5, "y" : 1.0 },  // if WantToPlay is above X, score high
                  { "x" :  1.0, "y" : 1.0 }
                ]
              },
              "trackDelta" : false
            }
          ]
        }
      },
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      {
        "name" : "FP_PlayWithHumans",
        "priority": 2, // lower is better
        "behaviorChooser" :
        {
          "type" : "simple",
          "behaviorGroups" : [ "FP_PlayWithHumans" ]
        },
        "goalStrategy":
        {
          "type" : "FP_PlayWithHumans",
          // do not go back immediately even if still feels playful
          // (it should be possible to fire with other triggers, like pick up)
          "cooldownSecs" : 30.0,
          // require a minimum playful score
          "requiredMinStartMoodScore" : 0.5,
          "startMoodScorer" :
          [
            {
              // intended meaning: if Cozmo wants to play, this goal should become available, since it
              // merely asks the player to play
              "emotionType" : "WantToPlay",
              "scoreGraph" : {
                "nodes" : [
                  { "x" : -1.0, "y" : 0.0 },
                  { "x" :  0.0, "y" : 0.0 },  // if WantToPlay is below X, score low
                  { "x" :  0.0, "y" : 1.0 },  // if WantToPlay is above X, score high
                  { "x" :  1.0, "y" : 1.0 }
                ]
              },
              "trackDelta" : false
            }
          ]
        }
      },
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      {
        "name" : "FP_Socialize",
        "priority": 1, // lower is better
        "behaviorChooser" :
        {
          "type" : "simple",
          "behaviorGroups" : [ "FP_Socialize" ]
        },
        "goalStrategy":
        {
          "type" : "FP_Socialize",
          // at least interact for this amount of time every time
          "goalCanEndDurationSecs" : 12.0,
          // do not go back immediately even if still wants to social
          // (it should be possible to fire with other triggers, like pick up)
          "cooldownSecs" : 30.0,
          // require a minimum social score
          "requiredMinStartMoodScore" : 0.5,
          "startMoodScorer" :
          [
            {
              // intended meaning: if we need to socialize, trigger this goal, but if we do it a lot,
              // do not pick this goal, so we try to do something else instead
              "emotionType" : "Social",
              "scoreGraph" : {
                "nodes" : [
                  { "x" : -1.0, "y" : 1.0 },
                  { "x" :  0.2, "y" : 1.0 },  // if social is below X, score high
                  { "x" :  0.2, "y" : 0.0 },  // if social is above X, score low
                  { "x" :  1.0, "y" : 0.0 }
                ]
              },
              "trackDelta" : false
            }
          ],
          // finish if it's been a while since we interacted for the last time
          "maxTimeWithoutInteractionSecs" : 8.0
        }
      }
    ]
  }
}
