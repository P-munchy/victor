{
  "behaviorID" : "HighLevelAI",
  "behaviorClass" : "HighLevelAI",


  "states": [
    {
      "name": "ObservingOnCharger",
      "behavior": "ObservingOnChargerState",
      "visionModes": [ "DetectingMarkers", "DetectingFaces" ],
      "debugColor": "ORANGE"
    },
    {
      "name": "ObservingOnChargerRecentlyPlaced",
      "behavior": "ObservingOnChargerState",
      "visionModes": [ "DetectingMarkers" ],
      "debugColor": "RED"
    },
    {
      "name": "DriveOffChargerIntoObserving",
      "behavior": "DriveOffChargerIntoObserving",
      "visionModes": [ "DetectingFaces", "DetectingMarkers" ]
    },
    {
      "name": "DriveOffChargerIntoSocializing",
      "behavior": "DriveOffCharger"
    },
    {
      "name": "Observing",
      "behavior": "ObservingState",
      "visionModes": [ "DetectingFaces", "DetectingMarkers" ],
      "debugColor": "BLUE"
    },
    {
      "name": "Socializing",
      "behavior": "Socialize",
      "visionModes": [ "DetectingFaces" ],
      "debugColor": "MAGENTA"
    },
    {
      "name": "Napping",
      "behavior": "SleepingState",
      "debugColor": "GREEN"
    },
    {
      "name": "WakingUp",
      "behavior": "SleepingWakeUp"
    },
    {
      "name": "ReturningToCharger",
      "behavior": "FindAndGoToHome",
      "visionModes": [ "DetectingMarkers" ],
      "debugColor": "WHITE"
    },
    {
      "name": "FailedToFindCharger",
      "behavior": "ObservingFailedToFindCharger",
      "visionModes": [ "DetectingMarkers" ]
    }
  ],

  "transitionDefinitions": [
    {
      // TODO:(bn) split this up into multiple files?
      
      "from": "ObservingOnCharger",
      "interruptingTransitions": [
        {
          "to": "Observing",
          "condition": {
            "conditionType": "Negate",
            "operand": {
              "conditionType": "OnCharger"
            }
          }
        },        
        {
          "to": "DriveOffChargerIntoSocializing",
          "preDefinedStrategyName": "CloseFaceForSocializing"
        }
      ],
      "nonInterruptingTransitions": [
        {
          "to": "DriveOffChargerIntoObserving",
          "condition": {
            "conditionType": "InNeedsBracket",
            "need": "Energy",
            "needBracket": "Critical"
          }
        },
        {
          "to": "Napping",
          "preDefinedStrategyName": "WantsToSleep"
        }
      ]
    },

    {
      "from": "ObservingOnChargerRecentlyPlaced",

      "interruptingTransitions": [
        {
          "to": "Observing",
          "condition": {
            "conditionType": "Negate",
            "operand": {
              "conditionType": "OnCharger"
            }
          }
        }
      ],
      "nonInterruptingTransitions": [        
        {
          "to": "ObservingOnCharger",
          "condition": {
            "conditionType": "TimerInRange",
            "begin_s": 120.0
          }
        }
      ]
    },

    {
      "from": "Observing",
      "interruptingTransitions": [
        {
          "to": "ObservingOnChargerRecentlyPlaced",
          "condition": {
            "conditionType": "OnCharger"
          }
        },
        {
          "to": "Socializing",
          "preDefinedStrategyName": "CloseFaceForSocializing"
        }
      ],
      "nonInterruptingTransitions": [
        {
          "to": "ReturningToCharger",
          "preDefinedStrategyName": "NeedsToCharge"
        }
      ]
    },

    {
      "from": "Socializing",
      "interruptingTransitions": [
        {
          "to": "ObservingOnChargerRecentlyPlaced",
          "condition": {
            "conditionType": "OnCharger"
          }
        }
      ],
      "exitTransitions": [
        {
          "to": "Observing",
          "condition": {
            "conditionType": "TrueCondition" 
          }
        }
      ]
    },

    {
      "from": "DriveOffChargerIntoObserving",
      "exitTransitions": [
        {
          "to": "Socializing",
          "preDefinedStrategyName": "CloseFaceForSocializing"
        },
        {
          // fall back to observing if can't eat after driving off the charger
          "to": "Observing",
          "condition": {
            "conditionType": "TrueCondition"
          }
        }
      ]
    },

    {
      "from": "DriveOffChargerIntoSocializing",
      "exitTransitions": [
        {
          "to": "Socializing",
          "condition": {
            "conditionType": "TrueCondition"
          }
        }
      ]
    },
    
    {
      "from": "Napping",
      "interruptingTransitions": [
        {
          "to": "WakingUp",
          "condition": {
            "conditionType": "Negate",
            "operand": {
              "conditionType": "OnCharger"
            }
          }
        }
      ],
      "nonInterruptingTransitions": [
        {
          "to": "WakingUp",
          "condition": {
            "conditionType": "TimerInRange",
            "begin_s": 300.0
          }
        }
      ]
    },

    {
      "from": "WakingUp",
      "exitTransitions": [
        {
          "to": "ObservingOnCharger",
          "condition": {
            "conditionType": "TrueCondition" 
          }
        }
      ]
    },

    {
      "from": "ReturningToCharger",
      "exitTransitions": [
        {
          "to": "ObservingOnChargerRecentlyPlaced",
          "condition": {
            "conditionType": "OnCharger"
          }
        },
        {
          // TODO:(bn) this doesn't work right now because FindAndGoToHome never stops unless it find a charger
          "to": "FailedToFindCharger",
          "condition": {
            "conditionType": "TrueCondition" 
          }
        }
      ]
    },

    {
      "from": "FailedToFindCharger",
      "interruptingTransitions": [
        {
          "to": "ReturningToCharger",
          "preDefinedStrategyName": "ChargerLocated"
        }
      ],
      "exitTransitions": [
        {
          "to": "ObservingOnChargerRecentlyPlaced",
          "condition": {
            "conditionType": "OnCharger"
          }
        },
        {
          "to": "Napping",
          "condition": {
            "conditionType": "TrueCondition" 
          }
        }
      ]
    }
  ]

}
