
#include "clad/audio/audioMessageTypes.clad"
#include "clad/audio/audioEventTypes.clad"
#include "clad/audio/audioGameObjectTypes.clad"
#include "clad/audio/audioStateTypes.clad"
#include "clad/audio/audioSwitchTypes.clad"
#include "clad/audio/audioParameterTypes.clad"

namespace Anki {
namespace AudioEngine {
namespace Multiplexer {

// Event messages

message PostAudioEvent
{
  Anki::AudioMetaData::GameEvent::GenericEvent  audioEvent,
  Anki::AudioMetaData::GameObjectType           gameObject,
  uint_16                                       callbackId = 0  // Send all callbacks if this is NOT == 0
}

message StopAllAudioEvents
{
  Anki::AudioMetaData::GameObjectType  gameObject,
}

message PostAudioGameState
{
  Anki::AudioMetaData::GameState::StateGroupType stateGroup,
  Anki::AudioMetaData::GameState::GenericState   stateValue,
}

message PostAudioSwitchState
{
  Anki::AudioMetaData::SwitchState::SwitchGroupType  switchStateGroup,
  Anki::AudioMetaData::SwitchState::GenericSwitch    switchStateValue,
  Anki::AudioMetaData::GameObjectType                gameObject,
}

message PostAudioParameter
{
  Anki::AudioMetaData::GameParameter::ParameterType parameter,
  float_32                                          parameterValue      = 0.0,
  Anki::AudioMetaData::GameObjectType               gameObject,
  int_32                                            timeInMilliSeconds  = 0,
  CurveType                                         curve,
}


// Music Messages

message PostAudioMusicState
{
  Anki::AudioMetaData::GameState::GenericState  stateValue,
  uint_32                                       minDurationInMilliSeconds = 0,
  bool                                          interrupt                 = 0,
}

} // Multiplexer
} // AudioEngine
} // Anki
