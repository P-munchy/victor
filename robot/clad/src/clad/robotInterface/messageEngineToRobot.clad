/** Clad definitions of all messages sent from the Cozmo engine to the robot and from one part of the robot to another.
 * This file name is now out of date since it should be messageToRobot since messages may not be coming from the engine.
 *
 * Used in the engine, all three robot processors and the test fixture, however, we don't have to build and flash in
 * lockstep because of strict tag space partitioning.
 */

#include "clad/audio/audioMessage.clad"
#include "clad/types/imageTypes.clad"
#include "clad/types/robotStatusAndActions.clad"
#include "clad/types/ledTypes.clad"
#include "clad/types/animationTypes.clad"
#include "clad/types/robotTestModes.clad"
#include "clad/types/dockingSignals.clad"
#include "clad/types/imu.clad"
#include "clad/types/controllerChannels.clad"
#include "clad/types/proceduralFaceTypes.clad"
#include "clad/types/proxMessages.clad"
#include "clad/robotInterface/messageToActiveObject.clad"
#include "clad/robotInterface/messageFromActiveObject.clad"
#include "clad/robotInterface/otaMessages.clad"
#include "clad/types/cameraFOVInfo.clad"
#include "clad/types/motorTypes.clad"


namespace Anki {
namespace Cozmo {
  
  structure SetPropSlot
  {
    uint_32 factory_id,
    uint_8  slot
  }

  message SetCubeGamma
  {
    uint_8  gamma
  }

namespace RobotInterface {

/** Pipe from engine to robot.
 * This cannot be an auto union because we need explicit tag values to partition the RTIP and WiFi code
 * and to make debugging from message dumps more sane.
 */

message StartMotorCalibration
{
  bool calibrateHead,
  bool calibrateLift
}

message DriveWheels
{
  float_32 lwheel_speed_mmps,
  float_32 rwheel_speed_mmps,
  float_32 lwheel_accel_mmps2 = 0.0,
  float_32 rwheel_accel_mmps2 = 0.0
}

message DriveWheelsCurvature
{
  float_32 speed,               // Target speed in mm/sec (or rad/s if curvatureRadius_mm == 0)
                                // If curvatureRadius_mm == 0, the speed is in rad/s where +ve means CCW rotation.
  float_32 accel,               // Acceleration to approach target speed in mm/sec^2
                                // (or rad/s^2 if curvatureRadius_mm == 0)
                                // 0: Max acceleration

  int_16 curvatureRadius_mm     // Radius of arc to drive
                                // u16_MAX or u16_MIN: Straight
                                // +ve: curves left, -ve: curves right
                                // 0: Point turn
}

message MoveLift
{
  float_32 speed_rad_per_sec,
}

message MoveHead
{
  float_32 speed_rad_per_sec,
}

message SetLiftHeight
{
  float_32 height_mm,
  float_32 max_speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
  float_32 duration_sec,
}

message SetHeadAngle
{
  float_32 angle_rad,
  float_32 max_speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
  float_32 duration_sec,
}

message HeadAngleUpdate
{
  float_32 newAngle,
}

// This is a turn in place to an absolute angle
message SetBodyAngle
{
  float_32 angle_rad,              // Absolute angle the robot should achieve at the end of the turn.
  float_32 max_speed_rad_per_sec,  // Maximum speed of the turn (sign determines the direction of the turn)
  float_32 accel_rad_per_sec2,     // Accel/decel to use during the turn
  float_32 angle_tolerance,
  uint_16 num_half_revolutions,    // Used for turns greater than 180 degrees (e.g. "turn 720 degrees")
  bool use_shortest_direction      // If true, robot should take the shortest path to angle_rad and disregard
                                   // the sign of max_speed and num_half_revolutions. If false, consider sign
                                   // of max_speed and num_half_revolutions to determine which direction to
                                   // turn and how far to turn (e.g. for turns longer than 360 deg)
}

message TurnInPlaceAtSpeed
{
  float_32 speed_rad_per_sec,
  float_32 accel_rad_per_sec2,
}

message StopAllMotors
{
}

message ClearPath
{
  uint_16 pathID,
}

message PathSegmentSpeed
{
  float_32 target,
  float_32 accel,
  float_32 decel,
}

message AppendPathSegmentLine
{
  float_32 x_start_mm,
  float_32 y_start_mm,
  float_32 x_end_mm,
  float_32 y_end_mm,
  PathSegmentSpeed speed,
}

message AppendPathSegmentArc
{
  float_32 x_center_mm,
  float_32 y_center_mm,
  float_32 radius_mm,
  float_32 startRad,
  float_32 sweepRad,
  PathSegmentSpeed speed,
}

message AppendPathSegmentPointTurn
{
  float_32 x_center_mm,
  float_32 y_center_mm,
  float_32 startRad,
  float_32 targetRad,
  float_32 angleTolerance,
  PathSegmentSpeed speed, // targetSpeed indicates rotational speed in rad/s
  bool     useShortestDir
}

message TrimPath
{
  uint_8 numPopFrontSegments,
  uint_8 numPopBackSegments,
}

message ExecutePath
{
  uint_16 pathID,
  bool    useManualSpeed,
}

message AbsoluteLocalizationUpdate
{
  uint_32 timestamp,
  uint_32 pose_frame_id,
  uint_32 origin_id,
  float_32 xPosition,
  float_32 yPosition,
  float_32 headingAngle,
}

// Used only for testing with simulated robots. Engine will never send this message if it is talking
// talking to a simulated robot
message ForceDelocalizeSimulatedRobot
{

}

message SyncTime
{
  uint_32 syncTime,

  // Other random things to send to robot on init
  // which can eventually be made constant
  float_32 driveCenterOffset
}

message ControllerGains
{
  float_32 kp,
  float_32 ki,
  float_32 kd,
  float_32 maxIntegralError,
  ControllerChannel controller
}

message RollActionParams
{
   float_32 liftHeight_mm,
   float_32 driveSpeed_mmps,
   float_32 driveAccel_mmps2,
   uint_32 driveDuration_ms,
   float_32 backupDist_mm,
}

message SetMotionModelParams
{
  float_32 slipFactor,
}

message BackpackSetLayer
{
  uint_8 layer
}

message GetManufacturingInfo
{
}

message AbortAnimation
{
  uint_8 tag
}

message CheckLiftLoad
{
}

// Enable/Disable power to lift completely.
// Once disabled, must be re-enabled before motor can be commanded again.
// Only works for MOTOR_LIFT and MOTOR_HEAD.
message EnableMotorPower
{
  MotorID motorID,
  bool    enable
}

message EnableReadToolCodeMode
{
  float_32 headPower,
  float_32 liftPower,
  bool enable
}

message EnableStopOnCliff
{
  bool enable
}

message EnableBraceWhenFalling
{
  bool enable
}

// ========== V2 Animation process messages ===========

// TODO: Make animation files referencable by integer tag so we don't have to send a string.
message RequestAvailableAnimations
{
}

message PlayAnim
{
  uint_32 animID,
  uint_32 numLoops = 1,
  uint_8  tag
}

message LockAnimTracks
{
  uint_8 whichTracks    // See AnimTrackFlags
}

message RecordHeading
{
}

message TurnToRecordedHeading
{
  int_16 offset_deg,        // Offset from recorded angle
  int_16 speed_degPerSec,
  int_16 accel_degPerSec2,
  int_16 decel_degPerSec2,
  uint_16 tolerance_deg,
  uint_16 numHalfRevs,
  bool useShortestDir,
}

message SetBackpackLights
{
  LightState lights[3],
  uint_8 layer = 0      // 0 is BPL_USER
}

// DisplayProceduralFace
message DisplayProceduralFace 
{
    ProceduralFaceParameters  faceParams,
    uint_32                   duration_ms     // Use uint_32 max value to keep the image on the screen
}

// SetFaceHue
message SetFaceHue
{
    float_32 hue // [0,1]
}

// ====================================================

enum uint_32 ToRobotAddressSpace
{
  GLOBAL_INVALID_TAG = 0,
  TO_SUPERVISOR_START = 0x01,
  TO_SUPERVISOR_END   = 0x4F,
  TO_ANIM_START = 0x50,
  TO_ANIM_END   = 0xAF,
  TO_ENG_START  = 0xB0,
  TO_ENG_UNREL  = 0xF0,
  TO_ENG_END    = 0xFE
}

/// *************** Overall message pipe ******************************* ///

/** Pipe from engine to animation process and robot (supervisor) process
 * This cannot be an auto union because we need explicit tag values to partition the messages between the engine (not
 * included in this file), anim process, and robot process. And significantly to make debugging from message dumps
 * more sane.
 */
union EngineToRobot
{
  // 0x00 Is invalid message

  // 0x01 to 0x4f: Messages to robot (supervisor) process

  // Init
  GetManufacturingInfo          getMfgInfo                  = 0x01,
  SyncTime                      syncTime                    = 0x02,

  // Debug / Test
  StartControllerTestMode       startControllerTestMode     = 0x0A,
  ControllerGains               setControllerGains          = 0x0B,
  SetMotionModelParams          setMotionModelParams        = 0x0C,
  RollActionParams              rollActionParams            = 0x0D,

  // Motor control
  DriveWheels                   drive                       = 0x10,
  DriveWheelsCurvature          driveCurvature              = 0x11,
  MoveLift                      moveLift                    = 0x12,
  MoveHead                      moveHead                    = 0x13,
  SetLiftHeight                 liftHeight                  = 0x14,
  SetHeadAngle                  headAngle                   = 0x15,
  HeadAngleUpdate               headAngleUpdate             = 0x16,
  SetBodyAngle                  setBodyAngle                = 0x17,
  TurnInPlaceAtSpeed            turnInPlaceAtSpeed          = 0x18,
  RecordHeading                 recordHeading               = 0x19,
  TurnToRecordedHeading         turnToRecordedHeading       = 0x1A,  
  EnableMotorPower              enableMotorPower            = 0x1B,    
  StopAllMotors                 stop                        = 0x1C,

  // Lights
  BackpackSetLayer              setBackpackLayer            = 0x1D,
  SetBackpackLights             setBackpackLights           = 0x1E,

  // Path messages
  ClearPath                     clearPath                   = 0x20,
  AppendPathSegmentLine         appendPathSegLine           = 0x21,
  AppendPathSegmentArc          appendPathSegArc            = 0x22,
  AppendPathSegmentPointTurn    appendPathSegPointTurn      = 0x23,
  TrimPath                      trimPath                    = 0x24,
  ExecutePath                   executePath                 = 0x25,

  // Docking messages
  DockWithObject                dockWithObject              = 0x26,
  AbortDocking                  abortDocking                = 0x27,
  PlaceObjectOnGround           placeObjectOnGround         = 0x28,
  DockingErrorSignal            dockingErrorSignal          = 0x2A,
  CarryStateUpdate              setCarryState               = 0x2B,
  CameraFOVInfo                 cameraFOVInfo               = 0x2C,  

  // Localization
  AbsoluteLocalizationUpdate    absLocalizationUpdate       = 0x2D,
  ForceDelocalizeSimulatedRobot forceDelocalizeSimulatedRobot = 0x2E, // Used for simulation only, no-op for physical  

  // Sensor messages
  IMURequest                    imuRequest                  = 0x30,  
  CheckLiftLoad                 checkLiftLoad               = 0x31,  
  SetCliffDetectThresholds      setCliffDetectThresholds    = 0x32,

  // Calibration
  EnableReadToolCodeMode        enableReadToolCodeMode      = 0x33,
  StartMotorCalibration         startMotorCalibration       = 0x34,
  
  // Reactions
  EnableStopOnCliff             enableStopOnCliff           = 0x35,
  EnableBraceWhenFalling        enableBraceWhenFalling      = 0x36,


  // TODO: These cube messages will need to be modified and moved to a 
  //       separate file once we update block connection logic for BLE
  CubeLights                    setCubeLights               = 0x4B,
  SetPropSlot                   setPropSlot                 = 0x4C,
  StreamObjectAccel             streamObjectAccel           = 0x4D,
  SetCubeGamma                  setCubeGamma                = 0x4E,
  CubeID                        setCubeID                   = 0x4F,
  

  // 0x50 to 0xAF: To Anim Process
  PlayAnim                      playAnim                    = 0x50,
  LockAnimTracks                lockAnimTracks              = 0x51,
  RequestAvailableAnimations    requestAvailableAnimations  = 0x52,
  AbortAnimation                abortAnimation              = 0x53,
  DisplayProceduralFace         displayProceduralFace       = 0x54,
  SetFaceHue                    setFaceHue                  = 0x55,

  AudioEngine::Multiplexer::PostAudioEvent        postAudioEvent       = 0x70,
  AudioEngine::Multiplexer::StopAllAudioEvents    stopAllAudioEvents   = 0x71,
  AudioEngine::Multiplexer::PostAudioGameState    postAudioGameState   = 0x72,
  AudioEngine::Multiplexer::PostAudioSwitchState  postAudioSwitchState = 0x73,
  AudioEngine::Multiplexer::PostAudioParameter    postAudioParameter   = 0x74,


  // 0xB0 to 0xFE: To engine, see messageRobotToEngine.clad
}


} // namespace Robot Interface
} // namespace Cozmo
} // namespace Anki
