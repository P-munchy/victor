/** Clad definitions of all messages sent from the Cozmo robot to the Cozmo engine
 * This file is used on both the RTIP and WiFi chips on the robot but because we use explicit union tags, we don't have
 * to recompile the code in lock step.
 */


#include "clad/audio/audioCallbackMessage.clad"
#include "clad/types/robotStatusAndActions.clad"
#include "clad/types/motorTypes.clad"
#include "clad/types/dockingSignals.clad"
#include "clad/types/imu.clad"
#include "clad/types/proxMessages.clad"
#include "clad/robotInterface/otaMessages.clad"
#include "clad/robotInterface/messageFromAnimProcess.clad"
#include "clad/types/pathEventTypes.clad"
#include "clad/types/factoryFWOnly.clad"
#include "clad/types/robotToSwitchboard.clad"
#include "clad/robotInterface/factoryMessages.clad"

namespace Anki {
namespace Cozmo {
namespace RobotInterface {

message SyncTimeAck
{
  uint_8 sysconVersion[16] // Must match VersionInfo::app_version in schema/messages.h
}

message PrepForShutdown
{
}

message RobotPoked
{
}

// Indicates the robot has heard the trigger word
message TriggerWordDetected
{
  uint_32 timestamp,
  uint_16 direction
}

message MicDirection
{
  uint_32   timestamp,
  uint_16   direction,
  int_16    confidence,
  float_32  confidenceList[13],
  int_32  activeState,
}

// This message indicates that the robot experienced a freefall event
message FallingEvent {
  uint_32 timestamp,       // When the fall started (as a robot timestamp)
  uint_32 duration_ms,     // The approximate freefall duration
  float_32 impactIntensity // A measure of how 'hard' the impact was (this is computed as the
                           // maximum experienced high-pass filtered accelerometer value)
}

message RobotStopped
{
  uint_8 reason  // reserved for later in case we need reasons
}

message PathFollowingEvent
{
  uint_16        pathID,
  PathEventType  eventType
}

message ManufacturingID
{ // See definitions in syscon/hal/hardware.h
  uint_32 esn,
  int_32  hw_version,
  int_32  body_color,
}

message LiftLoad
{
  bool hasLoad
}

// Returned in response to receiving a head, lift, or turn-in-place command
message MotorActionAck
{
  uint_8  actionID,
}

message MicData
{
  int_16  data[320], // 80 samples of audio 4 channels
  uint_32 timestamp,
  uint_32 robotStatusFlags, // RobotStatusFlag packs as a uint_32
  float_32 robotRotationAngle,
}

message AudioFFTResult
{
  uint_32 result[4]
}

message StartSelfTest
{

}

message SendRangeData
{
  bool enable
}

/// *************** Overall message pipe ******************************* ///

/** Pipe from robot to engine.
 * This cannot be an auto union because we need explicit tag values by destination. The tag space is shared with
 * messageEngineToRobot.clad
 * 0xB0 and up going to the engine
 */
union RobotToEngine {
  // ==== 0xB0 to 0xEF: Reliable messages to the Engine ====
  //               NOTE: Messages are currently only reliable between the
  //                     animation process and the engine.
  //                     Everything between the anim and robot processes is UNRELIABLE!

  // Init / Debug
  SyncTimeAck                syncTimeAck            = 0xB0,
  PrepForShutdown            prepForShutdown        = 0xB1,
  MotorActionAck             motorActionAck         = 0xB2,

  // Motors / Driving
  MotorCalibration           motorCalibration       = 0xB3,
  RobotStopped               robotStopped           = 0xB4,
  MotorAutoEnabled           motorAutoEnabled       = 0xB5,
  PathFollowingEvent         pathFollowingEvent     = 0xB6,

  // Docking
  GoalPose                   goalPose               = 0xB7,
  DockingStatus              dockingStatus          = 0xB8,
  MovingLiftPostDock         movingLiftPostDock     = 0xB9,
  LiftLoad                   liftLoad               = 0xBA,
  PickAndPlaceResult         pickAndPlaceResult     = 0xBB,
  ChargerMountComplete       chargerMountCompleted  = 0xBC,
  RampTraverseStart          rampTraverseStarted    = 0xBD,
  RampTraverseComplete       rampTraverseCompleted  = 0xBE,
  BridgeTraverseStart        bridgeTraverseStarted  = 0xBF,
  BridgeTraverseComplete     bridgeTraverseCompleted= 0xC0,

  // Sensors
  // FREE SLOT                                      = 0xC1,
  IMUDataChunk               imuDataChunk           = 0xC2,
  IMURawDataChunk            imuRawDataChunk        = 0xC3,
  IMUTemperature             imuTemperature         = 0xC4,
  CliffEvent                 cliffEvent             = 0xC5,
  PotentialCliff             potentialCliff         = 0xC6,
  FallingEvent               fallingEvent           = 0xC7,
  RobotPoked                 robotPoked             = 0xC8,

  // TODO: Can probably get rid of these eventually since engine
  //       can access most of this info directly now.
  FWVersionInfo              factoryFirmwareVersion = 0xC9, ///< DEPRECATED, only used by factory firmware
  RunFactoryTest             runFactoryTest         = 0xCA,
  ManufacturingID            mfgId                  = 0xCB,
  FirmwareVersion            firmwareVersion        = 0xCC,

  // FREE SLOTS 0xCD to 0xD2

  // Messages from animation process to engine
  AnimationAdded             animAdded              = 0xD3,
  RobotAvailable             robotAvailable         = 0xD4,
  AnimationEvent             animEvent              = 0xD5,
  AnimationStarted           animStarted            = 0xD6,
  AnimationEnded             animEnded              = 0xD7,

  AudioFFTResult             audioFFTResult         = 0xD8,

  // Messages relating to trigger word detection
  TriggerWordDetected        triggerWordDetected    = 0xD9,
  MicDirection               micDirection           = 0xDA,

  TextToSpeechEvent          textToSpeechEvent      = 0xDB,

  SwitchboardInterface::EnterPairing  enterPairing  = 0xDC,
  SwitchboardInterface::ExitPairing   exitPairing   = 0xDD,
  StreamCameraImages         streamCameraImages     = 0xDE,

  StartSelfTest              startSelfTest          = 0xDF,

  // Audio
  AudioEngine::Multiplexer::AudioCallbackDuration audioCallbackDuration = 0xE0,
  AudioEngine::Multiplexer::AudioCallbackMarker   audioCallbackMarker   = 0xE1,
  AudioEngine::Multiplexer::AudioCallbackComplete audioCallbackComplete = 0xE2,
  AudioEngine::Multiplexer::AudioCallbackError    audioCallbackError    = 0xE3,

  SendRangeData                                   sendRangeData         = 0xE4,

  // ====== 0xF0 to 0x FE: Unreliable message to the Engine =====
  // From robot process
  RobotState                 state                  = 0xF0,
  ImageImuData               imageGyro              = 0xF1,
  MicData                    micData                = 0xF2,

  // From anim process
  AnimationState             animState              = 0xF3,

}


} // namespace RobotInterface
} // namespace Cozmo
} // namespace Anki
