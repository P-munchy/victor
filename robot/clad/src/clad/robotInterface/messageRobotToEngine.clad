/** Clad definitions of all messages sent from the Cozmo robot to the Cozmo engine
 * This file is used on both the RTIP and WiFi chips on the robot but because we use explicit union tags, we don't have
 * to recompile the code in lock step.
 */


#include "clad/types/robotStatusAndActions.clad"
#include "clad/types/robotLogging.clad"
#include "clad/types/imageTypes.clad"
#include "clad/types/motorTypes.clad"
#include "clad/types/dockingSignals.clad"
#include "clad/types/imu.clad"
#include "clad/types/proxMessages.clad"
#include "clad/robotInterface/messageFromActiveObject.clad"
#include "clad/robotInterface/otaMessages.clad"
#include "clad/robotInterface/messageFromAnimProcess.clad"
#include "clad/types/nvStorage.clad"
#include "clad/types/animationEvents.clad"
#include "clad/types/pathEventTypes.clad"
#include "clad/types/robotErrors.clad"
#include "clad/types/fwTestMessages.clad"
#include "clad/types/factoryFWOnly.clad"
#include "clad/types/cameraParams.clad"

namespace Anki {
namespace Cozmo {
namespace RobotInterface {

message SyncTimeAck
{
}

message BackpackButton
{
  bool depressed
}

message RobotPoked
{
}

// This message indicates that the robot experienced a freefall event
message FallingEvent {
  uint_32 timestamp,       // When the fall started (as a robot timestamp)
  uint_32 duration_ms,     // The approximate freefall duration
  float_32 impactIntensity // A measure of how 'hard' the impact was (this is computed as the
                           // maximum experienced high-pass filtered accelerometer value)
}

message RobotStopped
{
  uint_8 reason  // reserved for later in case we need reasons
}

message PathFollowingEvent
{
  uint_16        pathID,
  PathEventType  eventType
}

message AnimationAvailable {
  uint_32 id,
  string name
}

// These two messages bookend animations as they are played on the robot
message AnimationStarted
{
  uint_32 id,
  uint_8  tag
}

message AnimationEnded
{
  uint_32 id,
  uint_8 tag
}

message AnimationEvent
{
  uint_32   timestamp,
  uint_8    tag,
  AnimEvent event_id
}

message ManufacturingID
{ // See definitions in syscon/hal/hardware.h
  uint_32 esn,
  int_32  hw_version,
  int_32  body_color,
}

message LiftLoad
{
  bool hasLoad
}

message WiFiFlashID
{
  uint_32 chip_id
}

/// *************** Overall message pipe ******************************* ///

/** Pipe from robot to engine.
 * This cannot be an auto union because we need explicit tag values by destination. The tag space is shared with
 * messageEngineToRobot.clad
 * 0xB0 and up going to the engine
 */
union RobotToEngine {
  // 0xB0 to 0xEF: Reliable messages to the Engine
  PrintTrace                 trace                  = 0xB0,
  PrintText                  printText              = 0xB1,
  MainCycleTimeError         mainCycleTimeError     = 0xB2,
  GoalPose                   goalPose               = 0xB3,
  ObjectMoved                activeObjectMoved      = 0xB4,
  ObjectStoppedMoving        activeObjectStopped    = 0xB5,
  ObjectTapped               activeObjectTapped     = 0xB6,
  DataDump                   dataDump               = 0xB7,
  PickAndPlaceResult         pickAndPlaceResult     = 0xB8,
  ObjectTappedFiltered       objectTappedFiltered   = 0xB9,
  RampTraverseStart          rampTraverseStarted    = 0xBA,
  RampTraverseComplete       rampTraverseCompleted  = 0xBB,
  BridgeTraverseStart        bridgeTraverseStarted  = 0xBC,
  BridgeTraverseComplete     bridgeTraverseCompleted= 0xBD,
  TimeProfileStat            timeProfStat           = 0xBE,
  IMUDataChunk               imuDataChunk           = 0xBF,
  CliffEvent                 cliffEvent             = 0xC0,
  PotentialCliff             potentialCliff         = 0xC1,
  SyncTimeAck                syncTimeAck            = 0xC2,
  RobotPoked                 robotPoked             = 0xC3,
  FallingEvent               fallingEvent           = 0xC4,
  MovingLiftPostDock         movingLiftPostDock     = 0xC5,
  PathFollowingEvent         pathFollowingEvent     = 0xC6,
  IMURawDataChunk            imuRawDataChunk        = 0xC7,
  DefaultCameraParams        defaultCameraParams    = 0xC8,
  RobotAvailable             robotAvailable         = 0xC9,
  AnimationStarted           animStarted            = 0xCA,   // V2: sent from anim process
  AnimationEnded             animEnded              = 0xCB,   // V2: sent from anim process
  //        FREE SLOT!!!                            = 0xCC,
  NVStorage::NVOpResult      nvOpResult             = 0xCD,
  ObjectPowerLevel           objectPowerLevel       = 0xCE,
  CrashReport                crashReport            = 0xCF,
  ObjectConnectionState activeObjectConnectionState = 0xD0,
  MotorCalibration           motorCalibration       = 0xD1,
  FWVersionInfo              factoryFirmwareVersion = 0xD2, ///< Depricated, only used by factory firmware
  DockingStatus              dockingStatus          = 0xD3,
  RobotStopped               robotStopped           = 0xD4,
  AnimationEvent             animEvent              = 0xD5,
  FactoryTestParameter       factoryTestParam       = 0xD6,
  ObjectUpAxisChanged        activeObjectUpAxisChanged = 0xD7,
  MotorAutoEnabled           motorAutoEnabled       = 0xD8,
  RobotErrorReport           robotError             = 0xD9,
  LiftLoad                   liftLoad               = 0xDA,
  BackpackButton             backpackButton         = 0xDB,
  EndOfMessage               endOfMessage           = 0xDC,
  IMUTemperature             imuTemperature         = 0xDD,

  WiFiFlashID                wifiFlashID            = 0xEC,
  ManufacturingID            mfgId                  = 0xED,
  FirmwareVersion            firmwareVersion        = 0xEE,
  OTA::Ack                   otaAck                 = 0xEF,

  //0xF0 to 0x FE: Unreliable message to the Engine
  RobotState                 state                  = 0xF0,
  AnimationState             animState              = 0xF1,
  ImageChunk                 image                  = 0xF2,
  ObjectAvailable            activeObjectAvailable  = 0xF3,
  ImageImuData               imageGyro              = 0xF4,
  ObjectAccel                objectAccel            = 0xF5,
  AnimationAvailable         animationAvailable     = 0xF6,   // V2: sent from anim process
}


} // namespace RobotInterface
} // namespace Cozmo
} // namespace Anki
