/** CLAD definitions for robot non-volatile storage
 * WARNING For backwards forward compatibility, all structures must be left as defined and new versions added with their
 * Own unique identifier when needed.
 */

#include "clad/types/nvStorageTypes.clad"

namespace Anki {
namespace Cozmo {
namespace NVStorage {

  message NVCommand
  {
    uint_32 address,           // Address to erase, write or read
    uint_32 length,            // Length of erase or read (number of 1K segments for factory, number of bytes for non-factory), not used for write
    NVOperation operation,     // Operation to perform
    int_8  PADDING = 0,        // blob data below must fall on 32 bit boundary so add padding here.
    uint_8 blob[uint_16:1024], // Note this blob has to start on 32 bit boundary
  }

  message NVOpResult
  {
    uint_32 address,          // Address commanded
    uint_32 offset,           // Offset from address of this data. e.g. Offset of 2 means data retrieved from (address + 2 * 1K)
    NVOperation operation,    // Operation commanded
    NVResult result,          // Result of command
    uint_8 blob[uint_16:1024] // Data returned if it was a read
  }

} // namespace NVStorage
} // namespace Cozmo
} // namespace Anki
