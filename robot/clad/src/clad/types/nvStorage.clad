/** CLAD definitions for robot non-volatile storage
 * WARNING For backwards forward compatibility, all structures must be left as defined and new versions added with their
 * Own unique identifier when needed.
 */
 
namespace Anki {
namespace Cozmo {
namespace NVStorage {

  enum uint_32 NVEntryTag
  {
    // ===== Non-factory entries ======

    // Single blob entries start here
    // Upper 16 bits must be zero
    NVEntry_Invalid = 0xFFFFffff,
    NVEntry_CameraCalibration = 1,

    // Multi-blob entries start here
    // Upper 16 bits must be non-zero and the bottom 16 bits must all be zero


    // ====== Factory entries ========
    // Same rules as regarding single and multi-blob entries
    // except that the MSB is 1 for potential special treatment during
    // garbage collection in the future.
    NVEntry_CalibImage1 = 0x80010000,
    NVEntry_CalibImage2 = 0x80020000,
    NVEntry_CalibImage3 = 0x80030000,
    NVEntry_CalibImage4 = 0x80040000,
    NVEntry_CalibImage5 = 0x80050000,

  }

  // Nominally 0 is success > 0 is conditional success and < 0 is error
  enum int_8 NVResult {
    NV_OKAY = 0,
    NV_SCHEDULED =  1, // Scheduled for opertation
    NV_NO_DO     =  2, // Nothing to do
    NV_NOT_FOUND = -1,
    NV_NO_ROOM   = -2,
    NV_ERROR     = -3,
    NV_TIMEOUT   = -4,
    NV_BUSY      = -5, // Operations pending. try again later
    NV_BAD_ARGS  = -6, // Invalid arguments to call
    NV_NO_MEM    = -7,
  }

  /// Used to store a retrive serialized NV storage structures without caring whats in them
  structure NVStorageBlob
  {
    uint_32 tag,
    uint_8  blob[uint_32:1024],
  }
  
  enum int_8 NVReportDest
  {
    ENGINE,
    WIFI,
    RTIP,
    BODY,
  }

  message NVStorageRead
  {
    NVEntryTag tag,
    NVEntryTag tagRangeEnd,
    NVReportDest to,
  }
  
  message NVStorageWrite
  {
    NVReportDest reportTo, // Where we send reports
    bool writeNotErase,    // If true this is a write, if false erase
    bool reportEach,       // Report each operation completed
    bool reportDone,       // Report when final operation is done
    NVEntryTag rangeEnd,   // If erasing a range, the end of the range, start is the entry tag
    NVStorageBlob entry
  }
  
  structure NVOpResult {
    NVEntryTag tag,
    NVResult   result,
    bool       write,
  }

}

namespace RobotInterface {
  
  message CameraCalibration
  {
    float_32 focalLength_x,
    float_32 focalLength_y,
    float_32 center_x,
    float_32 center_y,
    float_32 skew,
    uint_16  nrows,
    uint_16  ncols,
  }
  
}
}
}
