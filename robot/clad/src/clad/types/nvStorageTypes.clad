/** CLAD definitions for robot non-volatile storage
 * WARNING For backwards forward compatibility, all structures must be left as defined and new versions added with their
 * Own unique identifier when needed.
 * ROBOT_CLAD_SHARED
 */

namespace Anki {
namespace Cozmo {
namespace NVStorage {

  enum uint_32 NVEntryTag
  {
    // ===== Non-factory entries ======

    // Single blob entries start here
    // Upper 16 bits must be zero

    // Reserved tags (i.e. nothing may actually be written to these slots)
    // All tags >= 0xF0000000 are reserved for these special uses
    NVEntry_Invalid           = 0xFFFFffff,
    NVEntry_WipeAll           = 0xFFFE0000,  // Can't actually send this with NVStorageWrite,
                                             // but it will come back as the tag in the NVOpResult
                                             // when NVWipeAll is sent.

    //NVEntry_EraseAll          = 0x0,  // The only operation that can be done on this tag is erase
                                      // and doing so ERASES ALL non-factory entries.
    //NVEntry_ReallyEraseAll    = 0x1,  // Erase everything including factory entries.
                                      // NOTE: Not sure we want to expose these to game/SDK

    // NOTE: If you want a tag to be backed-up by engine make sure to add it to backup_config.json

    NVEntry_GameSkillLevels = 0x2,

    NVEntry_OnboardingData = 0x3,


    NVEntry_Junk = 0xFFFF,

    // Multi-blob entries start here
    // Upper 16 bits must be non-zero and the bottom 16 bits must all be zero
    // The number of blobs that can be associated with a multi-blob tag is 0xffff
    // (e.g. The NVEntryTag 0x10000 reserves tags 0x10000 through 0x1ffff)
    // though this value is actually lower because it is limited in NVStorageComponent.

    // Storing game unlocks in a multiblob tag in case we add a lot of them
    // With UnlockId as a u16 we can only store 512 of them in on tag so this is just
    // for future proofing
    NVEntry_GameUnlocks     = 0x00010000,

    NVEntry_FaceAlbumData   = 0x00FA0000,
    NVEntry_FaceEnrollData  = 0x00FE0000,

    NVEntry_MultiBlobJunk   = 0x7FFF0000,

    // ====== Factory entries ========
    // Same rules as regarding single and multi-blob entries
    // except that the MSB is 1 for potential special treatment during
    // garbage collection in the future.
    // The exception is tags that start with 0xC000. See below.


    // Single blob manufacturing entries start here
    NVEntry_BirthCertificate   = 0x80000000,
    NVEntry_CameraCalib        = 0x80000001,
    NVEntry_ToolCodeInfo       = 0x80000002,
    NVEntry_CalibPose          = 0x80000003,
    NVEntry_CalibMetaInfo      = 0x80000004,
    NVEntry_ObservedCubePose   = 0x80000005,
    NVEntry_IMUInfo            = 0x80000006,
    NVEntry_CliffValOnDrop     = 0x80000007,
    NVEntry_CliffValOnGround   = 0x80000008,
    NVEntry_PlaypenTestResults = 0x80000010,
    NVEntry_FactoryLock        = 0x80000011, // If present, locks out most robot functions.

    // Multi-blob manufacturing entires start here
    NVEntry_CalibImage1 = 0x80010000,
    NVEntry_CalibImage2 = 0x80020000,
    NVEntry_CalibImage3 = 0x80030000,
    NVEntry_CalibImage4 = 0x80040000,
    NVEntry_CalibImage5 = 0x80050000,
    NVEntry_CalibImage6 = 0x80060000,

    NVEntry_ToolCodeImageLeft  = 0x80100000,
    NVEntry_ToolCodeImageRight = 0x80110000,

    // ==== Pre-playpen tags =====
    // Tags that start with 0xC000 are special factory entires.
    // They are uneraseable and they must be single blob entries.
    NVEntry_PrePlaypenResults   = 0xC0000000,
    NVEntry_PrePlaypenCentroids = 0xC0000001,
    NVEntry_IMUAverages         = 0xC0000004,
  }

  // Nominally 0 is success > 0 is conditional success and < 0 is error
  enum int_8 NVResult {
    NV_OKAY = 0,
    NV_SCHEDULED =  1, // Scheduled for opertation
    NV_NO_DO     =  2, // Nothing to do
    NV_NOT_FOUND = -1,
    NV_NO_ROOM   = -2,
    NV_ERROR     = -3,
    NV_TIMEOUT   = -4,
    NV_BUSY      = -5, // Operations pending. try again later
    NV_BAD_ARGS  = -6, // Invalid arguments to call
    NV_NO_MEM    = -7,
  }

  enum uint_8 NVOperation {
    NVOP_READ = 0,
    NVOP_WRITE,
    NVOP_ERASE,    // Erase a single entry (can be multi-blob tag)
    NVOP_WIPEALL   // Erase entire non-volatile storage
  }

}

}
}
