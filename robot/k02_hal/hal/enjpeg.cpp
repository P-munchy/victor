/**
 * This is a JPEG encoder meant to run in realtime on the Cortex-M4
 * The header-generating code was found in a public domain JavaScript JPEG encoder
 *
 * Call JPEGStart() to begin a new frame
 * Call JPEGCompress() to process 10 macroblocks of YUYV data
 * Call JPEGEnd() to complete the frame
 */
#ifdef ROBOT_HARDWARE
#include "anki/cozmo/robot/hal.h"
#include "anki/common/robot/config.h"
#include "hal/portable.h"
#include "MK02F12810.h"
#include "uart.h"
#else
#include <stdio.h>
typedef unsigned char u8;
typedef signed int s16;
typedef unsigned int u32;
#endif

namespace Anki
{
  namespace Cozmo
  {
    namespace HAL
    {

int JPEGStart(int quality);
int JPEGCompress(u8* out, u8* in, int pitch);
int JPEGEnd(u8* out);

#define PROFILE
      
#ifdef PROFILE
static int timeDCT, timeQuant, timeHuff;
#define START(x)  do { __disable_irq(); x += SysTick->VAL; } while(0)
#define STOP(x)   do { __enable_irq();  x -= SysTick->VAL; } while(0)
#else
#define START(x)
#define STOP(x)
#endif

//#define DPRINT(...) printf(__VA_ARGS__)
#define DPRINT(...)

// Built to handle Y-only input
const int PIXWIDTH = 2;

// JPEG zig-zag mapping, indexed by DCT position, returning bitstream position
static const u8 ZIG_ZAG[] =
{  0, 1, 5, 6,14,15,27,28,
	    2, 4, 7,13,16,26,29,42,
	       3, 8,12,17,25,30,41,43,
	          9,11,18,24,31,40,44,53,
	            10,19,23,32,39,45,52,54,
 	               20,22,33,38,46,51,55,60,
	                  21,34,37,47,50,56,59,61,
	                     35,36,48,49,57,58,62,63 };
  
// Standard JPEG Y huffman tables for DC/AC
static const unsigned short HTDC[256][2] = { {0,2},{2,3},{3,3},{4,3},{5,3},{6,3},{14,4},{30,5},{62,6},{126,7},{254,8},{510,9}};
static const unsigned short HTAC[256][2] = { 
  {10,4},{0,2},{1,2},{4,3},{11,4},{26,5},{120,7},{248,8},{1014,10},{65410,16},{65411,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {12,4},{27,5},{121,7},{502,9},{2038,11},{65412,16},{65413,16},{65414,16},{65415,16},{65416,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {28,5},{249,8},{1015,10},{4084,12},{65417,16},{65418,16},{65419,16},{65420,16},{65421,16},{65422,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {58,6},{503,9},{4085,12},{65423,16},{65424,16},{65425,16},{65426,16},{65427,16},{65428,16},{65429,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {59,6},{1016,10},{65430,16},{65431,16},{65432,16},{65433,16},{65434,16},{65435,16},{65436,16},{65437,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {122,7},{2039,11},{65438,16},{65439,16},{65440,16},{65441,16},{65442,16},{65443,16},{65444,16},{65445,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {123,7},{4086,12},{65446,16},{65447,16},{65448,16},{65449,16},{65450,16},{65451,16},{65452,16},{65453,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {250,8},{4087,12},{65454,16},{65455,16},{65456,16},{65457,16},{65458,16},{65459,16},{65460,16},{65461,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {504,9},{32704,15},{65462,16},{65463,16},{65464,16},{65465,16},{65466,16},{65467,16},{65468,16},{65469,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {505,9},{65470,16},{65471,16},{65472,16},{65473,16},{65474,16},{65475,16},{65476,16},{65477,16},{65478,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {506,9},{65479,16},{65480,16},{65481,16},{65482,16},{65483,16},{65484,16},{65485,16},{65486,16},{65487,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {1017,10},{65488,16},{65489,16},{65490,16},{65491,16},{65492,16},{65493,16},{65494,16},{65495,16},{65496,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {1018,10},{65497,16},{65498,16},{65499,16},{65500,16},{65501,16},{65502,16},{65503,16},{65504,16},{65505,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {2040,11},{65506,16},{65507,16},{65508,16},{65509,16},{65510,16},{65511,16},{65512,16},{65513,16},{65514,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {65515,16},{65516,16},{65517,16},{65518,16},{65519,16},{65520,16},{65521,16},{65522,16},{65523,16},{65524,16},{0,0},{0,0},{0,0},{0,0},{0,0},
  {2041,11},{65525,16},{65526,16},{65527,16},{65528,16},{65529,16},{65530,16},{65531,16},{65532,16},{65533,16},{65534,16},{0,0},{0,0},{0,0},{0,0},{0,0}
};

// Standard JPEG UV huffman tables for DC/AC
static const unsigned short UVDC_HT[256][2] = { {0,2},{1,2},{2,2},{6,3},{14,4},{30,5},{62,6},{126,7},{254,8},{510,9},{1022,10},{2046,11}};
static const unsigned short UVAC_HT[256][2] = { 
  {0,2},{1,2},{4,3},{10,4},{24,5},{25,5},{56,6},{120,7},{500,9},{1014,10},{4084,12},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {11,4},{57,6},{246,8},{501,9},{2038,11},{4085,12},{65416,16},{65417,16},{65418,16},{65419,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {26,5},{247,8},{1015,10},{4086,12},{32706,15},{65420,16},{65421,16},{65422,16},{65423,16},{65424,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {27,5},{248,8},{1016,10},{4087,12},{65425,16},{65426,16},{65427,16},{65428,16},{65429,16},{65430,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {58,6},{502,9},{65431,16},{65432,16},{65433,16},{65434,16},{65435,16},{65436,16},{65437,16},{65438,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {59,6},{1017,10},{65439,16},{65440,16},{65441,16},{65442,16},{65443,16},{65444,16},{65445,16},{65446,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {121,7},{2039,11},{65447,16},{65448,16},{65449,16},{65450,16},{65451,16},{65452,16},{65453,16},{65454,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {122,7},{2040,11},{65455,16},{65456,16},{65457,16},{65458,16},{65459,16},{65460,16},{65461,16},{65462,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {249,8},{65463,16},{65464,16},{65465,16},{65466,16},{65467,16},{65468,16},{65469,16},{65470,16},{65471,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {503,9},{65472,16},{65473,16},{65474,16},{65475,16},{65476,16},{65477,16},{65478,16},{65479,16},{65480,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {504,9},{65481,16},{65482,16},{65483,16},{65484,16},{65485,16},{65486,16},{65487,16},{65488,16},{65489,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {505,9},{65490,16},{65491,16},{65492,16},{65493,16},{65494,16},{65495,16},{65496,16},{65497,16},{65498,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {506,9},{65499,16},{65500,16},{65501,16},{65502,16},{65503,16},{65504,16},{65505,16},{65506,16},{65507,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {2041,11},{65508,16},{65509,16},{65510,16},{65511,16},{65512,16},{65513,16},{65514,16},{65515,16},{65516,16},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  {16352,14},{65517,16},{65518,16},{65519,16},{65520,16},{65521,16},{65522,16},{65523,16},{65524,16},{65525,16},{0,0},{0,0},{0,0},{0,0},{0,0},
  {1018,10},{32707,15},{65526,16},{65527,16},{65528,16},{65529,16},{65530,16},{65531,16},{65532,16},{65533,16},{65534,16},{0,0},{0,0},{0,0},{0,0},{0,0}
};

// Special codes for "end of macroblock" and "16 zeros"
const unsigned short EOB[2] = { HTAC[0x00][0], HTAC[0x00][1] };
const unsigned short ZERO16[2] = { HTAC[0xF0][0], HTAC[0xF0][1] };
const u32 TZERO16 = (ZERO16[0] << (32-ZERO16[1])) | ZERO16[1];
const u32 TEOB = (EOB[0] << (32-EOB[1])) | EOB[1];

// Since we only process one row at a time, this is the state we must keep row-to-row
static int m_lastDC, m_startDC;  // Previous and starting DC value
static u8* m_out;                // Pointer to the output byte buffer
static int m_bitBuf, m_bitCnt;   // Current (unflushed) bit buffer and count of bits

static float m_quantY[64], m_quantUV[64];  // Quantization tables, including AAN scalers
s16 CODERAM m_quantIY[64], m_quantIU[64];   // Integer versions

// Turn a coefficient into a bit count and bit value
// The encoding here is tricky - positive numbers have their MSB set, negative numbers don't
static inline void encodeCoeff(int val, unsigned short bits[2]) 
{
	int tmp1 = val < 0 ? -val : val;
	val = val < 0 ? val-1 : val;
	bits[1] = 1;
	while(tmp1 >>= 1)
		++bits[1];
	bits[0] = val & ((1<<bits[1])-1);
}

#define DCYTAB(x) m_dcytab[(x)+DC_ENTRIES/2]
#define ACYTAB(zeros,x) m_acytab[(x)+AC_ENTRIES/2][zeros]
#define SYMBOL(b) do { bitCnt += b[1]; bitBuf |= b[0] << (32-bitCnt); } while(0)

// Hardcoded tables for Q50
const int MAX_QUALITY=50;   // At quality 50, AC quantizer is /10, DC is /16
const int AC_ENTRIES=(2048/10), DC_ENTRIES=(4096/16), MAX_ZEROS=16;
// +3 to account for zero, round-up, and round-down
static const u32 m_dcytab[DC_ENTRIES+3] = { 
  0xaf9fc012,0xaf000010,0xaf010010,0xaf020010,0xaf030010,0xaf040010,0xaf050010,0xaf060010,0xaf070010,0xaf080010,0xaf090010,0xaf0a0010,0xaf0b0010,0xaf0c0010,0xaf0d0010,0xaf0e0010,0xaf0f0010,0xaf100010,0xaf110010,0xaf120010,0xaf130010,0xaf140010,0xaf150010,0xaf160010,0xaf170010,0xaf180010,0xaf190010,0xaf1a0010,0xaf1b0010,0xaf1c0010,0xaf1d0010,0xaf1e0010,0xaf1f0010,0xaf200010,0xaf210010,0xaf220010,0xaf230010,0xaf240010,0xaf250010,0xaf260010,0xaf270010,0xaf280010,0xaf290010,0xaf2a0010,0xaf2b0010,0xaf2c0010,0xaf2d0010,0xaf2e0010,0xaf2f0010,0xaf300010,0xaf310010,0xaf320010,0xaf330010,0xaf340010,0xaf350010,0xaf360010,0xaf370010,0xaf380010,0xaf390010,0xaf3a0010,0xaf3b0010,0xaf3c0010,0xaf3d0010,0xaf3e0010,0xaf3f0010,0xae00000e,0xae04000e,0xae08000e,0xae0c000e,0xae10000e,0xae14000e,0xae18000e,0xae1c000e,0xae20000e,0xae24000e,0xae28000e,0xae2c000e,0xae30000e,0xae34000e,0xae38000e,0xae3c000e,0xae40000e,0xae44000e,0xae48000e,0xae4c000e,0xae50000e,0xae54000e,0xae58000e,0xae5c000e,0xae60000e,0xae64000e,0xae68000e,0xae6c000e,0xae70000e,0xae74000e,0xae78000e,0xae7c000e,0xac00000c,0xac10000c,0xac20000c,0xac30000c,0xac40000c,0xac50000c,0xac60000c,0xac70000c,0xac80000c,0xac90000c,0xaca0000c,0xacb0000c,0xacc0000c,0xacd0000c,0xace0000c,0xacf0000c,0xaa00000b,0xaa20000b,0xaa40000b,0xaa60000b,0xaa80000b,0xaaa0000b,0xaac0000b,0xaae0000b,0xa800000a,0xa840000a,0xa880000a,0xa8c0000a,0xa6000009,0xa6800009,0xa4000008,0xa0000006,0xa5000008,0xa7000009,0xa7800009,0xa900000a,0xa940000a,0xa980000a,0xa9c0000a,0xab00000b,0xab20000b,0xab40000b,0xab60000b,0xab80000b,0xaba0000b,0xabc0000b,0xabe0000b,0xad00000c,0xad10000c,0xad20000c,0xad30000c,0xad40000c,0xad50000c,0xad60000c,0xad70000c,0xad80000c,0xad90000c,0xada0000c,0xadb0000c,0xadc0000c,0xadd0000c,0xade0000c,0xadf0000c,0xae80000e,0xae84000e,0xae88000e,0xae8c000e,0xae90000e,0xae94000e,0xae98000e,0xae9c000e,0xaea0000e,0xaea4000e,0xaea8000e,0xaeac000e,0xaeb0000e,0xaeb4000e,0xaeb8000e,0xaebc000e,0xaec0000e,0xaec4000e,0xaec8000e,0xaecc000e,0xaed0000e,0xaed4000e,0xaed8000e,0xaedc000e,0xaee0000e,0xaee4000e,0xaee8000e,0xaeec000e,0xaef0000e,0xaef4000e,0xaef8000e,0xaefc000e,0xaf400010,0xaf410010,0xaf420010,0xaf430010,0xaf440010,0xaf450010,0xaf460010,0xaf470010,0xaf480010,0xaf490010,0xaf4a0010,0xaf4b0010,0xaf4c0010,0xaf4d0010,0xaf4e0010,0xaf4f0010,0xaf500010,0xaf510010,0xaf520010,0xaf530010,0xaf540010,0xaf550010,0xaf560010,0xaf570010,0xaf580010,0xaf590010,0xaf5a0010,0xaf5b0010,0xaf5c0010,0xaf5d0010,0xaf5e0010,0xaf5f0010,0xaf600010,0xaf610010,0xaf620010,0xaf630010,0xaf640010,0xaf650010,0xaf660010,0xaf670010,0xaf680010,0xaf690010,0xaf6a0010,0xaf6b0010,0xaf6c0010,0xaf6d0010,0xaf6e0010,0xaf6f0010,0xaf700010,0xaf710010,0xaf720010,0xaf730010,0xaf740010,0xaf750010,0xaf760010,0xaf770010,0xaf780010,0xaf790010,0xaf7a0010,0xaf7b0010,0xaf7c0010,0xaf7d0010,0xaf7e0010,0xaf7f0010,0xf830000f,0xff853017,0xff8b3017,
};
static const u32 m_acytab[AC_ENTRIES+3][MAX_ZEROS] = {
  {0xf832000f,0xff853217,0xff8b3217,0xff923217,0xff9a3217,0xffa23217,0xffaa3217,0xffb23217,0xffba3217,0xffc33217,0xffcc3217,0xffd53217,0xffde3217,0xffe73217,0xfff13217,0xfffb3217,},
  {0xf834000f,0xff853417,0xff8b3417,0xff923417,0xff9a3417,0xffa23417,0xffaa3417,0xffb23417,0xffba3417,0xffc33417,0xffcc3417,0xffd53417,0xffde3417,0xffe73417,0xfff13417,0xfffb3417,},
  {0xf836000f,0xff853617,0xff8b3617,0xff923617,0xff9a3617,0xffa23617,0xffaa3617,0xffb23617,0xffba3617,0xffc33617,0xffcc3617,0xffd53617,0xffde3617,0xffe73617,0xfff13617,0xfffb3617,},
  {0xf838000f,0xff853817,0xff8b3817,0xff923817,0xff9a3817,0xffa23817,0xffaa3817,0xffb23817,0xffba3817,0xffc33817,0xffcc3817,0xffd53817,0xffde3817,0xffe73817,0xfff13817,0xfffb3817,},
  {0xf83a000f,0xff853a17,0xff8b3a17,0xff923a17,0xff9a3a17,0xffa23a17,0xffaa3a17,0xffb23a17,0xffba3a17,0xffc33a17,0xffcc3a17,0xffd53a17,0xffde3a17,0xffe73a17,0xfff13a17,0xfffb3a17,},
  {0xf83c000f,0xff853c17,0xff8b3c17,0xff923c17,0xff9a3c17,0xffa23c17,0xffaa3c17,0xffb23c17,0xffba3c17,0xffc33c17,0xffcc3c17,0xffd53c17,0xffde3c17,0xffe73c17,0xfff13c17,0xfffb3c17,},
  {0xf83e000f,0xff853e17,0xff8b3e17,0xff923e17,0xff9a3e17,0xffa23e17,0xffaa3e17,0xffb23e17,0xffba3e17,0xffc33e17,0xffcc3e17,0xffd53e17,0xffde3e17,0xffe73e17,0xfff13e17,0xfffb3e17,},
  {0xf840000f,0xff854017,0xff8b4017,0xff924017,0xff9a4017,0xffa24017,0xffaa4017,0xffb24017,0xffba4017,0xffc34017,0xffcc4017,0xffd54017,0xffde4017,0xffe74017,0xfff14017,0xfffb4017,},
  {0xf842000f,0xff854217,0xff8b4217,0xff924217,0xff9a4217,0xffa24217,0xffaa4217,0xffb24217,0xffba4217,0xffc34217,0xffcc4217,0xffd54217,0xffde4217,0xffe74217,0xfff14217,0xfffb4217,},
  {0xf844000f,0xff854417,0xff8b4417,0xff924417,0xff9a4417,0xffa24417,0xffaa4417,0xffb24417,0xffba4417,0xffc34417,0xffcc4417,0xffd54417,0xffde4417,0xffe74417,0xfff14417,0xfffb4417,},
  {0xf846000f,0xff854617,0xff8b4617,0xff924617,0xff9a4617,0xffa24617,0xffaa4617,0xffb24617,0xffba4617,0xffc34617,0xffcc4617,0xffd54617,0xffde4617,0xffe74617,0xfff14617,0xfffb4617,},
  {0xf848000f,0xff854817,0xff8b4817,0xff924817,0xff9a4817,0xffa24817,0xffaa4817,0xffb24817,0xffba4817,0xffc34817,0xffcc4817,0xffd54817,0xffde4817,0xffe74817,0xfff14817,0xfffb4817,},
  {0xf84a000f,0xff854a17,0xff8b4a17,0xff924a17,0xff9a4a17,0xffa24a17,0xffaa4a17,0xffb24a17,0xffba4a17,0xffc34a17,0xffcc4a17,0xffd54a17,0xffde4a17,0xffe74a17,0xfff14a17,0xfffb4a17,},
  {0xf84c000f,0xff854c17,0xff8b4c17,0xff924c17,0xff9a4c17,0xffa24c17,0xffaa4c17,0xffb24c17,0xffba4c17,0xffc34c17,0xffcc4c17,0xffd54c17,0xffde4c17,0xffe74c17,0xfff14c17,0xfffb4c17,},
  {0xf84e000f,0xff854e17,0xff8b4e17,0xff924e17,0xff9a4e17,0xffa24e17,0xffaa4e17,0xffb24e17,0xffba4e17,0xffc34e17,0xffcc4e17,0xffd54e17,0xffde4e17,0xffe74e17,0xfff14e17,0xfffb4e17,},
  {0xf850000f,0xff855017,0xff8b5017,0xff925017,0xff9a5017,0xffa25017,0xffaa5017,0xffb25017,0xffba5017,0xffc35017,0xffcc5017,0xffd55017,0xffde5017,0xffe75017,0xfff15017,0xfffb5017,},
  {0xf852000f,0xff855217,0xff8b5217,0xff925217,0xff9a5217,0xffa25217,0xffaa5217,0xffb25217,0xffba5217,0xffc35217,0xffcc5217,0xffd55217,0xffde5217,0xffe75217,0xfff15217,0xfffb5217,},
  {0xf854000f,0xff855417,0xff8b5417,0xff925417,0xff9a5417,0xffa25417,0xffaa5417,0xffb25417,0xffba5417,0xffc35417,0xffcc5417,0xffd55417,0xffde5417,0xffe75417,0xfff15417,0xfffb5417,},
  {0xf856000f,0xff855617,0xff8b5617,0xff925617,0xff9a5617,0xffa25617,0xffaa5617,0xffb25617,0xffba5617,0xffc35617,0xffcc5617,0xffd55617,0xffde5617,0xffe75617,0xfff15617,0xfffb5617,},
  {0xf858000f,0xff855817,0xff8b5817,0xff925817,0xff9a5817,0xffa25817,0xffaa5817,0xffb25817,0xffba5817,0xffc35817,0xffcc5817,0xffd55817,0xffde5817,0xffe75817,0xfff15817,0xfffb5817,},
  {0xf85a000f,0xff855a17,0xff8b5a17,0xff925a17,0xff9a5a17,0xffa25a17,0xffaa5a17,0xffb25a17,0xffba5a17,0xffc35a17,0xffcc5a17,0xffd55a17,0xffde5a17,0xffe75a17,0xfff15a17,0xfffb5a17,},
  {0xf85c000f,0xff855c17,0xff8b5c17,0xff925c17,0xff9a5c17,0xffa25c17,0xffaa5c17,0xffb25c17,0xffba5c17,0xffc35c17,0xffcc5c17,0xffd55c17,0xffde5c17,0xffe75c17,0xfff15c17,0xfffb5c17,},
  {0xf85e000f,0xff855e17,0xff8b5e17,0xff925e17,0xff9a5e17,0xffa25e17,0xffaa5e17,0xffb25e17,0xffba5e17,0xffc35e17,0xffcc5e17,0xffd55e17,0xffde5e17,0xffe75e17,0xfff15e17,0xfffb5e17,},
  {0xf860000f,0xff856017,0xff8b6017,0xff926017,0xff9a6017,0xffa26017,0xffaa6017,0xffb26017,0xffba6017,0xffc36017,0xffcc6017,0xffd56017,0xffde6017,0xffe76017,0xfff16017,0xfffb6017,},
  {0xf862000f,0xff856217,0xff8b6217,0xff926217,0xff9a6217,0xffa26217,0xffaa6217,0xffb26217,0xffba6217,0xffc36217,0xffcc6217,0xffd56217,0xffde6217,0xffe76217,0xfff16217,0xfffb6217,},
  {0xf864000f,0xff856417,0xff8b6417,0xff926417,0xff9a6417,0xffa26417,0xffaa6417,0xffb26417,0xffba6417,0xffc36417,0xffcc6417,0xffd56417,0xffde6417,0xffe76417,0xfff16417,0xfffb6417,},
  {0xf866000f,0xff856617,0xff8b6617,0xff926617,0xff9a6617,0xffa26617,0xffaa6617,0xffb26617,0xffba6617,0xffc36617,0xffcc6617,0xffd56617,0xffde6617,0xffe76617,0xfff16617,0xfffb6617,},
  {0xf868000f,0xff856817,0xff8b6817,0xff926817,0xff9a6817,0xffa26817,0xffaa6817,0xffb26817,0xffba6817,0xffc36817,0xffcc6817,0xffd56817,0xffde6817,0xffe76817,0xfff16817,0xfffb6817,},
  {0xf86a000f,0xff856a17,0xff8b6a17,0xff926a17,0xff9a6a17,0xffa26a17,0xffaa6a17,0xffb26a17,0xffba6a17,0xffc36a17,0xffcc6a17,0xffd56a17,0xffde6a17,0xffe76a17,0xfff16a17,0xfffb6a17,},
  {0xf86c000f,0xff856c17,0xff8b6c17,0xff926c17,0xff9a6c17,0xffa26c17,0xffaa6c17,0xffb26c17,0xffba6c17,0xffc36c17,0xffcc6c17,0xffd56c17,0xffde6c17,0xffe76c17,0xfff16c17,0xfffb6c17,},
  {0xf86e000f,0xff856e17,0xff8b6e17,0xff926e17,0xff9a6e17,0xffa26e17,0xffaa6e17,0xffb26e17,0xffba6e17,0xffc36e17,0xffcc6e17,0xffd56e17,0xffde6e17,0xffe76e17,0xfff16e17,0xfffb6e17,},
  {0xf870000f,0xff857017,0xff8b7017,0xff927017,0xff9a7017,0xffa27017,0xffaa7017,0xffb27017,0xffba7017,0xffc37017,0xffcc7017,0xffd57017,0xffde7017,0xffe77017,0xfff17017,0xfffb7017,},
  {0xf872000f,0xff857217,0xff8b7217,0xff927217,0xff9a7217,0xffa27217,0xffaa7217,0xffb27217,0xffba7217,0xffc37217,0xffcc7217,0xffd57217,0xffde7217,0xffe77217,0xfff17217,0xfffb7217,},
  {0xf874000f,0xff857417,0xff8b7417,0xff927417,0xff9a7417,0xffa27417,0xffaa7417,0xffb27417,0xffba7417,0xffc37417,0xffcc7417,0xffd57417,0xffde7417,0xffe77417,0xfff17417,0xfffb7417,},
  {0xf876000f,0xff857617,0xff8b7617,0xff927617,0xff9a7617,0xffa27617,0xffaa7617,0xffb27617,0xffba7617,0xffc37617,0xffcc7617,0xffd57617,0xffde7617,0xffe77617,0xfff17617,0xfffb7617,},
  {0xf878000f,0xff857817,0xff8b7817,0xff927817,0xff9a7817,0xffa27817,0xffaa7817,0xffb27817,0xffba7817,0xffc37817,0xffcc7817,0xffd57817,0xffde7817,0xffe77817,0xfff17817,0xfffb7817,},
  {0xf87a000f,0xff857a17,0xff8b7a17,0xff927a17,0xff9a7a17,0xffa27a17,0xffaa7a17,0xffb27a17,0xffba7a17,0xffc37a17,0xffcc7a17,0xffd57a17,0xffde7a17,0xffe77a17,0xfff17a17,0xfffb7a17,},
  {0xf87c000f,0xff857c17,0xff8b7c17,0xff927c17,0xff9a7c17,0xffa27c17,0xffaa7c17,0xffb27c17,0xffba7c17,0xffc37c17,0xffcc7c17,0xffd57c17,0xffde7c17,0xffe77c17,0xfff17c17,0xfffb7c17,},
  {0xf87e000f,0xff857e17,0xff8b7e17,0xff927e17,0xff9a7e17,0xffa27e17,0xffaa7e17,0xffb27e17,0xffba7e17,0xffc37e17,0xffcc7e17,0xffd57e17,0xffde7e17,0xffe77e17,0xfff17e17,0xfffb7e17,},
  {0xf000000d,0xff840016,0xff8a0016,0xff910016,0xff990016,0xffa10016,0xffa90016,0xffb10016,0xffb90016,0xffc20016,0xffcb0016,0xffd40016,0xffdd0016,0xffe60016,0xfff00016,0xfffa0016,},
  {0xf008000d,0xff840416,0xff8a0416,0xff910416,0xff990416,0xffa10416,0xffa90416,0xffb10416,0xffb90416,0xffc20416,0xffcb0416,0xffd40416,0xffdd0416,0xffe60416,0xfff00416,0xfffa0416,},
  {0xf010000d,0xff840816,0xff8a0816,0xff910816,0xff990816,0xffa10816,0xffa90816,0xffb10816,0xffb90816,0xffc20816,0xffcb0816,0xffd40816,0xffdd0816,0xffe60816,0xfff00816,0xfffa0816,},
  {0xf018000d,0xff840c16,0xff8a0c16,0xff910c16,0xff990c16,0xffa10c16,0xffa90c16,0xffb10c16,0xffb90c16,0xffc20c16,0xffcb0c16,0xffd40c16,0xffdd0c16,0xffe60c16,0xfff00c16,0xfffa0c16,},
  {0xf020000d,0xff841016,0xff8a1016,0xff911016,0xff991016,0xffa11016,0xffa91016,0xffb11016,0xffb91016,0xffc21016,0xffcb1016,0xffd41016,0xffdd1016,0xffe61016,0xfff01016,0xfffa1016,},
  {0xf028000d,0xff841416,0xff8a1416,0xff911416,0xff991416,0xffa11416,0xffa91416,0xffb11416,0xffb91416,0xffc21416,0xffcb1416,0xffd41416,0xffdd1416,0xffe61416,0xfff01416,0xfffa1416,},
  {0xf030000d,0xff841816,0xff8a1816,0xff911816,0xff991816,0xffa11816,0xffa91816,0xffb11816,0xffb91816,0xffc21816,0xffcb1816,0xffd41816,0xffdd1816,0xffe61816,0xfff01816,0xfffa1816,},
  {0xf038000d,0xff841c16,0xff8a1c16,0xff911c16,0xff991c16,0xffa11c16,0xffa91c16,0xffb11c16,0xffb91c16,0xffc21c16,0xffcb1c16,0xffd41c16,0xffdd1c16,0xffe61c16,0xfff01c16,0xfffa1c16,},
  {0xf040000d,0xff842016,0xff8a2016,0xff912016,0xff992016,0xffa12016,0xffa92016,0xffb12016,0xffb92016,0xffc22016,0xffcb2016,0xffd42016,0xffdd2016,0xffe62016,0xfff02016,0xfffa2016,},
  {0xf048000d,0xff842416,0xff8a2416,0xff912416,0xff992416,0xffa12416,0xffa92416,0xffb12416,0xffb92416,0xffc22416,0xffcb2416,0xffd42416,0xffdd2416,0xffe62416,0xfff02416,0xfffa2416,},
  {0xf050000d,0xff842816,0xff8a2816,0xff912816,0xff992816,0xffa12816,0xffa92816,0xffb12816,0xffb92816,0xffc22816,0xffcb2816,0xffd42816,0xffdd2816,0xffe62816,0xfff02816,0xfffa2816,},
  {0xf058000d,0xff842c16,0xff8a2c16,0xff912c16,0xff992c16,0xffa12c16,0xffa92c16,0xffb12c16,0xffb92c16,0xffc22c16,0xffcb2c16,0xffd42c16,0xffdd2c16,0xffe62c16,0xfff02c16,0xfffa2c16,},
  {0xf060000d,0xff843016,0xff8a3016,0xff913016,0xff993016,0xffa13016,0xffa93016,0xffb13016,0xffb93016,0xffc23016,0xffcb3016,0xffd43016,0xffdd3016,0xffe63016,0xfff03016,0xfffa3016,},
  {0xf068000d,0xff843416,0xff8a3416,0xff913416,0xff993416,0xffa13416,0xffa93416,0xffb13416,0xffb93416,0xffc23416,0xffcb3416,0xffd43416,0xffdd3416,0xffe63416,0xfff03416,0xfffa3416,},
  {0xf070000d,0xff843816,0xff8a3816,0xff913816,0xff993816,0xffa13816,0xffa93816,0xffb13816,0xffb93816,0xffc23816,0xffcb3816,0xffd43816,0xffdd3816,0xffe63816,0xfff03816,0xfffa3816,},
  {0xf078000d,0xff843c16,0xff8a3c16,0xff913c16,0xff993c16,0xffa13c16,0xffa93c16,0xffb13c16,0xffb93c16,0xffc23c16,0xffcb3c16,0xffd43c16,0xffdd3c16,0xffe63c16,0xfff03c16,0xfffa3c16,},
  {0xf080000d,0xff844016,0xff8a4016,0xff914016,0xff994016,0xffa14016,0xffa94016,0xffb14016,0xffb94016,0xffc24016,0xffcb4016,0xffd44016,0xffdd4016,0xffe64016,0xfff04016,0xfffa4016,},
  {0xf088000d,0xff844416,0xff8a4416,0xff914416,0xff994416,0xffa14416,0xffa94416,0xffb14416,0xffb94416,0xffc24416,0xffcb4416,0xffd44416,0xffdd4416,0xffe64416,0xfff04416,0xfffa4416,},
  {0xf090000d,0xff844816,0xff8a4816,0xff914816,0xff994816,0xffa14816,0xffa94816,0xffb14816,0xffb94816,0xffc24816,0xffcb4816,0xffd44816,0xffdd4816,0xffe64816,0xfff04816,0xfffa4816,},
  {0xf098000d,0xff844c16,0xff8a4c16,0xff914c16,0xff994c16,0xffa14c16,0xffa94c16,0xffb14c16,0xffb94c16,0xffc24c16,0xffcb4c16,0xffd44c16,0xffdd4c16,0xffe64c16,0xfff04c16,0xfffa4c16,},
  {0xf0a0000d,0xff845016,0xff8a5016,0xff915016,0xff995016,0xffa15016,0xffa95016,0xffb15016,0xffb95016,0xffc25016,0xffcb5016,0xffd45016,0xffdd5016,0xffe65016,0xfff05016,0xfffa5016,},
  {0xf0a8000d,0xff845416,0xff8a5416,0xff915416,0xff995416,0xffa15416,0xffa95416,0xffb15416,0xffb95416,0xffc25416,0xffcb5416,0xffd45416,0xffdd5416,0xffe65416,0xfff05416,0xfffa5416,},
  {0xf0b0000d,0xff845816,0xff8a5816,0xff915816,0xff995816,0xffa15816,0xffa95816,0xffb15816,0xffb95816,0xffc25816,0xffcb5816,0xffd45816,0xffdd5816,0xffe65816,0xfff05816,0xfffa5816,},
  {0xf0b8000d,0xff845c16,0xff8a5c16,0xff915c16,0xff995c16,0xffa15c16,0xffa95c16,0xffb15c16,0xffb95c16,0xffc25c16,0xffcb5c16,0xffd45c16,0xffdd5c16,0xffe65c16,0xfff05c16,0xfffa5c16,},
  {0xf0c0000d,0xff846016,0xff8a6016,0xff916016,0xff996016,0xffa16016,0xffa96016,0xffb16016,0xffb96016,0xffc26016,0xffcb6016,0xffd46016,0xffdd6016,0xffe66016,0xfff06016,0xfffa6016,},
  {0xf0c8000d,0xff846416,0xff8a6416,0xff916416,0xff996416,0xffa16416,0xffa96416,0xffb16416,0xffb96416,0xffc26416,0xffcb6416,0xffd46416,0xffdd6416,0xffe66416,0xfff06416,0xfffa6416,},
  {0xf0d0000d,0xff846816,0xff8a6816,0xff916816,0xff996816,0xffa16816,0xffa96816,0xffb16816,0xffb96816,0xffc26816,0xffcb6816,0xffd46816,0xffdd6816,0xffe66816,0xfff06816,0xfffa6816,},
  {0xf0d8000d,0xff846c16,0xff8a6c16,0xff916c16,0xff996c16,0xffa16c16,0xffa96c16,0xffb16c16,0xffb96c16,0xffc26c16,0xffcb6c16,0xffd46c16,0xffdd6c16,0xffe66c16,0xfff06c16,0xfffa6c16,},
  {0xf0e0000d,0xff847016,0xff8a7016,0xff917016,0xff997016,0xffa17016,0xffa97016,0xffb17016,0xffb97016,0xffc27016,0xffcb7016,0xffd47016,0xffdd7016,0xffe67016,0xfff07016,0xfffa7016,},
  {0xf0e8000d,0xff847416,0xff8a7416,0xff917416,0xff997416,0xffa17416,0xffa97416,0xffb17416,0xffb97416,0xffc27416,0xffcb7416,0xffd47416,0xffdd7416,0xffe67416,0xfff07416,0xfffa7416,},
  {0xf0f0000d,0xff847816,0xff8a7816,0xff917816,0xff997816,0xffa17816,0xffa97816,0xffb17816,0xffb97816,0xffc27816,0xffcb7816,0xffd47816,0xffdd7816,0xffe67816,0xfff07816,0xfffa7816,},
  {0xf0f8000d,0xff847c16,0xff8a7c16,0xff917c16,0xff997c16,0xffa17c16,0xffa97c16,0xffb17c16,0xffb97c16,0xffc27c16,0xffcb7c16,0xffd47c16,0xffdd7c16,0xffe67c16,0xfff07c16,0xfffa7c16,},
  {0xd000000a,0xfec00010,0xff890015,0xff900015,0xff980015,0xffa00015,0xffa80015,0xffb00015,0xffb80015,0xffc10015,0xffca0015,0xffd30015,0xffdc0015,0xffe50015,0xffef0015,0xfff90015,},
  {0xd040000a,0xfec10010,0xff890815,0xff900815,0xff980815,0xffa00815,0xffa80815,0xffb00815,0xffb80815,0xffc10815,0xffca0815,0xffd30815,0xffdc0815,0xffe50815,0xffef0815,0xfff90815,},
  {0xd080000a,0xfec20010,0xff891015,0xff901015,0xff981015,0xffa01015,0xffa81015,0xffb01015,0xffb81015,0xffc11015,0xffca1015,0xffd31015,0xffdc1015,0xffe51015,0xffef1015,0xfff91015,},
  {0xd0c0000a,0xfec30010,0xff891815,0xff901815,0xff981815,0xffa01815,0xffa81815,0xffb01815,0xffb81815,0xffc11815,0xffca1815,0xffd31815,0xffdc1815,0xffe51815,0xffef1815,0xfff91815,},
  {0xd100000a,0xfec40010,0xff892015,0xff902015,0xff982015,0xffa02015,0xffa82015,0xffb02015,0xffb82015,0xffc12015,0xffca2015,0xffd32015,0xffdc2015,0xffe52015,0xffef2015,0xfff92015,},
  {0xd140000a,0xfec50010,0xff892815,0xff902815,0xff982815,0xffa02815,0xffa82815,0xffb02815,0xffb82815,0xffc12815,0xffca2815,0xffd32815,0xffdc2815,0xffe52815,0xffef2815,0xfff92815,},
  {0xd180000a,0xfec60010,0xff893015,0xff903015,0xff983015,0xffa03015,0xffa83015,0xffb03015,0xffb83015,0xffc13015,0xffca3015,0xffd33015,0xffdc3015,0xffe53015,0xffef3015,0xfff93015,},
  {0xd1c0000a,0xfec70010,0xff893815,0xff903815,0xff983815,0xffa03815,0xffa83815,0xffb03815,0xffb83815,0xffc13815,0xffca3815,0xffd33815,0xffdc3815,0xffe53815,0xffef3815,0xfff93815,},
  {0xd200000a,0xfec80010,0xff894015,0xff904015,0xff984015,0xffa04015,0xffa84015,0xffb04015,0xffb84015,0xffc14015,0xffca4015,0xffd34015,0xffdc4015,0xffe54015,0xffef4015,0xfff94015,},
  {0xd240000a,0xfec90010,0xff894815,0xff904815,0xff984815,0xffa04815,0xffa84815,0xffb04815,0xffb84815,0xffc14815,0xffca4815,0xffd34815,0xffdc4815,0xffe54815,0xffef4815,0xfff94815,},
  {0xd280000a,0xfeca0010,0xff895015,0xff905015,0xff985015,0xffa05015,0xffa85015,0xffb05015,0xffb85015,0xffc15015,0xffca5015,0xffd35015,0xffdc5015,0xffe55015,0xffef5015,0xfff95015,},
  {0xd2c0000a,0xfecb0010,0xff895815,0xff905815,0xff985815,0xffa05815,0xffa85815,0xffb05815,0xffb85815,0xffc15815,0xffca5815,0xffd35815,0xffdc5815,0xffe55815,0xffef5815,0xfff95815,},
  {0xd300000a,0xfecc0010,0xff896015,0xff906015,0xff986015,0xffa06015,0xffa86015,0xffb06015,0xffb86015,0xffc16015,0xffca6015,0xffd36015,0xffdc6015,0xffe56015,0xffef6015,0xfff96015,},
  {0xd340000a,0xfecd0010,0xff896815,0xff906815,0xff986815,0xffa06815,0xffa86815,0xffb06815,0xffb86815,0xffc16815,0xffca6815,0xffd36815,0xffdc6815,0xffe56815,0xffef6815,0xfff96815,},
  {0xd380000a,0xfece0010,0xff897015,0xff907015,0xff987015,0xffa07015,0xffa87015,0xffb07015,0xffb87015,0xffc17015,0xffca7015,0xffd37015,0xffdc7015,0xffe57015,0xffef7015,0xfff97015,},
  {0xd3c0000a,0xfecf0010,0xff897815,0xff907815,0xff987815,0xffa07815,0xffa87815,0xffb07815,0xffb87815,0xffc17815,0xffca7815,0xffd37815,0xffdc7815,0xffe57815,0xffef7815,0xfff97815,},
  {0xb0000008,0xfb00000d,0xff400010,0xff8f0014,0xff970014,0xff9f0014,0xffa70014,0xffaf0014,0xffb70014,0xffc00014,0xffc90014,0xffd20014,0xffdb0014,0xffe40014,0xffee0014,0xfff80014,},
  {0xb1000008,0xfb08000d,0xff410010,0xff8f1014,0xff971014,0xff9f1014,0xffa71014,0xffaf1014,0xffb71014,0xffc01014,0xffc91014,0xffd21014,0xffdb1014,0xffe41014,0xffee1014,0xfff81014,},
  {0xb2000008,0xfb10000d,0xff420010,0xff8f2014,0xff972014,0xff9f2014,0xffa72014,0xffaf2014,0xffb72014,0xffc02014,0xffc92014,0xffd22014,0xffdb2014,0xffe42014,0xffee2014,0xfff82014,},
  {0xb3000008,0xfb18000d,0xff430010,0xff8f3014,0xff973014,0xff9f3014,0xffa73014,0xffaf3014,0xffb73014,0xffc03014,0xffc93014,0xffd23014,0xffdb3014,0xffe43014,0xffee3014,0xfff83014,},
  {0xb4000008,0xfb20000d,0xff440010,0xff8f4014,0xff974014,0xff9f4014,0xffa74014,0xffaf4014,0xffb74014,0xffc04014,0xffc94014,0xffd24014,0xffdb4014,0xffe44014,0xffee4014,0xfff84014,},
  {0xb5000008,0xfb28000d,0xff450010,0xff8f5014,0xff975014,0xff9f5014,0xffa75014,0xffaf5014,0xffb75014,0xffc05014,0xffc95014,0xffd25014,0xffdb5014,0xffe45014,0xffee5014,0xfff85014,},
  {0xb6000008,0xfb30000d,0xff460010,0xff8f6014,0xff976014,0xff9f6014,0xffa76014,0xffaf6014,0xffb76014,0xffc06014,0xffc96014,0xffd26014,0xffdb6014,0xffe46014,0xffee6014,0xfff86014,},
  {0xb7000008,0xfb38000d,0xff470010,0xff8f7014,0xff977014,0xff9f7014,0xffa77014,0xffaf7014,0xffb77014,0xffc07014,0xffc97014,0xffd27014,0xffdb7014,0xffe47014,0xffee7014,0xfff87014,},
  {0x80000006,0xf200000a,0xfdc0000d,0xff50000f,0xff960013,0xff9e0013,0xffa60013,0xffae0013,0xffb60013,0xffbf0013,0xffc80013,0xffd10013,0xffda0013,0xffe30013,0xffed0013,0xfff70013,},
  {0x84000006,0xf240000a,0xfdc8000d,0xff52000f,0xff962013,0xff9e2013,0xffa62013,0xffae2013,0xffb62013,0xffbf2013,0xffc82013,0xffd12013,0xffda2013,0xffe32013,0xffed2013,0xfff72013,},
  {0x88000006,0xf280000a,0xfdd0000d,0xff54000f,0xff964013,0xff9e4013,0xffa64013,0xffae4013,0xffb64013,0xffbf4013,0xffc84013,0xffd14013,0xffda4013,0xffe34013,0xffed4013,0xfff74013,},
  {0x8c000006,0xf2c0000a,0xfdd8000d,0xff56000f,0xff966013,0xff9e6013,0xffa66013,0xffae6013,0xffb66013,0xffbf6013,0xffc86013,0xffd16013,0xffda6013,0xffe36013,0xffed6013,0xfff76013,},
  {0x40000004,0xd8000007,0xf900000a,0xfb80000b,0xfe00000c,0xfee0000d,0xff60000e,0xff70000e,0xff800011,0xffbe0012,0xffc70012,0xffd00012,0xffd90012,0xffe20012,0xffec0012,0xfff60012,},
  {0x50000004,0xda000007,0xf940000a,0xfba0000b,0xfe10000c,0xfee8000d,0xff64000e,0xff74000e,0xff808011,0xffbe4012,0xffc74012,0xffd04012,0xffd94012,0xffe24012,0xffec4012,0xfff64012,},
  {0x00000003,0xc0000005,0xe0000006,0xe8000007,0xec000007,0xf4000008,0xf6000008,0xfa000009,0xfc00000a,0xfc80000a,0xfd00000a,0xfe40000b,0xfe80000b,0xff00000c,0xffeb0011,0xfff50011,},
  {0x00000003,0xc0000005,0xe0000006,0xe8000007,0xec000007,0xf4000008,0xf6000008,0xfa000009,0xfc00000a,0xfc80000a,0xfd00000a,0xfe40000b,0xfe80000b,0xff00000c,0xffeb0011,0xfff50011,},
  {0x20000003,0xc8000005,0xe4000006,0xea000007,0xee000007,0xf5000008,0xf7000008,0xfa800009,0xfc40000a,0xfcc0000a,0xfd40000a,0xfe60000b,0xfea0000b,0xff10000c,0xffeb8011,0xfff58011,},
  {0x60000004,0xdc000007,0xf980000a,0xfbc0000b,0xfe20000c,0xfef0000d,0xff68000e,0xff78000e,0xff810011,0xffbe8012,0xffc78012,0xffd08012,0xffd98012,0xffe28012,0xffec8012,0xfff68012,},
  {0x70000004,0xde000007,0xf9c0000a,0xfbe0000b,0xfe30000c,0xfef8000d,0xff6c000e,0xff7c000e,0xff818011,0xffbec012,0xffc7c012,0xffd0c012,0xffd9c012,0xffe2c012,0xffecc012,0xfff6c012,},
  {0x90000006,0xf300000a,0xfde0000d,0xff58000f,0xff968013,0xff9e8013,0xffa68013,0xffae8013,0xffb68013,0xffbf8013,0xffc88013,0xffd18013,0xffda8013,0xffe38013,0xffed8013,0xfff78013,},
  {0x94000006,0xf340000a,0xfde8000d,0xff5a000f,0xff96a013,0xff9ea013,0xffa6a013,0xffaea013,0xffb6a013,0xffbfa013,0xffc8a013,0xffd1a013,0xffdaa013,0xffe3a013,0xffeda013,0xfff7a013,},
  {0x98000006,0xf380000a,0xfdf0000d,0xff5c000f,0xff96c013,0xff9ec013,0xffa6c013,0xffaec013,0xffb6c013,0xffbfc013,0xffc8c013,0xffd1c013,0xffdac013,0xffe3c013,0xffedc013,0xfff7c013,},
  {0x9c000006,0xf3c0000a,0xfdf8000d,0xff5e000f,0xff96e013,0xff9ee013,0xffa6e013,0xffaee013,0xffb6e013,0xffbfe013,0xffc8e013,0xffd1e013,0xffdae013,0xffe3e013,0xffede013,0xfff7e013,},
  {0xb8000008,0xfb40000d,0xff480010,0xff8f8014,0xff978014,0xff9f8014,0xffa78014,0xffaf8014,0xffb78014,0xffc08014,0xffc98014,0xffd28014,0xffdb8014,0xffe48014,0xffee8014,0xfff88014,},
  {0xb9000008,0xfb48000d,0xff490010,0xff8f9014,0xff979014,0xff9f9014,0xffa79014,0xffaf9014,0xffb79014,0xffc09014,0xffc99014,0xffd29014,0xffdb9014,0xffe49014,0xffee9014,0xfff89014,},
  {0xba000008,0xfb50000d,0xff4a0010,0xff8fa014,0xff97a014,0xff9fa014,0xffa7a014,0xffafa014,0xffb7a014,0xffc0a014,0xffc9a014,0xffd2a014,0xffdba014,0xffe4a014,0xffeea014,0xfff8a014,},
  {0xbb000008,0xfb58000d,0xff4b0010,0xff8fb014,0xff97b014,0xff9fb014,0xffa7b014,0xffafb014,0xffb7b014,0xffc0b014,0xffc9b014,0xffd2b014,0xffdbb014,0xffe4b014,0xffeeb014,0xfff8b014,},
  {0xbc000008,0xfb60000d,0xff4c0010,0xff8fc014,0xff97c014,0xff9fc014,0xffa7c014,0xffafc014,0xffb7c014,0xffc0c014,0xffc9c014,0xffd2c014,0xffdbc014,0xffe4c014,0xffeec014,0xfff8c014,},
  {0xbd000008,0xfb68000d,0xff4d0010,0xff8fd014,0xff97d014,0xff9fd014,0xffa7d014,0xffafd014,0xffb7d014,0xffc0d014,0xffc9d014,0xffd2d014,0xffdbd014,0xffe4d014,0xffeed014,0xfff8d014,},
  {0xbe000008,0xfb70000d,0xff4e0010,0xff8fe014,0xff97e014,0xff9fe014,0xffa7e014,0xffafe014,0xffb7e014,0xffc0e014,0xffc9e014,0xffd2e014,0xffdbe014,0xffe4e014,0xffeee014,0xfff8e014,},
  {0xbf000008,0xfb78000d,0xff4f0010,0xff8ff014,0xff97f014,0xff9ff014,0xffa7f014,0xffaff014,0xffb7f014,0xffc0f014,0xffc9f014,0xffd2f014,0xffdbf014,0xffe4f014,0xffeef014,0xfff8f014,},
  {0xd400000a,0xfed00010,0xff898015,0xff908015,0xff988015,0xffa08015,0xffa88015,0xffb08015,0xffb88015,0xffc18015,0xffca8015,0xffd38015,0xffdc8015,0xffe58015,0xffef8015,0xfff98015,},
  {0xd440000a,0xfed10010,0xff898815,0xff908815,0xff988815,0xffa08815,0xffa88815,0xffb08815,0xffb88815,0xffc18815,0xffca8815,0xffd38815,0xffdc8815,0xffe58815,0xffef8815,0xfff98815,},
  {0xd480000a,0xfed20010,0xff899015,0xff909015,0xff989015,0xffa09015,0xffa89015,0xffb09015,0xffb89015,0xffc19015,0xffca9015,0xffd39015,0xffdc9015,0xffe59015,0xffef9015,0xfff99015,},
  {0xd4c0000a,0xfed30010,0xff899815,0xff909815,0xff989815,0xffa09815,0xffa89815,0xffb09815,0xffb89815,0xffc19815,0xffca9815,0xffd39815,0xffdc9815,0xffe59815,0xffef9815,0xfff99815,},
  {0xd500000a,0xfed40010,0xff89a015,0xff90a015,0xff98a015,0xffa0a015,0xffa8a015,0xffb0a015,0xffb8a015,0xffc1a015,0xffcaa015,0xffd3a015,0xffdca015,0xffe5a015,0xffefa015,0xfff9a015,},
  {0xd540000a,0xfed50010,0xff89a815,0xff90a815,0xff98a815,0xffa0a815,0xffa8a815,0xffb0a815,0xffb8a815,0xffc1a815,0xffcaa815,0xffd3a815,0xffdca815,0xffe5a815,0xffefa815,0xfff9a815,},
  {0xd580000a,0xfed60010,0xff89b015,0xff90b015,0xff98b015,0xffa0b015,0xffa8b015,0xffb0b015,0xffb8b015,0xffc1b015,0xffcab015,0xffd3b015,0xffdcb015,0xffe5b015,0xffefb015,0xfff9b015,},
  {0xd5c0000a,0xfed70010,0xff89b815,0xff90b815,0xff98b815,0xffa0b815,0xffa8b815,0xffb0b815,0xffb8b815,0xffc1b815,0xffcab815,0xffd3b815,0xffdcb815,0xffe5b815,0xffefb815,0xfff9b815,},
  {0xd600000a,0xfed80010,0xff89c015,0xff90c015,0xff98c015,0xffa0c015,0xffa8c015,0xffb0c015,0xffb8c015,0xffc1c015,0xffcac015,0xffd3c015,0xffdcc015,0xffe5c015,0xffefc015,0xfff9c015,},
  {0xd640000a,0xfed90010,0xff89c815,0xff90c815,0xff98c815,0xffa0c815,0xffa8c815,0xffb0c815,0xffb8c815,0xffc1c815,0xffcac815,0xffd3c815,0xffdcc815,0xffe5c815,0xffefc815,0xfff9c815,},
  {0xd680000a,0xfeda0010,0xff89d015,0xff90d015,0xff98d015,0xffa0d015,0xffa8d015,0xffb0d015,0xffb8d015,0xffc1d015,0xffcad015,0xffd3d015,0xffdcd015,0xffe5d015,0xffefd015,0xfff9d015,},
  {0xd6c0000a,0xfedb0010,0xff89d815,0xff90d815,0xff98d815,0xffa0d815,0xffa8d815,0xffb0d815,0xffb8d815,0xffc1d815,0xffcad815,0xffd3d815,0xffdcd815,0xffe5d815,0xffefd815,0xfff9d815,},
  {0xd700000a,0xfedc0010,0xff89e015,0xff90e015,0xff98e015,0xffa0e015,0xffa8e015,0xffb0e015,0xffb8e015,0xffc1e015,0xffcae015,0xffd3e015,0xffdce015,0xffe5e015,0xffefe015,0xfff9e015,},
  {0xd740000a,0xfedd0010,0xff89e815,0xff90e815,0xff98e815,0xffa0e815,0xffa8e815,0xffb0e815,0xffb8e815,0xffc1e815,0xffcae815,0xffd3e815,0xffdce815,0xffe5e815,0xffefe815,0xfff9e815,},
  {0xd780000a,0xfede0010,0xff89f015,0xff90f015,0xff98f015,0xffa0f015,0xffa8f015,0xffb0f015,0xffb8f015,0xffc1f015,0xffcaf015,0xffd3f015,0xffdcf015,0xffe5f015,0xffeff015,0xfff9f015,},
  {0xd7c0000a,0xfedf0010,0xff89f815,0xff90f815,0xff98f815,0xffa0f815,0xffa8f815,0xffb0f815,0xffb8f815,0xffc1f815,0xffcaf815,0xffd3f815,0xffdcf815,0xffe5f815,0xffeff815,0xfff9f815,},
  {0xf100000d,0xff848016,0xff8a8016,0xff918016,0xff998016,0xffa18016,0xffa98016,0xffb18016,0xffb98016,0xffc28016,0xffcb8016,0xffd48016,0xffdd8016,0xffe68016,0xfff08016,0xfffa8016,},
  {0xf108000d,0xff848416,0xff8a8416,0xff918416,0xff998416,0xffa18416,0xffa98416,0xffb18416,0xffb98416,0xffc28416,0xffcb8416,0xffd48416,0xffdd8416,0xffe68416,0xfff08416,0xfffa8416,},
  {0xf110000d,0xff848816,0xff8a8816,0xff918816,0xff998816,0xffa18816,0xffa98816,0xffb18816,0xffb98816,0xffc28816,0xffcb8816,0xffd48816,0xffdd8816,0xffe68816,0xfff08816,0xfffa8816,},
  {0xf118000d,0xff848c16,0xff8a8c16,0xff918c16,0xff998c16,0xffa18c16,0xffa98c16,0xffb18c16,0xffb98c16,0xffc28c16,0xffcb8c16,0xffd48c16,0xffdd8c16,0xffe68c16,0xfff08c16,0xfffa8c16,},
  {0xf120000d,0xff849016,0xff8a9016,0xff919016,0xff999016,0xffa19016,0xffa99016,0xffb19016,0xffb99016,0xffc29016,0xffcb9016,0xffd49016,0xffdd9016,0xffe69016,0xfff09016,0xfffa9016,},
  {0xf128000d,0xff849416,0xff8a9416,0xff919416,0xff999416,0xffa19416,0xffa99416,0xffb19416,0xffb99416,0xffc29416,0xffcb9416,0xffd49416,0xffdd9416,0xffe69416,0xfff09416,0xfffa9416,},
  {0xf130000d,0xff849816,0xff8a9816,0xff919816,0xff999816,0xffa19816,0xffa99816,0xffb19816,0xffb99816,0xffc29816,0xffcb9816,0xffd49816,0xffdd9816,0xffe69816,0xfff09816,0xfffa9816,},
  {0xf138000d,0xff849c16,0xff8a9c16,0xff919c16,0xff999c16,0xffa19c16,0xffa99c16,0xffb19c16,0xffb99c16,0xffc29c16,0xffcb9c16,0xffd49c16,0xffdd9c16,0xffe69c16,0xfff09c16,0xfffa9c16,},
  {0xf140000d,0xff84a016,0xff8aa016,0xff91a016,0xff99a016,0xffa1a016,0xffa9a016,0xffb1a016,0xffb9a016,0xffc2a016,0xffcba016,0xffd4a016,0xffdda016,0xffe6a016,0xfff0a016,0xfffaa016,},
  {0xf148000d,0xff84a416,0xff8aa416,0xff91a416,0xff99a416,0xffa1a416,0xffa9a416,0xffb1a416,0xffb9a416,0xffc2a416,0xffcba416,0xffd4a416,0xffdda416,0xffe6a416,0xfff0a416,0xfffaa416,},
  {0xf150000d,0xff84a816,0xff8aa816,0xff91a816,0xff99a816,0xffa1a816,0xffa9a816,0xffb1a816,0xffb9a816,0xffc2a816,0xffcba816,0xffd4a816,0xffdda816,0xffe6a816,0xfff0a816,0xfffaa816,},
  {0xf158000d,0xff84ac16,0xff8aac16,0xff91ac16,0xff99ac16,0xffa1ac16,0xffa9ac16,0xffb1ac16,0xffb9ac16,0xffc2ac16,0xffcbac16,0xffd4ac16,0xffddac16,0xffe6ac16,0xfff0ac16,0xfffaac16,},
  {0xf160000d,0xff84b016,0xff8ab016,0xff91b016,0xff99b016,0xffa1b016,0xffa9b016,0xffb1b016,0xffb9b016,0xffc2b016,0xffcbb016,0xffd4b016,0xffddb016,0xffe6b016,0xfff0b016,0xfffab016,},
  {0xf168000d,0xff84b416,0xff8ab416,0xff91b416,0xff99b416,0xffa1b416,0xffa9b416,0xffb1b416,0xffb9b416,0xffc2b416,0xffcbb416,0xffd4b416,0xffddb416,0xffe6b416,0xfff0b416,0xfffab416,},
  {0xf170000d,0xff84b816,0xff8ab816,0xff91b816,0xff99b816,0xffa1b816,0xffa9b816,0xffb1b816,0xffb9b816,0xffc2b816,0xffcbb816,0xffd4b816,0xffddb816,0xffe6b816,0xfff0b816,0xfffab816,},
  {0xf178000d,0xff84bc16,0xff8abc16,0xff91bc16,0xff99bc16,0xffa1bc16,0xffa9bc16,0xffb1bc16,0xffb9bc16,0xffc2bc16,0xffcbbc16,0xffd4bc16,0xffddbc16,0xffe6bc16,0xfff0bc16,0xfffabc16,},
  {0xf180000d,0xff84c016,0xff8ac016,0xff91c016,0xff99c016,0xffa1c016,0xffa9c016,0xffb1c016,0xffb9c016,0xffc2c016,0xffcbc016,0xffd4c016,0xffddc016,0xffe6c016,0xfff0c016,0xfffac016,},
  {0xf188000d,0xff84c416,0xff8ac416,0xff91c416,0xff99c416,0xffa1c416,0xffa9c416,0xffb1c416,0xffb9c416,0xffc2c416,0xffcbc416,0xffd4c416,0xffddc416,0xffe6c416,0xfff0c416,0xfffac416,},
  {0xf190000d,0xff84c816,0xff8ac816,0xff91c816,0xff99c816,0xffa1c816,0xffa9c816,0xffb1c816,0xffb9c816,0xffc2c816,0xffcbc816,0xffd4c816,0xffddc816,0xffe6c816,0xfff0c816,0xfffac816,},
  {0xf198000d,0xff84cc16,0xff8acc16,0xff91cc16,0xff99cc16,0xffa1cc16,0xffa9cc16,0xffb1cc16,0xffb9cc16,0xffc2cc16,0xffcbcc16,0xffd4cc16,0xffddcc16,0xffe6cc16,0xfff0cc16,0xfffacc16,},
  {0xf1a0000d,0xff84d016,0xff8ad016,0xff91d016,0xff99d016,0xffa1d016,0xffa9d016,0xffb1d016,0xffb9d016,0xffc2d016,0xffcbd016,0xffd4d016,0xffddd016,0xffe6d016,0xfff0d016,0xfffad016,},
  {0xf1a8000d,0xff84d416,0xff8ad416,0xff91d416,0xff99d416,0xffa1d416,0xffa9d416,0xffb1d416,0xffb9d416,0xffc2d416,0xffcbd416,0xffd4d416,0xffddd416,0xffe6d416,0xfff0d416,0xfffad416,},
  {0xf1b0000d,0xff84d816,0xff8ad816,0xff91d816,0xff99d816,0xffa1d816,0xffa9d816,0xffb1d816,0xffb9d816,0xffc2d816,0xffcbd816,0xffd4d816,0xffddd816,0xffe6d816,0xfff0d816,0xfffad816,},
  {0xf1b8000d,0xff84dc16,0xff8adc16,0xff91dc16,0xff99dc16,0xffa1dc16,0xffa9dc16,0xffb1dc16,0xffb9dc16,0xffc2dc16,0xffcbdc16,0xffd4dc16,0xffdddc16,0xffe6dc16,0xfff0dc16,0xfffadc16,},
  {0xf1c0000d,0xff84e016,0xff8ae016,0xff91e016,0xff99e016,0xffa1e016,0xffa9e016,0xffb1e016,0xffb9e016,0xffc2e016,0xffcbe016,0xffd4e016,0xffdde016,0xffe6e016,0xfff0e016,0xfffae016,},
  {0xf1c8000d,0xff84e416,0xff8ae416,0xff91e416,0xff99e416,0xffa1e416,0xffa9e416,0xffb1e416,0xffb9e416,0xffc2e416,0xffcbe416,0xffd4e416,0xffdde416,0xffe6e416,0xfff0e416,0xfffae416,},
  {0xf1d0000d,0xff84e816,0xff8ae816,0xff91e816,0xff99e816,0xffa1e816,0xffa9e816,0xffb1e816,0xffb9e816,0xffc2e816,0xffcbe816,0xffd4e816,0xffdde816,0xffe6e816,0xfff0e816,0xfffae816,},
  {0xf1d8000d,0xff84ec16,0xff8aec16,0xff91ec16,0xff99ec16,0xffa1ec16,0xffa9ec16,0xffb1ec16,0xffb9ec16,0xffc2ec16,0xffcbec16,0xffd4ec16,0xffddec16,0xffe6ec16,0xfff0ec16,0xfffaec16,},
  {0xf1e0000d,0xff84f016,0xff8af016,0xff91f016,0xff99f016,0xffa1f016,0xffa9f016,0xffb1f016,0xffb9f016,0xffc2f016,0xffcbf016,0xffd4f016,0xffddf016,0xffe6f016,0xfff0f016,0xfffaf016,},
  {0xf1e8000d,0xff84f416,0xff8af416,0xff91f416,0xff99f416,0xffa1f416,0xffa9f416,0xffb1f416,0xffb9f416,0xffc2f416,0xffcbf416,0xffd4f416,0xffddf416,0xffe6f416,0xfff0f416,0xfffaf416,},
  {0xf1f0000d,0xff84f816,0xff8af816,0xff91f816,0xff99f816,0xffa1f816,0xffa9f816,0xffb1f816,0xffb9f816,0xffc2f816,0xffcbf816,0xffd4f816,0xffddf816,0xffe6f816,0xfff0f816,0xfffaf816,},
  {0xf1f8000d,0xff84fc16,0xff8afc16,0xff91fc16,0xff99fc16,0xffa1fc16,0xffa9fc16,0xffb1fc16,0xffb9fc16,0xffc2fc16,0xffcbfc16,0xffd4fc16,0xffddfc16,0xffe6fc16,0xfff0fc16,0xfffafc16,},
  {0xf880000f,0xff858017,0xff8b8017,0xff928017,0xff9a8017,0xffa28017,0xffaa8017,0xffb28017,0xffba8017,0xffc38017,0xffcc8017,0xffd58017,0xffde8017,0xffe78017,0xfff18017,0xfffb8017,},
  {0xf882000f,0xff858217,0xff8b8217,0xff928217,0xff9a8217,0xffa28217,0xffaa8217,0xffb28217,0xffba8217,0xffc38217,0xffcc8217,0xffd58217,0xffde8217,0xffe78217,0xfff18217,0xfffb8217,},
  {0xf884000f,0xff858417,0xff8b8417,0xff928417,0xff9a8417,0xffa28417,0xffaa8417,0xffb28417,0xffba8417,0xffc38417,0xffcc8417,0xffd58417,0xffde8417,0xffe78417,0xfff18417,0xfffb8417,},
  {0xf886000f,0xff858617,0xff8b8617,0xff928617,0xff9a8617,0xffa28617,0xffaa8617,0xffb28617,0xffba8617,0xffc38617,0xffcc8617,0xffd58617,0xffde8617,0xffe78617,0xfff18617,0xfffb8617,},
  {0xf888000f,0xff858817,0xff8b8817,0xff928817,0xff9a8817,0xffa28817,0xffaa8817,0xffb28817,0xffba8817,0xffc38817,0xffcc8817,0xffd58817,0xffde8817,0xffe78817,0xfff18817,0xfffb8817,},
  {0xf88a000f,0xff858a17,0xff8b8a17,0xff928a17,0xff9a8a17,0xffa28a17,0xffaa8a17,0xffb28a17,0xffba8a17,0xffc38a17,0xffcc8a17,0xffd58a17,0xffde8a17,0xffe78a17,0xfff18a17,0xfffb8a17,},
  {0xf88c000f,0xff858c17,0xff8b8c17,0xff928c17,0xff9a8c17,0xffa28c17,0xffaa8c17,0xffb28c17,0xffba8c17,0xffc38c17,0xffcc8c17,0xffd58c17,0xffde8c17,0xffe78c17,0xfff18c17,0xfffb8c17,},
  {0xf88e000f,0xff858e17,0xff8b8e17,0xff928e17,0xff9a8e17,0xffa28e17,0xffaa8e17,0xffb28e17,0xffba8e17,0xffc38e17,0xffcc8e17,0xffd58e17,0xffde8e17,0xffe78e17,0xfff18e17,0xfffb8e17,},
  {0xf890000f,0xff859017,0xff8b9017,0xff929017,0xff9a9017,0xffa29017,0xffaa9017,0xffb29017,0xffba9017,0xffc39017,0xffcc9017,0xffd59017,0xffde9017,0xffe79017,0xfff19017,0xfffb9017,},
  {0xf892000f,0xff859217,0xff8b9217,0xff929217,0xff9a9217,0xffa29217,0xffaa9217,0xffb29217,0xffba9217,0xffc39217,0xffcc9217,0xffd59217,0xffde9217,0xffe79217,0xfff19217,0xfffb9217,},
  {0xf894000f,0xff859417,0xff8b9417,0xff929417,0xff9a9417,0xffa29417,0xffaa9417,0xffb29417,0xffba9417,0xffc39417,0xffcc9417,0xffd59417,0xffde9417,0xffe79417,0xfff19417,0xfffb9417,},
  {0xf896000f,0xff859617,0xff8b9617,0xff929617,0xff9a9617,0xffa29617,0xffaa9617,0xffb29617,0xffba9617,0xffc39617,0xffcc9617,0xffd59617,0xffde9617,0xffe79617,0xfff19617,0xfffb9617,},
  {0xf898000f,0xff859817,0xff8b9817,0xff929817,0xff9a9817,0xffa29817,0xffaa9817,0xffb29817,0xffba9817,0xffc39817,0xffcc9817,0xffd59817,0xffde9817,0xffe79817,0xfff19817,0xfffb9817,},
  {0xf89a000f,0xff859a17,0xff8b9a17,0xff929a17,0xff9a9a17,0xffa29a17,0xffaa9a17,0xffb29a17,0xffba9a17,0xffc39a17,0xffcc9a17,0xffd59a17,0xffde9a17,0xffe79a17,0xfff19a17,0xfffb9a17,},
  {0xf89c000f,0xff859c17,0xff8b9c17,0xff929c17,0xff9a9c17,0xffa29c17,0xffaa9c17,0xffb29c17,0xffba9c17,0xffc39c17,0xffcc9c17,0xffd59c17,0xffde9c17,0xffe79c17,0xfff19c17,0xfffb9c17,},
  {0xf89e000f,0xff859e17,0xff8b9e17,0xff929e17,0xff9a9e17,0xffa29e17,0xffaa9e17,0xffb29e17,0xffba9e17,0xffc39e17,0xffcc9e17,0xffd59e17,0xffde9e17,0xffe79e17,0xfff19e17,0xfffb9e17,},
  {0xf8a0000f,0xff85a017,0xff8ba017,0xff92a017,0xff9aa017,0xffa2a017,0xffaaa017,0xffb2a017,0xffbaa017,0xffc3a017,0xffcca017,0xffd5a017,0xffdea017,0xffe7a017,0xfff1a017,0xfffba017,},
  {0xf8a2000f,0xff85a217,0xff8ba217,0xff92a217,0xff9aa217,0xffa2a217,0xffaaa217,0xffb2a217,0xffbaa217,0xffc3a217,0xffcca217,0xffd5a217,0xffdea217,0xffe7a217,0xfff1a217,0xfffba217,},
  {0xf8a4000f,0xff85a417,0xff8ba417,0xff92a417,0xff9aa417,0xffa2a417,0xffaaa417,0xffb2a417,0xffbaa417,0xffc3a417,0xffcca417,0xffd5a417,0xffdea417,0xffe7a417,0xfff1a417,0xfffba417,},
  {0xf8a6000f,0xff85a617,0xff8ba617,0xff92a617,0xff9aa617,0xffa2a617,0xffaaa617,0xffb2a617,0xffbaa617,0xffc3a617,0xffcca617,0xffd5a617,0xffdea617,0xffe7a617,0xfff1a617,0xfffba617,},
  {0xf8a8000f,0xff85a817,0xff8ba817,0xff92a817,0xff9aa817,0xffa2a817,0xffaaa817,0xffb2a817,0xffbaa817,0xffc3a817,0xffcca817,0xffd5a817,0xffdea817,0xffe7a817,0xfff1a817,0xfffba817,},
  {0xf8aa000f,0xff85aa17,0xff8baa17,0xff92aa17,0xff9aaa17,0xffa2aa17,0xffaaaa17,0xffb2aa17,0xffbaaa17,0xffc3aa17,0xffccaa17,0xffd5aa17,0xffdeaa17,0xffe7aa17,0xfff1aa17,0xfffbaa17,},
  {0xf8ac000f,0xff85ac17,0xff8bac17,0xff92ac17,0xff9aac17,0xffa2ac17,0xffaaac17,0xffb2ac17,0xffbaac17,0xffc3ac17,0xffccac17,0xffd5ac17,0xffdeac17,0xffe7ac17,0xfff1ac17,0xfffbac17,},
  {0xf8ae000f,0xff85ae17,0xff8bae17,0xff92ae17,0xff9aae17,0xffa2ae17,0xffaaae17,0xffb2ae17,0xffbaae17,0xffc3ae17,0xffccae17,0xffd5ae17,0xffdeae17,0xffe7ae17,0xfff1ae17,0xfffbae17,},
  {0xf8b0000f,0xff85b017,0xff8bb017,0xff92b017,0xff9ab017,0xffa2b017,0xffaab017,0xffb2b017,0xffbab017,0xffc3b017,0xffccb017,0xffd5b017,0xffdeb017,0xffe7b017,0xfff1b017,0xfffbb017,},
  {0xf8b2000f,0xff85b217,0xff8bb217,0xff92b217,0xff9ab217,0xffa2b217,0xffaab217,0xffb2b217,0xffbab217,0xffc3b217,0xffccb217,0xffd5b217,0xffdeb217,0xffe7b217,0xfff1b217,0xfffbb217,},
  {0xf8b4000f,0xff85b417,0xff8bb417,0xff92b417,0xff9ab417,0xffa2b417,0xffaab417,0xffb2b417,0xffbab417,0xffc3b417,0xffccb417,0xffd5b417,0xffdeb417,0xffe7b417,0xfff1b417,0xfffbb417,},
  {0xf8b6000f,0xff85b617,0xff8bb617,0xff92b617,0xff9ab617,0xffa2b617,0xffaab617,0xffb2b617,0xffbab617,0xffc3b617,0xffccb617,0xffd5b617,0xffdeb617,0xffe7b617,0xfff1b617,0xfffbb617,},
  {0xf8b8000f,0xff85b817,0xff8bb817,0xff92b817,0xff9ab817,0xffa2b817,0xffaab817,0xffb2b817,0xffbab817,0xffc3b817,0xffccb817,0xffd5b817,0xffdeb817,0xffe7b817,0xfff1b817,0xfffbb817,},
  {0xf8ba000f,0xff85ba17,0xff8bba17,0xff92ba17,0xff9aba17,0xffa2ba17,0xffaaba17,0xffb2ba17,0xffbaba17,0xffc3ba17,0xffccba17,0xffd5ba17,0xffdeba17,0xffe7ba17,0xfff1ba17,0xfffbba17,},
  {0xf8bc000f,0xff85bc17,0xff8bbc17,0xff92bc17,0xff9abc17,0xffa2bc17,0xffaabc17,0xffb2bc17,0xffbabc17,0xffc3bc17,0xffccbc17,0xffd5bc17,0xffdebc17,0xffe7bc17,0xfff1bc17,0xfffbbc17,},
  {0xf8be000f,0xff85be17,0xff8bbe17,0xff92be17,0xff9abe17,0xffa2be17,0xffaabe17,0xffb2be17,0xffbabe17,0xffc3be17,0xffccbe17,0xffd5be17,0xffdebe17,0xffe7be17,0xfff1be17,0xfffbbe17,},
  {0xf8c0000f,0xff85c017,0xff8bc017,0xff92c017,0xff9ac017,0xffa2c017,0xffaac017,0xffb2c017,0xffbac017,0xffc3c017,0xffccc017,0xffd5c017,0xffdec017,0xffe7c017,0xfff1c017,0xfffbc017,},
  {0xf8c2000f,0xff85c217,0xff8bc217,0xff92c217,0xff9ac217,0xffa2c217,0xffaac217,0xffb2c217,0xffbac217,0xffc3c217,0xffccc217,0xffd5c217,0xffdec217,0xffe7c217,0xfff1c217,0xfffbc217,},
  {0xf8c4000f,0xff85c417,0xff8bc417,0xff92c417,0xff9ac417,0xffa2c417,0xffaac417,0xffb2c417,0xffbac417,0xffc3c417,0xffccc417,0xffd5c417,0xffdec417,0xffe7c417,0xfff1c417,0xfffbc417,},
  {0xf8c6000f,0xff85c617,0xff8bc617,0xff92c617,0xff9ac617,0xffa2c617,0xffaac617,0xffb2c617,0xffbac617,0xffc3c617,0xffccc617,0xffd5c617,0xffdec617,0xffe7c617,0xfff1c617,0xfffbc617,},
  {0xf8c8000f,0xff85c817,0xff8bc817,0xff92c817,0xff9ac817,0xffa2c817,0xffaac817,0xffb2c817,0xffbac817,0xffc3c817,0xffccc817,0xffd5c817,0xffdec817,0xffe7c817,0xfff1c817,0xfffbc817,},
  {0xf8ca000f,0xff85ca17,0xff8bca17,0xff92ca17,0xff9aca17,0xffa2ca17,0xffaaca17,0xffb2ca17,0xffbaca17,0xffc3ca17,0xffccca17,0xffd5ca17,0xffdeca17,0xffe7ca17,0xfff1ca17,0xfffbca17,},
  {0xf8cc000f,0xff85cc17,0xff8bcc17,0xff92cc17,0xff9acc17,0xffa2cc17,0xffaacc17,0xffb2cc17,0xffbacc17,0xffc3cc17,0xffcccc17,0xffd5cc17,0xffdecc17,0xffe7cc17,0xfff1cc17,0xfffbcc17,},
  {0xf8ce000f,0xff85ce17,0xff8bce17,0xff92ce17,0xff9ace17,0xffa2ce17,0xffaace17,0xffb2ce17,0xffbace17,0xffc3ce17,0xffccce17,0xffd5ce17,0xffdece17,0xffe7ce17,0xfff1ce17,0xfffbce17,},
  {0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
};

// Write bits to the bit buffer based on table entry (see buildTables)
static void inline writeBits(u32 tab)
{
  // JPEG encoding is big-endian - so bits are placed starting at MSB and moving toward LSB
  int oldCnt = m_bitCnt;
	m_bitBuf |= (tab & ~255) >> m_bitCnt;
	m_bitCnt += (tab & 255);

	if (m_bitCnt >= 32)
  {
    // Write word in big-endian style
    *(u32*)m_out = __REV(m_bitBuf);
    m_out += 4;
    
    // Keep residue
    m_bitCnt &= 31;
    m_bitBuf = (tab & ~255) << (32 - oldCnt);
	}
}

typedef s16 elem;
static const int FIXBITS = 8;
#define TOFIX(x) (elem)((x) * (1<<FIXBITS) + 0.5)
static const elem FIX_0_382683433 = TOFIX(0.382683433);
static const elem FIX_0_541196100 = TOFIX(0.541196100);
static const elem FIX_0_707106781 = TOFIX(0.707106781);
static const elem FIX_1_306562965 = TOFIX(1.306562965);
#define MULTIPLY(var, const)   ((elem) (((var) * (const)) >> FIXBITS))
  
// 16-bit integer implementation of the AAN 1-D DCT
static inline void fixDCT(
  elem i0, elem i1, elem i2, elem i3, elem i4, elem i5, elem i6, elem i7,
  elem &d0, elem &d1, elem &d2, elem &d3, elem &d4, elem &d5, elem &d6, elem &d7)
{
	elem tmp0 = i0 + i7;
	elem tmp7 = i0 - i7;
	elem tmp1 = i1 + i6;
	elem tmp6 = i1 - i6;
	elem tmp2 = i2 + i5;
	elem tmp5 = i2 - i5;
	elem tmp3 = i3 + i4;
	elem tmp4 = i3 - i4;

	// Even part
	elem tmp10 = tmp0 + tmp3;	// phase 2
	elem tmp13 = tmp0 - tmp3;
	elem tmp11 = tmp1 + tmp2;
	elem tmp12 = tmp1 - tmp2;

	d0 = tmp10 + tmp11; 		// phase 3
	d4 = tmp10 - tmp11;

	elem z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); // c4
	d2 = tmp13 + z1; 		// phase 5
	d6 = tmp13 - z1;

	// Odd part
	tmp10 = tmp4 + tmp5; 		// phase 2
	tmp11 = tmp5 + tmp6;
	tmp12 = tmp6 + tmp7;

	// The rotator is modified from fig 4-8 to avoid extra negations.
	elem z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); // c6
	elem z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; // c2-c6
	elem z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; // c2+c6
	elem z3 = MULTIPLY(tmp11, FIX_0_707106781); // c4

	elem z11 = tmp7 + z3;		// phase 5
	elem z13 = tmp7 - z3;

	d5 = z13 + z2;			// phase 6
	d3 = z13 - z2;
	d1 = z11 + z4;
	d7 = z11 - z4;
} 

// Compress a Y macroblock from pixels to bits - this is 99% of the work
void CODERAM doYBlock(u8 *image, int pitch)
{
  elem coeff[64];
	int quant[64];
  
  START(timeDCT);
  
	// DCT rows
	for (int i = 0; i < 64; i += 8)
  {
		fixDCT(image[0], image[1*PIXWIDTH], image[2*PIXWIDTH], image[3*PIXWIDTH], image[4*PIXWIDTH], image[5*PIXWIDTH], image[6*PIXWIDTH], image[7*PIXWIDTH],
      coeff[i], coeff[i+1], coeff[i+2], coeff[i+3], coeff[i+4], coeff[i+5], coeff[i+6], coeff[i+7]);
    image += pitch;   // Next row
  }

	// DCT columns
	for (int i = 0; i < 8; i++)
		fixDCT(coeff[i], coeff[i+8], coeff[i+16], coeff[i+24], coeff[i+32], coeff[i+40], coeff[i+48], coeff[i+56],
          coeff[i], coeff[i+8], coeff[i+16], coeff[i+24], coeff[i+32], coeff[i+40], coeff[i+48], coeff[i+56]);
  
  STOP(timeDCT);
  START(timeQuant);

	// Quantize/descale/zigzag the coefficients
	for (int i = 0; i < 64; ++i)
  {
		elem v = (coeff[i]*m_quantIY[i]+0x8000) >> 16;
    quant[ZIG_ZAG[i]] = v;
  }
  
  STOP(timeQuant);
  START(timeHuff);
  
	// Encode DC
	int diff = quant[0] - m_lastDC; 
	m_lastDC = quant[0];
  //while (diff <= -DC_ENTRIES/2 || diff >= DC_ENTRIES/2)
    ;
  writeBits(DCYTAB(diff));
  
	// Encode AC coefficients
  // NOTE:  The 63rd coefficient is never encoded - it's always zero
  // This causes a tiny loss of quality but eliminates a special case with writing EOBs
	for (int i = 1; i < 63; i++)
  {
    // Count zeros
		int startpos = i;
		while (i < 63 && 0 == quant[i])
      i++;
    
    // If we have zeros to the end, bail out
    if (i == 63)
    {
      STOP(timeHuff);
      return;
    }
    
    // If we have 16 or more zeros, encode them specially
		int zeros = i - startpos;
		while (zeros >= 16)
    {
			writeBits(TZERO16);
      zeros -= 16;
    }
    
    //while (quant[i] <= -AC_ENTRIES/2 || quant[i] >= AC_ENTRIES/2)
      ;
    writeBits(ACYTAB(zeros, quant[i]));
	}
  
  STOP(timeHuff);
}

// Reset encoder state to start of new frame
static void reset()
{
  m_bitBuf = 0;
  m_bitCnt = 4;   // XXX: Reserve first byte of frame to redundant EOB (later set to quality)
  m_lastDC = m_startDC;
}

// Compress 10 8x8 macroblocks from 8 80 pixel strips spaced 'pitch' bytes apart
int JPEGCompress(u8* out, u8* in, int pitch)
{  
  m_out = out;

  // Encode 10 8x8 macroblocks
  for(int x = 0; x < 40; x += 8)
    doYBlock(in + x*PIXWIDTH, pitch);
	
  return m_out-out;
}

// End the JPEG, flushing the last bytes out
int JPEGEnd(u8* out)
{
  m_out = out;
  
  // Add final EOB
  writeBits(TEOB);
  // Dump any remaining bytes before EOI, padded with 1s
  m_bitBuf |= ((u32)0xFFFFFFFF >> m_bitCnt);
  *(u32*)m_out = __REV(m_bitBuf);
  // Increment pointer by exact number of bytes remaining
  m_out += ((m_bitCnt + 7) >> 3);

#ifdef PROFILE
  while (timeDCT < 0)   timeDCT += 6553600;
  while (timeQuant < 0) timeQuant += 6553600;
  while (timeHuff < 0)  timeHuff += 6553600;
  DebugPrintf(" DCT=%5dus, Quant=%5dus, Huff=%5dus\n", timeDCT/100, timeQuant/100, timeHuff/100);
  timeDCT = timeQuant = timeHuff = 0;
#endif  
    
  // Prepare for next image
  reset();
  
	return m_out-out;
}

// Start a new JPEG image at the specified width, height, and quality
// This regenerates the header
int JPEGStart(int quality)
{  
  // This is the IJG way of turning a quality value into a quantization table
	quality = quality < 1 ? 50 : quality > 100 ? 100 : quality;
	quality = quality < 50 ? 5000 / quality : 200 - quality * 2;

  // Quantization tables and AAN scalers
	static const int YQT[] = {16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99};
	static const int UVQT[] = {17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99};
	static const float AAN_SCALERS[] = { 1.0f * 2.828427125f, 1.387039845f * 2.828427125f, 1.306562965f * 2.828427125f, 1.175875602f * 2.828427125f, 1.0f * 2.828427125f, 0.785694958f * 2.828427125f, 0.541196100f * 2.828427125f, 0.275899379f * 2.828427125f };
  
	unsigned char YTable[64], UVTable[64];
	for(int i = 0; i < 64; ++i)
  {
		int yti = (YQT[i]*quality+50)/100;
		int uvti  = (UVQT[i]*quality+50)/100;
		YTable[ZIG_ZAG[i]] = yti < 1 ? 1 : yti > 255 ? 255 : yti;
		UVTable[ZIG_ZAG[i]] = uvti < 1 ? 1 : uvti > 255 ? 255 : uvti;
	}

  // This removes a running DC bias caused by our use of unsigned pixels (JPEG specifies signed pixels)
  m_startDC = 8*128 / YTable[0];  // 64 pixels are 128 counts brighter than expected, scaled down by DC quant
  
  // Now scale the quantization tables for AAN
	for(int row = 0, k = 0; row < 8; ++row)
  {
		for(int col = 0; col < 8; ++col, ++k) 
    {
			m_quantY[k]  = 1.0f / (YTable [ZIG_ZAG[k]] * AAN_SCALERS[row] * AAN_SCALERS[col]);
      m_quantIY[k] = m_quantY[k] * 65536.0f + 0.5f;
      DPRINT("%4.0f(%7.5f) ", (double)YTable[k], (double)m_quantY[k]);
			m_quantUV[k] = 1 / (UVTable[ZIG_ZAG[k]] * AAN_SCALERS[row] * AAN_SCALERS[col]);
		}
		DPRINT("\n");
  }
  
  // Prepare for first image
  reset();

  return 0;
}

    }
  }
}
