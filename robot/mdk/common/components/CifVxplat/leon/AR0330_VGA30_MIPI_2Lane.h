///
/// @file
/// @copyright All code copyright Movidius Ltd 2012, all rights reserved
///            For License Warranty see: common/license.txt
///
/// @brief
///
///Configuration file for Aptina AR0330
//# 752x480p @ 30fps 12bit MIPI - 2 Lane

#include "icMipiTC358746Defines.h"

const unsigned short APT_AR0330_cfg_VGA30_MIPI[][2] =
{
/*
==============
Target Vt Pixel Frequency: 59 MHz
Input Clock Frequency: 27 MHz

Actual Vt Pixel Clock: 59 MHz
Actual Op Pixel Clock: 59 MHz

pre_pll_clk_div (N Value) = 9
pll_multiplier  (M Value) = 236
Fvco = 708 MHz
vt_sys_clk_div = 2
vt_pix_clk_div = 6
op_pix_clk_div = 12
Output Pixel Rate per Lane: 59 Mps
Output Pixel Rate: 118 Mps
==============
*/
		{0x301A, 0x0058}, // Disable Streaming
		
		//MIPI Timing
		{0x31AE, 0x0202}, // SERIAL_FORMAT: 2 MIPI lanes
		{0x31AC, 0x0C0C}, // DATA_FORMAT_BITS: 12 bits per pixel
		{0x31B0, 0x0028}, // FRAME_PREAMBLE
		{0x31B2, 0x000E}, // LINE_PREAMBLE
		{0x31B4, 0x2743}, // MIPI_TIMING_0
		{0x31B6, 0x114E}, // MIPI_TIMING_1
		{0x31B8, 0x2049}, // MIPI_TIMING_2
		{0x31BA, 0x0186}, // MIPI_TIMING_3
		{0x31BC, 0x8005}, // MIPI_TIMING_4
		{0x31BE, 0x2003}, // MIPI_CONFIG_STATUS
		
		//PLL Config
		{0x302A, 0x0006}, // VT_PIX_CLK_DIV = 6
		{0x302C, 0x0002}, // VT_SYS_CLK_DIV = 2
		{0x302E, 0x0009}, // PRE_PLL_CLK_DIV = 9
		{0x3030, 0x00EC}, // PLL_MULTIPLIER = 236
		{0x3036, 0x000C}, // OP_PIX_CLK_DIV = 12
		{0x3038, 0x0001}, // OP_SYS_CLK_DIV = 1
		{0x30BA, 0x002C}, // DIGITAL_CTRL
		{0x3064, 0x1802}, // Disable Embedded data enabled
		
		//Default Register Changes
		{0x31E0, 0x0003},      
		{0x3ED4, 0x8F6C},
		{0x3ED6, 0x66CC},
		{0x3ED8, 0x8C42},
		
		//Array readout settings
		{0x3002, 0x0036}, //y_addr_start
		{0x3004, 0x00C6}, //x_addr_start
		{0x3006, 0x05D5}, //y_addr_end
		{0x3008, 0x0845}, //x_addr_end

		//Frame-timing
		{0x300A, 0x062E}, //frame_length_lines
		{0x300C, 0x04DA}, //line_length_pck

		//Sub-sampling
		{0x30A2, 0x0005}, //x_odd_inc
		{0x30A6, 0x0005}, //y_odd_inc
		{0x3040, 0xF000}, //Row Bin3 off, Column SF Bin

		{0x3014, 0x0000}, //Fine integration time
		{0x3012, 0x0195}, //Coarse integration time
		{0x3060, 0x0020}, //Analog gain: Coarse Gain[5:4] - Fine Gain [3:0]
		{0x305E, 0x0128}, //Digtal Gain

		{0x3042, 0x0224}, //Extra Delay
		{0x30BA, 0x002C}, //Digital_Ctrl_Adc_High_Speed
		
		//Sequencer length is 1194clocks/row.
		{0x301A, 0x0058},
		{0x3088, 0x8000},
		{0x3086, 0x4A03},
		{0x3086, 0x4316},
		{0x3086, 0x0443},
		{0x3086, 0x1645},
		{0x3086, 0x4045},
		{0x3086, 0x6017},
		{0x3086, 0x2045},
		{0x3086, 0x404B},
		{0x3086, 0x1244},
		{0x3086, 0x6134},
		{0x3086, 0x4A31},
		{0x3086, 0x4342},
		{0x3086, 0x4560},
		{0x3086, 0x2714},
		{0x3086, 0x3DFF},
		{0x3086, 0x3DFF},
		{0x3086, 0x3DEA},
		{0x3086, 0x2704},
		{0x3086, 0x3D10},
		{0x3086, 0x2705},
		{0x3086, 0x3D10},
		{0x3086, 0x2715},
		{0x3086, 0x3527},
		{0x3086, 0x053D},
		{0x3086, 0x1045},
		{0x3086, 0x4027},
		{0x3086, 0x0427},
		{0x3086, 0x143D},
		{0x3086, 0xFF3D},
		{0x3086, 0xFF3D},
		{0x3086, 0xEA62},
		{0x3086, 0x2728},
		{0x3086, 0x3627},
		{0x3086, 0x083D},
		{0x3086, 0x6444},
		{0x3086, 0x2C2C},
		{0x3086, 0x2C2C},
		{0x3086, 0x4B01},
		{0x3086, 0x432D},
		{0x3086, 0x4643},
		{0x3086, 0x1647},
		{0x3086, 0x435F},
		{0x3086, 0x4F50},
		{0x3086, 0x2604},
		{0x3086, 0x2684},
		{0x3086, 0x2027},
		{0x3086, 0xFC53},
		{0x3086, 0x0D5C},
		{0x3086, 0x0D57},
		{0x3086, 0x5417},
		{0x3086, 0x0955},
		{0x3086, 0x5649},
		{0x3086, 0x5307},
		{0x3086, 0x5302},
		{0x3086, 0x4D28},
		{0x3086, 0x6C4C},
		{0x3086, 0x0928},
		{0x3086, 0x2C28},
		{0x3086, 0x294E},
		{0x3086, 0x5C09},
		{0x3086, 0x6045},
		{0x3086, 0x0045},
		{0x3086, 0x8026},
		{0x3086, 0xA627},
		{0x3086, 0xF817},
		{0x3086, 0x0227},
		{0x3086, 0xFA5C},
		{0x3086, 0x0B17},
		{0x3086, 0x1826},
		{0x3086, 0xA25C},
		{0x3086, 0x0317},
		{0x3086, 0x4427},
		{0x3086, 0xF25F},
		{0x3086, 0x2809},
		{0x3086, 0x1714},
		{0x3086, 0x2808},
		{0x3086, 0x1701},
		{0x3086, 0x4D1A},
		{0x3086, 0x2683},
		{0x3086, 0x1701},
		{0x3086, 0x27FA},
		{0x3086, 0x45A0},
		{0x3086, 0x1707},
		{0x3086, 0x27FB},
		{0x3086, 0x1729},
		{0x3086, 0x4580},
		{0x3086, 0x1708},
		{0x3086, 0x27FA},
		{0x3086, 0x1728},
		{0x3086, 0x5D17},
		{0x3086, 0x0E26},
		{0x3086, 0x8153},
		{0x3086, 0x0117},
		{0x3086, 0xE653},
		{0x3086, 0x0217},
		{0x3086, 0x1026},
		{0x3086, 0x8326},
		{0x3086, 0x8248},
		{0x3086, 0x4D4E},
		{0x3086, 0x2809},
		{0x3086, 0x4C0B},
		{0x3086, 0x6017},
		{0x3086, 0x2027},
		{0x3086, 0xF217},
		{0x3086, 0x535F},
		{0x3086, 0x2808},
		{0x3086, 0x164D},
		{0x3086, 0x1A17},
		{0x3086, 0x0127},
		{0x3086, 0xFA26},
		{0x3086, 0x035C},
		{0x3086, 0x0145},
		{0x3086, 0x4027},
		{0x3086, 0x9817},
		{0x3086, 0x2A4A},
		{0x3086, 0x0A43},
		{0x3086, 0x160B},
		{0x3086, 0x4327},
		{0x3086, 0x9C45},
		{0x3086, 0x6017},
		{0x3086, 0x0727},
		{0x3086, 0x9D17},
		{0x3086, 0x2545},
		{0x3086, 0x4017},
		{0x3086, 0x0827},
		{0x3086, 0x985D},
		{0x3086, 0x2645},
		{0x3086, 0x4B17},
		{0x3086, 0x0A28},
		{0x3086, 0x0853},
		{0x3086, 0x0D52},
		{0x3086, 0x5112},
		{0x3086, 0x4460},
		{0x3086, 0x184A},
		{0x3086, 0x0343},
		{0x3086, 0x1604},
		{0x3086, 0x4316},
		{0x3086, 0x5843},
		{0x3086, 0x1659},
		{0x3086, 0x4316},
		{0x3086, 0x5A43},
		{0x3086, 0x165B},
		{0x3086, 0x4327},
		{0x3086, 0x9C45},
		{0x3086, 0x6017},
		{0x3086, 0x0727},
		{0x3086, 0x9D17},
		{0x3086, 0x2545},
		{0x3086, 0x4017},
		{0x3086, 0x1027},
		{0x3086, 0x9817},
		{0x3086, 0x2022},
		{0x3086, 0x4B12},
		{0x3086, 0x442C},
		{0x3086, 0x2C2C},
		{0x3086, 0x2C00},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		{0x3086, 0x0000},
		
		{0x3046, 0xC039}, // Enable flash
		{0x3048, 0xFFFF}, // Flash signal width

		{0x3ED2, 0x1F46}, // Disable Shading
		
		//Start Streaming
		{0x301A, 0x005C}, // Enable Streaming
};

CamSpec camSpecVGA30_MIPI = {
    {
            .height      = 480,
            .width       = 640,
            .hBackP      = 0,
            .hFrontP     = 0,
            .vBackP      = 0,
            .vFrontP     = 0
    },
    .idealRefFreq        = 27,
    .cfgDelay            = 400000,
    .sensorI2CAddress    = 0x18,
    .regNumber           = sizeof(APT_AR0330_cfg_VGA30_MIPI)/(sizeof(unsigned short[2])),
    .regSize             = 2,
    .regValues           = APT_AR0330_cfg_VGA30_MIPI
};

u64 mipiCfgVGA30[] = {
        MIPIB_SysCtl__Sreset__Reset_operation,
        MIPIB_SysCtl__Sreset__Normal_operation,
        MIPIB_SysCtl__SLEEP__Sleep_mode,
        // note: the PLL can be safely configured while in sleep mode

        // 486 MHz PLL clock
        ( MIPIB_PLLCtl0__PLL_PRD(2 - 1)
        | MIPIB_PLLCtl0__PLL_FBD(36 - 1) ),

        ( MIPIB_PLLCtl1__PLL_FRS__500M_1G_HSCK_freq
        | MIPIB_PLLCtl1__PLL_LBWS__PERCENT_50
        | MIPIB_PLLCtl1__PLL_LFBREN__no_oscillation
        | MIPIB_PLLCtl1__PLL_BYPCKEN__Normal_operation
        | MIPIB_PLLCtl1__PLL_CKEN__clocks_on
        | MIPIB_PLLCtl1__PLL_RESETB__Normal_operation
        | MIPIB_PLLCtl1__PLL_EN__on
        ),

        ( MIPIB_ClkCtl__MclkRefDiv__DIV2
        | MIPIB_ClkCtl__SclkDiv__DIV8
        | MIPIB_ClkCtl__PPIclkDiv__DIV2),

        ( MIPIB_MclkCtl__mclk_high(5 - 1)
        | MIPIB_MclkCtl__mclk_low(4 - 1) ),

        MIPIB_SysCtl__SLEEP__Normal_operation,

        ( MIPIB_PHYTimDly__DSettle(8)
        | MIPIB_PHYTimDly__Tc_term_sel__please_set_to_1
        | MIPIB_PHYTimDly__Td_term_sel__HS_termination_immediately ),

        MIPIB_DataFmt__PDFormat__RAW12,

        MIPIB_FiFoCtl__FifoLevel(2),

        ( MIPIB_ConfCtl__Auto__INCREMENT
        | MIPIB_ConfCtl__Bt656En__Disable
        | MIPIB_ConfCtl__DataLanes__NR_2
        | MIPIB_ConfCtl__HsyncP__active_high
        | MIPIB_ConfCtl__INTE2n__Normal
        | MIPIB_ConfCtl__PCLKP__Inverted
        | MIPIB_ConfCtl__PPEn__Enable
        | MIPIB_ConfCtl__PdataF__Mode_0
        | MIPIB_ConfCtl__TriEn__Disable
        | MIPIB_ConfCtl__VsyncP__active_high ),

};
