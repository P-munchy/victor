// Auto generated by parse_isaac_reg.pl from ../../../svu/RTL/svu.inc

#ifndef _SVU_INC_
#define _SVU_INC_

#include <mv_types.h>

//`define _SYNTHESIS_ONLY_
#define IDC_MAX_FIFO   (16 * 8) 
#define IDC_RD_DELAY   3 
#define IDC_DIS_BIT    4             // bit that indicates a discontinuity
#define IDC_BRU_DEL    5 
#define IDC_FILL_LVL   IDC_MAX_FIFO - ((IDC_RD_DELAY+4) * 16) 
#define BRU_SM_NORM    0 
#define BRU_SM_INSERT  1 
#define BRU_SM_GAP     2 
#define SLOT1_A        0x0 
#define SLOT1_B        0x1 
#define SLOT4_A        0x2 
#define SLOT4_B        0x3 
#define SLOT4_C        0x4 
#define SLOT4_D        0x5 
#define SLOT4_E        0x6 
#define SLOT4_F        0x7 
#define SLOT_ALL       0x8 
#define SLOT_ALL_A     0x8 
#define SLOT_IDC       0x9 
#define SLOT_ESC       0xa 
#define SLOT_CTRL      0xb 
#define PEU            0 
#define BRU            1 
#define LSU0           2 
#define LSU1           3 
#define VAU            4 
#define SAU            5 
#define IAU            6 
#define CMU            7 
#define SAU_ADD            3 
#define SAU_SUB            11 
#define SAU_MUL            19 
#define SAU_DIV            27 
#define SAU_IADDS          7 
#define SAU_ISUBS          15 
#define SAU_IMULS          23 
#define SAU_ADIFF          83 
#define SAU_MOD            35 
#define SAU_FRAC           2 
#define SAU_SQT            6 
#define SAU_RCP            10 
#define SAU_RQT            14 
#define SAU_SIN            18 
#define SAU_COS            22 
#define SAU_ATN            26 
#define SAU_LOG2           34 
#define SAU_EXP2           94 
#define SAU_ACCW           38  
#define SAU_MAC            99 
#define SAU_MACPW          103 
#define SAU_MACNW          107 
#define SAU_ACC            37 
#define SAU_ILMULL         42 
#define SAU_ILMULH         47 
#define SAU_ADDCI          50 
#define SAU_SUBCI          54 
#define SAU_AVG            87 
#define SAU_CMB            62 
#define SAU_SWZ            39 
#define SAU_ALIGN          63 
#define SAU_IROL           67 
#define SAU_SHL            71 
#define SAU_SHR            75 
#define SAU_SHD            79 
#define SAU_ONES           70 
#define SAU_ABS            74 
#define SAU_BSR            78 
#define SAU_BSF            82 
#define SAU_SHFL           113 
#define SAU_DEAL           117 
#define SAU_NOT            97 
#define SAU_AND            98 
#define SAU_OR             102 
#define SAU_XOR            106 
#define SAU_XORT           110 
#define SAU_RVRS           101 
#define SAU_SUMX           95 
#define SAU_SUMC           9 
#define SAU_ANDX           114 
#define SAU_ORX            118 
#define SAU_XORX           122 
#define SAU_GMUL           30 
#define VAU_ADD            3 
#define VAU_SUB            11 
#define VAU_MUL            19 
#define VAU_IADDS          7 
#define VAU_ISUBS          15 
#define VAU_IMULS          23 
#define VAU_ADIFF          83 
#define VAU_FRAC           2 
#define VAU_ACCW           38  
#define VAU_MAC            99 
#define VAU_MACPW          103 
#define VAU_MACNW          107 
#define VAU_ACC            37 
#define VAU_ILMULL         42 
#define VAU_ILMULH         47 
#define VAU_ADDCI          50 
#define VAU_SUBCI          54 
#define VAU_AVG            87 
#define VAU_CMB            62 
#define VAU_SWZ            39 
#define VAU_ALIGN          63 
#define VAU_IROL           67 
#define VAU_SHL            71 
#define VAU_SHR            75 
#define VAU_SHD            79 
#define VAU_ONES           70 
#define VAU_ABS            74 
#define VAU_BSR            78 
#define VAU_BSF            82 
#define VAU_SHFL           113 
#define VAU_DEAL           117 
#define VAU_REGX           86 
#define VAU_NOT            97 
#define VAU_AND            98 
#define VAU_OR             102 
#define VAU_XOR            106 
#define VAU_XORT           110 
#define VAU_RVRS           101 
#define VAU_ALIGNVEC       91 
#define VAU_GMUL           30 
#define VAU_ACS            111 
#define IAU_ADD        3 
#define IAU_SUB        7 
#define IAU_MUL        11 
#define IAU_AVG        34 
#define IAU_ADDSU      35 
#define IAU_SUBSU      43 
#define IAU_MULSU      27 
#define IAU_MAXU       2 
#define IAU_MINU       10 
#define IAU_ADDSI      39 
#define IAU_SUBSI      47 
#define IAU_MULSI      31 
#define IAU_MAXI       6 
#define IAU_MINI       14 
#define IAU_LMULL      18 
#define IAU_LMULH      22 
#define IAU_ADDCI      26 
#define IAU_SUBCI      30 
#define IAU_ROL        23 
#define IAU_SHL        51 
#define IAU_SHR        59 
#define IAU_ONES       13 
#define IAU_IABS       17 
#define IAU_BSR        33 
#define IAU_BSF        37 
#define IAU_DECCMP     25 
#define IAU_INCS       15 
#define IAU_NOT        65 
#define IAU_AND        66 
#define IAU_OR         70 
#define IAU_XOR        74 
#define IAU_XORT       69 
#define IAU_RVRS       73 
#define IAU_CLAMP      67 
#define IAU_ALIGN      71 
#define IAU_FINS       75 
#define IAU_FEXTI      83 
#define IAU_FEXTU      87 
#define IAU_FINSJ      78 
#define IAU_FEXTJI     82 
#define IAU_FEXTJU     86 
#define IAU_GMUL32     95 
#define LSU_LD         1 
#define LSU_ST         17 
#define LSU_LDINC      2 
#define LSU_STINC      18 
#define LSU_LDL        7 
#define LSU_STL        23 
#define LSU_LDXV       5 
#define LSU_STXV       21 
#define LSU_LDCV       6 
#define LSU_STCV       22 
#define LSU_LDIL       10 
#define LSU_LDIH       14 
#define LSU_ISWZV4     62 
#define LSU_ISWZ4      LSU_ISWZV4 
#define LSU_ISWZV4B    61 
#define LSU_ISWZC4     57 
#define LSU_ISWZV8     63 
#define LSU_LDO        11 
#define LSU_STO        27 
#define LSU_LDD        9 
#define LSU_STD        25 
#define LSU_LDA        3 
#define LSU_STA        19 
#define LSU_PFA        31 
#define LSU_PFO        30 
#define CMU_CMII       2 
#define CMU_CMSS       6 
#define CMU_CMVV       10 
#define CMU_CMZ        1 
#define CMU_CPII       18 
#define CMU_CPSS       22 
#define CMU_CPVV       26 
#define CMU_CPIS       34 
#define CMU_CPSI       38 
#define CMU_CPSV       42 
#define CMU_CPVS       46 
#define CMU_CPIV       50 
#define CMU_CPVI       54 
#define CMU_CPIVR      58 
#define CMU_CPSVR      37 
#define CMU_CMTI       45 
#define CMU_CPIT       49 
#define CMU_CPTI       53 
#define CMU_TP4        57 
#define CMU_CPVRC      98  
#define CMU_CPVCR      102  
#define CMU_VROT       14 
#define CMU_VILV       11 
#define CMU_VSIGN      7 
#define CMU_VSZM       3 
#define CMU_VSRT       41 
#define CMU_CMASK      33 
#define CMU_LUTI       66 
#define CMU_LUTU       70  
#define CMU_LUTR       74 
#define CMU_LUTW       78 
#define CMU_SWPSI      15 
#define CMU_CMFS         61 
#define CMU_SHLIV      9 
#define CMU_SHLSV      13 
#define CMU_CPZ         5 
#define CMU_MAX         19 
#define CMU_MIN         23 
#define CMU_CLAMPAB     27 
#define CMU_CLAMP         31 
#define CMU_VNZ         106 
#define CMU_DBS1       118 
#define CMU_DBS2       122 
#define CMU_BMEX       114 
#define CMU_DREGX      29 
#define PEU_NOP        0 
#define PEU_HOLD       1 
#define PEU_ANDACC     9 
#define PEU_ORACC      13 
#define PEU_PC1I       38   
#define PEU_PC1S       42   
#define PEU_PC1C       46   
#define PEU_PCNS       3   
#define PEU_PCNC       7   
#define PEU_PCXS       11   
#define PEU_PCXC       15                
#define PEU_PVEC       47 
#define PEU_PEN4       51 
#define PEU_PEN8       55 
#define PEU_PEN8C      59    
#define PEU_PCCI       19       
#define PEU_PCXX       23 
#define BRU_JMP        5   
#define BRU_SWP        9   
#define BRU_BRA        3    
#define BRU_RPS        6   
#define BRU_RPL        14      
#define BRU_RPI        10                    
#define BRU_RPIM       1              
#define BRU_SWIC       17   
#define BRU_SWIH       21   
#define BRU_RFB        2 
#define SMD     2   // SAU multiplier delay
#define SAD     2   // SAU adder delay
// #define FP16DE  7   // FP16 divider execute cycles (1 shared with decode)
// #define FP16DL  FP16DE+1  // + writeback
// #define FP32DD  10  // FP32 divider delay
// #define I16DE   7   // INT16 divider execute cycles (1 shared with decode)
// #define I16DL   I16DE+1  // + writeback
// #define I32DD   12  // INT32 divider delat
#define RNE  0  
#define RZ   1 
#define RPI  2 
#define RMI  3 
#define IRP  11     // Number of read ports
#define IWP  6      // Number of write ports
#define IAL  5      // IRF address length
#define SRP  6     // Number of read ports
#define SWP  4      // Number of write ports
#define SAL  5      // IRF address length
#define VRP  6     // Number of read ports
#define VWP  4      // Number of write ports
#define VAL  5      // IRF address length
#define IOL  7      // IAU opcode length
#define IME  1      // Maximum execute latency
#define IPL  IME+1  // Maximum execute latency + writeback
#define LOL  6 
#define LFL  24     // LSU instruction maximum field length
#define CLD  3      // CMX load delay
#define FLD  CLD+2  // Full LSU load delay
#define WINDOW_A     0x1c000000 
#define WINDOW_B     0x1d000000 
#define WINDOW_C     0x1e000000 
#define WINDOW_D     0x1f000000 
#define SLICE_LOCAL  0x0ff00000 
#define POL  6 
#define SOL  7 
#define SFL  9      // SAU instruction maximum field length
#define SME  14     // Maximum execute cycles
#define SPC  SME+1  // Total cycles = max execute cycles + writeback cycle
#define COL  7 
#define CME  1      // Maximum execute latency
#define CPL  CME+1  // Maximum execute latency + writeback
#define TP4L   1 
#define TP4R   0 
#define ROT4L  2 
#define ROT4R  3 
#define MODE8   2 
#define MODE16  1 
#define MODE32  0 
#define SIZE8   2 
#define SIZE16  1 
#define SIZE32  0 
#define FP32  0 
#define FP16  1 
#define E0  0 
#define E1  1 
#define E2  2 
#define E3  3 
#define DAW       12           // DCU-APB address width
#define SVUC_ADDR_WIDTH  7 
#define IOVFU  5 
#define IOVFP  4 
#define IOVFN  3 
#define ISATP  2 
#define ISATN  1 
#define IDIV0  0 
#define FP32_CF_0_5   0x3F000000 
#define FP32_CF_1_0   0x3F800000 
#define FP32_CF_2_0   0x40000000 
#define FP32_CF_3_0   0x40400000 
#define FP32_CF_SQT2  0x3FB504F3 
#define FP32_CF_RQT2  0x3F3504F3 
#define FP32_CF_PI    0x40490FDB 
#define FP32_CF_E     0x402DF854 
#define FP16_CF_0_5   0x3800 
#define FP16_CF_1_0   0x3C00 
#define FP16_CF_2_0   0x4000 
#define FP16_CF_3_0   0x4200 
#define FP16_CF_SQT2  0x3DA8 
#define FP16_CF_RQT2  0x39A8 
#define FP16_CF_PI    0x4248 
#define FP16_CF_E     0x4170 
#define SVU_OCR        0x000       // Operation Control Register 
#define SVU_OSR        0x004       // Operation Status Register                                      
#define SVU_STR        SVU_OSR 
#define SVU_ICR        0x008       // Interrupt Control Register                   
#define SVU_ICR        0x008       // Interrupt Control Register                   
#define SVU_ISR        0x00C       // Interrupt Status Register                    
#define SVU_IRR        0x010       // Interrupt Clear Register                     
#define SVU_FXE        0x014       // Floating-point Exception Trap Enable Register
#define SVU_FXF        0x018       // Floating-point Exception Flag Register 
#define SVU_IXE        0x01C       // Integer Exception Trap Enable Register
#define SVU_IXF        0x020       // Integer Exception Flag Register 
#define SVU_PTR        0x024       // Instruction Pointer Overwrite Register                              
#define SVU_IHR        0x028       // Interrupt halt Register                            
#define SVU_BTH        0x050       // Branch Trace History Register                
#define SVU_PTH        0x054       // Predicate Trace History 
#define SVU_INEXT      0x05C
#define SVU_IH0        0x060       // Instruction History 0 (current instruction)
#define SVU_IH1        0x064 
#define SVU_IH2        0x068 
#define SVU_IH3        0x06C 
#define SVU_IH4        0x070 
#define SVU_IH5        0x074 
#define SVU_IH6        0x078 
#define SVU_IH7        0x07C 
#define SVU_IH8        0x080 
#define SVU_IH9        0x084 
#define SVU_IH10       0x088 
#define SVU_IH11       0x08C 
#define SVU_IH12       0x090 
#define SVU_IH13       0x094 
#define SVU_IH14       0x098 
#define SVU_IH15       0x09c       
#define SVU_BRUCTL     0x0e0  
#define SVU_IDCCRC     0x0e4     
#define TRF_BASE       0x100       // Base address of TRF
#define IRF_BASE       0x180       // Base address of IRF
#define SRF_BASE       0x200       // Base address of SRF
#define VRF_BASE       0x300       // Base address of VRF  
#define SVU_DCR        0x800       // Debug Control Register                       
#define SVU_DSR        0x804       // Debug Status Register                        
#define SVU_IBA0       0x808       // Instruction Breakpoint 0 Address Register
#define SVU_IBC0       0x80C       // Instruction Breakpoint 0 Control Register                        
#define SVU_IBA1       0x810       // Instruction Breakpoint 1 Address Register
#define SVU_IBC1       0x814       // Instruction Breakpoint 1 Control Register    
#define SVU_DBA0       0x818       // Data Breakpoint 0 Address Register
#define SVU_DBD0       0x81C       // Data Breakpoint 0 Data Register
#define SVU_DBC0       0x820       // Data Breakpoint 0 Control Register
#define SVU_DBA1       0x824       // Data Breakpoint 1 Address Register
#define SVU_DBD1       0x828       // Data Breakpoint 1 Data Register
#define SVU_DBC1       0x82C       // Data Breakpoint 1 Control Register
#define SVU_PC0        0x830       // Performance Counter 0 
#define SVU_PCC0       0x834       // Performance Counter 0 Control Register
#define SVU_PC1        0x838       // Performance Counter 1 
#define SVU_PCC1       0x83c       // Performance Counter 1 Control Register 
#define SVU_DBRK_BYTE  0x840 

								   // Raw access to IDC fifo address records.. 
								   // IDC Fifo is 16 X 64 bits (128 bytes)
#define SVU_IDC_A0     0x900       // 
#define SVU_IDC_A1     0x904 
#define SVU_IDC_A2     0x908 
#define SVU_IDC_A3     0x90C 
#define SVU_IDC_A4     0x910 
#define SVU_IDC_A5     0x914 
#define SVU_IDC_A6     0x918 
#define SVU_IDC_A7     0x91C 
#define SVU_IDC_A8     0x920 
#define SVU_IDC_A9     0x924 
#define SVU_IDC_A10    0x928 
#define SVU_IDC_A11    0x92C 
#define SVU_IDC_A12    0x930 
#define SVU_IDC_A13    0x934 
#define SVU_IDC_A14    0x938 
#define SVU_IDC_A15    0x93C       
#define SVU_IDC_RWPTR  0x940        // Read write pointer

#define SVU_SLICE_OFFSET  0x10000

//#define USE_IDC_NOPS
// Code in here is super-simple... so everything is in the header file as inline functions

//OCR Relevant bits
#define OCR_TRACE_ENABLE	0x0800
#define OCR_IDC_128		0x0020
#define OCR_STOP_GO 		0x0004
#define OCR_HOI 		0x0001
//OSR Relevant bits
#define OSR_CMX_LSU1_STALL	0x10100
#define OSR_CMX_LSU0_STALL	0x08100
#define OSR_CMX_INST_STALL	0x04100
#define OSR_LSU1_STALL		0x02100
#define OSR_LSU0_STALL		0x01100
#define OSR_SVU_STALL    	0x00100
#define OSR_IDC_FIFO_STALL	0x00900
#define OSR_BRU_MISS_STALL	0x00500
#define OSR_BRU_STARVE_STALL	0x00300
#define OSR_SWI_HALT		0x00008
#define OSR_DEBUG_HALT		0x00004
#define OSR_INT_HALT		0x00002
#define OSR_SVU_OCR_MASK	0x00001
//ICR Relevant bits
#define ICR_SWI_ENABLE		0x20
#define ICR_DMA_ENABLE      0x10
#define ICR_RES_OPCODE		0x08
#define	ICR_INV_OPCODE		0x04
#define ICR_I_AE		0x02
#define ICR_FP_AE		0x01
//ISR Relevant bits
#define ISR_SWI_TAG(a)		    ((a>>13) & 0x1F)
#define ISR_SWIH_SWIC(a)        (a & 0x1000)
#define ISR_DMA(a)              (a & 0x0800)
#define ISR_CMU_RESERVED(a)	    (a & 0x400)
#define ISR_IAU_RESERVED(a)	    (a & 0x200)
#define ISR_SAU_RESERVED(a)	    (a & 0x100)
#define ISR_VAU_RESERVED(a)	    (a & 0x080)
#define ISR_LSU1_RESERVED(a)	(a & 0x040)
#define ISR_LSU0_RESERVED(a)	(a & 0x020)
#define ISR_BRU_RESERVED(a)	    (a & 0x010)
#define ISR_PEU_RESERVED(a)	    (a & 0x008)
#define ISR_INV_OPCODE(a)	    (a & 0x004)
#define ISR_I_AE(a)		        (a & 0x002)
#define ISR_FP_AE(a)		    (a & 0x001)

//DCR Relevant bits
#define DCR_STEP_NUM_MASK  ( 0x3E    )

#define DCR_HOB			   ( 0x400   )
#define DCR_PH			   ( 0x200   )
#define DCR_IRQ			   ( 0x100   )
#define DCR_HALT		   ( 0x080   )
#define DCR_STEP(a)		   ( (((a << 1) & DCR_STEP_NUM_MASK) | 0x40) )
#define DCR_DBGE		   ( 0x001   )

// Bitfields for the DCU DSR register
#define DCU_DSR_DM 		(0x001)
#define DCU_DSR_SG 		(0x002)
#define DCU_DSR_SBP     (0x008)
#define DCU_DSR_IBP0    (0x010)
#define DCU_DSR_IBP1    (0x020)
#define DCU_DSR_DBP0    (0x040)
#define DCU_DSR_DBP1    (0x080)
#define DCU_DSR_EXT     (0x100)
#define DCU_DSR_BT      (0x200)

// Cause of break bitfields. We use same bits as DSR register but
// these defines are to support software reported cause of break. i.e. What we tell the user
// It has additional fields such as SingleStep
#define COB_ASYNC	(0x002)
#define COB_SWBP    (0x008)
#define COB_IBP0    (0x010)
#define COB_IBP1    (0x020)
#define COB_DBP0    (0x040)
#define COB_DBP1    (0x080)
#define COB_EXT     (0x100)
#define COB_BT      (0x200)
#define COB_SS      (0x400)
#define COB_SWIH    (0x800)


// Bit fields for L1 Cache Control register
#define L1C_PFL1          (0x000)
#define L1C_PFL1_LOCK     (0x001)
#define L1C_PFL2          (0x002)
#define L1C_FLUSH_LINE    (0x003)
#define L1C_INVAL_LINE    (0x004)
#define L1C_INVAL_ALL     (0x005)
#define L1C_FLUSH_ALL     (0x006)
#define L1C_FLUSHINV_ALL  (0x007)


#define ASYNC_CONTINUE  (0x0)
#define SW_BP_INST      (0xF9)

#define SET_BITS(address, oldValue, bits)	SET_REG_WORD(address, oldValue | bits)
#define CLEAR_BITS(address, oldValue, bits)	SET_REG_WORD(address, oldValue & ~bits)

#define MAX_SW_BPS      (20)

//FIFO registers
#define FIFO0(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5000
#define FIFO1(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5008
#define	FIFO2(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5010
#define	FIFO3(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5018
#define	FIFO_FRONT_NB(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5040
#define	FIFO_BACK_NB(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5048
#define	FIFO_RD_FRONT(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5050
#define	FIFO_WR_BACK(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5058
#define	FIFO_SRC_ALL(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5060
#define	FIFO_SRC_FRONT(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5068
#define	FIFO_SRC_BACK(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5070
#define	FIFO_NUM_VALID(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5080
#define	FIFO_NUM_FREE(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5088
#define	FIFO_CLEAR(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5090
#define	FIFO_STATUS(a)		SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + 0x5098

typedef struct
{
	u32 address;
	u32 shaveNumber;
	u32 value;
} SW_BP_TYPE;

#define DCU_OCR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_OCR
#define DCU_IRR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IRR
#define DCU_ICR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_ICR
#define DCU_ISR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_ISR
#define DCU_OSR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_OSR
#define DCU_DCR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DCR
#define DCU_DSR(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DSR
#define DCU_DBC0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBC0
#define DCU_DBA0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBA0
#define DCU_DBD0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBD0
#define DCU_DBC1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBC1
#define DCU_DBA1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBA1
#define DCU_DBD1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBD1

#define DCU_IBC0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IBC0
#define DCU_IBA0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IBA0

#define DCU_IBC1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IBC1
#define DCU_IBA1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IBA1

#define DCU_PCC0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_PCC0
#define DCU_PCC1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_PCC1
#define DCU_PC0(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_PC0
#define DCU_PC1(a)	SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_PC1

#define DCU_SVU_PTR(a)   SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_PTR
#define DCU_SVU_INEXT(a) SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_INEXT
#define DCU_SVU_DBRK_BYTE(a) SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_DBRK_BYTE

#define DCU_SVU_IDCA(a,b) (SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IDC_A0 + (4 * b))
#define DCU_SVU_RWPTR(a)  (SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IDC_RWPTR       )

#define IDC_FIFO_ADDR_MASK  (0xFFFFFFF8)

// Instruction history
#define DCU_SVU_IH(a,b) (SVU_CTRL_ADDR[a] + SLC_OFFSET_SVU + SVU_IH0 + (4 * b))

#define DCU_SVU_TRF(shave,regNum)   (SVU_CTRL_ADDR[shave] + SLC_OFFSET_SVU + TRF_BASE + (4 *( regNum ))) //  32 * 32 bits
#define DCU_SVU_IRF(shave,regNum)   (SVU_CTRL_ADDR[shave] + SLC_OFFSET_SVU + IRF_BASE + (4 *( regNum ))) //  32 * 32 bits
#define DCU_SVU_SRF(shave,regNum)   (SVU_CTRL_ADDR[shave] + SLC_OFFSET_SVU + SRF_BASE + (4 *( regNum ))) //  32 * 32 bits
#define DCU_SVU_VRF(shave,regNum)   (SVU_CTRL_ADDR[shave] + SLC_OFFSET_SVU + VRF_BASE + (4 *( regNum ))) //  32 * 32 bits

// Register offsets
#define SVU_SLICE_RST        (0x0)
#define SVU_SLICE_CTRL       (0x4)
#define SVU_SLICE_DBG        (0x8)

// SLICE_RST Bitfields
#define SVU_RESET            (0x01)
#define DCU_RESET            (0x02)
#define SLICE_RESET          (0x04) // Top Level Mux Logic
#define TLB_RESET            (0x08)
#define SLICE_FIFO_RESET     (0x10)
#define L1_CACHE_RESET       (0x20)
#define DMA_RESET            (0x40)
#define TMU_RESET            (0x80)

#define DCU_SVU_SLICE_RST(a)   (SVU_CTRL_ADDR[a] + SLC_OFFSET_TOP + SVU_SLICE_RST)
#define DCU_SVU_SLICE_CTRL(a)  (SVU_CTRL_ADDR[a] + SLC_OFFSET_TOP + SVU_SLICE_CTRL)
#define DCU_SVU_SLICE_DBG(a)   (SVU_CTRL_ADDR[a] + SLC_OFFSET_TOP + SVU_SLICE_DBG)

// These next 2 only kept in case there is any legacy code that uses them
//static u32 SVUN_WPE         = 8;
//static u32 SVUN_ALL_SVUS    = 9;
// Instruction Breakpoint macros
#define IBP_BP0          (u32)0
#define IBP_BP1          (u32)1
#define IBP_INCLUSIVE_BP (u32)2
#define IBP_EXCLUSIVE_BP (u32)3

#define DBP_BP0          (u32)0
#define DBP_BP1          (u32)1
#define DBP_INCLUSIVE_BP (u32)2
#define DBP_EXCLUSIVE_BP (u32)3

#define DCU_IBP_EN       (0x1)

#define DCU_DBP_EN       (0x1)

// Performance Counter macros
#define PC_STALL_EN    (u32)0x00000001
#define PC_EX_IN_EN    (u32)0x00000002
#define PC_CLK_CYC_EN  (u32)0x00000004
#define PC_BR_TAKEN_EN (u32)0x00000008
#define PC_IBP0_EN     (u32)0x00000010
#define PC_IBP1_EN     (u32)0x00000020
#define PC_DBP0_EN     (u32)0x00000040
#define PC_DBP1_EN     (u32)0x00000080

// L1 Cache
#define SHAVE_CACHE_CTRL(shv_num)         SVU_CTRL_ADDR[shv_num] + SLC_OFFSET_CACHE + SHV_CACHE_CTRL
#define SHAVE_CACHE_DBG_TXN_ADDR(shv_num) SVU_CTRL_ADDR[shv_num] + SLC_OFFSET_CACHE + SHV_CACHE_DBG_TXN_ADDR
#define SHAVE_CACHE_DBG_TXN_TYPE(shv_num) SVU_CTRL_ADDR[shv_num] + SLC_OFFSET_CACHE + SHV_CACHE_DBG_TXN_TYPE
#define SHAVE_CACHE_STATUS(shv_num)       SVU_CTRL_ADDR[shv_num] + SLC_OFFSET_CACHE + SHV_CACHE_STATUS
#define SLICE_DBG(shv_num)                SVU_CTRL_ADDR[shv_num] + (u32)0x00000008
#define SHAVE_CACHE_RAM_BASE(shv_num)     SVU_CTRL_ADDR[shv_num] + (u32)0x00008000
#define SHAVE_CACHE_TAG_BASE(shv_num)     SVU_CTRL_ADDR[shv_num] + (u32)0x0000C000

#define ENABLE_L1_CACHE(svu_num)          SET_REG_WORD (SVU_CTRL_ADDR[svu_num]+SLC_OFFSET_CACHE, 0x00000001);
#define DISABLE_L1_CACHE(svu_num)         SET_REG_WORD (SVU_CTRL_ADDR[svu_num]+SLC_OFFSET_CACHE, 0x00000000);

#define SLICE_WIN_CPC(shv_num)            SVU_CTRL_ADDR[shv_num] + (u32)0x00000020
#define SLICE_NWN_CPC(shv_num)            SVU_CTRL_ADDR[shv_num] + (u32)0x00000024

//TRF Register Offsets
typedef enum
{
	P_GPR 		= 0x1f,
	P_GPI 		= 0x1E,
	P_SVID 		= 0x1C,
	P_CFG 		= 0x1B,
	G_GALOIS 	= 0x15,
	B_SREPS 	= 0x14,
	C_CMU1 		= 0x13,
	C_CMU0 		= 0x12,
	C_CSI 		= 0x11,
	F_AE 		= 0x10,
	I_AE 		= 0x0F,
	L_ENDIAN 	= 0x0E,
	V_ACC3 		= 0x0D,
	V_ACC2 		= 0x0C,
	V_ACC1 		= 0x0B,
	V_ACC0 		= 0x0A,
	S_ACC 		= 0x09,
	V_STATE 	= 0x08,
	S_STATE 	= 0x07,
	I_STATE 	= 0x06,
	B_RFB 		= 0x05,
	B_STATE 	= 0x04,
	B_MREPS 	= 0x03,
	B_LEND 		= 0x02,
	B_LBEG 		= 0x01,
	B_IP 		= 0x00,
	RESERVED 	= 0x16
}tTRFRegister;

#endif /* _SVU_INC_ */
