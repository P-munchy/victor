/*  This is a Leon Default Linker script 
 *  Should be used as an included linker script in top level scripts 
 *
 *  Addresses defined in common/drivers/system/config/memmap.S
 */

SECTIONS {
  /* Locating Leon code in top 4 slices for now, to avoid conflicts with shave local slices, soon it will move to DRAM */
  . = __CMX_SLICE_C;
  .sys.traps ALIGN(0x1000) : {
    *(.sys.text.traps)
  }
  .sys.text ALIGN(4) : { 
    *(.sys.text.start)
  }
  .text ALIGN(4) : { *(.text*) }
  .sys.rodata ALIGN(4) : { *(.sys.rodata*) }
  .rodata ALIGN(4) : { *(.rodata*) }
  .data ALIGN(4) : { *(.data*) }

  .bss (NOLOAD) : { 
    . = ALIGN(8);
    __bss_start = . ;
    *(.bss*) *(COMMON)
    . = ALIGN(8);
    __bss_end = . ;
  }
  __EMPTY_RAM = ALIGN(4);
  
  .init_text ALIGN(4) : {
    *(.init_text*)
    __init_text_end = ALIGN(4);
  }

  /* End of CMX is at 2MB boundary (end of slice 16)*/
  __CMX_TOP = __CMX_PHYS + (2 * 1024 * 1024);
  
  . = __CMX_TOP - 0x100;
  _LEON_STACK_POINTER = .;
  .sys.bss ALIGN(4) (NOLOAD) : { 
    . = ALIGN(8);
    __sys_bss_start = . ;
    *(.sys.bss*) 
    . = ALIGN(8);
    __sys_bss_end = . ;
  }
  
  __MIN_STACK_SIZE = DEFINED( __MIN_STACK_SIZE ) ? __MIN_STACK_SIZE : 3584;
  __MIN_INIT_STACK_SIZE = DEFINED( __MIN_INIT_STACK_SIZE ) ? __MIN_INIT_STACK_SIZE : 1024;
  
  __STACK_SIZE = ABSOLUTE(__sys_bss_start - __bss_end);
  ASSERT( __STACK_SIZE > __MIN_STACK_SIZE , "Leon Code + data too big. Stack space left is smaller than the required minimum (3.5 KB)!")
  
  __INIT_STACK_SIZE = ABSOLUTE(__sys_bss_start - __init_text_end);
  ASSERT( __INIT_STACK_SIZE > __MIN_INIT_STACK_SIZE , "Stack available to the init code is smaller than the specified minimum (which by default is 1 KB)!")
  
  /DISCARD/ : {
    *(.stab .stabstr .comment .gnu.attributes)
  }
  
  /* 
   * locate the special sections in correct place  
   * These sections are required to ensure Myriad is initialized correctly and must be loaded first   
   */	
  .l2.mode    0x800F0000 : { KEEP(*(.l2.mode)) }           /* L2 cache mode                */
  .cmx.ctrl   0xAE000020 : { KEEP(*(.cmx.ctrl)) }          /* CMX default layout           */
  .winregs.S0 0x20f00010 : { KEEP(*(.winregs.S0)) }       /* Window registers for Shave 0 */
  .winregs.S1 0x20f10010 : { KEEP(*(.winregs.S1)) }       /* Window registers for Shave 1 */
  .winregs.S2 0x20f20010 : { KEEP(*(.winregs.S2)) }       /* Window registers for Shave 2 */
  .winregs.S3 0x20f30010 : { KEEP(*(.winregs.S3)) }       /* Window registers for Shave 3 */
  .winregs.S4 0x20f40010 : { KEEP(*(.winregs.S4)) }       /* Window registers for Shave 4 */
  .winregs.S5 0x20f50010 : { KEEP(*(.winregs.S5)) }       /* Window registers for Shave 5 */
  .winregs.S6 0x20f60010 : { KEEP(*(.winregs.S6)) }       /* Window registers for Shave 6 */
  .winregs.S7 0x20f70010 : { KEEP(*(.winregs.S7)) }       /* Window registers for Shave 7 */
  .winregs.S8 0x20f80010 : { KEEP(*(.winregs.S8)) }       /* Window registers for Shave 8 */
  .winregs.S9 0x20f90010 : { KEEP(*(.winregs.S9)) }       /* Window registers for Shave 9 */
  .winregs.S10 0x20fA0010 : { KEEP(*(.winregs.S10)) }       /* Window registers for Shave 10 */
  .winregs.S11 0x20fB0010 : { KEEP(*(.winregs.S11)) }       /* Window registers for Shave 11 */
  
}
