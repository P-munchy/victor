#VRML_SIM V7.3.0 utf8

PROTO Bridge [
  field SFString name "Bridge"
  field SFFloat width  .0745
  field SFFloat height .003 
  field SFString type "Long" 
  
  field SFFloat guideHeight .0055 # make higher than reality for the sake of the simulator?
  field SFFloat guideWidth .005
  
  field SFFloat baseHeight .012 # the underside
  field SFFloat baseWidth  .068
   
  field SFFloat rampLength .000
  
  field SFFloat tongueDepth     .0025  # a little less than Platform grooveDepth
  field SFFloat tongueThickness .003   # a little less than Platform grooveWidth 
  field SFFloat grooveThickness .00325 # a little more than Platform wallThickness
  
  field SFFloat markerSize .030
  field SFVec3f translation 0 0 0
  field SFRotation rotation 0 0 1 0
  
  field SFFloat density 250
  field SFColor color .2 .2 .2
  field SFBool  useWhiteMarkerBackgrounds TRUE
]
{
Solid {

  # Set up fields based on Long or Short type bridge
  %{    
    if fields.type == "Long" then
      baseLength = 0.200
      markerURL = "symbols/bridgeSun"
    elseif fields.type == "Short" then
      baseLength = 0.100
      markerURL = "symbols/bridgeMoon"
    else 
      error("Bridge type must be Long or Short.")
    end
    
    length = baseLength + 2*fields.grooveThickness + 2*fields.tongueThickness
    
    leftMarkerURL   = markerURL .. "Left.png"
    rightMarkerURL  = markerURL .. "Right.png"
    middleMarkerURL = markerURL .. "Middle.png"
  }%

  name IS name
  model IS type
  translation IS translation
  rotation IS rotation
  contactMaterial "cmat_floor"
  children [
        
#    Transform {
#      rotation 0 0 1 -1.5708
#      translation %{=-length/2 + fields.markerSize}% 0 %{=fields.height}%
#      children [
        VisionMarker {
          rotation 1 0 0 -1.5708
          translation %{=-length/2 + fields.markerSize}% 0 %{=fields.height}%
          image "%{=leftMarkerURL}%"
        }
#      ]
#    }
    
#    Transform {
#      rotation 0 0 1 1.5708
#      translation %{=length/2 - fields.markerSize}% 0 %{=fields.height}%
#      children [
        VisionMarker {
          rotation 1 0 0 -1.5708      
          translation %{=length/2 - fields.markerSize}% 0 %{=fields.height}%
          image "%{=rightMarkerURL}%"
        }
#      ]
#    }
    
    VisionMarker {
      rotation 1 0 0 1.5708
      translation 0 0 %{=fields.height}%
      image "%{=middleMarkerURL}%"
    }
    
    DEF BridgeShape Group {
      children [
      
        # Main driving surface
        Transform {
          translation 0 0 %{=fields.height/2}%
          children [
            Shape {
              appearance Appearance {
                material Material {
                  diffuseColor IS color
                }
              }
              geometry Box {
                size %{=length}% %{=fields.width}% %{=fields.height}%
              }
            }
          ]
        }
        
        # Underside box ("Base")
        Transform {
          translation 0 0 %{=-fields.baseHeight/2}%
          children [
            Shape {
              appearance Appearance {
                material Material {
                  diffuseColor IS color
                }
              }
              geometry Box {
                size %{=baseLength}% %{=fields.baseWidth}% %{=fields.baseHeight}%
              }
            }
          ]
        }
                
        # Left Guide
        Transform {
          translation 0 %{=-fields.width/2 + fields.guideWidth/2}% %{=fields.guideHeight/2 + fields.height}%
          children [
            DEF WheelGuide Shape {
              appearance Appearance {
                material Material {
                  diffuseColor IS color
                }
              }
              geometry Box {
                size %{=length}%   %{=fields.guideWidth}%  %{=fields.guideHeight}%
              }
            }
          ]
        }
        
        # Right Guide
        Transform {
          translation 0 %{=fields.width/2 - fields.guideWidth/2}% %{=fields.guideHeight/2 + fields.height}%
          children [
            USE WheelGuide
          ]
        }
        
        # Tongue 1 (that fits in Platform groove)
        Transform {
          translation %{=-length/2+fields.tongueThickness/2}% 0 %{=-fields.tongueDepth/2}%
          children [
            DEF TONGUE_SHAPE Shape {
              appearance Appearance {
                material Material {
                  diffuseColor IS color
                }
              }
              geometry Box {
                size %{=fields.tongueThickness}%   %{=fields.width}%  %{=fields.tongueDepth}%
              }
            }
          ]
        }
        
        # Tongue 2
        Transform {
          translation %{=length/2-fields.tongueThickness/2}% 0 %{=-fields.tongueDepth/2}%
          children [
            USE TONGUE_SHAPE
          ]
        }
        
        %{ if fields.rampLength > 0 then }%
        Transform {
          translation %{=-length/2}% 0 0
          rotation 0 0 1 3.1415
          children [
            DEF Ramp Shape {
              appearance Appearance {
                material Material {
                  diffuseColor IS color 
                }
              }
              geometry IndexedFaceSet {
                coord Coordinate {
                  point [
                    0                       %{=-fields.width/2}% 0                   # 0
                    %{=fields.rampLength}%  %{=-fields.width/2}% 0                   # 1
                    0                       %{=-fields.width/2}% %{=fields.height}%  # 2
                    0                       %{= fields.width/2}% 0                   # 3
                    %{=fields.rampLength}%  %{= fields.width/2}% 0                   # 4
                    0                       %{= fields.width/2}% %{=fields.height}%  # 5
                  ]
                }
                coordIndex [
                  0, 1, 2, -1, 
                  0, 3, 4, 1, -1, 
                  1, 4, 5, 2, -1, 
                  3, 5, 4, -1, 
                  0, 2, 5, 3
                ]
              }
            } # RampShape Shape
          ] # Transform children
        } # Transform
        
        Transform {
          translation %{=length/2}% 0 0
          children [
            USE Ramp
          ]
        }
        %{ end }%
        
      ] # BridgeShape Children
    } # BridgeShape Group
    
    # Transform { 
#       translation %{=-length/2 + fields.lipSize/2}% 0 0
#       rotation    1 0 0 3.1415
#       children [
#         Connector {
#           isLocked TRUE
#           autoLock TRUE
#           snap     FALSE
#           tensileStrength 0.1
#           shearStrength   2
#         }
#       ]
#     }
#     
#     Transform {
#       translation %{=length/2 - fields.lipSize/2}% 0 0
#       rotation    1 0 0 3.1415
#       children [
#         Connector {
#           isLocked TRUE
#           autoLock TRUE
#           snap     FALSE
#           tensileStrength 0.1
#           shearStrength   2
#         }
#       ]
#     }

  ] # Block Children
  
  boundingObject USE BridgeShape
  
  physics Physics {
    density IS density
  }
} # Solid (the actual bridge)

  
} # PROTO


