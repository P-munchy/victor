#include <string.h>

#include "nrf.h"
#include "nrf_gpio.h"

#include "rtos.h"
#include "timer.h"
#include "lights.h"
#include "backpack.h"
#include "radio.h"

// 8-bit pseudo log scale.  Gives us full bright
const uint8_t AdjustTableFull[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,
  0x05, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,
  0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2B, 0x2C,
  0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x43, 0x45, 0x47, 0x4A, 0x4C, 0x4F,
  0x51, 0x54, 0x57, 0x59, 0x5C, 0x5F, 0x62, 0x64, 0x67, 0x6A, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C,
  0x7F, 0x82, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x97, 0x9A, 0x9C, 0x9F, 0xA2, 0xA5, 0xA7, 0xAA,
  0xAD, 0xAF, 0xB2, 0xB4, 0xB7, 0xB9, 0xBB, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
  0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 0xDE, 0xDF, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,
  0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xED, 0xEE, 0xEF, 0xEF, 0xF0, 0xF1, 0xF1, 0xF2,
  0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8,
  0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFC,
  0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
  0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF
};

const uint8_t AdjustTableRed[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 
  0x09, 0x09, 0x09, 0x09, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 0x0c, 0x0d, 0x0e, 0x0f, 0x0f, 0x10, 0x11, 
  0x12, 0x12, 0x13, 0x14, 0x15, 0x15, 0x17, 0x18, 0x18, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x20, 0x21, 
  0x22, 0x24, 0x25, 0x27, 0x28, 0x2a, 0x2b, 0x2d, 0x2e, 0x30, 0x32, 0x33, 0x35, 0x37, 0x39, 0x3b, 
  0x3c, 0x3f, 0x41, 0x42, 0x45, 0x47, 0x49, 0x4b, 0x4d, 0x4f, 0x51, 0x54, 0x56, 0x58, 0x5a, 0x5d, 
  0x5f, 0x61, 0x63, 0x66, 0x68, 0x6a, 0x6c, 0x6f, 0x71, 0x73, 0x75, 0x77, 0x79, 0x7b, 0x7d, 0x7f, 
  0x81, 0x83, 0x85, 0x87, 0x89, 0x8a, 0x8c, 0x8e, 0x90, 0x91, 0x93, 0x94, 0x96, 0x97, 0x99, 0x9a, 
  0x9c, 0x9d, 0x9e, 0x9f, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xab, 
  0xac, 0xad, 0xae, 0xae, 0xaf, 0xb0, 0xb1, 0xb1, 0xb1, 0xb2, 0xb3, 0xb3, 0xb4, 0xb4, 0xb4, 0xb5, 
  0xb5, 0xb6, 0xb6, 0xb7, 0xb7, 0xb7, 0xb7, 0xb8, 0xb8, 0xb8, 0xb9, 0xb9, 0xb9, 0xba, 0xba, 0xba, 
  0xba, 0xba, 0xba, 0xba, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbd, 
  0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 
  0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbf, 0xbf
};

const uint8_t AdjustTableGreen[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 
  0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 
  0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x10, 0x11, 0x12, 0x12, 0x13, 0x14, 0x15, 0x15, 0x17, 0x18, 0x18, 
  0x19, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x24, 0x25, 0x26, 0x27, 0x29, 0x2a, 0x2c, 
  0x2d, 0x2f, 0x30, 0x32, 0x33, 0x35, 0x37, 0x38, 0x39, 0x3b, 0x3d, 0x3f, 0x40, 0x42, 0x44, 0x45, 
  0x47, 0x49, 0x4a, 0x4c, 0x4e, 0x4f, 0x51, 0x53, 0x54, 0x56, 0x57, 0x59, 0x5b, 0x5c, 0x5d, 0x5f, 
  0x61, 0x62, 0x64, 0x65, 0x66, 0x68, 0x69, 0x6a, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 
  0x75, 0x76, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7c, 0x7d, 0x7e, 0x7f, 0x7f, 0x80, 0x80, 
  0x81, 0x81, 0x82, 0x83, 0x83, 0x84, 0x84, 0x85, 0x85, 0x85, 0x86, 0x86, 0x87, 0x87, 0x87, 0x88, 
  0x88, 0x88, 0x88, 0x89, 0x89, 0x89, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x8b, 0x8b, 
  0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 
  0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 
  0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8f, 0x8f
};

static const int TOTAL_LIGHTS = NUM_BACKPACK_LEDS + MAX_ACCESSORIES * NUM_PROP_LIGHTS;
static const int LIGHTS_PER_WORD = 4;

static LightState lightStates[TOTAL_LIGHTS];
static uint32_t lightPhases[TOTAL_LIGHTS];
static uint8_t lightValues[TOTAL_LIGHTS][LIGHTS_PER_WORD];

static inline void AlphaBlend(uint8_t* color, const uint16_t onColor, const uint16_t offColor, const uint16_t alpha)
{
  const uint8_t onRed  = UNPACK_RED(onColor);
  const uint8_t onGrn  = UNPACK_GREEN(onColor);
  const uint8_t onBlu  = UNPACK_BLUE(onColor);
  const uint8_t offRed = UNPACK_RED(offColor);
  const uint8_t offGrn = UNPACK_GREEN(offColor);
  const uint8_t offBlu = UNPACK_BLUE(offColor);
  const uint16_t invAlpha = 0x100 - alpha;

  color[0] = (onRed * alpha + offRed * invAlpha) >> 8;
  color[1] = (onGrn * alpha + offGrn * invAlpha) >> 8;
  color[2] = (onBlu * alpha + offBlu * invAlpha) >> 8;
  color[3] = UNPACK_IR(alpha >= 0x80 ? onColor : offColor);
}

static inline void UnpackColor(uint8_t* rgbi, uint16_t newColor) {
  uint8_t colors[] = { UNPACK_COLORS(newColor) };
  memcpy(rgbi, colors, sizeof(colors));
}

static void CalculateLEDColor(uint8_t* rgbi,
                       const LightState& ledParams,
                       const uint32_t currentTime,
                       uint32_t& phaseTime)
{
  // Constant color
  if (ledParams.onFrames == 255 || (ledParams.onColor == ledParams.offColor)) {
    UnpackColor(rgbi, ledParams.onColor);
    return ;
  }

  uint32_t phase = currentTime - phaseTime;
  
  if (phase <= ledParams.transitionOnFrames) // Still turning on
  {
    AlphaBlend(rgbi, ledParams.onColor, ledParams.offColor, phase * 0x100 / ledParams.transitionOnFrames);
    return ;
  }
  else if (phase <= (ledParams.transitionOnFrames + ledParams.onFrames))
  {
    UnpackColor(rgbi, ledParams.onColor);
    return ;
  }
  else if (phase <= (ledParams.transitionOnFrames + ledParams.onFrames + ledParams.transitionOffFrames))
  {
    const uint32_t offPhase = phase - (ledParams.transitionOnFrames + ledParams.onFrames);
    AlphaBlend(rgbi, ledParams.offColor, ledParams.onColor, offPhase * 0x100 / ledParams.transitionOffFrames);
    return ;
  }
  else if (phase <= (ledParams.transitionOnFrames + ledParams.onFrames + ledParams.transitionOffFrames + ledParams.offFrames))
  {
    UnpackColor(rgbi, ledParams.offColor);
    return ;
  }

  UnpackColor(rgbi, ledParams.offColor);
  phaseTime = currentTime;
}

void Lights::init() {
	memset(lightStates, 0, sizeof(lightStates));
	
	RTOS_Task* task = RTOS::schedule(Lights::manage, RADIO_TOTAL_PERIOD);
	RTOS::setPriority(task, RTOS_LOW_PRIORITY);
}

void Lights::manage(void* userdata) {
  uint32_t time = GetFrame();
	
	for (int i = 0; i < TOTAL_LIGHTS; i++) {
		CalculateLEDColor(lightValues[i], lightStates[i], time, lightPhases[i]);
	}
}

void Lights::update(int index, const LightState* ledParams) {
	memcpy(&lightStates[index], ledParams, sizeof(LightState));
	lightPhases[index] = 0;
}

uint8_t* Lights::state(int idx) {
	return lightValues[idx];
}
