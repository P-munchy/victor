#include <string.h>

#include "lights.h"
#include "nrf.h"
#include "nrf_gpio.h"

#include "debug.h"

#include "rtos.h"
#include "hardware.h"
#include "hal/portable.h"

#include "anki/cozmo/robot/spineData.h"

extern GlobalDataToHead g_dataToHead;
extern GlobalDataToBody g_dataToBody;

// 8-bit pseudo log scale.  Gives us full bright
static const uint8_t AdjustTableFull[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,
  0x05, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,
  0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2B, 0x2C,
  0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x43, 0x45, 0x47, 0x4A, 0x4C, 0x4F,
  0x51, 0x54, 0x57, 0x59, 0x5C, 0x5F, 0x62, 0x64, 0x67, 0x6A, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C,
  0x7F, 0x82, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x97, 0x9A, 0x9C, 0x9F, 0xA2, 0xA5, 0xA7, 0xAA,
  0xAD, 0xAF, 0xB2, 0xB4, 0xB7, 0xB9, 0xBB, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
  0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 0xDE, 0xDF, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,
  0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xED, 0xEE, 0xEF, 0xEF, 0xF0, 0xF1, 0xF1, 0xF2,
  0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8,
  0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFC,
  0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
  0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF
};

static const uint8_t AdjustTableRed[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
  0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 
  0x09, 0x09, 0x09, 0x09, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 0x0c, 0x0d, 0x0e, 0x0f, 0x0f, 0x10, 0x11, 
  0x12, 0x12, 0x13, 0x14, 0x15, 0x15, 0x17, 0x18, 0x18, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x20, 0x21, 
  0x22, 0x24, 0x25, 0x27, 0x28, 0x2a, 0x2b, 0x2d, 0x2e, 0x30, 0x32, 0x33, 0x35, 0x37, 0x39, 0x3b, 
  0x3c, 0x3f, 0x41, 0x42, 0x45, 0x47, 0x49, 0x4b, 0x4d, 0x4f, 0x51, 0x54, 0x56, 0x58, 0x5a, 0x5d, 
  0x5f, 0x61, 0x63, 0x66, 0x68, 0x6a, 0x6c, 0x6f, 0x71, 0x73, 0x75, 0x77, 0x79, 0x7b, 0x7d, 0x7f, 
  0x81, 0x83, 0x85, 0x87, 0x89, 0x8a, 0x8c, 0x8e, 0x90, 0x91, 0x93, 0x94, 0x96, 0x97, 0x99, 0x9a, 
  0x9c, 0x9d, 0x9e, 0x9f, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xab, 
  0xac, 0xad, 0xae, 0xae, 0xaf, 0xb0, 0xb1, 0xb1, 0xb1, 0xb2, 0xb3, 0xb3, 0xb4, 0xb4, 0xb4, 0xb5, 
  0xb5, 0xb6, 0xb6, 0xb7, 0xb7, 0xb7, 0xb7, 0xb8, 0xb8, 0xb8, 0xb9, 0xb9, 0xb9, 0xba, 0xba, 0xba, 
  0xba, 0xba, 0xba, 0xba, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbd, 
  0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 
  0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbf, 0xbf
};

static const uint8_t AdjustTableGreen[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 
  0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 
  0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x10, 0x11, 0x12, 0x12, 0x13, 0x14, 0x15, 0x15, 0x17, 0x18, 0x18, 
  0x19, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x24, 0x25, 0x26, 0x27, 0x29, 0x2a, 0x2c, 
  0x2d, 0x2f, 0x30, 0x32, 0x33, 0x35, 0x37, 0x38, 0x39, 0x3b, 0x3d, 0x3f, 0x40, 0x42, 0x44, 0x45, 
  0x47, 0x49, 0x4a, 0x4c, 0x4e, 0x4f, 0x51, 0x53, 0x54, 0x56, 0x57, 0x59, 0x5b, 0x5c, 0x5d, 0x5f, 
  0x61, 0x62, 0x64, 0x65, 0x66, 0x68, 0x69, 0x6a, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 
  0x75, 0x76, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7c, 0x7d, 0x7e, 0x7f, 0x7f, 0x80, 0x80, 
  0x81, 0x81, 0x82, 0x83, 0x83, 0x84, 0x84, 0x85, 0x85, 0x85, 0x86, 0x86, 0x87, 0x87, 0x87, 0x88, 
  0x88, 0x88, 0x88, 0x89, 0x89, 0x89, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x8b, 0x8b, 
  0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 
  0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 
  0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8f, 0x8f
};

  
static const uint8_t ChannelIndex[] = { 
  0, 2, 1,
  6, 7, 8,
  3, 4, 5,
  9, 11, 10
};

static const uint8_t* GammaSet[] = { 
  AdjustTableFull, AdjustTableFull, AdjustTableFull, // Full bright turn signals
  AdjustTableRed, AdjustTableGreen, AdjustTableFull, // Full bright turn signals
  AdjustTableRed, AdjustTableGreen, AdjustTableFull, // Full bright turn signals
  AdjustTableRed, AdjustTableGreen, AdjustTableFull, // Full bright turn signals
};

// Define charlie wiring here:
static const charliePlex_s RGBLightPins[] =
{
  // anode, cath_red, cath_gree, cath_blue
  {PIN_LED1, {PIN_LED2, PIN_LED3, PIN_LED4}},
  {PIN_LED2, {PIN_LED1, PIN_LED3, PIN_LED4}},
  {PIN_LED3, {PIN_LED1, PIN_LED2, PIN_LED4}},
  {PIN_LED4, {PIN_LED1, PIN_LED2, PIN_LED3}}
};

// Timing constants
static const int tickDivider = 4;

// Charlieplexing magic constants
static const int numChannels = 4;
static const int numLightsPerChannel = 3;
static const int numLights = numChannels*numLightsPerChannel;

static uint8_t colors[numLights]; 
static int channel = 0;

static void lights_off() {
  nrf_gpio_cfg_input(PIN_LED1, NRF_GPIO_PIN_NOPULL);
  nrf_gpio_cfg_input(PIN_LED2, NRF_GPIO_PIN_NOPULL);
  nrf_gpio_cfg_input(PIN_LED3, NRF_GPIO_PIN_NOPULL);
  nrf_gpio_cfg_input(PIN_LED4, NRF_GPIO_PIN_NOPULL);
}

// Start all pins as input
void Lights::init()
{
  // Power on the peripheral
  NRF_RTC1->POWER = 1;
  
  // Stop the RTC so it can be reset
  NRF_RTC1->TASKS_STOP = 1;
  NRF_RTC1->TASKS_CLEAR = 1;
  
  // NOTE: When using the LFCLK with prescaler = 0, we only get 30.517 us
  // resolution. This should still provide enough for this chip/board.  
  NRF_RTC1->PRESCALER = 0;
  
  // Start the RTC
  NRF_RTC1->TASKS_START = 1;

  // Configure the interrupts
  NRF_RTC1->EVTENSET = RTC_EVTENCLR_TICK_Msk;
  NRF_RTC1->INTENSET = RTC_INTENSET_TICK_Msk;

  NVIC_SetPriority(RTC1_IRQn, 3);
  NVIC_EnableIRQ(RTC1_IRQn);

  lights_off();
  
  const uint16_t init[4] = {0,0,0,0};
  Lights::setLights(init);
}

void Lights::setLights(const uint16_t* lights) {
  uint8_t newState[] = {
    UNPACK_COLORS(lights[0]),
    UNPACK_COLORS(lights[1]),
    UNPACK_COLORS(lights[2]),
    UNPACK_COLORS(lights[3])
  };

  for (int i = 0; i < sizeof(newState); i++) {
    colors[ChannelIndex[i]] = GammaSet[i][newState[i]];
  }
}

extern "C" void RTC1_IRQHandler() {
  #ifndef RADIO_TIMING_TEST

  static uint8_t pwm[numLights];
  static int divider = 0;

  if (!NRF_RTC1->EVENTS_TICK)
    return ;

  NRF_RTC1->EVENTS_TICK = 0;

  if (++divider < tickDivider)
    return ;
  else
    divider = 0;
  
  // Blacken everything out
  lights_off();

  // Setup anode
  nrf_gpio_pin_set(RGBLightPins[channel].anode);
  nrf_gpio_cfg_output(RGBLightPins[channel].anode);
  
  // Set lights for current charlie channel
  for (int i = 0, index = channel * numLightsPerChannel; i < numLightsPerChannel; i++, index++)
  {
    int overflow = pwm[index] + (int)colors[index];
    pwm[index] = overflow;
    
    if (overflow > 0xFF) {
      nrf_gpio_pin_clear(RGBLightPins[channel].cathodes[i]);
      nrf_gpio_cfg_output(RGBLightPins[channel].cathodes[i]);
    }
  }
  
  channel = (channel + 1) % numChannels;
  #endif
}
