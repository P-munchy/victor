#include <string.h>

extern "C" {
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "nrf_sdm.h"

  #include "softdevice_handler.h"  
}
  
#include "hardware.h"

#include "rtos.h"
#include "battery.h"
#include "motors.h"
#include "head.h"
#include "debug.h"
#include "timer.h"
#include "lights.h"
#include "tests.h"
#include "radio.h"
#include "crypto.h"
#include "bluetooth.h"

#include "boot/sha1.h"

#include "bootloader.h"

#include "anki/cozmo/robot/spineData.h"
#include "anki/cozmo/robot/rec_protocol.h"

#define SET_GREEN(v, b)  (b ? (v |= 0x00FF00) : (v &= ~0x00FF00))

__attribute((at(0x20003FFC))) static uint32_t MAGIC_LOCATION = 0;

GlobalDataToHead g_dataToHead;
GlobalDataToBody g_dataToBody;

extern void EnterRecovery(void) {
  Motors::teardown();

  MAGIC_LOCATION = SPI_ENTER_RECOVERY;
  NVIC_SystemReset();
}

extern "C" void HardFault_Handler(void) {
  // This stops the system from locking up for now completely temporary.
  NVIC_SystemReset();
}

void MotorsUpdate(void* userdata) {
	//Battery::setHeadlight(g_dataToBody.flags & BODY_FLASHLIGHT);
	//RTOS::kick(WDOG_UART);
}

static void EMERGENCY_FIX(void) {
  uint32_t* BOOLOADER_ADDR = (uint32_t*)(NRF_UICR_BASE + 0x14);
  const uint32_t ACTUAL_ADDR = 0x1F000;

  if (*BOOLOADER_ADDR != 0xFFFFFFFF) return ;
  
  NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
  while (NRF_NVMC->READY == NVMC_READY_READY_Busy) ;
  *BOOLOADER_ADDR = ACTUAL_ADDR;
  while (NRF_NVMC->READY == NVMC_READY_READY_Busy) ;
  NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
  while (NRF_NVMC->READY == NVMC_READY_READY_Busy) ;
  
  NVIC_SystemReset();
}

#define SECRET2 {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}
#define SECRET1 {16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1}

static DiffieHellman dh = {
	&DEFAULT_DIFFIE_GROUP,
	&DEFAULT_DIFFIE_GENERATOR,
	0xCAFE, // Our pin number
	SECRET1	// THIS WILL NOT BE NESSESSARY IN THE FUTURE, GENERATED BY DH ENGINE
};
static uint8_t dh_key[AES_KEY_LENGTH];

static void PartialDH(CryptoTask* task) {
	static const uint8_t secret2[] = SECRET2;
	
	DiffieHellman* dh = (DiffieHellman*)task->input;
	memcpy(dh->secret, secret2, sizeof(dh->secret));
}

static void FinishDH(CryptoTask* task) {
	// THIS IS WHEN THE TASK HAS FINISHED
}

static void TestDH(void) {
	static const CryptoTask x1 = {
		CRYPTO_START_DIFFIE_HELLMAN,
		PartialDH,
		&dh,		
		NULL		// No output used
	};
	
	static const CryptoTask x2 = {
		CRYPTO_FINISH_DIFFIE_HELLMAN,
		FinishDH,
		&dh,
		&dh_key,
		sizeof(dh_key)
	};
	
	Crypto::execute(&x1);
	Crypto::execute(&x2);
}

int main(void)
{
  // Initialize the SoftDevice handler module.
  SOFTDEVICE_HANDLER_INIT(NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM, NULL);

  // This makes sure the bootloader address is set, will not be in the final version
  EMERGENCY_FIX();

  // Initialize our scheduler
  RTOS::init();

  // Initialize all the early stuff
  Lights::init();
  Battery::init();
  Crypto::init();
  Bluetooth::init();
  Radio::init();
  Timer::init();

  Motors::init(); // NOTE: THIS CAUSES COZMO TO NOT ADVERTISE. SEEMS TO BE PPI/TIMER RELATED

  Battery::powerOn();

  // We use the RNG in places during init
  //Radio::shutdown();
  //Bluetooth::advertise(); 

  Bluetooth::shutdown();
  Radio::advertise();
  
  // Let the test fixtures run, if nessessary
  #ifdef RUN_TESTS
	TestFixtures::run();
	#else
  Head::init();
	#endif

	Timer::start();

	TestDH();

  // Run forever, because we are awesome.
  for (;;) {
    __asm { WFI };
		Crypto::manage();
  }
}
