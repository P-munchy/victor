// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/appConnectMessage.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/appConnectMessage.clad

#ifndef __CLAD_ROBOT_INTERFACE_APP_CONNECT_MESSAGE_H__
#define __CLAD_ROBOT_INTERFACE_APP_CONNECT_MESSAGE_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

namespace RobotInterface {

// ENUM APFlags
enum {
  AP_AP_HIDDEN      = 0x1,        // 1
  AP_AP_DHCP_START  = 0x2,        // 2
  AP_AP_DHCP_GW     = 0x4,        // 4
  AP_ROUTE          = 0x8,        // 8
  AP_PHY_B          = 0x10,       // 16
  AP_PHY_G          = 0x20,       // 32
  AP_PHY_N          = 0x30,       // 48
  AP_PHY_MASK       = 0x30,       // 48
  AP_PHY_SHIFT      = 4,          // 4
  AP_STATION        = 0x40,       // 64
  AP_SOFTAP         = 0x80,       // 128
  AP_STA_AP         = 0xc0,       // 192
  AP_OPMODE_MSK     = 0xc0,       // 192
  AP_OPMODE_SHIFT   = 6,          // 6
  AP_STA_DHCP       = 0x100,      // 256
  AP_BSSID          = 0x200,      // 512
  AP_FIXED_RATE_STA = 0x400,      // 1024
  AP_FIXED_RATE_AP  = 0x800,      // 2048
  AP_FIXED_RATE_ALL = 0xc00,      // 3072
  AP_FIXED_RATE_MSK = 0xc00,      // 3072
  AP_FIXED_SHIFT    = 10,         // 10
  AP_LIMIT_RATES    = 0x1000,     // 4096
  AP_STA_AUTOCON    = 0x2000,     // 8192
  AP_STA_RECON      = 0x4000,     // 16384
  AP_STA_HIDDEN     = 0x8000,     // 32768
  AP_AP_DHCP_STOP   = 0x10000,    // 65536
  AP_APPLY_SETTINGS = 0xc0000000, // 3221225472
};
typedef uint32_t APFlags;

#ifdef CLAD_DEBUG
const char* APFlagsToString(APFlags m);
#endif // CLAD_DEBUG

// ENUM APConfigStringID
enum {
  AP_AP_SSID_0,     // 0
  AP_AP_SSID_1,     // 1
  AP_AP_PSK_0,      // 2
  AP_AP_PSK_1,      // 3
  AP_AP_PSK_2,      // 4
  AP_AP_PSK_3,      // 5
  AP_STA_SSID_0,    // 6
  AP_STA_SSID_1,    // 7
  AP_STA_PSK_0,     // 8
  AP_STA_PSK_1,     // 9
  AP_STA_PSK_2,     // 10
  AP_STA_PSK_3,     // 11
  AP_STA_BSSID,     // 12
  AP_STA_HOSTNAME,  // 13
  AP_SESSION_TOKEN, // 14
};
typedef uint8_t APConfigStringID;

#ifdef CLAD_DEBUG
const char* APConfigStringIDToString(APConfigStringID m);
#endif // CLAD_DEBUG

// MESSAGE AppConnectConfigString
struct AppConnectConfigString
{
  Anki::Cozmo::RobotInterface::APConfigStringID id;
  uint8_t data[16];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 17;
  static const uint32_t MIN_SIZE = 17;
  inline uint32_t Size() const { return 17; }
  
};

// MESSAGE AppConnectConfigFlags
struct AppConnectConfigFlags
{
  Anki::Cozmo::RobotInterface::APFlags apFlags;
  uint32_t apDHCPLeaseTime;
  uint16_t beaconInterval;
  uint8_t rfMax_dBm;
  uint8_t channel;
  uint8_t maxConnections;
  uint8_t authMode;
  uint8_t apMinMaxSupRate;
  uint8_t wifiFixedRate;
  uint8_t staDHCPMaxTry;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 17;
  static const uint32_t MIN_SIZE = 17;
  inline uint32_t Size() const { return 17; }
  
};

// MESSAGE AppConnectConfigIPInfo
struct AppConnectConfigIPInfo
{
  uint32_t robotIp;
  uint32_t robotNetmask;
  uint32_t robotGateway;
  uint8_t ifId;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 13;
  static const uint32_t MIN_SIZE = 13;
  inline uint32_t Size() const { return 13; }
  
};

// MESSAGE AppConnectGetRobotIP
struct AppConnectGetRobotIP
{
  uint8_t ifId;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 1;
  static const uint32_t MIN_SIZE = 1;
  inline uint32_t Size() const { return 1; }
  
};

// MESSAGE AppConnectRobotIP
struct AppConnectRobotIP
{
  uint32_t robotIp;
  uint32_t robotNetmask;
  uint32_t robotGateway;
  uint8_t macaddr[6];
  uint8_t ifId;
  bool fromDHCP;
  bool success;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 21;
  static const uint32_t MIN_SIZE = 21;
  inline uint32_t Size() const { return 21; }
  
};

// MESSAGE AppConnectConfigResult
struct AppConnectConfigResult
{
  int32_t result;
  uint8_t command;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 5;
  static const uint32_t MIN_SIZE = 5;
  inline uint32_t Size() const { return 5; }
  
};

// MESSAGE WiFiOff
struct WiFiOff
{
  bool sleep;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 1;
  static const uint32_t MIN_SIZE = 1;
  inline uint32_t Size() const { return 1; }
  
};

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_ROBOT_INTERFACE_APP_CONNECT_MESSAGE_H__
