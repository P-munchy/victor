// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/bleMessages.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/bleMessages.clad

#ifndef __CLAD_ROBOT_INTERFACE_BLE_MESSAGES_H__
#define __CLAD_ROBOT_INTERFACE_BLE_MESSAGES_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

namespace BLE {

// ENUM BluetoothConstants
enum {
  COZMO_FRAME_DATA_LENGTH = 16,
};
typedef uint32_t BluetoothConstants;

#ifdef CLAD_DEBUG
const char* BluetoothConstantsToString(BluetoothConstants m);
#endif // CLAD_DEBUG

// ENUM BluetoothConnectionState
enum {
  BLE_CONNECTED                    = 0,
  BLE_DISCONNECTED_NORMALLY        = 1,
  BLE_CANNOT_CONFIGURE_CONN_PARAMS = 2,
};
typedef uint32_t BluetoothConnectionState;

#ifdef CLAD_DEBUG
const char* BluetoothConnectionStateToString(BluetoothConnectionState m);
#endif // CLAD_DEBUG

// ENUM PayloadFlags
enum {
  START_OF_MESSAGE  = 1,
  END_OF_MESSAGE    = 2,
  MESSAGE_ENCRYPTED = 4,
};
typedef uint8_t PayloadFlags;

#ifdef CLAD_DEBUG
const char* PayloadFlagsToString(PayloadFlags m);
#endif // CLAD_DEBUG

// STRUCTURE Frame
struct Frame
{
  uint8_t flags;
  uint8_t data[16];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 17;
  static const uint32_t MIN_SIZE = 17;
  inline uint32_t Size() const { return 17; }
  
};

// MESSAGE Disconnect
struct Disconnect
{
  uint32_t reason;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 4;
  static const uint32_t MIN_SIZE = 4;
  inline uint32_t Size() const { return 4; }
  
};

// MESSAGE ConnectionState
struct ConnectionState
{
  uint32_t state;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 4;
  static const uint32_t MIN_SIZE = 4;
  inline uint32_t Size() const { return 4; }
  
};

// MESSAGE DataReceived
struct DataReceived
{
  Anki::Cozmo::BLE::Frame frame;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 17;
  static const uint32_t MIN_SIZE = 17;
  inline uint32_t Size() const { return 17; }
  
};

// MESSAGE SendData
struct SendData
{
  Anki::Cozmo::BLE::Frame frame;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 17;
  static const uint32_t MIN_SIZE = 17;
  inline uint32_t Size() const { return 17; }
  
};

} // namespace BLE

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_ROBOT_INTERFACE_BLE_MESSAGES_H__
