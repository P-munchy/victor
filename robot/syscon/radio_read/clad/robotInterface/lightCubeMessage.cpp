// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/lightCubeMessage.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/lightCubeMessage.clad

#include "clad/robotInterface/lightCubeMessage.h"


namespace Anki {

namespace Cozmo {

namespace BlockMessages {

bool Anki::Cozmo::BlockMessages::LightCubeMessage::IsValid() const
{
    switch(tag) {
    case Tag_flashID:
      return this->flashID.IsValid();
    case Tag_setCubeLights:
      return this->setCubeLights.IsValid();
    case Tag_setObjectBeingCarried:
      return this->setObjectBeingCarried.IsValid();
    case Tag_discovered:
      return this->discovered.IsValid();
    case Tag_moved:
      return this->moved.IsValid();
    case Tag_stopped:
      return this->stopped.IsValid();
    case Tag_tapped:
      return this->tapped.IsValid();
    default:
      return false;
    }
}

uint32_t Anki::Cozmo::BlockMessages::LightCubeMessage::Size() const
{
  uint32_t result = 1;
    switch(tag) {
    case Tag_flashID:
      result += this->flashID.Size(); // FlashObjectIDs
      break;
    case Tag_setCubeLights:
      result += this->setCubeLights.Size(); // CubeLights
      break;
    case Tag_setObjectBeingCarried:
      result += this->setObjectBeingCarried.Size(); // ObjectBeingCarried
      break;
    case Tag_discovered:
      result += this->discovered.Size(); // ObjectDiscovered
      break;
    case Tag_moved:
      result += this->moved.Size(); // ObjectMoved
      break;
    case Tag_stopped:
      result += this->stopped.Size(); // ObjectStoppedMoving
      break;
    case Tag_tapped:
      result += this->tapped.Size(); // ObjectTapped
      break;
    default:
      break;
    }
  return result;
}

#ifdef CLAD_DEBUG
const char* Anki::Cozmo::BlockMessages::LightCubeMessage::TagToString(Tag t)
{
  switch(t) {
  case Tag_flashID:
    return "flashID";
  case Tag_setCubeLights:
    return "setCubeLights";
  case Tag_setObjectBeingCarried:
    return "setObjectBeingCarried";
  case Tag_discovered:
    return "discovered";
  case Tag_moved:
    return "moved";
  case Tag_stopped:
    return "stopped";
  case Tag_tapped:
    return "tapped";
  default:
    return "INVALID";
  }
}
#endif // CLAD_DEBUG

} // namespace BlockMessages

} // namespace Cozmo

} // namespace Anki

