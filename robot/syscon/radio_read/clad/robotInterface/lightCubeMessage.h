// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/lightCubeMessage.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/lightCubeMessage.clad

#ifndef __CLAD_ROBOT_INTERFACE_LIGHT_CUBE_MESSAGE_H__
#define __CLAD_ROBOT_INTERFACE_LIGHT_CUBE_MESSAGE_H__

#include <stdbool.h>
#include <stdint.h>

#include "clad/robotInterface/messageFromActiveObject.h"
#include "clad/robotInterface/messageToActiveObject.h"

namespace Anki {

namespace Cozmo {

namespace BlockMessages {

// UNION LightCubeMessage
struct LightCubeMessage
{
  enum {
    Tag_flashID,                     // 0
    Tag_setCubeLights,               // 1
    Tag_setObjectBeingCarried,       // 2
    Tag_discovered,                  // 3
    Tag_moved,                       // 4
    Tag_stopped,                     // 5
    Tag_tapped,                      // 6
    INVALID                    = 255
  };
  typedef uint8_t Tag;
  
  /**** Padding added to preserve alignment ****/
  char _padding[3];
  
  Tag tag;
  
  union {
    Anki::Cozmo::FlashObjectIDs flashID;
    Anki::Cozmo::CubeLights setCubeLights;
    Anki::Cozmo::ObjectBeingCarried setObjectBeingCarried;
    Anki::Cozmo::ObjectDiscovered discovered;
    Anki::Cozmo::ObjectMoved moved;
    Anki::Cozmo::ObjectStoppedMoving stopped;
    Anki::Cozmo::ObjectTapped tapped;
  };
  
  LightCubeMessage(): tag(INVALID) { }
  
  /**** Cast to byte buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(&this->tag); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(&this->tag); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const;
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 37;
  static const uint32_t MIN_SIZE = 5;
  uint32_t Size() const;
  
#ifdef CLAD_DEBUG
  static const char* TagToString(Tag t);
#endif // CLAD_DEBUG
};

} // namespace BlockMessages

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_ROBOT_INTERFACE_LIGHT_CUBE_MESSAGE_H__
