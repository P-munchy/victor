// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/messageEngineToRobot.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/messageEngineToRobot.clad

#include "clad/robotInterface/messageEngineToRobot.h"


namespace Anki {

namespace Cozmo {

bool CubeSlots::IsValid() const
{
    return (factory_id_length <= 7);
}

uint32_t CubeSlots::Size() const
{
  uint32_t result = 0;
  // factory_id
  result += 4; // uint_32 (factory_id_length)
  result += 4 * this->factory_id_length; // uint_32
  return result;
}

namespace RobotInterface {

#ifdef CLAD_DEBUG
const char* BodyRadioModeToString(BodyRadioMode m)
{
  switch(m) {
    case BODY_BLUETOOTH_OPERATING_MODE:
      return "BODY_BLUETOOTH_OPERATING_MODE";
    case BODY_ACCESSORY_OPERATING_MODE:
      return "BODY_ACCESSORY_OPERATING_MODE";
    case BODY_DTM_OPERATING_MODE:
      return "BODY_DTM_OPERATING_MODE";
    case BODY_IDLE_OPERATING_MODE:
      return "BODY_IDLE_OPERATING_MODE";
    case BODY_LOW_POWER_OPERATING_MODE:
      return "BODY_LOW_POWER_OPERATING_MODE";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

bool RTIPVersionInfo::IsValid() const
{
    return (true);
}

uint32_t RTIPVersionInfo::Size() const
{
  uint32_t result = 0;
  // version
  result += 4; // uint_32
  // date
  result += 4; // uint_32
  // description
  result += 1; // uint_8 (description_length)
  result += 1 * this->description_length; // uint_8
  return result;
}

bool NVReadResultToBody::IsValid() const
{
    return (this->entry.IsValid());
}

uint32_t NVReadResultToBody::Size() const
{
  uint32_t result = 0;
  // entry
  result += this->entry.Size(); // NVStorageBlob
  return result;
}

#ifdef CLAD_DEBUG
const char* ToRobotAddressSpaceToString(ToRobotAddressSpace m)
{
  switch(m) {
    case GLOBAL_INVALID_TAG:
      return "GLOBAL_INVALID_TAG";
    case TO_BODY_START:
      return "TO_BODY_START";
    case TO_BODY_END:
      return "TO_BODY_END";
    case TO_RTIP_START:
      return "TO_RTIP_START";
    case TO_RTIP_END:
      return "TO_RTIP_END";
    case ANIM_RT_START:
      return "ANIM_RT_START";
    case ANIM_RT_END:
      return "ANIM_RT_END";
    case TO_WIFI_START:
      return "TO_WIFI_START";
    case TO_WIFI_END:
      return "TO_WIFI_END";
    case TO_ENG_START:
      return "TO_ENG_START";
    case TO_ENG_UNREL:
      return "TO_ENG_UNREL";
    case TO_ENG_END:
      return "TO_ENG_END";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

bool Anki::Cozmo::RobotInterface::EngineToRobot::IsValid() const
{
    switch(tag) {
    case Tag_setBackpackLights:
      return this->setBackpackLights.IsValid();
    case Tag_setCubeLights:
      return this->setCubeLights.IsValid();
    case Tag_setPropSlot:
      return this->setPropSlot.IsValid();
    case Tag_killBodyCode:
      return this->killBodyCode.IsValid();
    case Tag_setBodyRadioMode:
      return this->setBodyRadioMode.IsValid();
    case Tag_nvReadToBody:
      return this->nvReadToBody.IsValid();
    case Tag_nvOpResultToBody:
      return this->nvOpResultToBody.IsValid();
    case Tag_sendDTMCommand:
      return this->sendDTMCommand.IsValid();
    case Tag_setHeadlight:
      return this->setHeadlight.IsValid();
    case Tag_setCubeGamma:
      return this->setCubeGamma.IsValid();
    case Tag_bodyRestart:
      return this->bodyRestart.IsValid();
    case Tag_getBodyVersion:
      return this->getBodyVersion.IsValid();
    case Tag_bleRecvHelloMessage:
      return this->bleRecvHelloMessage.IsValid();
    case Tag_bleEnterPairing:
      return this->bleEnterPairing.IsValid();
    case Tag_bleSendHelloMessage:
      return this->bleSendHelloMessage.IsValid();
    case Tag_bleEncodedKey:
      return this->bleEncodedKey.IsValid();
    case Tag_robotIpInfo:
      return this->robotIpInfo.IsValid();
    case Tag_wifiCfgResult:
      return this->wifiCfgResult.IsValid();
    case Tag_enterRecoveryMode:
      return this->enterRecoveryMode.IsValid();
    case Tag_radioConnected:
      return this->radioConnected.IsValid();
    case Tag_drive:
      return this->drive.IsValid();
    case Tag_driveCurvature:
      return this->driveCurvature.IsValid();
    case Tag_moveLift:
      return this->moveLift.IsValid();
    case Tag_moveHead:
      return this->moveHead.IsValid();
    case Tag_liftHeight:
      return this->liftHeight.IsValid();
    case Tag_headAngle:
      return this->headAngle.IsValid();
    case Tag_headAngleUpdate:
      return this->headAngleUpdate.IsValid();
    case Tag_setBodyAngle:
      return this->setBodyAngle.IsValid();
    case Tag_turnInPlaceAtSpeed:
      return this->turnInPlaceAtSpeed.IsValid();
    case Tag_stop:
      return this->stop.IsValid();
    case Tag_clearPath:
      return this->clearPath.IsValid();
    case Tag_appendPathSegLine:
      return this->appendPathSegLine.IsValid();
    case Tag_appendPathSegArc:
      return this->appendPathSegArc.IsValid();
    case Tag_appendPathSegPointTurn:
      return this->appendPathSegPointTurn.IsValid();
    case Tag_trimPath:
      return this->trimPath.IsValid();
    case Tag_executePath:
      return this->executePath.IsValid();
    case Tag_dockWithObject:
      return this->dockWithObject.IsValid();
    case Tag_abortDocking:
      return this->abortDocking.IsValid();
    case Tag_placeObjectOnGround:
      return this->placeObjectOnGround.IsValid();
    case Tag_absLocalizationUpdate:
      return this->absLocalizationUpdate.IsValid();
    case Tag_startControllerTestMode:
      return this->startControllerTestMode.IsValid();
    case Tag_setControllerGains:
      return this->setControllerGains.IsValid();
    case Tag_dockingErrorSignal:
      return this->dockingErrorSignal.IsValid();
    case Tag_setCarryState:
      return this->setCarryState.IsValid();
    case Tag_imuRequest:
      return this->imuRequest.IsValid();
    case Tag_syncTime:
      return this->syncTime.IsValid();
    case Tag_imageRequest:
      return this->imageRequest.IsValid();
    case Tag_flashObjectIDs:
      return this->flashObjectIDs.IsValid();
    case Tag_setObjectBeingCarried:
      return this->setObjectBeingCarried.IsValid();
    case Tag_enablePickupParalysis:
      return this->enablePickupParalysis.IsValid();
    case Tag_enableLiftPower:
      return this->enableLiftPower.IsValid();
    case Tag_setMotionModelParams:
      return this->setMotionModelParams.IsValid();
    case Tag_powerState:
      return this->powerState.IsValid();
    case Tag_getPropState:
      return this->getPropState.IsValid();
    case Tag_enableReadToolCodeMode:
      return this->enableReadToolCodeMode.IsValid();
    case Tag_enableTestStateMessage:
      return this->enableTestStateMessage.IsValid();
    case Tag_setHeadDeviceLock:
      return this->setHeadDeviceLock.IsValid();
    case Tag_startMotorCalibration:
      return this->startMotorCalibration.IsValid();
    case Tag_setIMUCalibration:
      return this->setIMUCalibration.IsValid();
    case Tag_generateTestTone:
      return this->generateTestTone.IsValid();
    case Tag_writeNV:
      return this->writeNV.IsValid();
    case Tag_readNV:
      return this->readNV.IsValid();
    case Tag_wipeAllNV:
      return this->wipeAllNV.IsValid();
    case Tag_rtipVersion:
      return this->rtipVersion.IsValid();
    case Tag_setRTTO:
      return this->setRTTO.IsValid();
    case Tag_abortAnimation:
      return this->abortAnimation.IsValid();
    case Tag_animAudioSample:
      return this->animAudioSample.IsValid();
    case Tag_animAudioSilence:
      return this->animAudioSilence.IsValid();
    case Tag_animHeadAngle:
      return this->animHeadAngle.IsValid();
    case Tag_animLiftHeight:
      return this->animLiftHeight.IsValid();
    case Tag_animEvent:
      return this->animEvent.IsValid();
    case Tag_animEventToRTIP:
      return this->animEventToRTIP.IsValid();
    case Tag_animFaceImage:
      return this->animFaceImage.IsValid();
    case Tag_animBackpackLights:
      return this->animBackpackLights.IsValid();
    case Tag_animBodyMotion:
      return this->animBodyMotion.IsValid();
    case Tag_animEndOfAnimation:
      return this->animEndOfAnimation.IsValid();
    case Tag_animStartOfAnimation:
      return this->animStartOfAnimation.IsValid();
    case Tag_disableAnimTracks:
      return this->disableAnimTracks.IsValid();
    case Tag_enableAnimTracks:
      return this->enableAnimTracks.IsValid();
    case Tag_assignCubeSlots:
      return this->assignCubeSlots.IsValid();
    case Tag_testState:
      return this->testState.IsValid();
    case Tag_enterTestMode:
      return this->enterTestMode.IsValid();
    case Tag_oledDisplayNumber:
      return this->oledDisplayNumber.IsValid();
    case Tag_otaWrite:
      return this->otaWrite.IsValid();
    case Tag_appConCfgString:
      return this->appConCfgString.IsValid();
    case Tag_appConCfgFlags:
      return this->appConCfgFlags.IsValid();
    case Tag_appConCfgIPInfo:
      return this->appConCfgIPInfo.IsValid();
    case Tag_appConGetRobotIP:
      return this->appConGetRobotIP.IsValid();
    case Tag_wifiOff:
      return this->wifiOff.IsValid();
    default:
      return false;
    }
}

uint32_t Anki::Cozmo::RobotInterface::EngineToRobot::Size() const
{
  uint32_t result = 1;
    switch(tag) {
    case Tag_setBackpackLights:
      result += this->setBackpackLights.Size(); // BackpackLights
      break;
    case Tag_setCubeLights:
      result += this->setCubeLights.Size(); // CubeLights
      break;
    case Tag_setPropSlot:
      result += this->setPropSlot.Size(); // SetPropSlot
      break;
    case Tag_killBodyCode:
      result += this->killBodyCode.Size(); // KillBodyCode
      break;
    case Tag_setBodyRadioMode:
      result += this->setBodyRadioMode.Size(); // SetBodyRadioMode
      break;
    case Tag_nvReadToBody:
      result += this->nvReadToBody.Size(); // NVReadResultToBody
      break;
    case Tag_nvOpResultToBody:
      result += this->nvOpResultToBody.Size(); // NVOpResultToBody
      break;
    case Tag_sendDTMCommand:
      result += this->sendDTMCommand.Size(); // SendDTMCommand
      break;
    case Tag_setHeadlight:
      result += this->setHeadlight.Size(); // SetHeadlight
      break;
    case Tag_setCubeGamma:
      result += this->setCubeGamma.Size(); // SetCubeGamma
      break;
    case Tag_bodyRestart:
      result += this->bodyRestart.Size(); // BodyRestart
      break;
    case Tag_getBodyVersion:
      result += this->getBodyVersion.Size(); // GetBodyVersion
      break;
    case Tag_bleRecvHelloMessage:
      result += this->bleRecvHelloMessage.Size(); // BLE_RecvHello
      break;
    case Tag_bleEnterPairing:
      result += this->bleEnterPairing.Size(); // BLE_EnterPairing
      break;
    case Tag_bleSendHelloMessage:
      result += this->bleSendHelloMessage.Size(); // BLE_SendHello
      break;
    case Tag_bleEncodedKey:
      result += this->bleEncodedKey.Size(); // BLE_EncodedKey
      break;
    case Tag_robotIpInfo:
      result += this->robotIpInfo.Size(); // AppConnectRobotIP
      break;
    case Tag_wifiCfgResult:
      result += this->wifiCfgResult.Size(); // AppConnectConfigResult
      break;
    case Tag_enterRecoveryMode:
      result += this->enterRecoveryMode.Size(); // EnterRecoveryMode
      break;
    case Tag_radioConnected:
      result += this->radioConnected.Size(); // RadioState
      break;
    case Tag_drive:
      result += this->drive.Size(); // DriveWheels
      break;
    case Tag_driveCurvature:
      result += this->driveCurvature.Size(); // DriveWheelsCurvature
      break;
    case Tag_moveLift:
      result += this->moveLift.Size(); // MoveLift
      break;
    case Tag_moveHead:
      result += this->moveHead.Size(); // MoveHead
      break;
    case Tag_liftHeight:
      result += this->liftHeight.Size(); // SetLiftHeight
      break;
    case Tag_headAngle:
      result += this->headAngle.Size(); // SetHeadAngle
      break;
    case Tag_headAngleUpdate:
      result += this->headAngleUpdate.Size(); // HeadAngleUpdate
      break;
    case Tag_setBodyAngle:
      result += this->setBodyAngle.Size(); // SetBodyAngle
      break;
    case Tag_turnInPlaceAtSpeed:
      result += this->turnInPlaceAtSpeed.Size(); // TurnInPlaceAtSpeed
      break;
    case Tag_stop:
      result += this->stop.Size(); // StopAllMotors
      break;
    case Tag_clearPath:
      result += this->clearPath.Size(); // ClearPath
      break;
    case Tag_appendPathSegLine:
      result += this->appendPathSegLine.Size(); // AppendPathSegmentLine
      break;
    case Tag_appendPathSegArc:
      result += this->appendPathSegArc.Size(); // AppendPathSegmentArc
      break;
    case Tag_appendPathSegPointTurn:
      result += this->appendPathSegPointTurn.Size(); // AppendPathSegmentPointTurn
      break;
    case Tag_trimPath:
      result += this->trimPath.Size(); // TrimPath
      break;
    case Tag_executePath:
      result += this->executePath.Size(); // ExecutePath
      break;
    case Tag_dockWithObject:
      result += this->dockWithObject.Size(); // DockWithObject
      break;
    case Tag_abortDocking:
      result += this->abortDocking.Size(); // AbortDocking
      break;
    case Tag_placeObjectOnGround:
      result += this->placeObjectOnGround.Size(); // PlaceObjectOnGround
      break;
    case Tag_absLocalizationUpdate:
      result += this->absLocalizationUpdate.Size(); // AbsoluteLocalizationUpdate
      break;
    case Tag_startControllerTestMode:
      result += this->startControllerTestMode.Size(); // StartControllerTestMode
      break;
    case Tag_setControllerGains:
      result += this->setControllerGains.Size(); // ControllerGains
      break;
    case Tag_dockingErrorSignal:
      result += this->dockingErrorSignal.Size(); // DockingErrorSignal
      break;
    case Tag_setCarryState:
      result += this->setCarryState.Size(); // CarryStateUpdate
      break;
    case Tag_imuRequest:
      result += this->imuRequest.Size(); // ImuRequest
      break;
    case Tag_syncTime:
      result += this->syncTime.Size(); // SyncTime
      break;
    case Tag_imageRequest:
      result += this->imageRequest.Size(); // ImageRequest
      break;
    case Tag_flashObjectIDs:
      result += this->flashObjectIDs.Size(); // FlashObjectIDs
      break;
    case Tag_setObjectBeingCarried:
      result += this->setObjectBeingCarried.Size(); // ObjectBeingCarried
      break;
    case Tag_enablePickupParalysis:
      result += this->enablePickupParalysis.Size(); // EnablePickupParalysis
      break;
    case Tag_enableLiftPower:
      result += this->enableLiftPower.Size(); // EnableLiftPower
      break;
    case Tag_setMotionModelParams:
      result += this->setMotionModelParams.Size(); // SetMotionModelParams
      break;
    case Tag_powerState:
      result += this->powerState.Size(); // PowerState
      break;
    case Tag_getPropState:
      result += this->getPropState.Size(); // PropState
      break;
    case Tag_enableReadToolCodeMode:
      result += this->enableReadToolCodeMode.Size(); // EnableReadToolCodeMode
      break;
    case Tag_enableTestStateMessage:
      result += this->enableTestStateMessage.Size(); // EnableTestStateMessage
      break;
    case Tag_setHeadDeviceLock:
      result += this->setHeadDeviceLock.Size(); // SetHeadDeviceLock
      break;
    case Tag_startMotorCalibration:
      result += this->startMotorCalibration.Size(); // StartMotorCalibration
      break;
    case Tag_setIMUCalibration:
      result += this->setIMUCalibration.Size(); // IMUCalibrationData
      break;
    case Tag_generateTestTone:
      result += this->generateTestTone.Size(); // GenerateTestTone
      break;
    case Tag_writeNV:
      result += this->writeNV.Size(); // NVStorageWrite
      break;
    case Tag_readNV:
      result += this->readNV.Size(); // NVStorageRead
      break;
    case Tag_wipeAllNV:
      result += this->wipeAllNV.Size(); // NVWipeAll
      break;
    case Tag_rtipVersion:
      result += this->rtipVersion.Size(); // RTIPVersionInfo
      break;
    case Tag_setRTTO:
      result += this->setRTTO.Size(); // DebugSetRTTO
      break;
    case Tag_abortAnimation:
      result += this->abortAnimation.Size(); // AbortAnimation
      break;
    case Tag_animAudioSample:
      result += this->animAudioSample.Size(); // AudioSample
      break;
    case Tag_animAudioSilence:
      result += this->animAudioSilence.Size(); // AudioSilence
      break;
    case Tag_animHeadAngle:
      result += this->animHeadAngle.Size(); // HeadAngle
      break;
    case Tag_animLiftHeight:
      result += this->animLiftHeight.Size(); // LiftHeight
      break;
    case Tag_animEvent:
      result += this->animEvent.Size(); // Event
      break;
    case Tag_animEventToRTIP:
      result += this->animEventToRTIP.Size(); // AnimEventToRTIP
      break;
    case Tag_animFaceImage:
      result += this->animFaceImage.Size(); // FaceImage
      break;
    case Tag_animBackpackLights:
      result += this->animBackpackLights.Size(); // BackpackLights
      break;
    case Tag_animBodyMotion:
      result += this->animBodyMotion.Size(); // BodyMotion
      break;
    case Tag_animEndOfAnimation:
      result += this->animEndOfAnimation.Size(); // EndOfAnimation
      break;
    case Tag_animStartOfAnimation:
      result += this->animStartOfAnimation.Size(); // StartOfAnimation
      break;
    case Tag_disableAnimTracks:
      result += this->disableAnimTracks.Size(); // DisableAnimTracks
      break;
    case Tag_enableAnimTracks:
      result += this->enableAnimTracks.Size(); // EnableAnimTracks
      break;
    case Tag_assignCubeSlots:
      result += this->assignCubeSlots.Size(); // CubeSlots
      break;
    case Tag_testState:
      result += this->testState.Size(); // TestState
      break;
    case Tag_enterTestMode:
      result += this->enterTestMode.Size(); // EnterFactoryTestMode
      break;
    case Tag_oledDisplayNumber:
      result += this->oledDisplayNumber.Size(); // DisplayNumber
      break;
    case Tag_otaWrite:
      result += this->otaWrite.Size(); // Write
      break;
    case Tag_appConCfgString:
      result += this->appConCfgString.Size(); // AppConnectConfigString
      break;
    case Tag_appConCfgFlags:
      result += this->appConCfgFlags.Size(); // AppConnectConfigFlags
      break;
    case Tag_appConCfgIPInfo:
      result += this->appConCfgIPInfo.Size(); // AppConnectConfigIPInfo
      break;
    case Tag_appConGetRobotIP:
      result += this->appConGetRobotIP.Size(); // AppConnectGetRobotIP
      break;
    case Tag_wifiOff:
      result += this->wifiOff.Size(); // WiFiOff
      break;
    default:
      break;
    }
  return result;
}

#ifdef CLAD_DEBUG
const char* Anki::Cozmo::RobotInterface::EngineToRobot::TagToString(Tag t)
{
  switch(t) {
  case Tag_setBackpackLights:
    return "setBackpackLights";
  case Tag_setCubeLights:
    return "setCubeLights";
  case Tag_setPropSlot:
    return "setPropSlot";
  case Tag_killBodyCode:
    return "killBodyCode";
  case Tag_setBodyRadioMode:
    return "setBodyRadioMode";
  case Tag_nvReadToBody:
    return "nvReadToBody";
  case Tag_nvOpResultToBody:
    return "nvOpResultToBody";
  case Tag_sendDTMCommand:
    return "sendDTMCommand";
  case Tag_setHeadlight:
    return "setHeadlight";
  case Tag_setCubeGamma:
    return "setCubeGamma";
  case Tag_bodyRestart:
    return "bodyRestart";
  case Tag_getBodyVersion:
    return "getBodyVersion";
  case Tag_bleRecvHelloMessage:
    return "bleRecvHelloMessage";
  case Tag_bleEnterPairing:
    return "bleEnterPairing";
  case Tag_bleSendHelloMessage:
    return "bleSendHelloMessage";
  case Tag_bleEncodedKey:
    return "bleEncodedKey";
  case Tag_robotIpInfo:
    return "robotIpInfo";
  case Tag_wifiCfgResult:
    return "wifiCfgResult";
  case Tag_enterRecoveryMode:
    return "enterRecoveryMode";
  case Tag_radioConnected:
    return "radioConnected";
  case Tag_drive:
    return "drive";
  case Tag_driveCurvature:
    return "driveCurvature";
  case Tag_moveLift:
    return "moveLift";
  case Tag_moveHead:
    return "moveHead";
  case Tag_liftHeight:
    return "liftHeight";
  case Tag_headAngle:
    return "headAngle";
  case Tag_headAngleUpdate:
    return "headAngleUpdate";
  case Tag_setBodyAngle:
    return "setBodyAngle";
  case Tag_turnInPlaceAtSpeed:
    return "turnInPlaceAtSpeed";
  case Tag_stop:
    return "stop";
  case Tag_clearPath:
    return "clearPath";
  case Tag_appendPathSegLine:
    return "appendPathSegLine";
  case Tag_appendPathSegArc:
    return "appendPathSegArc";
  case Tag_appendPathSegPointTurn:
    return "appendPathSegPointTurn";
  case Tag_trimPath:
    return "trimPath";
  case Tag_executePath:
    return "executePath";
  case Tag_dockWithObject:
    return "dockWithObject";
  case Tag_abortDocking:
    return "abortDocking";
  case Tag_placeObjectOnGround:
    return "placeObjectOnGround";
  case Tag_absLocalizationUpdate:
    return "absLocalizationUpdate";
  case Tag_startControllerTestMode:
    return "startControllerTestMode";
  case Tag_setControllerGains:
    return "setControllerGains";
  case Tag_dockingErrorSignal:
    return "dockingErrorSignal";
  case Tag_setCarryState:
    return "setCarryState";
  case Tag_imuRequest:
    return "imuRequest";
  case Tag_syncTime:
    return "syncTime";
  case Tag_imageRequest:
    return "imageRequest";
  case Tag_flashObjectIDs:
    return "flashObjectIDs";
  case Tag_setObjectBeingCarried:
    return "setObjectBeingCarried";
  case Tag_enablePickupParalysis:
    return "enablePickupParalysis";
  case Tag_enableLiftPower:
    return "enableLiftPower";
  case Tag_setMotionModelParams:
    return "setMotionModelParams";
  case Tag_powerState:
    return "powerState";
  case Tag_getPropState:
    return "getPropState";
  case Tag_enableReadToolCodeMode:
    return "enableReadToolCodeMode";
  case Tag_enableTestStateMessage:
    return "enableTestStateMessage";
  case Tag_setHeadDeviceLock:
    return "setHeadDeviceLock";
  case Tag_startMotorCalibration:
    return "startMotorCalibration";
  case Tag_setIMUCalibration:
    return "setIMUCalibration";
  case Tag_generateTestTone:
    return "generateTestTone";
  case Tag_writeNV:
    return "writeNV";
  case Tag_readNV:
    return "readNV";
  case Tag_wipeAllNV:
    return "wipeAllNV";
  case Tag_rtipVersion:
    return "rtipVersion";
  case Tag_setRTTO:
    return "setRTTO";
  case Tag_abortAnimation:
    return "abortAnimation";
  case Tag_animAudioSample:
    return "animAudioSample";
  case Tag_animAudioSilence:
    return "animAudioSilence";
  case Tag_animHeadAngle:
    return "animHeadAngle";
  case Tag_animLiftHeight:
    return "animLiftHeight";
  case Tag_animEvent:
    return "animEvent";
  case Tag_animEventToRTIP:
    return "animEventToRTIP";
  case Tag_animFaceImage:
    return "animFaceImage";
  case Tag_animBackpackLights:
    return "animBackpackLights";
  case Tag_animBodyMotion:
    return "animBodyMotion";
  case Tag_animEndOfAnimation:
    return "animEndOfAnimation";
  case Tag_animStartOfAnimation:
    return "animStartOfAnimation";
  case Tag_disableAnimTracks:
    return "disableAnimTracks";
  case Tag_enableAnimTracks:
    return "enableAnimTracks";
  case Tag_assignCubeSlots:
    return "assignCubeSlots";
  case Tag_testState:
    return "testState";
  case Tag_enterTestMode:
    return "enterTestMode";
  case Tag_oledDisplayNumber:
    return "oledDisplayNumber";
  case Tag_otaWrite:
    return "otaWrite";
  case Tag_appConCfgString:
    return "appConCfgString";
  case Tag_appConCfgFlags:
    return "appConCfgFlags";
  case Tag_appConCfgIPInfo:
    return "appConCfgIPInfo";
  case Tag_appConGetRobotIP:
    return "appConGetRobotIP";
  case Tag_wifiOff:
    return "wifiOff";
  default:
    return "INVALID";
  }
}
#endif // CLAD_DEBUG

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

