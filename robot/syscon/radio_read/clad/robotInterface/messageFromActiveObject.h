// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/messageFromActiveObject.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/messageFromActiveObject.clad

#ifndef __CLAD_ROBOT_INTERFACE_MESSAGE_FROM_ACTIVE_OBJECT_H__
#define __CLAD_ROBOT_INTERFACE_MESSAGE_FROM_ACTIVE_OBJECT_H__

#include <stdbool.h>
#include <stdint.h>

#include "clad/types/activeObjectTypes.h"

namespace Anki {

namespace Cozmo {

// MESSAGE ObjectDiscovered
struct ObjectDiscovered
{
  uint32_t factory_id;
  Anki::Cozmo::ActiveObjectType device_type;
  int8_t rssi;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 7;
  static const uint32_t MIN_SIZE = 7;
  inline uint32_t Size() const { return 7; }
  
};

// MESSAGE ObjectConnectionState
struct ObjectConnectionState
{
  uint32_t objectID;
  uint32_t factoryID;
  Anki::Cozmo::ActiveObjectType device_type;
  bool connected;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 11;
  static const uint32_t MIN_SIZE = 11;
  inline uint32_t Size() const { return 11; }
  
};

// MESSAGE ObjectMoved
struct ObjectMoved
{
  uint32_t timestamp;
  uint32_t objectID;
  uint32_t robotID;
  Anki::Cozmo::ActiveAccel accel;
  Anki::Cozmo::UpAxis upAxis;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 25;
  static const uint32_t MIN_SIZE = 25;
  inline uint32_t Size() const { return 25; }
  
};

// MESSAGE ObjectStoppedMoving
struct ObjectStoppedMoving
{
  uint32_t timestamp;
  uint32_t objectID;
  uint32_t robotID;
  Anki::Cozmo::UpAxis upAxis;
  bool rolled;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 14;
  static const uint32_t MIN_SIZE = 14;
  inline uint32_t Size() const { return 14; }
  
};

// MESSAGE ObjectTapped
struct ObjectTapped
{
  uint32_t timestamp;
  uint32_t objectID;
  uint32_t robotID;
  uint8_t numTaps;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 13;
  static const uint32_t MIN_SIZE = 13;
  inline uint32_t Size() const { return 13; }
  
};

// STRUCTURE PropState
struct PropState
{
  uint8_t slot;
  int8_t x;
  int8_t y;
  int8_t z;
  uint8_t shockCount;
  int8_t rssi;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 6;
  static const uint32_t MIN_SIZE = 6;
  inline uint32_t Size() const { return 6; }
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_ROBOT_INTERFACE_MESSAGE_FROM_ACTIVE_OBJECT_H__
