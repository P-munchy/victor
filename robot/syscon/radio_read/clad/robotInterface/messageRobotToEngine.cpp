// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/messageRobotToEngine.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/messageRobotToEngine.clad

#include "clad/robotInterface/messageRobotToEngine.h"


namespace Anki {

namespace Cozmo {

namespace RobotInterface {

bool NVReadResultToEngine::IsValid() const
{
    return (this->blob.IsValid());
}

uint32_t NVReadResultToEngine::Size() const
{
  uint32_t result = 0;
  // robotAddress
  result += 4; // uint_32
  // blob
  result += this->blob.Size(); // NVStorageBlob
  return result;
}

#ifdef CLAD_DEBUG
const char* CrashSourceToString(CrashSource m)
{
  switch(m) {
    case WiFiCrash:
      return "WiFiCrash";
    case RTIPCrash:
      return "RTIPCrash";
    case BodyCrash:
      return "BodyCrash";
    case PropCrash:
      return "PropCrash";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

bool Anki::Cozmo::RobotInterface::RobotToEngine::IsValid() const
{
    switch(tag) {
    case Tag_trace:
      return this->trace.IsValid();
    case Tag_printText:
      return this->printText.IsValid();
    case Tag_mainCycleTimeError:
      return this->mainCycleTimeError.IsValid();
    case Tag_goalPose:
      return this->goalPose.IsValid();
    case Tag_activeObjectMoved:
      return this->activeObjectMoved.IsValid();
    case Tag_activeObjectStopped:
      return this->activeObjectStopped.IsValid();
    case Tag_activeObjectTapped:
      return this->activeObjectTapped.IsValid();
    case Tag_dataDump:
      return this->dataDump.IsValid();
    case Tag_blockPickedUp:
      return this->blockPickedUp.IsValid();
    case Tag_blockPlaced:
      return this->blockPlaced.IsValid();
    case Tag_rampTraverseStarted:
      return this->rampTraverseStarted.IsValid();
    case Tag_rampTraverseCompleted:
      return this->rampTraverseCompleted.IsValid();
    case Tag_bridgeTraverseStarted:
      return this->bridgeTraverseStarted.IsValid();
    case Tag_bridgeTraverseCompleted:
      return this->bridgeTraverseCompleted.IsValid();
    case Tag_timeProfStat:
      return this->timeProfStat.IsValid();
    case Tag_imuDataChunk:
      return this->imuDataChunk.IsValid();
    case Tag_cliffEvent:
      return this->cliffEvent.IsValid();
    case Tag_syncTimeAck:
      return this->syncTimeAck.IsValid();
    case Tag_robotPoked:
      return this->robotPoked.IsValid();
    case Tag_chargerMountCompleted:
      return this->chargerMountCompleted.IsValid();
    case Tag_movingLiftPostDock:
      return this->movingLiftPostDock.IsValid();
    case Tag_proxObstacle:
      return this->proxObstacle.IsValid();
    case Tag_imuRawDataChunk:
      return this->imuRawDataChunk.IsValid();
    case Tag_cameraCalibration:
      return this->cameraCalibration.IsValid();
    case Tag_robotAvailable:
      return this->robotAvailable.IsValid();
    case Tag_animStarted:
      return this->animStarted.IsValid();
    case Tag_animEnded:
      return this->animEnded.IsValid();
    case Tag_nvData:
      return this->nvData.IsValid();
    case Tag_nvResult:
      return this->nvResult.IsValid();
    case Tag_crashReport:
      return this->crashReport.IsValid();
    case Tag_activeObjectConnectionState:
      return this->activeObjectConnectionState.IsValid();
    case Tag_motorCalibration:
      return this->motorCalibration.IsValid();
    case Tag_fwVersionInfo:
      return this->fwVersionInfo.IsValid();
    case Tag_dockingStatus:
      return this->dockingStatus.IsValid();
    case Tag_robotStopped:
      return this->robotStopped.IsValid();
    case Tag_animEvent:
      return this->animEvent.IsValid();
    case Tag_factoryTestParam:
      return this->factoryTestParam.IsValid();
    case Tag_bodyVersion:
      return this->bodyVersion.IsValid();
    case Tag_otaAck:
      return this->otaAck.IsValid();
    case Tag_state:
      return this->state.IsValid();
    case Tag_animState:
      return this->animState.IsValid();
    case Tag_image:
      return this->image.IsValid();
    case Tag_activeObjectDiscovered:
      return this->activeObjectDiscovered.IsValid();
    case Tag_imageGyro:
      return this->imageGyro.IsValid();
    default:
      return false;
    }
}

uint32_t Anki::Cozmo::RobotInterface::RobotToEngine::Size() const
{
  uint32_t result = 1;
    switch(tag) {
    case Tag_trace:
      result += this->trace.Size(); // PrintTrace
      break;
    case Tag_printText:
      result += this->printText.Size(); // PrintText
      break;
    case Tag_mainCycleTimeError:
      result += this->mainCycleTimeError.Size(); // MainCycleTimeError
      break;
    case Tag_goalPose:
      result += this->goalPose.Size(); // GoalPose
      break;
    case Tag_activeObjectMoved:
      result += this->activeObjectMoved.Size(); // ObjectMoved
      break;
    case Tag_activeObjectStopped:
      result += this->activeObjectStopped.Size(); // ObjectStoppedMoving
      break;
    case Tag_activeObjectTapped:
      result += this->activeObjectTapped.Size(); // ObjectTapped
      break;
    case Tag_dataDump:
      result += this->dataDump.Size(); // DataDump
      break;
    case Tag_blockPickedUp:
      result += this->blockPickedUp.Size(); // BlockPickedUp
      break;
    case Tag_blockPlaced:
      result += this->blockPlaced.Size(); // BlockPlaced
      break;
    case Tag_rampTraverseStarted:
      result += this->rampTraverseStarted.Size(); // RampTraverseStart
      break;
    case Tag_rampTraverseCompleted:
      result += this->rampTraverseCompleted.Size(); // RampTraverseComplete
      break;
    case Tag_bridgeTraverseStarted:
      result += this->bridgeTraverseStarted.Size(); // BridgeTraverseStart
      break;
    case Tag_bridgeTraverseCompleted:
      result += this->bridgeTraverseCompleted.Size(); // BridgeTraverseComplete
      break;
    case Tag_timeProfStat:
      result += this->timeProfStat.Size(); // TimeProfileStat
      break;
    case Tag_imuDataChunk:
      result += this->imuDataChunk.Size(); // IMUDataChunk
      break;
    case Tag_cliffEvent:
      result += this->cliffEvent.Size(); // CliffEvent
      break;
    case Tag_syncTimeAck:
      result += this->syncTimeAck.Size(); // SyncTimeAck
      break;
    case Tag_robotPoked:
      result += this->robotPoked.Size(); // RobotPoked
      break;
    case Tag_chargerMountCompleted:
      result += this->chargerMountCompleted.Size(); // ChargerMountComplete
      break;
    case Tag_movingLiftPostDock:
      result += this->movingLiftPostDock.Size(); // MovingLiftPostDock
      break;
    case Tag_proxObstacle:
      result += this->proxObstacle.Size(); // ProxObstacle
      break;
    case Tag_imuRawDataChunk:
      result += this->imuRawDataChunk.Size(); // IMURawDataChunk
      break;
    case Tag_cameraCalibration:
      result += this->cameraCalibration.Size(); // CameraCalibration
      break;
    case Tag_robotAvailable:
      result += this->robotAvailable.Size(); // RobotAvailable
      break;
    case Tag_animStarted:
      result += this->animStarted.Size(); // AnimationStarted
      break;
    case Tag_animEnded:
      result += this->animEnded.Size(); // AnimationEnded
      break;
    case Tag_nvData:
      result += this->nvData.Size(); // NVReadResultToEngine
      break;
    case Tag_nvResult:
      result += this->nvResult.Size(); // NVOpResultToEngine
      break;
    case Tag_crashReport:
      result += this->crashReport.Size(); // CrashReport
      break;
    case Tag_activeObjectConnectionState:
      result += this->activeObjectConnectionState.Size(); // ObjectConnectionState
      break;
    case Tag_motorCalibration:
      result += this->motorCalibration.Size(); // MotorCalibration
      break;
    case Tag_fwVersionInfo:
      result += this->fwVersionInfo.Size(); // FWVersionInfo
      break;
    case Tag_dockingStatus:
      result += this->dockingStatus.Size(); // DockingStatus
      break;
    case Tag_robotStopped:
      result += this->robotStopped.Size(); // RobotStopped
      break;
    case Tag_animEvent:
      result += this->animEvent.Size(); // AnimationEvent
      break;
    case Tag_factoryTestParam:
      result += this->factoryTestParam.Size(); // FactoryTestParameter
      break;
    case Tag_bodyVersion:
      result += this->bodyVersion.Size(); // BodyVersion
      break;
    case Tag_otaAck:
      result += this->otaAck.Size(); // Ack
      break;
    case Tag_state:
      result += this->state.Size(); // RobotState
      break;
    case Tag_animState:
      result += this->animState.Size(); // AnimationState
      break;
    case Tag_image:
      result += this->image.Size(); // ImageChunk
      break;
    case Tag_activeObjectDiscovered:
      result += this->activeObjectDiscovered.Size(); // ObjectDiscovered
      break;
    case Tag_imageGyro:
      result += this->imageGyro.Size(); // ImageImuData
      break;
    default:
      break;
    }
  return result;
}

#ifdef CLAD_DEBUG
const char* Anki::Cozmo::RobotInterface::RobotToEngine::TagToString(Tag t)
{
  switch(t) {
  case Tag_trace:
    return "trace";
  case Tag_printText:
    return "printText";
  case Tag_mainCycleTimeError:
    return "mainCycleTimeError";
  case Tag_goalPose:
    return "goalPose";
  case Tag_activeObjectMoved:
    return "activeObjectMoved";
  case Tag_activeObjectStopped:
    return "activeObjectStopped";
  case Tag_activeObjectTapped:
    return "activeObjectTapped";
  case Tag_dataDump:
    return "dataDump";
  case Tag_blockPickedUp:
    return "blockPickedUp";
  case Tag_blockPlaced:
    return "blockPlaced";
  case Tag_rampTraverseStarted:
    return "rampTraverseStarted";
  case Tag_rampTraverseCompleted:
    return "rampTraverseCompleted";
  case Tag_bridgeTraverseStarted:
    return "bridgeTraverseStarted";
  case Tag_bridgeTraverseCompleted:
    return "bridgeTraverseCompleted";
  case Tag_timeProfStat:
    return "timeProfStat";
  case Tag_imuDataChunk:
    return "imuDataChunk";
  case Tag_cliffEvent:
    return "cliffEvent";
  case Tag_syncTimeAck:
    return "syncTimeAck";
  case Tag_robotPoked:
    return "robotPoked";
  case Tag_chargerMountCompleted:
    return "chargerMountCompleted";
  case Tag_movingLiftPostDock:
    return "movingLiftPostDock";
  case Tag_proxObstacle:
    return "proxObstacle";
  case Tag_imuRawDataChunk:
    return "imuRawDataChunk";
  case Tag_cameraCalibration:
    return "cameraCalibration";
  case Tag_robotAvailable:
    return "robotAvailable";
  case Tag_animStarted:
    return "animStarted";
  case Tag_animEnded:
    return "animEnded";
  case Tag_nvData:
    return "nvData";
  case Tag_nvResult:
    return "nvResult";
  case Tag_crashReport:
    return "crashReport";
  case Tag_activeObjectConnectionState:
    return "activeObjectConnectionState";
  case Tag_motorCalibration:
    return "motorCalibration";
  case Tag_fwVersionInfo:
    return "fwVersionInfo";
  case Tag_dockingStatus:
    return "dockingStatus";
  case Tag_robotStopped:
    return "robotStopped";
  case Tag_animEvent:
    return "animEvent";
  case Tag_factoryTestParam:
    return "factoryTestParam";
  case Tag_bodyVersion:
    return "bodyVersion";
  case Tag_otaAck:
    return "otaAck";
  case Tag_state:
    return "state";
  case Tag_animState:
    return "animState";
  case Tag_image:
    return "image";
  case Tag_activeObjectDiscovered:
    return "activeObjectDiscovered";
  case Tag_imageGyro:
    return "imageGyro";
  default:
    return "INVALID";
  }
}
#endif // CLAD_DEBUG

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

