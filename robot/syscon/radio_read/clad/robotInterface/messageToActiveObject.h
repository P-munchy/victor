// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/messageToActiveObject.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/messageToActiveObject.clad

#ifndef __CLAD_ROBOT_INTERFACE_MESSAGE_TO_ACTIVE_OBJECT_H__
#define __CLAD_ROBOT_INTERFACE_MESSAGE_TO_ACTIVE_OBJECT_H__

#include <stdbool.h>
#include <stdint.h>

#include "clad/types/activeObjectTypes.h"

namespace Anki {

namespace Cozmo {

// MESSAGE CubeLights
struct CubeLights
{
  Anki::Cozmo::LightState lights[4];
  uint32_t objectID;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 36;
  static const uint32_t MIN_SIZE = 36;
  inline uint32_t Size() const { return 36; }
  
};

// MESSAGE FlashObjectIDs
struct FlashObjectIDs
{
  uint32_t objectID;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 4;
  static const uint32_t MIN_SIZE = 4;
  inline uint32_t Size() const { return 4; }
  
};

// MESSAGE ObjectBeingCarried
struct ObjectBeingCarried
{
  uint32_t objectID;
  bool isBeingCarried;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 5;
  static const uint32_t MIN_SIZE = 5;
  inline uint32_t Size() const { return 5; }
  
};

// STRUCTURE SetPropState
struct SetPropState
{
  uint16_t colors[4];
  uint8_t slot;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 9;
  static const uint32_t MIN_SIZE = 9;
  inline uint32_t Size() const { return 9; }
  
};

// MESSAGE KillBodyCode
struct KillBodyCode
{
  // To conform to C99 standard (6.7.2.1)
  char _empty;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 0;
  static const uint32_t MIN_SIZE = 0;
  inline uint32_t Size() const { return 0; }
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_ROBOT_INTERFACE_MESSAGE_TO_ACTIVE_OBJECT_H__
