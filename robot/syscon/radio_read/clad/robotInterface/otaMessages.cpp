// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/robotInterface/otaMessages.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/robotInterface/otaMessages.clad

#include "clad/robotInterface/otaMessages.h"

namespace Anki {

namespace Cozmo {

namespace RobotInterface {

namespace OTA {

#ifdef CLAD_DEBUG
const char* ResultToString(Result m)
{
  switch(m) {
    case ERR_READ_ERROR:
      return "ERR_READ_ERROR";
    case ERR_READ_TIMEOUT:
      return "ERR_READ_TIMEOUT";
    case ERR_WRITE_ERROR:
      return "ERR_WRITE_ERROR";
    case ERR_WRITE_TIMEOUT:
      return "ERR_WRITE_TIMEOUT";
    case ERR_ERASE_ERROR:
      return "ERR_ERASE_ERROR";
    case ERR_ERASE_TIMEOUT:
      return "ERR_ERASE_TIMEOUT";
    case ERR_FACT_RESET:
      return "ERR_FACT_RESET";
    case ERR_RTIP_TIMEOUT:
      return "ERR_RTIP_TIMEOUT";
    case ERR_RTIP_NAK:
      return "ERR_RTIP_NAK";
    case ERR_I2SPI:
      return "ERR_I2SPI";
    case ERR_BAD_ENC:
      return "ERR_BAD_ENC";
    case ERR_BAD_DATA:
      return "ERR_BAD_DATA";
    case ERR_BAD_ADDRESS:
      return "ERR_BAD_ADDRESS";
    case ERR_NO_MEM:
      return "ERR_NO_MEM";
    case OKAY:
      return "OKAY";
    case BUSY:
      return "BUSY";
    case NOTHING_TO_DO:
      return "NOTHING_TO_DO";
    case OUT_OF_ORDER:
      return "OUT_OF_ORDER";
    case NOT_ENABLED:
      return "NOT_ENABLED";
    case SUCCESS:
      return "SUCCESS";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* RecoveryModeToString(RecoveryMode m)
{
  switch(m) {
    case System_Reset:
      return "System_Reset";
    case System_Shutdown:
      return "System_Shutdown";
    case Recovery_Mode:
      return "Recovery_Mode";
    case OTA_Mode:
      return "OTA_Mode";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

} // namespace OTA

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

