// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/activeObjectAccel.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/activeObjectAccel.clad

#ifndef __CLAD_TYPES_ACTIVE_OBJECT_ACCEL_H__
#define __CLAD_TYPES_ACTIVE_OBJECT_ACCEL_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// STRUCTURE ActiveAccel
struct ActiveAccel
{
  float x;
  float y;
  float z;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 12;
  static const uint32_t MIN_SIZE = 12;
  inline uint32_t Size() const { return 12; }
  
};

// ENUM UpAxis
enum {
  XNegative = 0,
  XPositive = 1,
  YNegative = 2,
  YPositive = 3,
  ZNegative = 4,
  ZPositive = 5,
  NumAxes   = 6,
  Unknown   = 7,
};
typedef uint8_t UpAxis;

#ifdef CLAD_DEBUG
const char* UpAxisToString(UpAxis m);
#endif // CLAD_DEBUG

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_ACTIVE_OBJECT_ACCEL_H__
