// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/activeObjectTypes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/activeObjectTypes.clad

#include "clad/types/activeObjectTypes.h"


namespace Anki {

namespace Cozmo {

#ifdef CLAD_DEBUG
const char* ActiveObjectTypeToString(ActiveObjectType m)
{
  switch(m) {
    case OBJECT_CHARGER:
      return "OBJECT_CHARGER";
    case OBJECT_CUBE1:
      return "OBJECT_CUBE1";
    case OBJECT_CUBE2:
      return "OBJECT_CUBE2";
    case OBJECT_CUBE3:
      return "OBJECT_CUBE3";
    case OBJECT_UNKNOWN:
      return "OBJECT_UNKNOWN";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* ActiveObjectConstantsToString(ActiveObjectConstants m)
{
  switch(m) {
    case MAX_NUM_CUBES:
      return "MAX_NUM_CUBES";
    case MAX_NUM_ACTIVE_OBJECTS:
      return "MAX_NUM_ACTIVE_OBJECTS";
    case FLASH_BLOCK_TIME_INTERVAL_MS:
      return "FLASH_BLOCK_TIME_INTERVAL_MS";
    case ACTIVE_OBJECT_DISCOVERY_PERIOD_MS:
      return "ACTIVE_OBJECT_DISCOVERY_PERIOD_MS";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* WhichCubeLEDsToString(WhichCubeLEDs m)
{
  switch(m) {
    case NONE:
      return "NONE";
    case ALL:
      return "ALL";
    case BACK:
      return "BACK";
    case LEFT:
      return "LEFT";
    case FRONT:
      return "FRONT";
    case RIGHT:
      return "RIGHT";
    case FRONT_LEFT:
      return "FRONT_LEFT";
    case FRONT_RIGHT:
      return "FRONT_RIGHT";
    case BACK_LEFT:
      return "BACK_LEFT";
    case BACK_RIGHT:
      return "BACK_RIGHT";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* MakeRelativeModeToString(MakeRelativeMode m)
{
  switch(m) {
    case RELATIVE_LED_MODE_OFF:
      return "RELATIVE_LED_MODE_OFF";
    case RELATIVE_LED_MODE_BY_CORNER:
      return "RELATIVE_LED_MODE_BY_CORNER";
    case RELATIVE_LED_MODE_BY_SIDE:
      return "RELATIVE_LED_MODE_BY_SIDE";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* UpAxisToString(UpAxis m)
{
  switch(m) {
    case XNegative:
      return "XNegative";
    case XPositive:
      return "XPositive";
    case YNegative:
      return "YNegative";
    case YPositive:
      return "YPositive";
    case ZNegative:
      return "ZNegative";
    case ZPositive:
      return "ZPositive";
    case NumAxes:
      return "NumAxes";
    case Unknown:
      return "Unknown";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* ActiveIdentityStateToString(ActiveIdentityState m)
{
  switch(m) {
    case Unidentified:
      return "Unidentified";
    case WaitingForIdentity:
      return "WaitingForIdentity";
    case Identified:
      return "Identified";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

} // namespace Cozmo

} // namespace Anki

