// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/activeObjectTypes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/activeObjectTypes.clad

#ifndef __CLAD_TYPES_ACTIVE_OBJECT_TYPES_H__
#define __CLAD_TYPES_ACTIVE_OBJECT_TYPES_H__

#include <stdbool.h>
#include <stdint.h>

#include "clad/types/ledTypes.h"

namespace Anki {

namespace Cozmo {

// ENUM ActiveObjectType
enum {
  OBJECT_CHARGER = 0xff00, // 65280
  OBJECT_CUBE1   = 0xff01, // 65281
  OBJECT_CUBE2   = 0xff02, // 65282
  OBJECT_CUBE3   = 0xff03, // 65283
  OBJECT_UNKNOWN = 0xffff, // 65535
};
typedef uint16_t ActiveObjectType;

#ifdef CLAD_DEBUG
const char* ActiveObjectTypeToString(ActiveObjectType m);
#endif // CLAD_DEBUG

// ENUM ActiveObjectConstants
enum {
  MAX_NUM_CUBES                     = 4,    // 4
  MAX_NUM_ACTIVE_OBJECTS            = 5,    // 5
  NUM_CUBE_LEDS                     = 4,    // 4
  FLASH_BLOCK_TIME_INTERVAL_MS      = 200,  // 200
  ACTIVE_OBJECT_DISCOVERY_PERIOD_MS = 1000, // 1000
  OBJECT_DISCOVERY_CHANNEL          = 5,    // 5
};
typedef uint32_t ActiveObjectConstants;

#ifdef CLAD_DEBUG
const char* ActiveObjectConstantsToString(ActiveObjectConstants m);
#endif // CLAD_DEBUG

// ENUM WhichCubeLEDs
enum {
  NONE           = 0x0,  // 0
  ALL            = 0xff, // 255
  BACK           = 0x1,  // 1
  LEFT           = 0x2,  // 2
  FRONT          = 0x4,  // 4
  RIGHT          = 0x8,  // 8
  FRONT_LEFT     = 0x6,  // 6
  FRONT_RIGHT    = 0x12, // 18
  BACK_LEFT      = 0x3,  // 3
  BACK_RIGHT     = 0x9,  // 9
  CHARGER_BACK   = 0x1,  // 1
  CHARGER_MIDDLE = 0x2,  // 2
  CHARGER_FRONT  = 0x4,  // 4
};
typedef uint8_t WhichCubeLEDs;

#ifdef CLAD_DEBUG
const char* WhichCubeLEDsToString(WhichCubeLEDs m);
#endif // CLAD_DEBUG

// ENUM MakeRelativeMode
enum {
  RELATIVE_LED_MODE_OFF        = 0, // 0
  RELATIVE_LED_MODE_BY_CORNER,      // 1
  RELATIVE_LED_MODE_BY_SIDE,        // 2
};
typedef uint8_t MakeRelativeMode;

#ifdef CLAD_DEBUG
const char* MakeRelativeModeToString(MakeRelativeMode m);
#endif // CLAD_DEBUG

// STRUCTURE ActiveAccel
struct ActiveAccel
{
  float x;
  float y;
  float z;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 12;
  static const uint32_t MIN_SIZE = 12;
  inline uint32_t Size() const { return 12; }
  
};

// ENUM UpAxis
enum {
  XNegative, // 0
  XPositive, // 1
  YNegative, // 2
  YPositive, // 3
  ZNegative, // 4
  ZPositive, // 5
  NumAxes,   // 6
  Unknown,   // 7
};
typedef uint8_t UpAxis;

#ifdef CLAD_DEBUG
const char* UpAxisToString(UpAxis m);
#endif // CLAD_DEBUG

// ENUM ActiveIdentityState
enum {
  Unidentified,       // 0
  WaitingForIdentity, // 1
  Identified,         // 2
};
typedef uint8_t ActiveIdentityState;

#ifdef CLAD_DEBUG
const char* ActiveIdentityStateToString(ActiveIdentityState m);
#endif // CLAD_DEBUG

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_ACTIVE_OBJECT_TYPES_H__
