// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/advertisementTypes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/advertisementTypes.clad

#ifndef __CLAD_TYPES_ADVERTISEMENT_TYPES_H__
#define __CLAD_TYPES_ADVERTISEMENT_TYPES_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// MESSAGE AdvertisementRegistrationMsg
struct AdvertisementRegistrationMsg
{
  uint16_t toEnginePort;
  uint16_t fromEnginePort;
  uint8_t id;
  bool enableAdvertisement;
  bool oneShot;
  uint8_t ip_length;
  char ip[255];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const;
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 263;
  static const uint32_t MIN_SIZE = 8;
  uint32_t Size() const;
  
};

// MESSAGE AdvertisementMsg
struct AdvertisementMsg
{
  uint16_t toEnginePort;
  uint16_t fromEnginePort;
  uint8_t id;
  uint8_t ip_length;
  char ip[255];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const;
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 261;
  static const uint32_t MIN_SIZE = 6;
  uint32_t Size() const;
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_ADVERTISEMENT_TYPES_H__
