// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/animationKeyFrames.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/animationKeyFrames.clad

#include "clad/types/animationKeyFrames.h"


namespace Anki {

namespace Cozmo {

#ifdef CLAD_DEBUG
const char* AnimTrackFlagToString(AnimTrackFlag m)
{
  switch(m) {
    case NO_TRACKS:
      return "NO_TRACKS";
    case HEAD_TRACK:
      return "HEAD_TRACK";
    case LIFT_TRACK:
      return "LIFT_TRACK";
    case BODY_TRACK:
      return "BODY_TRACK";
    case FACE_IMAGE_TRACK:
      return "FACE_IMAGE_TRACK";
    case EVENT_TRACK:
      return "EVENT_TRACK";
    case BACKPACK_LIGHTS_TRACK:
      return "BACKPACK_LIGHTS_TRACK";
    case AUDIO_TRACK:
      return "AUDIO_TRACK";
    case ALL_TRACKS:
      return "ALL_TRACKS";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* AnimConstantsToString(AnimConstants m)
{
  switch(m) {
    case AUDIO_SAMPLE_RATE:
      return "AUDIO_SAMPLE_RATE";
    case AUDIO_SAMPLE_SIZE:
      return "AUDIO_SAMPLE_SIZE";
    case MAX_FACE_FRAME_SIZE:
      return "MAX_FACE_FRAME_SIZE";
    case KEYFRAME_BUFFER_SIZE:
      return "KEYFRAME_BUFFER_SIZE";
    case NUM_TRACKS:
      return "NUM_TRACKS";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

namespace AnimKeyFrame {

bool FaceImage::IsValid() const
{
    return (image_length <= 1024);
}

uint32_t FaceImage::Size() const
{
  uint32_t result = 0;
  // image
  result += 2; // uint_16 (image_length)
  result += 1 * this->image_length; // uint_8
  return result;
}

} // namespace AnimKeyFrame

} // namespace Cozmo

} // namespace Anki

