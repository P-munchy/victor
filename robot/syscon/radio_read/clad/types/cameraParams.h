// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/cameraParams.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/cameraParams.clad

#ifndef __CLAD_TYPES_CAMERA_PARAMS_H__
#define __CLAD_TYPES_CAMERA_PARAMS_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// ENUM CameraConstants
enum {
  GAMMA_CURVE_SIZE = 17,
};
typedef uint32_t CameraConstants;

#ifdef CLAD_DEBUG
const char* CameraConstantsToString(CameraConstants m);
#endif // CLAD_DEBUG

// MESSAGE DefaultCameraParams
struct DefaultCameraParams
{
  float maxGain;
  float gain;
  uint16_t minExposure_ms;
  uint16_t maxExposure_ms;
  uint8_t gammaCurve[17];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 29;
  static const uint32_t MIN_SIZE = 29;
  inline uint32_t Size() const { return 29; }
  
};

// MESSAGE SetCameraParams
struct SetCameraParams
{
  float gain;
  uint16_t exposure_ms;
  bool requestDefaultParams;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 7;
  static const uint32_t MIN_SIZE = 7;
  inline uint32_t Size() const { return 7; }
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_CAMERA_PARAMS_H__
