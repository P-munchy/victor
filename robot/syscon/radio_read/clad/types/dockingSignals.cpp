// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/dockingSignals.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/dockingSignals.clad

#include "clad/types/dockingSignals.h"


namespace Anki {

namespace Cozmo {

#ifdef CLAD_DEBUG
const char* DockingMethodToString(DockingMethod m)
{
  switch(m) {
    case BLIND_DOCKING:
      return "BLIND_DOCKING";
    case TRACKER_DOCKING:
      return "TRACKER_DOCKING";
    case HYBRID_DOCKING:
      return "HYBRID_DOCKING";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* DockingResultToString(DockingResult m)
{
  switch(m) {
    case DOCK_UNKNOWN:
      return "DOCK_UNKNOWN";
    case DOCK_INTERRUPTED:
      return "DOCK_INTERRUPTED";
    case DOCK_SUCCESS:
      return "DOCK_SUCCESS";
    case DOCK_SUCCESS_RETRY:
      return "DOCK_SUCCESS_RETRY";
    case DOCK_SUCCESS_HANNS_MANEUVER:
      return "DOCK_SUCCESS_HANNS_MANEUVER";
    case DOCK_FAILURE:
      return "DOCK_FAILURE";
    case DOCK_FAILURE_TOO_LONG_WITHOUT_BLOCKPOSE:
      return "DOCK_FAILURE_TOO_LONG_WITHOUT_BLOCKPOSE";
    case DOCK_FAILURE_TOO_HIGH:
      return "DOCK_FAILURE_TOO_HIGH";
    case DOCK_FAILURE_RETRY:
      return "DOCK_FAILURE_RETRY";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* StatusToString(Status m)
{
  switch(m) {
    case STATUS_BACKING_UP:
      return "STATUS_BACKING_UP";
    case STATUS_DOING_HANNS_MANEUVER:
      return "STATUS_DOING_HANNS_MANEUVER";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

} // namespace Cozmo

} // namespace Anki

