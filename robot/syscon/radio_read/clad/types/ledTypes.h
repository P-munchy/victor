// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/ledTypes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/ledTypes.clad

#ifndef __CLAD_TYPES_LED_TYPES_H__
#define __CLAD_TYPES_LED_TYPES_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// ENUM LEDId
enum {
  LED_BACKPACK_LEFT    = 0, // 0
  LED_BACKPACK_FRONT,       // 1
  LED_BACKPACK_MIDDLE,      // 2
  LED_BACKPACK_BACK,        // 3
  LED_BACKPACK_RIGHT,       // 4
  NUM_BACKPACK_LEDS,        // 5
};
typedef uint8_t LEDId;

#ifdef CLAD_DEBUG
const char* LEDIdToString(LEDId m);
#endif // CLAD_DEBUG

// ENUM LEDColor
enum {
  LED_CURRENT_COLOR = 0xffffffff, // 4294967295
  LED_OFF           = 0x0,        // 0
  LED_RED           = 0xff0000,   // 16711680
  LED_GREEN         = 0xff00,     // 65280
  LED_YELLOW        = 0xffff00,   // 16776960
  LED_BLUE          = 0xff,       // 255
  LED_PURPLE        = 0xff00ff,   // 16711935
  LED_CYAN          = 0xffff,     // 65535
  LED_WHITE         = 0xffffff,   // 16777215
  LED_IR            = 0xff000000, // 4278190080
};
typedef uint32_t LEDColor;

#ifdef CLAD_DEBUG
const char* LEDColorToString(LEDColor m);
#endif // CLAD_DEBUG

// ENUM LEDColorEncoded
enum {
  LED_ENC_OFF    = 0x0,    // 0
  LED_ENC_RED    = 0x7c00, // 31744
  LED_ENC_GRN    = 0x3e0,  // 992
  LED_ENC_BLU    = 0x1f,   // 31
  LED_ENC_YELLOW = 0x7fe0, // 32736
  LED_ENC_PURPLE = 0x7c1f, // 31775
  LED_ENC_CYAN   = 0x3ff,  // 1023
  LED_ENC_WHITE  = 0x7fff, // 32767
  LED_ENC_IR     = 0x8000, // 32768
};
typedef uint16_t LEDColorEncoded;

#ifdef CLAD_DEBUG
const char* LEDColorEncodedToString(LEDColorEncoded m);
#endif // CLAD_DEBUG

// ENUM LEDColorEncodedShifts
enum {
  LED_ENC_RED_SHIFT = 10, // 10
  LED_ENC_GRN_SHIFT = 5,  // 5
  LED_ENC_BLU_SHIFT = 0,  // 0
  LED_ENC_IR_SHIFT  = 15, // 15
};
typedef uint16_t LEDColorEncodedShifts;

#ifdef CLAD_DEBUG
const char* LEDColorEncodedShiftsToString(LEDColorEncodedShifts m);
#endif // CLAD_DEBUG

// STRUCTURE LightState
struct LightState
{
  uint16_t onColor;
  uint16_t offColor;
  uint8_t onFrames;
  uint8_t offFrames;
  uint8_t transitionOnFrames;
  uint8_t transitionOffFrames;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 8;
  static const uint32_t MIN_SIZE = 8;
  inline uint32_t Size() const { return 8; }
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_LED_TYPES_H__
