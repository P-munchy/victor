// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/motorTypes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/motorTypes.clad

#ifndef __CLAD_TYPES_MOTOR_TYPES_H__
#define __CLAD_TYPES_MOTOR_TYPES_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// ENUM MotorID
enum {
  MOTOR_LEFT_WHEEL   = 0, // 0
  MOTOR_RIGHT_WHEEL,      // 1
  MOTOR_LIFT,             // 2
  MOTOR_HEAD,             // 3
  MOTOR_COUNT,            // 4
};
typedef uint8_t MotorID;

#ifdef CLAD_DEBUG
const char* MotorIDToString(MotorID m);
#endif // CLAD_DEBUG

// MESSAGE MotorCalibration
struct MotorCalibration
{
  Anki::Cozmo::MotorID motorID;
  bool calibStarted;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 2;
  static const uint32_t MIN_SIZE = 2;
  inline uint32_t Size() const { return 2; }
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_MOTOR_TYPES_H__
