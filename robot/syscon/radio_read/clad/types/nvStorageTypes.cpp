// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/nvStorageTypes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/nvStorageTypes.clad

#include "clad/types/nvStorageTypes.h"

namespace Anki {

namespace Cozmo {

namespace NVStorage {

#ifdef CLAD_DEBUG
const char* NVEntryTagToString(NVEntryTag m)
{
  switch(m) {
    case NVEntry_Invalid:
      return "NVEntry_Invalid";
    case NVEntry_WipeAll:
      return "NVEntry_WipeAll";
    case NVEntry_GameSkillLevels:
      return "NVEntry_GameSkillLevels";
    case NVEntry_Junk:
      return "NVEntry_Junk";
    case NVEntry_FaceAlbumData:
      return "NVEntry_FaceAlbumData";
    case NVEntry_FaceEnrollData:
      return "NVEntry_FaceEnrollData";
    case NVEntry_MultiBlobJunk:
      return "NVEntry_MultiBlobJunk";
    case NVEntry_BirthCertificate:
      return "NVEntry_BirthCertificate";
    case NVEntry_CameraCalib:
      return "NVEntry_CameraCalib";
    case NVEntry_ToolCodeInfo:
      return "NVEntry_ToolCodeInfo";
    case NVEntry_CalibPose:
      return "NVEntry_CalibPose";
    case NVEntry_CalibMetaInfo:
      return "NVEntry_CalibMetaInfo";
    case NVEntry_ObservedCubePose:
      return "NVEntry_ObservedCubePose";
    case NVEntry_IMUInfo:
      return "NVEntry_IMUInfo";
    case NVEntry_CliffValOnDrop:
      return "NVEntry_CliffValOnDrop";
    case NVEntry_CliffValOnGround:
      return "NVEntry_CliffValOnGround";
    case NVEntry_PlaypenTestResults:
      return "NVEntry_PlaypenTestResults";
    case NVEntry_FactoryLock:
      return "NVEntry_FactoryLock";
    case NVEntry_CalibImage1:
      return "NVEntry_CalibImage1";
    case NVEntry_CalibImage2:
      return "NVEntry_CalibImage2";
    case NVEntry_CalibImage3:
      return "NVEntry_CalibImage3";
    case NVEntry_CalibImage4:
      return "NVEntry_CalibImage4";
    case NVEntry_CalibImage5:
      return "NVEntry_CalibImage5";
    case NVEntry_CalibImage6:
      return "NVEntry_CalibImage6";
    case NVEntry_ToolCodeImageLeft:
      return "NVEntry_ToolCodeImageLeft";
    case NVEntry_ToolCodeImageRight:
      return "NVEntry_ToolCodeImageRight";
    case NVEntry_PrePlaypenResults:
      return "NVEntry_PrePlaypenResults";
    case NVEntry_PrePlaypenCentroids:
      return "NVEntry_PrePlaypenCentroids";
    case NVEntry_IMUAverages:
      return "NVEntry_IMUAverages";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* NVResultToString(NVResult m)
{
  switch(m) {
    case NV_OKAY:
      return "NV_OKAY";
    case NV_SCHEDULED:
      return "NV_SCHEDULED";
    case NV_NO_DO:
      return "NV_NO_DO";
    case NV_NOT_FOUND:
      return "NV_NOT_FOUND";
    case NV_NO_ROOM:
      return "NV_NO_ROOM";
    case NV_ERROR:
      return "NV_ERROR";
    case NV_TIMEOUT:
      return "NV_TIMEOUT";
    case NV_BUSY:
      return "NV_BUSY";
    case NV_BAD_ARGS:
      return "NV_BAD_ARGS";
    case NV_NO_MEM:
      return "NV_NO_MEM";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* NVOperationToString(NVOperation m)
{
  switch(m) {
    case NVOP_READ:
      return "NVOP_READ";
    case NVOP_WRITE:
      return "NVOP_WRITE";
    case NVOP_ERASE:
      return "NVOP_ERASE";
    case NVOP_WIPEALL:
      return "NVOP_WIPEALL";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

} // namespace NVStorage

} // namespace Cozmo

} // namespace Anki

