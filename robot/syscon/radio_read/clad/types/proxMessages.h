// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/proxMessages.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/proxMessages.clad

#ifndef __CLAD_TYPES_PROX_MESSAGES_H__
#define __CLAD_TYPES_PROX_MESSAGES_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// MESSAGE CliffEvent
struct CliffEvent
{
  float x_mm;
  float y_mm;
  float angle_rad;
  bool detected;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 13;
  static const uint32_t MIN_SIZE = 13;
  inline uint32_t Size() const { return 13; }
  
};

// MESSAGE ProxObstacle
struct ProxObstacle
{
  uint8_t distance_mm;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 1;
  static const uint32_t MIN_SIZE = 1;
  inline uint32_t Size() const { return 1; }
  
};

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_PROX_MESSAGES_H__
