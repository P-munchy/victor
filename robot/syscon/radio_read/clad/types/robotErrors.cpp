// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotErrors.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotErrors.clad

#include "clad/types/robotErrors.h"

namespace Anki {

namespace Cozmo {

namespace RobotInterface {

#ifdef CLAD_DEBUG
const char* CrashSourceToString(CrashSource m)
{
  switch(m) {
    case WiFiCrash:
      return "WiFiCrash";
    case RTIPCrash:
      return "RTIPCrash";
    case BodyCrash:
      return "BodyCrash";
    case PropCrash:
      return "PropCrash";
    case I2SpiCrash:
      return "I2SpiCrash";
    case BootError:
      return "BootError";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* RobotErrorCodeToString(RobotErrorCode m)
{
  switch(m) {
    case REC_CrashReport:
      return "REC_CrashReport";
    case REC_I2SPI_TMD:
      return "REC_I2SPI_TMD";
    case REC_ReliableTransport:
      return "REC_ReliableTransport";
    case REC_I2SPI_Sync:
      return "REC_I2SPI_Sync";
    case REC_I2SPI_Lost:
      return "REC_I2SPI_Lost";
    case REC_NO_K02:
      return "REC_NO_K02";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

uint32_t CrashReport::Size() const
{
  uint32_t result = 0;
  // errorCode
  result += 4; // int_32
  // RESERVED
  result += 2; // int_16
  // which
  result += 1; // CrashSource
  // dump
  result += 1; // uint_8 (dump_length)
  result += 4 * this->dump_length; // uint_32
  return result;
}

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

