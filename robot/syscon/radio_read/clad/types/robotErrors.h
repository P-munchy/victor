// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotErrors.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotErrors.clad

#ifndef __CLAD_TYPES_ROBOT_ERRORS_H__
#define __CLAD_TYPES_ROBOT_ERRORS_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

namespace RobotInterface {

// ENUM CrashSource
enum {
  WiFiCrash  = 0,
  RTIPCrash  = 1,
  BodyCrash  = 2,
  PropCrash  = 3,
  I2SpiCrash = 4,
  BootError  = 5,
};
typedef int8_t CrashSource;

#ifdef CLAD_DEBUG
const char* CrashSourceToString(CrashSource m);
#endif // CLAD_DEBUG

// ENUM RobotErrorCode
enum {
  REC_CrashReport       = 0,
  REC_I2SPI_TMD         = 1,
  REC_ReliableTransport = 2,
  REC_I2SPI_Sync        = 3,
  REC_I2SPI_Lost        = 4,
  REC_NO_K02            = 5,
};
typedef int32_t RobotErrorCode;

#ifdef CLAD_DEBUG
const char* RobotErrorCodeToString(RobotErrorCode m);
#endif // CLAD_DEBUG

// MESSAGE CrashReport
struct CrashReport
{
  int32_t errorCode;
  int16_t RESERVED;
  Anki::Cozmo::RobotInterface::CrashSource which;
  uint8_t dump_length;
  uint32_t dump[255];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 1028;
  static const uint32_t MIN_SIZE = 8;
  uint32_t Size() const;
  
};

// MESSAGE RobotErrorReport
struct RobotErrorReport
{
  Anki::Cozmo::RobotInterface::RobotErrorCode error;
  bool fatal;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 5;
  static const uint32_t MIN_SIZE = 5;
  inline uint32_t Size() const { return 5; }
  
};

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_ROBOT_ERRORS_H__
