// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotLogging.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotLogging.clad

#include "clad/types/robotLogging.h"

namespace Anki {

namespace Cozmo {

namespace RobotInterface {

#ifdef CLAD_DEBUG
const char* LogLevelToString(LogLevel m)
{
  switch(m) {
    case ANKI_LOG_LEVEL_DEBUG:
      return "ANKI_LOG_LEVEL_DEBUG";
    case ANKI_LOG_LEVEL_PRINT:
      return "ANKI_LOG_LEVEL_PRINT";
    case ANKI_LOG_LEVEL_INFO:
      return "ANKI_LOG_LEVEL_INFO";
    case ANKI_LOG_LEVEL_EVENT:
      return "ANKI_LOG_LEVEL_EVENT";
    case ANKI_LOG_LEVEL_WARN:
      return "ANKI_LOG_LEVEL_WARN";
    case ANKI_LOG_LEVEL_ASSERT:
      return "ANKI_LOG_LEVEL_ASSERT";
    case ANKI_LOG_LEVEL_ERROR:
      return "ANKI_LOG_LEVEL_ERROR";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

bool PrintTrace::IsValid() const
{
    return (value_length <= 12);
}

uint32_t PrintTrace::Size() const
{
  uint32_t result = 0;
  // stringId
  result += 4; // uint_32
  // name
  result += 2; // uint_16
  // level
  result += 1; // LogLevel
  // value
  result += 1; // uint_8 (value_length)
  result += 4 * this->value_length; // int_32
  return result;
}

bool TimeProfileStat::IsValid() const
{
    return (true);
}

uint32_t TimeProfileStat::Size() const
{
  uint32_t result = 0;
  // avg
  result += 4; // uint_32
  // max
  result += 4; // uint_32
  // isHeader
  result += 1; // bool
  // profName
  result += 1; // uint_8 (profName_length)
  result += 1 * this->profName_length; // uint_8
  return result;
}

uint32_t DataDump::Size() const
{
  uint32_t result = 0;
  // id
  result += 4; // uint_32
  // data
  result += 1; // uint_8 (data_length)
  result += 1 * this->data_length; // uint_8
  return result;
}

bool PrintText::IsValid() const
{
    return (true);
}

uint32_t PrintText::Size() const
{
  uint32_t result = 0;
  // level
  result += 1; // LogLevel
  // text
  result += 1; // uint_8 (text_length)
  result += 1 * this->text_length; // uint_8
  return result;
}

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

