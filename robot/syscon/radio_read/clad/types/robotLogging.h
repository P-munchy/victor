// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotLogging.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotLogging.clad

#ifndef __CLAD_TYPES_ROBOT_LOGGING_H__
#define __CLAD_TYPES_ROBOT_LOGGING_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

namespace RobotInterface {

// ENUM LogLevel
enum {
  ANKI_LOG_LEVEL_DEBUG   = -1, // -1
  ANKI_LOG_LEVEL_PRINT   = 0,  // 0
  ANKI_LOG_LEVEL_INFO,         // 1
  ANKI_LOG_LEVEL_EVENT,        // 2
  ANKI_LOG_LEVEL_WARN,         // 3
  ANKI_LOG_LEVEL_ASSERT,       // 4
  ANKI_LOG_LEVEL_ERROR,        // 5
};
typedef int8_t LogLevel;

#ifdef CLAD_DEBUG
const char* LogLevelToString(LogLevel m);
#endif // CLAD_DEBUG

// MESSAGE PrintTrace
struct PrintTrace
{
  uint32_t stringId;
  uint16_t name;
  Anki::Cozmo::RobotInterface::LogLevel level;
  uint8_t value_length;
  int32_t value[12];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const;
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 56;
  static const uint32_t MIN_SIZE = 8;
  uint32_t Size() const;
  
};

// MESSAGE MainCycleTimeError
struct MainCycleTimeError
{
  uint32_t numMainTooLongErrors;
  uint32_t avgMainTooLateTime;
  uint32_t numMainTooLateErrors;
  uint32_t avgMainTooLongTime;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 16;
  static const uint32_t MIN_SIZE = 16;
  inline uint32_t Size() const { return 16; }
  
};

// MESSAGE TimeProfileStat
struct TimeProfileStat
{
  uint32_t avg;
  uint32_t max;
  bool isHeader;
  uint8_t profName_length;
  char profName[255];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const;
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 265;
  static const uint32_t MIN_SIZE = 10;
  uint32_t Size() const;
  
};

// MESSAGE DataDump
struct DataDump
{
  uint32_t id;
  uint8_t data_length;
  uint8_t data[255];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 260;
  static const uint32_t MIN_SIZE = 5;
  uint32_t Size() const;
  
};

// MESSAGE PrintText
struct PrintText
{
  Anki::Cozmo::RobotInterface::LogLevel level;
  uint8_t text_length;
  char text[255];
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const;
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 257;
  static const uint32_t MIN_SIZE = 2;
  uint32_t Size() const;
  
};

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_ROBOT_LOGGING_H__
