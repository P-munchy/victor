// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotStatusAndActions.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotStatusAndActions.clad

#include "clad/types/robotStatusAndActions.h"

namespace Anki {

namespace Cozmo {

#ifdef CLAD_DEBUG
const char* RobotStatusFlagToString(RobotStatusFlag m)
{
  switch(m) {
    case NoneRobotStatusFlag:
      return "NoneRobotStatusFlag";
    case IS_MOVING:
      return "IS_MOVING";
    case IS_CARRYING_BLOCK:
      return "IS_CARRYING_BLOCK";
    case IS_PICKING_OR_PLACING:
      return "IS_PICKING_OR_PLACING";
    case IS_PICKED_UP:
      return "IS_PICKED_UP";
    case IS_ANIMATING:
      return "IS_ANIMATING";
    case IS_PATHING:
      return "IS_PATHING";
    case LIFT_IN_POS:
      return "LIFT_IN_POS";
    case HEAD_IN_POS:
      return "HEAD_IN_POS";
    case IS_ANIM_BUFFER_FULL:
      return "IS_ANIM_BUFFER_FULL";
    case IS_ANIMATING_IDLE:
      return "IS_ANIMATING_IDLE";
    case IS_ON_CHARGER:
      return "IS_ON_CHARGER";
    case IS_CHARGING:
      return "IS_CHARGING";
    case CLIFF_DETECTED:
      return "CLIFF_DETECTED";
    case ARE_WHEELS_MOVING:
      return "ARE_WHEELS_MOVING";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* DockActionToString(DockAction m)
{
  switch(m) {
    case DA_PICKUP_LOW:
      return "DA_PICKUP_LOW";
    case DA_PICKUP_HIGH:
      return "DA_PICKUP_HIGH";
    case DA_PLACE_HIGH:
      return "DA_PLACE_HIGH";
    case DA_PLACE_LOW:
      return "DA_PLACE_LOW";
    case DA_PLACE_LOW_BLIND:
      return "DA_PLACE_LOW_BLIND";
    case DA_ROLL_LOW:
      return "DA_ROLL_LOW";
    case DA_POP_A_WHEELIE:
      return "DA_POP_A_WHEELIE";
    case DA_ALIGN:
      return "DA_ALIGN";
    case DA_RAMP_ASCEND:
      return "DA_RAMP_ASCEND";
    case DA_RAMP_DESCEND:
      return "DA_RAMP_DESCEND";
    case DA_CROSS_BRIDGE:
      return "DA_CROSS_BRIDGE";
    case DA_MOUNT_CHARGER:
      return "DA_MOUNT_CHARGER";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* CarryStateToString(CarryState m)
{
  switch(m) {
    case CARRY_NONE:
      return "CARRY_NONE";
    case CARRY_1_BLOCK:
      return "CARRY_1_BLOCK";
    case CARRY_2_BLOCK:
      return "CARRY_2_BLOCK";
    case NUM_CARRY_STATES:
      return "NUM_CARRY_STATES";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

namespace RobotInterface {

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

