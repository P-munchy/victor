// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotStatusAndActions.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotStatusAndActions.clad

#ifndef __CLAD_TYPES_ROBOT_STATUS_AND_ACTIONS_H__
#define __CLAD_TYPES_ROBOT_STATUS_AND_ACTIONS_H__

#include <stdbool.h>
#include <stdint.h>

namespace Anki {

namespace Cozmo {

// ENUM RobotStatusFlag
enum {
  NoneRobotStatusFlag,            // 0
  IS_MOVING             = 0x1,    // 1
  IS_CARRYING_BLOCK     = 0x2,    // 2
  IS_PICKING_OR_PLACING = 0x4,    // 4
  IS_PICKED_UP          = 0x8,    // 8
  IS_ANIMATING          = 0x40,   // 64
  IS_PATHING            = 0x80,   // 128
  LIFT_IN_POS           = 0x100,  // 256
  HEAD_IN_POS           = 0x200,  // 512
  IS_ANIM_BUFFER_FULL   = 0x400,  // 1024
  IS_ANIMATING_IDLE     = 0x800,  // 2048
  IS_ON_CHARGER         = 0x1000, // 4096
  IS_CHARGING           = 0x2000, // 8192
  CLIFF_DETECTED        = 0x4000, // 16384
  ARE_WHEELS_MOVING     = 0x8000, // 32768
};
typedef uint16_t RobotStatusFlag;

#ifdef CLAD_DEBUG
const char* RobotStatusFlagToString(RobotStatusFlag m);
#endif // CLAD_DEBUG

// ENUM DockAction
enum {
  DA_PICKUP_LOW       = 0, // 0
  DA_PICKUP_HIGH,          // 1
  DA_PLACE_HIGH,           // 2
  DA_PLACE_LOW,            // 3
  DA_PLACE_LOW_BLIND,      // 4
  DA_ROLL_LOW,             // 5
  DA_POP_A_WHEELIE,        // 6
  DA_ALIGN,                // 7
  DA_RAMP_ASCEND,          // 8
  DA_RAMP_DESCEND,         // 9
  DA_CROSS_BRIDGE,         // 10
  DA_MOUNT_CHARGER,        // 11
};
typedef uint8_t DockAction;

#ifdef CLAD_DEBUG
const char* DockActionToString(DockAction m);
#endif // CLAD_DEBUG

// ENUM CarryState
enum {
  CARRY_NONE        = 0, // 0
  CARRY_1_BLOCK,         // 1
  CARRY_2_BLOCK,         // 2
  NUM_CARRY_STATES,      // 3
};
typedef uint8_t CarryState;

#ifdef CLAD_DEBUG
const char* CarryStateToString(CarryState m);
#endif // CLAD_DEBUG

// MESSAGE CarryStateUpdate
struct CarryStateUpdate
{
  Anki::Cozmo::CarryState state;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 1;
  static const uint32_t MIN_SIZE = 1;
  inline uint32_t Size() const { return 1; }
  
};

// STRUCTURE RobotPose
struct RobotPose
{
  float x;
  float y;
  float z;
  float angle;
  float pitch_angle;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 20;
  static const uint32_t MIN_SIZE = 20;
  inline uint32_t Size() const { return 20; }
  
};

// STRUCTURE RobotState
struct RobotState
{
  uint32_t timestamp;
  uint32_t pose_frame_id;
  Anki::Cozmo::RobotPose pose;
  float lwheel_speed_mmps;
  float rwheel_speed_mmps;
  float headAngle;
  float liftAngle;
  float liftHeight;
  float rawGyroZ;
  float rawAccelY;
  uint16_t status;
  uint16_t lastPathID;
  uint16_t cliffDataRaw;
  int8_t currPathSegment;
  uint8_t numFreeSegmentSlots;
  uint8_t battVolt10x;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 65;
  static const uint32_t MIN_SIZE = 65;
  inline uint32_t Size() const { return 65; }
  
};

// STRUCTURE PowerState
struct PowerState
{
  int32_t VBatFixed;
  int32_t VExtFixed;
  uint8_t batteryLevel;
  bool onCharger;
  bool isCharging;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 11;
  static const uint32_t MIN_SIZE = 11;
  inline uint32_t Size() const { return 11; }
  
};

namespace RobotInterface {

// MESSAGE AnimationState
struct AnimationState
{
  uint32_t timestamp;
  int32_t numAnimBytesPlayed;
  int32_t numAudioFramesPlayed;
  Anki::Cozmo::RobotStatusFlag status;
  uint8_t enabledAnimTracks;
  uint8_t tag;
  
  /**** Cast to/from buffer, adjusting any padding. ****/
  inline uint8_t* GetBuffer() { return reinterpret_cast<uint8_t*>(this); }
  inline const uint8_t* GetBuffer() const { return reinterpret_cast<const uint8_t*>(this); }
  
  /**** Check if current message is parsable. ****/
  bool IsValid() const { return true; }
  
  /**** Serialized size, starting from GetBuffer(). ****/
  static const uint32_t MAX_SIZE = 16;
  static const uint32_t MIN_SIZE = 16;
  inline uint32_t Size() const { return 16; }
  
};

} // namespace RobotInterface

} // namespace Cozmo

} // namespace Anki

#endif // __CLAD_TYPES_ROBOT_STATUS_AND_ACTIONS_H__
