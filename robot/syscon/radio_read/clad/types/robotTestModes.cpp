// Autogenerated C++ Lite (embedded) message buffer code.
// Source: clad/types/robotTestModes.clad
// Full command line: ../../tools/message-buffers/emitters/CPPLite_emitter.py --max-message-size 1400 -C ./src/ -I -o ../generated/clad//robot/ clad/types/robotTestModes.clad

#include "clad/types/robotTestModes.h"

namespace Anki {

namespace Cozmo {

#ifdef CLAD_DEBUG
const char* TestModeToString(TestMode m)
{
  switch(m) {
    case TM_NONE:
      return "TM_NONE";
    case TM_PLACE_BLOCK_ON_GROUND:
      return "TM_PLACE_BLOCK_ON_GROUND";
    case TM_DOCK_PATH:
      return "TM_DOCK_PATH";
    case TM_PATH_FOLLOW:
      return "TM_PATH_FOLLOW";
    case TM_PATH_FOLLOW_CONVENIENCE_FUNCTIONS:
      return "TM_PATH_FOLLOW_CONVENIENCE_FUNCTIONS";
    case TM_DIRECT_DRIVE:
      return "TM_DIRECT_DRIVE";
    case TM_LIFT:
      return "TM_LIFT";
    case TM_LIFT_TOGGLE:
      return "TM_LIFT_TOGGLE";
    case TM_HEAD:
      return "TM_HEAD";
    case TM_IMU:
      return "TM_IMU";
    case TM_ANIMATION:
      return "TM_ANIMATION";
    case TM_LIGHTS:
      return "TM_LIGHTS";
    case TM_FACE_DISPLAY:
      return "TM_FACE_DISPLAY";
    case TM_STOP_TEST:
      return "TM_STOP_TEST";
    case TM_MAX_POWER_TEST:
      return "TM_MAX_POWER_TEST";
    case TM_FACE_TRACKING:
      return "TM_FACE_TRACKING";
    case TM_NUM_TESTS:
      return "TM_NUM_TESTS";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* DriveTestFlagsToString(DriveTestFlags m)
{
  switch(m) {
    case DTF_ENABLE_DIRECT_HAL_TEST:
      return "DTF_ENABLE_DIRECT_HAL_TEST";
    case DTF_ENABLE_CYCLE_SPEEDS_TEST:
      return "DTF_ENABLE_CYCLE_SPEEDS_TEST";
    case DTF_ENABLE_TOGGLE_DIR:
      return "DTF_ENABLE_TOGGLE_DIR";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* LiftTestFlagsToString(LiftTestFlags m)
{
  switch(m) {
    case LiftTF_TEST_POWER:
      return "LiftTF_TEST_POWER";
    case LiftTF_TEST_HEIGHTS:
      return "LiftTF_TEST_HEIGHTS";
    case LiftTF_NODDING:
      return "LiftTF_NODDING";
    case LiftTF_DISABLE_MOTOR:
      return "LiftTF_DISABLE_MOTOR";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* HeadTestFlagsToString(HeadTestFlags m)
{
  switch(m) {
    case HTF_TEST_POWER:
      return "HTF_TEST_POWER";
    case HTF_TEST_ANGLES:
      return "HTF_TEST_ANGLES";
    case HTF_NODDING:
      return "HTF_NODDING";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* IMUTestFlagsToString(IMUTestFlags m)
{
  switch(m) {
    case ITF_DO_TURNS:
      return "ITF_DO_TURNS";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

#ifdef CLAD_DEBUG
const char* LightTestFlagsToString(LightTestFlags m)
{
  switch(m) {
    case LTF_CYCLE_ALL:
      return "LTF_CYCLE_ALL";
    default:
      return 0;
  }
}
#endif // CLAD_DEBUG

} // namespace Cozmo

} // namespace Anki

