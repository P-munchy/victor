#VRML_SIM V7.3.0 utf8

PROTO Block1x1 [
  field SFString name "Block000"
  field SFString type "1" # BlockType
  field SFVec3f translation 0 0 0.022
  field SFRotation rotation 0 0 1 0
  field SFFloat density 250
  field SFColor blockColor 1 0 0
  field SFBool  useWhiteMarkerBackgrounds TRUE
  field SFString markerImg ""  # Image path relative to textures/
  field SFBool active FALSE  # Whether or not this block has active lights
  field SFInt32 activeID 1   # Must be unique in the world among all active blocks
  field SFFloat width 0.044    # Length of one edge in meters
  
  field SFString markerImg_front ""
  field SFString markerImg_back  ""
  field SFString markerImg_left  ""
  field SFString markerImg_right ""
  field SFString markerImg_top   ""
  field SFString markerImg_bottom ""
]
{
Supervisor {

  %{
    # Set some dimensions
    hWidth = fields.width.value/2
    ledWidth = 0.007
    ledHWidth = ledWidth/2
  }%

  %{ if fields.active.value then }%
    controller "block_controller"
  %{ end }%

  name IS name
  model IS type
  translation IS translation
  rotation IS rotation
  contactMaterial "cmat_block"
  children [
		
		# Front Face
		VisionMarker {
			rotation 0 0 1 -1.5708
			translation %{=-hWidth}% 0 0
			%{ if fields.markerImg_front.value ~= "" then }%
			  image IS markerImg_front
			%{ else }%
			  image IS markerImg
			%{ end }%
			connectorName "connectorFront"
			connectorRotation 0 1 0 -1.57079
		}
		
		# Back Face
		VisionMarker {
			rotation 0 0 1 1.5708
			translation %{=hWidth}% 0 0
			%{ if fields.markerImg_back.value ~= "" then }%
			  image IS markerImg_back
			%{ else }%
			  image IS markerImg
			%{ end }%
			connectorName "connectorBack"
			connectorRotation 0 1 0 1.57079
		}
		
		# Bottom Face
    VisionMarker {
      rotation 1 0 0 -1.5708
      translation 0 0 %{=-hWidth}%
      %{ if fields.markerImg_bottom.value ~= "" then }%
        image IS markerImg_bottom
      %{ else }%
        image IS markerImg
      %{ end }%
      connectorName "connectorBottom"
      connectorRotation 0 1 0 3.14159
    }
		
		# Top Face
		VisionMarker {
			rotation 1 0 0 1.5708
			translation 0 0 %{=hWidth}%
			%{ if fields.markerImg_top.value ~= "" then }%
			  image IS markerImg_top
			%{ else }%
			  image IS markerImg
			%{ end }%
			connectorName "connectorTop"
			connectorRotation 0 1 0 0
		}
						
		# Left Face
		VisionMarker {
			rotation 0 0 1 3.1415
			translation 0 %{=hWidth}% 0
			%{ if fields.markerImg_left.value ~= "" then }%
			  image IS markerImg_left
			%{ else }%
			  image IS markerImg
			%{ end }%
			connectorName "connectorLeft"
			connectorRotation 1 0 0 -1.57079
		}
		
		# Right Face
		VisionMarker {
			rotation 0 0 1 0
			translation 0 %{=-hWidth}% 0
			%{ if fields.markerImg_right.value ~= "" then }%
			  image IS markerImg_right
			%{ else }%
			  image IS markerImg
			%{ end }%
			connectorName "connectorRight"
			connectorRotation 1 0 0 1.57079
		}

    DEF Block1x1Shape Shape {
      appearance Appearance {
        material Material {
          diffuseColor IS blockColor
        }
      }
      geometry Box {
        size %{=fields.width.value}% %{=fields.width.value}% %{=fields.width.value}%
      }
    }
    
    %{ 
    if fields.active.value then
      # Index array of LED positions
      idx = {}
      idx[1] = {-1, 1, 1}
      idx[2] = {-1,-1, 1}
      idx[3] = {-1, 1,-1}
      idx[4] = {-1,-1,-1}

      idx[5] = { 1, 1, 1}
      idx[6] = { 1,-1, 1}
      idx[7] = { 1, 1,-1}
      idx[8] = { 1,-1,-1}

      for i=1,8 do
        led_name = string.format("led%d", i-1)

        # Position of PointLight wrt LED center
        px = idx[i][1] * (ledHWidth + 0.0001)
        py = idx[i][2] * (ledHWidth + 0.0001)
        pz = idx[i][3] * (ledHWidth + 0.0001)

        # Position of LED center wrt block origin
        lx = idx[i][1] * (hWidth - ledWidth/2 + 0.0001)
        ly = idx[i][2] * (hWidth - ledWidth/2 + 0.0001)
        lz = idx[i][3] * (hWidth - ledWidth/2 + 0.0001)
    }%
    LED {
      name "%{=led_name}%"
      children [
        DEF LED_SHAPE Group {
          children [
            # NOTE: PointLight slows down simulation significantly!
            #PointLight {
            # attenuation 0 0 5000
            # location    %{=px}% %{=py}% %{=pz}%
            # color       1 1 1
            #}
            Shape {
      	      appearance Appearance {
                material Material {
                  diffuseColor 0.3 0.3 0.3
                }
              }
              geometry Box {
                size %{=ledWidth}% %{=ledWidth}% %{=ledWidth}%
              }
            }
          ]
        }
      ]
      translation %{=lx}% %{=ly}% %{=lz}%
      color []
      gradual TRUE
    }
    %{ end }%   # End light for loop

    # Radio receive channel for messages from robot
    Receiver {
      name   "receiver"    
      type   "radio"
    }
    
    # Radio send channel for messages to Robot
    Emitter {
      name   "emitter"
      type   "radio"
    }
 
    # Accelerometer
    Accelerometer {
      name "accel"
    }

    %{ end }%   # End of {if fields.active}

  ] # Block Children
  
  boundingObject USE Block1x1Shape
  physics DEF Block1x1Physics Physics {
    density IS density
  }
} # "Robot" (the actual block)

  
} # PROTO