// Autogenerated C++ message buffer code.
// Source: anki/cozmo/messageBuffers/game/UiMessagesG2U.clad
// Full command line: ../lib/anki/cozmo-engine/tools/message-buffers/emitters/CPP_emitter.py -C src -r ../game/include -o ../game/src --header-output-extension .def anki/cozmo/messageBuffers/game/UiMessagesG2U.clad

#include "anki/cozmo/messageBuffers/game/UiMessagesG2U.def"

namespace Anki {

namespace Cozmo {

namespace G2U {

// MESSAGE Ping

Ping::Ping(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

Ping::Ping(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t Ping::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t Ping::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->counter);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t Ping::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t Ping::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->counter);
	return buffer.GetBytesRead();
}

size_t Ping::Size() const
{
	size_t result = 0;
	//counter
	result += 4; // = uint_32
	return result;
}

bool Ping::operator==(const Ping& other) const
{
	if (counter != other.counter) {
		return false;
	}
	return true;
}

bool Ping::operator!=(const Ping& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotAvailable

RobotAvailable::RobotAvailable(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotAvailable::RobotAvailable(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotAvailable::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotAvailable::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotAvailable::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotAvailable::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t RobotAvailable::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	return result;
}

bool RobotAvailable::operator==(const RobotAvailable& other) const
{
	if (robotID != other.robotID) {
		return false;
	}
	return true;
}

bool RobotAvailable::operator!=(const RobotAvailable& other) const
{
	return !(operator==(other));
}


// MESSAGE UiDeviceAvailable

UiDeviceAvailable::UiDeviceAvailable(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

UiDeviceAvailable::UiDeviceAvailable(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t UiDeviceAvailable::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t UiDeviceAvailable::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->deviceID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t UiDeviceAvailable::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t UiDeviceAvailable::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->deviceID);
	return buffer.GetBytesRead();
}

size_t UiDeviceAvailable::Size() const
{
	size_t result = 0;
	//deviceID
	result += 4; // = uint_32
	return result;
}

bool UiDeviceAvailable::operator==(const UiDeviceAvailable& other) const
{
	if (deviceID != other.deviceID) {
		return false;
	}
	return true;
}

bool UiDeviceAvailable::operator!=(const UiDeviceAvailable& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotConnected

RobotConnected::RobotConnected(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotConnected::RobotConnected(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotConnected::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotConnected::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->successful);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotConnected::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotConnected::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->successful);
	return buffer.GetBytesRead();
}

size_t RobotConnected::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	//successful
	result += 1; // = uint_8
	return result;
}

bool RobotConnected::operator==(const RobotConnected& other) const
{
	if (robotID != other.robotID
	|| successful != other.successful) {
		return false;
	}
	return true;
}

bool RobotConnected::operator!=(const RobotConnected& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotDisconnected

RobotDisconnected::RobotDisconnected(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotDisconnected::RobotDisconnected(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotDisconnected::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotDisconnected::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->timeSinceLastMsg_sec);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotDisconnected::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotDisconnected::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->timeSinceLastMsg_sec);
	return buffer.GetBytesRead();
}

size_t RobotDisconnected::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	//timeSinceLastMsg_sec
	result += 4; // = float_32
	return result;
}

bool RobotDisconnected::operator==(const RobotDisconnected& other) const
{
	if (robotID != other.robotID
	|| timeSinceLastMsg_sec != other.timeSinceLastMsg_sec) {
		return false;
	}
	return true;
}

bool RobotDisconnected::operator!=(const RobotDisconnected& other) const
{
	return !(operator==(other));
}


// MESSAGE UiDeviceConnected

UiDeviceConnected::UiDeviceConnected(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

UiDeviceConnected::UiDeviceConnected(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t UiDeviceConnected::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t UiDeviceConnected::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->deviceID);
	buffer.Write(this->successful);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t UiDeviceConnected::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t UiDeviceConnected::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->deviceID);
	buffer.Read(this->successful);
	return buffer.GetBytesRead();
}

size_t UiDeviceConnected::Size() const
{
	size_t result = 0;
	//deviceID
	result += 4; // = uint_32
	//successful
	result += 1; // = uint_8
	return result;
}

bool UiDeviceConnected::operator==(const UiDeviceConnected& other) const
{
	if (deviceID != other.deviceID
	|| successful != other.successful) {
		return false;
	}
	return true;
}

bool UiDeviceConnected::operator!=(const UiDeviceConnected& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotState

RobotState::RobotState(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotState::RobotState(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotState::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotState::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->pose_x);
	buffer.Write(this->pose_y);
	buffer.Write(this->pose_z);
	buffer.Write(this->poseAngle_rad);
	buffer.Write(this->pose_quaternion0);
	buffer.Write(this->pose_quaternion1);
	buffer.Write(this->pose_quaternion2);
	buffer.Write(this->pose_quaternion3);
	buffer.Write(this->leftWheelSpeed_mmps);
	buffer.Write(this->rightWheelSpeed_mmps);
	buffer.Write(this->headAngle_rad);
	buffer.Write(this->liftHeight_mm);
	buffer.Write(this->batteryVoltage);
	buffer.Write(this->carryingObjectID);
	buffer.Write(this->carryingObjectOnTopID);
	buffer.Write(this->headTrackingObjectID);
	buffer.Write(this->status);
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotState::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotState::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->pose_x);
	buffer.Read(this->pose_y);
	buffer.Read(this->pose_z);
	buffer.Read(this->poseAngle_rad);
	buffer.Read(this->pose_quaternion0);
	buffer.Read(this->pose_quaternion1);
	buffer.Read(this->pose_quaternion2);
	buffer.Read(this->pose_quaternion3);
	buffer.Read(this->leftWheelSpeed_mmps);
	buffer.Read(this->rightWheelSpeed_mmps);
	buffer.Read(this->headAngle_rad);
	buffer.Read(this->liftHeight_mm);
	buffer.Read(this->batteryVoltage);
	buffer.Read(this->carryingObjectID);
	buffer.Read(this->carryingObjectOnTopID);
	buffer.Read(this->headTrackingObjectID);
	buffer.Read(this->status);
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t RobotState::Size() const
{
	size_t result = 0;
	//pose_x
	result += 4; // = float_32
	//pose_y
	result += 4; // = float_32
	//pose_z
	result += 4; // = float_32
	//poseAngle_rad
	result += 4; // = float_32
	//pose_quaternion0
	result += 4; // = float_32
	//pose_quaternion1
	result += 4; // = float_32
	//pose_quaternion2
	result += 4; // = float_32
	//pose_quaternion3
	result += 4; // = float_32
	//leftWheelSpeed_mmps
	result += 4; // = float_32
	//rightWheelSpeed_mmps
	result += 4; // = float_32
	//headAngle_rad
	result += 4; // = float_32
	//liftHeight_mm
	result += 4; // = float_32
	//batteryVoltage
	result += 4; // = float_32
	//carryingObjectID
	result += 4; // = int_32
	//carryingObjectOnTopID
	result += 4; // = int_32
	//headTrackingObjectID
	result += 4; // = int_32
	//status
	result += 1; // = uint_8
	//robotID
	result += 1; // = uint_8
	return result;
}

bool RobotState::operator==(const RobotState& other) const
{
	if (pose_x != other.pose_x
	|| pose_y != other.pose_y
	|| pose_z != other.pose_z
	|| poseAngle_rad != other.poseAngle_rad
	|| pose_quaternion0 != other.pose_quaternion0
	|| pose_quaternion1 != other.pose_quaternion1
	|| pose_quaternion2 != other.pose_quaternion2
	|| pose_quaternion3 != other.pose_quaternion3
	|| leftWheelSpeed_mmps != other.leftWheelSpeed_mmps
	|| rightWheelSpeed_mmps != other.rightWheelSpeed_mmps
	|| headAngle_rad != other.headAngle_rad
	|| liftHeight_mm != other.liftHeight_mm
	|| batteryVoltage != other.batteryVoltage
	|| carryingObjectID != other.carryingObjectID
	|| carryingObjectOnTopID != other.carryingObjectOnTopID
	|| headTrackingObjectID != other.headTrackingObjectID
	|| status != other.status
	|| robotID != other.robotID) {
		return false;
	}
	return true;
}

bool RobotState::operator!=(const RobotState& other) const
{
	return !(operator==(other));
}


// MESSAGE ImageChunk

ImageChunk::ImageChunk(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

ImageChunk::ImageChunk(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t ImageChunk::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t ImageChunk::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->imageId);
	buffer.Write(this->frameTimeStamp);
	buffer.Write(this->nrows);
	buffer.Write(this->ncols);
	buffer.Write(this->chunkSize);
	buffer.Write(this->imageEncoding);
	buffer.Write(this->imageChunkCount);
	buffer.Write(this->chunkId);
	buffer.WriteFArray<uint8_t, 1400>(this->data);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t ImageChunk::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t ImageChunk::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->imageId);
	buffer.Read(this->frameTimeStamp);
	buffer.Read(this->nrows);
	buffer.Read(this->ncols);
	buffer.Read(this->chunkSize);
	buffer.Read(this->imageEncoding);
	buffer.Read(this->imageChunkCount);
	buffer.Read(this->chunkId);
	buffer.ReadFArray<uint8_t, 1400>(this->data);
	return buffer.GetBytesRead();
}

size_t ImageChunk::Size() const
{
	size_t result = 0;
	//imageId
	result += 4; // = uint_32
	//frameTimeStamp
	result += 4; // = uint_32
	//nrows
	result += 2; // = uint_16
	//ncols
	result += 2; // = uint_16
	//chunkSize
	result += 2; // = uint_16
	//imageEncoding
	result += 1; // = uint_8
	//imageChunkCount
	result += 1; // = uint_8
	//chunkId
	result += 1; // = uint_8
	//data
	result += 1 * 1400; // = uint_8 * 1400
	return result;
}

bool ImageChunk::operator==(const ImageChunk& other) const
{
	if (imageId != other.imageId
	|| frameTimeStamp != other.frameTimeStamp
	|| nrows != other.nrows
	|| ncols != other.ncols
	|| chunkSize != other.chunkSize
	|| imageEncoding != other.imageEncoding
	|| imageChunkCount != other.imageChunkCount
	|| chunkId != other.chunkId
	|| data != other.data) {
		return false;
	}
	return true;
}

bool ImageChunk::operator!=(const ImageChunk& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotObservedObject

RobotObservedObject::RobotObservedObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotObservedObject::RobotObservedObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotObservedObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotObservedObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->objectFamily);
	buffer.Write(this->objectType);
	buffer.Write(this->objectID);
	buffer.Write(this->img_topLeft_x);
	buffer.Write(this->img_topLeft_y);
	buffer.Write(this->img_width);
	buffer.Write(this->img_height);
	buffer.Write(this->world_x);
	buffer.Write(this->world_y);
	buffer.Write(this->world_z);
	buffer.Write(this->quaternion0);
	buffer.Write(this->quaternion1);
	buffer.Write(this->quaternion2);
	buffer.Write(this->quaternion3);
	buffer.Write(this->topFaceOrientation_rad);
	buffer.Write(this->markersVisible);
	buffer.Write(this->isActive);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotObservedObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotObservedObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->objectFamily);
	buffer.Read(this->objectType);
	buffer.Read(this->objectID);
	buffer.Read(this->img_topLeft_x);
	buffer.Read(this->img_topLeft_y);
	buffer.Read(this->img_width);
	buffer.Read(this->img_height);
	buffer.Read(this->world_x);
	buffer.Read(this->world_y);
	buffer.Read(this->world_z);
	buffer.Read(this->quaternion0);
	buffer.Read(this->quaternion1);
	buffer.Read(this->quaternion2);
	buffer.Read(this->quaternion3);
	buffer.Read(this->topFaceOrientation_rad);
	buffer.Read(this->markersVisible);
	buffer.Read(this->isActive);
	return buffer.GetBytesRead();
}

size_t RobotObservedObject::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	//objectFamily
	result += 4; // = uint_32
	//objectType
	result += 4; // = uint_32
	//objectID
	result += 4; // = int_32
	//img_topLeft_x
	result += 4; // = float_32
	//img_topLeft_y
	result += 4; // = float_32
	//img_width
	result += 4; // = float_32
	//img_height
	result += 4; // = float_32
	//world_x
	result += 4; // = float_32
	//world_y
	result += 4; // = float_32
	//world_z
	result += 4; // = float_32
	//quaternion0
	result += 4; // = float_32
	//quaternion1
	result += 4; // = float_32
	//quaternion2
	result += 4; // = float_32
	//quaternion3
	result += 4; // = float_32
	//topFaceOrientation_rad
	result += 4; // = float_32
	//markersVisible
	result += 1; // = uint_8
	//isActive
	result += 1; // = uint_8
	return result;
}

bool RobotObservedObject::operator==(const RobotObservedObject& other) const
{
	if (robotID != other.robotID
	|| objectFamily != other.objectFamily
	|| objectType != other.objectType
	|| objectID != other.objectID
	|| img_topLeft_x != other.img_topLeft_x
	|| img_topLeft_y != other.img_topLeft_y
	|| img_width != other.img_width
	|| img_height != other.img_height
	|| world_x != other.world_x
	|| world_y != other.world_y
	|| world_z != other.world_z
	|| quaternion0 != other.quaternion0
	|| quaternion1 != other.quaternion1
	|| quaternion2 != other.quaternion2
	|| quaternion3 != other.quaternion3
	|| topFaceOrientation_rad != other.topFaceOrientation_rad
	|| markersVisible != other.markersVisible
	|| isActive != other.isActive) {
		return false;
	}
	return true;
}

bool RobotObservedObject::operator!=(const RobotObservedObject& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotObservedNothing

RobotObservedNothing::RobotObservedNothing(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotObservedNothing::RobotObservedNothing(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotObservedNothing::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotObservedNothing::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotObservedNothing::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotObservedNothing::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	return buffer.GetBytesRead();
}

size_t RobotObservedNothing::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	return result;
}

bool RobotObservedNothing::operator==(const RobotObservedNothing& other) const
{
	if (robotID != other.robotID) {
		return false;
	}
	return true;
}

bool RobotObservedNothing::operator!=(const RobotObservedNothing& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotDeletedObject

RobotDeletedObject::RobotDeletedObject(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotDeletedObject::RobotDeletedObject(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotDeletedObject::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotDeletedObject::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->objectID);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotDeletedObject::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotDeletedObject::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->objectID);
	return buffer.GetBytesRead();
}

size_t RobotDeletedObject::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	//objectID
	result += 4; // = uint_32
	return result;
}

bool RobotDeletedObject::operator==(const RobotDeletedObject& other) const
{
	if (robotID != other.robotID
	|| objectID != other.objectID) {
		return false;
	}
	return true;
}

bool RobotDeletedObject::operator!=(const RobotDeletedObject& other) const
{
	return !(operator==(other));
}


// MESSAGE DeviceDetectedVisionMarker

DeviceDetectedVisionMarker::DeviceDetectedVisionMarker(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

DeviceDetectedVisionMarker::DeviceDetectedVisionMarker(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t DeviceDetectedVisionMarker::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t DeviceDetectedVisionMarker::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->markerType);
	buffer.Write(this->x_upperLeft);
	buffer.Write(this->y_upperLeft);
	buffer.Write(this->x_lowerLeft);
	buffer.Write(this->y_lowerLeft);
	buffer.Write(this->x_upperRight);
	buffer.Write(this->y_upperRight);
	buffer.Write(this->x_lowerRight);
	buffer.Write(this->y_lowerRight);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t DeviceDetectedVisionMarker::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t DeviceDetectedVisionMarker::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->markerType);
	buffer.Read(this->x_upperLeft);
	buffer.Read(this->y_upperLeft);
	buffer.Read(this->x_lowerLeft);
	buffer.Read(this->y_lowerLeft);
	buffer.Read(this->x_upperRight);
	buffer.Read(this->y_upperRight);
	buffer.Read(this->x_lowerRight);
	buffer.Read(this->y_lowerRight);
	return buffer.GetBytesRead();
}

size_t DeviceDetectedVisionMarker::Size() const
{
	size_t result = 0;
	//markerType
	result += 4; // = uint_32
	//x_upperLeft
	result += 4; // = float_32
	//y_upperLeft
	result += 4; // = float_32
	//x_lowerLeft
	result += 4; // = float_32
	//y_lowerLeft
	result += 4; // = float_32
	//x_upperRight
	result += 4; // = float_32
	//y_upperRight
	result += 4; // = float_32
	//x_lowerRight
	result += 4; // = float_32
	//y_lowerRight
	result += 4; // = float_32
	return result;
}

bool DeviceDetectedVisionMarker::operator==(const DeviceDetectedVisionMarker& other) const
{
	if (markerType != other.markerType
	|| x_upperLeft != other.x_upperLeft
	|| y_upperLeft != other.y_upperLeft
	|| x_lowerLeft != other.x_lowerLeft
	|| y_lowerLeft != other.y_lowerLeft
	|| x_upperRight != other.x_upperRight
	|| y_upperRight != other.y_upperRight
	|| x_lowerRight != other.x_lowerRight
	|| y_lowerRight != other.y_lowerRight) {
		return false;
	}
	return true;
}

bool DeviceDetectedVisionMarker::operator!=(const DeviceDetectedVisionMarker& other) const
{
	return !(operator==(other));
}


// MESSAGE RobotCompletedAction

RobotCompletedAction::RobotCompletedAction(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

RobotCompletedAction::RobotCompletedAction(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t RobotCompletedAction::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t RobotCompletedAction::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(this->robotID);
	buffer.Write(this->actionType);
	buffer.WriteFArray<int32_t, 5>(this->objectIDs);
	buffer.Write(this->numObjects);
	buffer.Write(this->success);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t RobotCompletedAction::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t RobotCompletedAction::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.Read(this->robotID);
	buffer.Read(this->actionType);
	buffer.ReadFArray<int32_t, 5>(this->objectIDs);
	buffer.Read(this->numObjects);
	buffer.Read(this->success);
	return buffer.GetBytesRead();
}

size_t RobotCompletedAction::Size() const
{
	size_t result = 0;
	//robotID
	result += 4; // = uint_32
	//actionType
	result += 4; // = int_32
	//objectIDs
	result += 4 * 5; // = int_32 * 5
	//numObjects
	result += 1; // = uint_8
	//success
	result += 1; // = uint_8
	return result;
}

bool RobotCompletedAction::operator==(const RobotCompletedAction& other) const
{
	if (robotID != other.robotID
	|| actionType != other.actionType
	|| objectIDs != other.objectIDs
	|| numObjects != other.numObjects
	|| success != other.success) {
		return false;
	}
	return true;
}

bool RobotCompletedAction::operator!=(const RobotCompletedAction& other) const
{
	return !(operator==(other));
}


// MESSAGE PlaySound

PlaySound::PlaySound(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

PlaySound::PlaySound(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t PlaySound::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t PlaySound::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.WritePString<uint8_t>(this->soundFilename);
	buffer.Write(this->numLoops);
	buffer.Write(this->volume);
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t PlaySound::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t PlaySound::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	buffer.ReadPString<uint8_t>(this->soundFilename);
	buffer.Read(this->numLoops);
	buffer.Read(this->volume);
	return buffer.GetBytesRead();
}

size_t PlaySound::Size() const
{
	size_t result = 0;
	//soundFilename
	result += 1; // length = uint_8
	result += 1 * soundFilename.size(); //string
	//numLoops
	result += 1; // = uint_8
	//volume
	result += 1; // = uint_8
	return result;
}

bool PlaySound::operator==(const PlaySound& other) const
{
	if (soundFilename != other.soundFilename
	|| numLoops != other.numLoops
	|| volume != other.volume) {
		return false;
	}
	return true;
}

bool PlaySound::operator!=(const PlaySound& other) const
{
	return !(operator==(other));
}


// MESSAGE StopSound

StopSound::StopSound(const uint8_t* buff, size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	Unpack(buffer);
}

StopSound::StopSound(const CLAD::SafeMessageBuffer& buffer)
{
	Unpack(buffer);
}

size_t StopSound::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t StopSound::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t StopSound::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t StopSound::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	return buffer.GetBytesRead();
}

size_t StopSound::Size() const
{
	size_t result = 0;
	return result;
}

bool StopSound::operator==(const StopSound& other) const
{
	return true;
}

bool StopSound::operator!=(const StopSound& other) const
{
	return !(operator==(other));
}


// UNION Message

const char* MessageTagToString(const MessageTag tag) {
	switch (tag) {
	case MessageTag::Ping:
		return "Ping";
	case MessageTag::RobotAvailable:
		return "RobotAvailable";
	case MessageTag::UiDeviceAvailable:
		return "UiDeviceAvailable";
	case MessageTag::RobotConnected:
		return "RobotConnected";
	case MessageTag::RobotDisconnected:
		return "RobotDisconnected";
	case MessageTag::UiDeviceConnected:
		return "UiDeviceConnected";
	case MessageTag::RobotState:
		return "RobotState";
	case MessageTag::ImageChunk:
		return "ImageChunk";
	case MessageTag::RobotObservedObject:
		return "RobotObservedObject";
	case MessageTag::RobotObservedNothing:
		return "RobotObservedNothing";
	case MessageTag::RobotDeletedObject:
		return "RobotDeletedObject";
	case MessageTag::DeviceDetectedVisionMarker:
		return "DeviceDetectedVisionMarker";
	case MessageTag::RobotCompletedAction:
		return "RobotCompletedAction";
	case MessageTag::PlaySound:
		return "PlaySound";
	case MessageTag::StopSound:
		return "StopSound";
	default:
		return "INVALID";
	}
}

Message::Message(const CLAD::SafeMessageBuffer& buff) :_tag(Tag::INVALID)
{
	Unpack(buff);
}

Message::Message(const uint8_t* buffer, size_t length) :_tag(Tag::INVALID)
{
	CLAD::SafeMessageBuffer buff(const_cast<uint8_t*>(buffer), length);
	Unpack(buff);
}

const Anki::Cozmo::G2U::Ping& Message::Get_Ping() const
{
	assert(_tag == Tag::Ping);
	return _Ping;
}
void Message::Set_Ping(const Anki::Cozmo::G2U::Ping& new_Ping)
{
	if(this->_tag == Tag::Ping) {
		_Ping = new_Ping;
	}
	else {
		ClearCurrent();
		new(&_Ping) Anki::Cozmo::G2U::Ping{new_Ping};
		_tag = Tag::Ping;
	}
}
void Message::Set_Ping(Anki::Cozmo::G2U::Ping&& new_Ping)
{
	if(this->_tag == Tag::Ping) {
		_Ping = std::move(new_Ping);
	}
	else {
		ClearCurrent();
		new(&_Ping) Anki::Cozmo::G2U::Ping{std::move(new_Ping)};
		_tag = Tag::Ping;
	}
}


const Anki::Cozmo::G2U::RobotAvailable& Message::Get_RobotAvailable() const
{
	assert(_tag == Tag::RobotAvailable);
	return _RobotAvailable;
}
void Message::Set_RobotAvailable(const Anki::Cozmo::G2U::RobotAvailable& new_RobotAvailable)
{
	if(this->_tag == Tag::RobotAvailable) {
		_RobotAvailable = new_RobotAvailable;
	}
	else {
		ClearCurrent();
		new(&_RobotAvailable) Anki::Cozmo::G2U::RobotAvailable{new_RobotAvailable};
		_tag = Tag::RobotAvailable;
	}
}
void Message::Set_RobotAvailable(Anki::Cozmo::G2U::RobotAvailable&& new_RobotAvailable)
{
	if(this->_tag == Tag::RobotAvailable) {
		_RobotAvailable = std::move(new_RobotAvailable);
	}
	else {
		ClearCurrent();
		new(&_RobotAvailable) Anki::Cozmo::G2U::RobotAvailable{std::move(new_RobotAvailable)};
		_tag = Tag::RobotAvailable;
	}
}


const Anki::Cozmo::G2U::UiDeviceAvailable& Message::Get_UiDeviceAvailable() const
{
	assert(_tag == Tag::UiDeviceAvailable);
	return _UiDeviceAvailable;
}
void Message::Set_UiDeviceAvailable(const Anki::Cozmo::G2U::UiDeviceAvailable& new_UiDeviceAvailable)
{
	if(this->_tag == Tag::UiDeviceAvailable) {
		_UiDeviceAvailable = new_UiDeviceAvailable;
	}
	else {
		ClearCurrent();
		new(&_UiDeviceAvailable) Anki::Cozmo::G2U::UiDeviceAvailable{new_UiDeviceAvailable};
		_tag = Tag::UiDeviceAvailable;
	}
}
void Message::Set_UiDeviceAvailable(Anki::Cozmo::G2U::UiDeviceAvailable&& new_UiDeviceAvailable)
{
	if(this->_tag == Tag::UiDeviceAvailable) {
		_UiDeviceAvailable = std::move(new_UiDeviceAvailable);
	}
	else {
		ClearCurrent();
		new(&_UiDeviceAvailable) Anki::Cozmo::G2U::UiDeviceAvailable{std::move(new_UiDeviceAvailable)};
		_tag = Tag::UiDeviceAvailable;
	}
}


const Anki::Cozmo::G2U::RobotConnected& Message::Get_RobotConnected() const
{
	assert(_tag == Tag::RobotConnected);
	return _RobotConnected;
}
void Message::Set_RobotConnected(const Anki::Cozmo::G2U::RobotConnected& new_RobotConnected)
{
	if(this->_tag == Tag::RobotConnected) {
		_RobotConnected = new_RobotConnected;
	}
	else {
		ClearCurrent();
		new(&_RobotConnected) Anki::Cozmo::G2U::RobotConnected{new_RobotConnected};
		_tag = Tag::RobotConnected;
	}
}
void Message::Set_RobotConnected(Anki::Cozmo::G2U::RobotConnected&& new_RobotConnected)
{
	if(this->_tag == Tag::RobotConnected) {
		_RobotConnected = std::move(new_RobotConnected);
	}
	else {
		ClearCurrent();
		new(&_RobotConnected) Anki::Cozmo::G2U::RobotConnected{std::move(new_RobotConnected)};
		_tag = Tag::RobotConnected;
	}
}


const Anki::Cozmo::G2U::RobotDisconnected& Message::Get_RobotDisconnected() const
{
	assert(_tag == Tag::RobotDisconnected);
	return _RobotDisconnected;
}
void Message::Set_RobotDisconnected(const Anki::Cozmo::G2U::RobotDisconnected& new_RobotDisconnected)
{
	if(this->_tag == Tag::RobotDisconnected) {
		_RobotDisconnected = new_RobotDisconnected;
	}
	else {
		ClearCurrent();
		new(&_RobotDisconnected) Anki::Cozmo::G2U::RobotDisconnected{new_RobotDisconnected};
		_tag = Tag::RobotDisconnected;
	}
}
void Message::Set_RobotDisconnected(Anki::Cozmo::G2U::RobotDisconnected&& new_RobotDisconnected)
{
	if(this->_tag == Tag::RobotDisconnected) {
		_RobotDisconnected = std::move(new_RobotDisconnected);
	}
	else {
		ClearCurrent();
		new(&_RobotDisconnected) Anki::Cozmo::G2U::RobotDisconnected{std::move(new_RobotDisconnected)};
		_tag = Tag::RobotDisconnected;
	}
}


const Anki::Cozmo::G2U::UiDeviceConnected& Message::Get_UiDeviceConnected() const
{
	assert(_tag == Tag::UiDeviceConnected);
	return _UiDeviceConnected;
}
void Message::Set_UiDeviceConnected(const Anki::Cozmo::G2U::UiDeviceConnected& new_UiDeviceConnected)
{
	if(this->_tag == Tag::UiDeviceConnected) {
		_UiDeviceConnected = new_UiDeviceConnected;
	}
	else {
		ClearCurrent();
		new(&_UiDeviceConnected) Anki::Cozmo::G2U::UiDeviceConnected{new_UiDeviceConnected};
		_tag = Tag::UiDeviceConnected;
	}
}
void Message::Set_UiDeviceConnected(Anki::Cozmo::G2U::UiDeviceConnected&& new_UiDeviceConnected)
{
	if(this->_tag == Tag::UiDeviceConnected) {
		_UiDeviceConnected = std::move(new_UiDeviceConnected);
	}
	else {
		ClearCurrent();
		new(&_UiDeviceConnected) Anki::Cozmo::G2U::UiDeviceConnected{std::move(new_UiDeviceConnected)};
		_tag = Tag::UiDeviceConnected;
	}
}


const Anki::Cozmo::G2U::RobotState& Message::Get_RobotState() const
{
	assert(_tag == Tag::RobotState);
	return _RobotState;
}
void Message::Set_RobotState(const Anki::Cozmo::G2U::RobotState& new_RobotState)
{
	if(this->_tag == Tag::RobotState) {
		_RobotState = new_RobotState;
	}
	else {
		ClearCurrent();
		new(&_RobotState) Anki::Cozmo::G2U::RobotState{new_RobotState};
		_tag = Tag::RobotState;
	}
}
void Message::Set_RobotState(Anki::Cozmo::G2U::RobotState&& new_RobotState)
{
	if(this->_tag == Tag::RobotState) {
		_RobotState = std::move(new_RobotState);
	}
	else {
		ClearCurrent();
		new(&_RobotState) Anki::Cozmo::G2U::RobotState{std::move(new_RobotState)};
		_tag = Tag::RobotState;
	}
}


const Anki::Cozmo::G2U::ImageChunk& Message::Get_ImageChunk() const
{
	assert(_tag == Tag::ImageChunk);
	return _ImageChunk;
}
void Message::Set_ImageChunk(const Anki::Cozmo::G2U::ImageChunk& new_ImageChunk)
{
	if(this->_tag == Tag::ImageChunk) {
		_ImageChunk = new_ImageChunk;
	}
	else {
		ClearCurrent();
		new(&_ImageChunk) Anki::Cozmo::G2U::ImageChunk{new_ImageChunk};
		_tag = Tag::ImageChunk;
	}
}
void Message::Set_ImageChunk(Anki::Cozmo::G2U::ImageChunk&& new_ImageChunk)
{
	if(this->_tag == Tag::ImageChunk) {
		_ImageChunk = std::move(new_ImageChunk);
	}
	else {
		ClearCurrent();
		new(&_ImageChunk) Anki::Cozmo::G2U::ImageChunk{std::move(new_ImageChunk)};
		_tag = Tag::ImageChunk;
	}
}


const Anki::Cozmo::G2U::RobotObservedObject& Message::Get_RobotObservedObject() const
{
	assert(_tag == Tag::RobotObservedObject);
	return _RobotObservedObject;
}
void Message::Set_RobotObservedObject(const Anki::Cozmo::G2U::RobotObservedObject& new_RobotObservedObject)
{
	if(this->_tag == Tag::RobotObservedObject) {
		_RobotObservedObject = new_RobotObservedObject;
	}
	else {
		ClearCurrent();
		new(&_RobotObservedObject) Anki::Cozmo::G2U::RobotObservedObject{new_RobotObservedObject};
		_tag = Tag::RobotObservedObject;
	}
}
void Message::Set_RobotObservedObject(Anki::Cozmo::G2U::RobotObservedObject&& new_RobotObservedObject)
{
	if(this->_tag == Tag::RobotObservedObject) {
		_RobotObservedObject = std::move(new_RobotObservedObject);
	}
	else {
		ClearCurrent();
		new(&_RobotObservedObject) Anki::Cozmo::G2U::RobotObservedObject{std::move(new_RobotObservedObject)};
		_tag = Tag::RobotObservedObject;
	}
}


const Anki::Cozmo::G2U::RobotObservedNothing& Message::Get_RobotObservedNothing() const
{
	assert(_tag == Tag::RobotObservedNothing);
	return _RobotObservedNothing;
}
void Message::Set_RobotObservedNothing(const Anki::Cozmo::G2U::RobotObservedNothing& new_RobotObservedNothing)
{
	if(this->_tag == Tag::RobotObservedNothing) {
		_RobotObservedNothing = new_RobotObservedNothing;
	}
	else {
		ClearCurrent();
		new(&_RobotObservedNothing) Anki::Cozmo::G2U::RobotObservedNothing{new_RobotObservedNothing};
		_tag = Tag::RobotObservedNothing;
	}
}
void Message::Set_RobotObservedNothing(Anki::Cozmo::G2U::RobotObservedNothing&& new_RobotObservedNothing)
{
	if(this->_tag == Tag::RobotObservedNothing) {
		_RobotObservedNothing = std::move(new_RobotObservedNothing);
	}
	else {
		ClearCurrent();
		new(&_RobotObservedNothing) Anki::Cozmo::G2U::RobotObservedNothing{std::move(new_RobotObservedNothing)};
		_tag = Tag::RobotObservedNothing;
	}
}


const Anki::Cozmo::G2U::RobotDeletedObject& Message::Get_RobotDeletedObject() const
{
	assert(_tag == Tag::RobotDeletedObject);
	return _RobotDeletedObject;
}
void Message::Set_RobotDeletedObject(const Anki::Cozmo::G2U::RobotDeletedObject& new_RobotDeletedObject)
{
	if(this->_tag == Tag::RobotDeletedObject) {
		_RobotDeletedObject = new_RobotDeletedObject;
	}
	else {
		ClearCurrent();
		new(&_RobotDeletedObject) Anki::Cozmo::G2U::RobotDeletedObject{new_RobotDeletedObject};
		_tag = Tag::RobotDeletedObject;
	}
}
void Message::Set_RobotDeletedObject(Anki::Cozmo::G2U::RobotDeletedObject&& new_RobotDeletedObject)
{
	if(this->_tag == Tag::RobotDeletedObject) {
		_RobotDeletedObject = std::move(new_RobotDeletedObject);
	}
	else {
		ClearCurrent();
		new(&_RobotDeletedObject) Anki::Cozmo::G2U::RobotDeletedObject{std::move(new_RobotDeletedObject)};
		_tag = Tag::RobotDeletedObject;
	}
}


const Anki::Cozmo::G2U::DeviceDetectedVisionMarker& Message::Get_DeviceDetectedVisionMarker() const
{
	assert(_tag == Tag::DeviceDetectedVisionMarker);
	return _DeviceDetectedVisionMarker;
}
void Message::Set_DeviceDetectedVisionMarker(const Anki::Cozmo::G2U::DeviceDetectedVisionMarker& new_DeviceDetectedVisionMarker)
{
	if(this->_tag == Tag::DeviceDetectedVisionMarker) {
		_DeviceDetectedVisionMarker = new_DeviceDetectedVisionMarker;
	}
	else {
		ClearCurrent();
		new(&_DeviceDetectedVisionMarker) Anki::Cozmo::G2U::DeviceDetectedVisionMarker{new_DeviceDetectedVisionMarker};
		_tag = Tag::DeviceDetectedVisionMarker;
	}
}
void Message::Set_DeviceDetectedVisionMarker(Anki::Cozmo::G2U::DeviceDetectedVisionMarker&& new_DeviceDetectedVisionMarker)
{
	if(this->_tag == Tag::DeviceDetectedVisionMarker) {
		_DeviceDetectedVisionMarker = std::move(new_DeviceDetectedVisionMarker);
	}
	else {
		ClearCurrent();
		new(&_DeviceDetectedVisionMarker) Anki::Cozmo::G2U::DeviceDetectedVisionMarker{std::move(new_DeviceDetectedVisionMarker)};
		_tag = Tag::DeviceDetectedVisionMarker;
	}
}


const Anki::Cozmo::G2U::RobotCompletedAction& Message::Get_RobotCompletedAction() const
{
	assert(_tag == Tag::RobotCompletedAction);
	return _RobotCompletedAction;
}
void Message::Set_RobotCompletedAction(const Anki::Cozmo::G2U::RobotCompletedAction& new_RobotCompletedAction)
{
	if(this->_tag == Tag::RobotCompletedAction) {
		_RobotCompletedAction = new_RobotCompletedAction;
	}
	else {
		ClearCurrent();
		new(&_RobotCompletedAction) Anki::Cozmo::G2U::RobotCompletedAction{new_RobotCompletedAction};
		_tag = Tag::RobotCompletedAction;
	}
}
void Message::Set_RobotCompletedAction(Anki::Cozmo::G2U::RobotCompletedAction&& new_RobotCompletedAction)
{
	if(this->_tag == Tag::RobotCompletedAction) {
		_RobotCompletedAction = std::move(new_RobotCompletedAction);
	}
	else {
		ClearCurrent();
		new(&_RobotCompletedAction) Anki::Cozmo::G2U::RobotCompletedAction{std::move(new_RobotCompletedAction)};
		_tag = Tag::RobotCompletedAction;
	}
}


const Anki::Cozmo::G2U::PlaySound& Message::Get_PlaySound() const
{
	assert(_tag == Tag::PlaySound);
	return _PlaySound;
}
void Message::Set_PlaySound(const Anki::Cozmo::G2U::PlaySound& new_PlaySound)
{
	if(this->_tag == Tag::PlaySound) {
		_PlaySound = new_PlaySound;
	}
	else {
		ClearCurrent();
		new(&_PlaySound) Anki::Cozmo::G2U::PlaySound{new_PlaySound};
		_tag = Tag::PlaySound;
	}
}
void Message::Set_PlaySound(Anki::Cozmo::G2U::PlaySound&& new_PlaySound)
{
	if(this->_tag == Tag::PlaySound) {
		_PlaySound = std::move(new_PlaySound);
	}
	else {
		ClearCurrent();
		new(&_PlaySound) Anki::Cozmo::G2U::PlaySound{std::move(new_PlaySound)};
		_tag = Tag::PlaySound;
	}
}


const Anki::Cozmo::G2U::StopSound& Message::Get_StopSound() const
{
	assert(_tag == Tag::StopSound);
	return _StopSound;
}
void Message::Set_StopSound(const Anki::Cozmo::G2U::StopSound& new_StopSound)
{
	if(this->_tag == Tag::StopSound) {
		_StopSound = new_StopSound;
	}
	else {
		ClearCurrent();
		new(&_StopSound) Anki::Cozmo::G2U::StopSound{new_StopSound};
		_tag = Tag::StopSound;
	}
}
void Message::Set_StopSound(Anki::Cozmo::G2U::StopSound&& new_StopSound)
{
	if(this->_tag == Tag::StopSound) {
		_StopSound = std::move(new_StopSound);
	}
	else {
		ClearCurrent();
		new(&_StopSound) Anki::Cozmo::G2U::StopSound{std::move(new_StopSound)};
		_tag = Tag::StopSound;
	}
}


size_t Message::Unpack(const uint8_t* buff, const size_t len)
{
	const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
	return Unpack(buffer);
}

size_t Message::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
	Tag newTag {Tag::INVALID};
	const Tag oldTag {GetTag()};
	buffer.Read(newTag);
	if (newTag != oldTag) {
		ClearCurrent();
	}
	switch(newTag) {
	case Tag::Ping:
		if (newTag != oldTag) {
			new(&(this->_Ping)) Anki::Cozmo::G2U::Ping(buffer);
		}
		else {
			this->_Ping.Unpack(buffer);
		}
		break;
	case Tag::RobotAvailable:
		if (newTag != oldTag) {
			new(&(this->_RobotAvailable)) Anki::Cozmo::G2U::RobotAvailable(buffer);
		}
		else {
			this->_RobotAvailable.Unpack(buffer);
		}
		break;
	case Tag::UiDeviceAvailable:
		if (newTag != oldTag) {
			new(&(this->_UiDeviceAvailable)) Anki::Cozmo::G2U::UiDeviceAvailable(buffer);
		}
		else {
			this->_UiDeviceAvailable.Unpack(buffer);
		}
		break;
	case Tag::RobotConnected:
		if (newTag != oldTag) {
			new(&(this->_RobotConnected)) Anki::Cozmo::G2U::RobotConnected(buffer);
		}
		else {
			this->_RobotConnected.Unpack(buffer);
		}
		break;
	case Tag::RobotDisconnected:
		if (newTag != oldTag) {
			new(&(this->_RobotDisconnected)) Anki::Cozmo::G2U::RobotDisconnected(buffer);
		}
		else {
			this->_RobotDisconnected.Unpack(buffer);
		}
		break;
	case Tag::UiDeviceConnected:
		if (newTag != oldTag) {
			new(&(this->_UiDeviceConnected)) Anki::Cozmo::G2U::UiDeviceConnected(buffer);
		}
		else {
			this->_UiDeviceConnected.Unpack(buffer);
		}
		break;
	case Tag::RobotState:
		if (newTag != oldTag) {
			new(&(this->_RobotState)) Anki::Cozmo::G2U::RobotState(buffer);
		}
		else {
			this->_RobotState.Unpack(buffer);
		}
		break;
	case Tag::ImageChunk:
		if (newTag != oldTag) {
			new(&(this->_ImageChunk)) Anki::Cozmo::G2U::ImageChunk(buffer);
		}
		else {
			this->_ImageChunk.Unpack(buffer);
		}
		break;
	case Tag::RobotObservedObject:
		if (newTag != oldTag) {
			new(&(this->_RobotObservedObject)) Anki::Cozmo::G2U::RobotObservedObject(buffer);
		}
		else {
			this->_RobotObservedObject.Unpack(buffer);
		}
		break;
	case Tag::RobotObservedNothing:
		if (newTag != oldTag) {
			new(&(this->_RobotObservedNothing)) Anki::Cozmo::G2U::RobotObservedNothing(buffer);
		}
		else {
			this->_RobotObservedNothing.Unpack(buffer);
		}
		break;
	case Tag::RobotDeletedObject:
		if (newTag != oldTag) {
			new(&(this->_RobotDeletedObject)) Anki::Cozmo::G2U::RobotDeletedObject(buffer);
		}
		else {
			this->_RobotDeletedObject.Unpack(buffer);
		}
		break;
	case Tag::DeviceDetectedVisionMarker:
		if (newTag != oldTag) {
			new(&(this->_DeviceDetectedVisionMarker)) Anki::Cozmo::G2U::DeviceDetectedVisionMarker(buffer);
		}
		else {
			this->_DeviceDetectedVisionMarker.Unpack(buffer);
		}
		break;
	case Tag::RobotCompletedAction:
		if (newTag != oldTag) {
			new(&(this->_RobotCompletedAction)) Anki::Cozmo::G2U::RobotCompletedAction(buffer);
		}
		else {
			this->_RobotCompletedAction.Unpack(buffer);
		}
		break;
	case Tag::PlaySound:
		if (newTag != oldTag) {
			new(&(this->_PlaySound)) Anki::Cozmo::G2U::PlaySound(buffer);
		}
		else {
			this->_PlaySound.Unpack(buffer);
		}
		break;
	case Tag::StopSound:
		if (newTag != oldTag) {
			new(&(this->_StopSound)) Anki::Cozmo::G2U::StopSound(buffer);
		}
		else {
			this->_StopSound.Unpack(buffer);
		}
		break;
	default:
		break;
	}
	_tag = newTag;
	return buffer.GetBytesRead();
}

size_t Message::Pack(uint8_t* buff, size_t len) const
{
	CLAD::SafeMessageBuffer buffer(buff, len, false);
	return Pack(buffer);
}

size_t Message::Pack(CLAD::SafeMessageBuffer& buffer) const
{
	buffer.Write(_tag);
	switch(GetTag()) {
	case Tag::Ping:
		this->_Ping.Pack(buffer);
		break;
	case Tag::RobotAvailable:
		this->_RobotAvailable.Pack(buffer);
		break;
	case Tag::UiDeviceAvailable:
		this->_UiDeviceAvailable.Pack(buffer);
		break;
	case Tag::RobotConnected:
		this->_RobotConnected.Pack(buffer);
		break;
	case Tag::RobotDisconnected:
		this->_RobotDisconnected.Pack(buffer);
		break;
	case Tag::UiDeviceConnected:
		this->_UiDeviceConnected.Pack(buffer);
		break;
	case Tag::RobotState:
		this->_RobotState.Pack(buffer);
		break;
	case Tag::ImageChunk:
		this->_ImageChunk.Pack(buffer);
		break;
	case Tag::RobotObservedObject:
		this->_RobotObservedObject.Pack(buffer);
		break;
	case Tag::RobotObservedNothing:
		this->_RobotObservedNothing.Pack(buffer);
		break;
	case Tag::RobotDeletedObject:
		this->_RobotDeletedObject.Pack(buffer);
		break;
	case Tag::DeviceDetectedVisionMarker:
		this->_DeviceDetectedVisionMarker.Pack(buffer);
		break;
	case Tag::RobotCompletedAction:
		this->_RobotCompletedAction.Pack(buffer);
		break;
	case Tag::PlaySound:
		this->_PlaySound.Pack(buffer);
		break;
	case Tag::StopSound:
		this->_StopSound.Pack(buffer);
		break;
	default:
		break;
	}
	const size_t bytesWritten {buffer.GetBytesWritten()};
	return bytesWritten;
}

size_t Message::Size() const
{
	size_t result {1}; // tag = uint_8
	switch(GetTag()) {
	case Tag::Ping:
		result += _Ping.Size();
		break;
	case Tag::RobotAvailable:
		result += _RobotAvailable.Size();
		break;
	case Tag::UiDeviceAvailable:
		result += _UiDeviceAvailable.Size();
		break;
	case Tag::RobotConnected:
		result += _RobotConnected.Size();
		break;
	case Tag::RobotDisconnected:
		result += _RobotDisconnected.Size();
		break;
	case Tag::UiDeviceConnected:
		result += _UiDeviceConnected.Size();
		break;
	case Tag::RobotState:
		result += _RobotState.Size();
		break;
	case Tag::ImageChunk:
		result += _ImageChunk.Size();
		break;
	case Tag::RobotObservedObject:
		result += _RobotObservedObject.Size();
		break;
	case Tag::RobotObservedNothing:
		result += _RobotObservedNothing.Size();
		break;
	case Tag::RobotDeletedObject:
		result += _RobotDeletedObject.Size();
		break;
	case Tag::DeviceDetectedVisionMarker:
		result += _DeviceDetectedVisionMarker.Size();
		break;
	case Tag::RobotCompletedAction:
		result += _RobotCompletedAction.Size();
		break;
	case Tag::PlaySound:
		result += _PlaySound.Size();
		break;
	case Tag::StopSound:
		result += _StopSound.Size();
		break;
	default:
		return 0;
	}
	return result;
}


void Message::ClearCurrent()
{
	switch(GetTag()) {
	case Tag::Ping:
		_Ping.~Ping();
		break;
	case Tag::RobotAvailable:
		_RobotAvailable.~RobotAvailable();
		break;
	case Tag::UiDeviceAvailable:
		_UiDeviceAvailable.~UiDeviceAvailable();
		break;
	case Tag::RobotConnected:
		_RobotConnected.~RobotConnected();
		break;
	case Tag::RobotDisconnected:
		_RobotDisconnected.~RobotDisconnected();
		break;
	case Tag::UiDeviceConnected:
		_UiDeviceConnected.~UiDeviceConnected();
		break;
	case Tag::RobotState:
		_RobotState.~RobotState();
		break;
	case Tag::ImageChunk:
		_ImageChunk.~ImageChunk();
		break;
	case Tag::RobotObservedObject:
		_RobotObservedObject.~RobotObservedObject();
		break;
	case Tag::RobotObservedNothing:
		_RobotObservedNothing.~RobotObservedNothing();
		break;
	case Tag::RobotDeletedObject:
		_RobotDeletedObject.~RobotDeletedObject();
		break;
	case Tag::DeviceDetectedVisionMarker:
		_DeviceDetectedVisionMarker.~DeviceDetectedVisionMarker();
		break;
	case Tag::RobotCompletedAction:
		_RobotCompletedAction.~RobotCompletedAction();
		break;
	case Tag::PlaySound:
		_PlaySound.~PlaySound();
		break;
	case Tag::StopSound:
		_StopSound.~StopSound();
		break;
	default:
		break;
	}
	_tag = Tag::INVALID;
}

} // namespace G2U

} // namespace Cozmo

} // namespace Anki

