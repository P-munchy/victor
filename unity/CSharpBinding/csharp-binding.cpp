//
//  csharp-binding.h
//  CozmoGame
//
//  Created by Greg Nagel on 2/3/15.
//
//

#include "csharp-binding.h"

#include "anki/cozmo/basestation/cozmoEngine.h"

#include <algorithm>
#include <string>
#include <vector>

using namespace Anki;

Cozmo::CozmoEngineHost* host = nullptr;
Cozmo::CozmoEngine* engine = nullptr;

std::deque<std::string> error_messages;


// Queues for messages generated by signals coming out of the engine.
// Each of these can be polled at each tick using the associated
// "cozmo_engine_check_for_*" functions.

void add_log(std::string log_string)
{
    error_messages.push_back(log_string);
}

bool cozmo_has_log(int* receive_length)
{
    if (error_messages.empty()) {
        *receive_length = 0;
        return false;
    }
    *receive_length = (int)error_messages.back().length();
    return true;
}

void cozmo_pop_log(char* buffer, int buffer_length)
{
    if (error_messages.empty()) {
        return;
    }
    int length = std::min(buffer_length, (int)error_messages.back().length());
    std::memcpy(buffer, error_messages.back().data(), length);
    error_messages.pop_back();
}

int cozmo_engine_host_create(const char* configurationData, const char* visIP)
{
  using namespace Cozmo;
  
    if (engine != nullptr) {
        return (int)BINDING_ERROR_ALREADY_INITIALIZED;
    }
    
    if (configurationData == nullptr) {
        return (int)BINDING_ERROR_INVALID_CONFIGURATION;
    }
    
    Json::Reader reader;
    Json::Value config;
    if (!reader.parse(configurationData, configurationData + std::strlen(configurationData), config)) {
        add_log("Json Parsing Error: " + reader.getFormattedErrorMessages());
        return (int)BINDING_ERROR_INVALID_CONFIGURATION;
    }
    
    CozmoEngineHost* created_host = new CozmoEngineHost();
    config["VizHostIP"] = visIP;
    printf("config[VizHostIP] = %s;", visIP);
    
    Result result = created_host->Init(config);
    if (result == RESULT_OK) {
        created_host->ListenForRobotConnections(true);
    }
    if (result != RESULT_OK) {
        delete created_host;
        return result;
    }
    
    host = created_host;
    engine = host;
  
    return RESULT_OK;
}

int cozmo_engine_host_destroy()
{
    if (host != nullptr) {
        delete host;
        host = nullptr;
        engine = nullptr;
    }
    return (int)BINDING_OK;
}

int cozmo_engine_update(float currentTime)
{
    if (engine == nullptr) {
        return (int)BINDING_ERROR_NOT_INITIALIZED;
    }
    return (int)engine->Update(currentTime);
}

