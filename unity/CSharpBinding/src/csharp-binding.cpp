//
//  csharp-binding.h
//  CozmoGame
//
//  Created by Greg Nagel on 4/11/15.
//
//

#include "csharp-binding.h"

#include "anki/cozmo/game/cozmoGame.h"
#include "anki/cozmo/basestation/utils/parsingConstants/parsingConstants.h"
#include "anki/cozmo/shared/cozmoConfig.h"

#include "anki/common/basestation/jsonTools.h"

#include <algorithm>
#include <string>
#include <vector>

#if __APPLE__
#include "TargetConditionals.h"
#if TARGET_OS_IPHONE
#define USE_IOS
#endif
#endif

#ifdef USE_IOS
#include "ios/ios-binding.h"
#endif

using namespace Anki;
using namespace Anki::Cozmo;
using namespace Anki::Cozmo::CSharpBinding;

bool initialized = false;

std::deque<std::string> error_messages;

// Queues for messages generated by signals coming out of the engine.
// Each of these can be polled at each tick using the associated
// "cozmo_engine_check_for_*" functions.

void Anki::Cozmo::CSharpBinding::cozmo_add_log(const std::string& log_string)
{
    error_messages.push_back(log_string);
}

bool cozmo_has_log(int* receive_length)
{
    if (error_messages.empty()) {
        *receive_length = 0;
        return false;
    }
    *receive_length = (int)error_messages.back().length();
    return true;
}

void cozmo_pop_log(char* buffer, int buffer_length)
{
    if (error_messages.empty()) {
        return;
    }
    int length = std::min(buffer_length, (int)error_messages.back().length());
    std::memcpy(buffer, error_messages.back().data(), length);
    error_messages.pop_back();
}

int cozmo_startup(const char *configuration_data)
{
    int result = (int)RESULT_OK;
    
#ifdef USE_IOS
    result = cozmo_game_create(configuration_data);
#endif
    
    return result;
}

int cozmo_shutdown()
{
    int result = (int)RESULT_OK;
    
#ifdef USE_IOS
    result = cozmo_game_destroy();
#endif

    return result;
}

int cozmo_update(float current_time)
{
    int result = (int)RESULT_OK;
    
#ifdef USE_IOS
    result = cozmo_game_update(current_time);
#endif

    return result;
}

