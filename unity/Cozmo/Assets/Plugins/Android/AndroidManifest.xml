<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.anki.cozmo" xmlns:amazon="http://schemas.amazon.com/apk/res/android">
  <supports-screens android:anyDensity="true" android:largeScreens="true" android:normalScreens="true" android:smallScreens="true" android:xlargeScreens="true" />
  <application android:icon="@drawable/app_icon" android:label="@string/app_name" android:theme="@style/UnityThemeSelector">
    <activity android:name=".CozmoActivity" android:label="@string/app_name" android:configChanges="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" android:launchMode="singleTask" android:screenOrientation="sensorLandscape" android:hardwareAccelerated="true">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
      <!-- Certain android apps send a 'file' scheme intent when a file is selected.
           We are able in this case to check against the file's extension.
           Example: Opening via third party file explorer app -->
      <intent-filter android:label="Open with Cozmo">
        <action android:name="android.intent.action.VIEW"/>
        <category android:name="android.intent.category.BROWSABLE"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <data android:mimeType="*/*" android:host="*"/>
        <data android:scheme="file"/>
        <!-- PathPattern is a regex like construct, where ".*" means match any character
             and '\\.' is the double escaped '.' before the extension rather than indicating a path.
             note that extra .'s in the pathname will not be matched (i.e. "my.file.codelab").

             There is a workaround where one can simply specify a ton of pathpatterns to match
             (i.e.: ".*\\..*\\..*\\.codelab", etc) to deal with all the dots in for example:
              "http://www.site.com/file.codelab" -->
        <data android:pathPattern=".*\\.codelab"/>
        <data android:pathPattern=".*\\..*\\.codelab"/>
        <data android:pathPattern=".*\\..*\\..*\\.codelab"/>
        <data android:pathPattern=".*\\..*\\..*\\..*\\.codelab"/>
        <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.codelab"/>
        <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.codelab"/>
        <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\..*\\.codelab"/>
      </intent-filter>
      <!-- Certain android apps send a 'content' scheme intent when a file is selected.
           Example: Opening an email attachment
           @TODO: find out how to mask these against codelab files directly -->
      <intent-filter android:label="Open Codelab File">
        <action android:name="android.intent.action.VIEW"/>
        <category android:name="android.intent.category.BROWSABLE"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <data android:mimeType="*/*"/>
        <data android:scheme="content"/>
      </intent-filter>
    </activity>
    <!-- UTNotifications common -->
    <receiver android:name="universal.tools.notifications.AlarmBroadcastReceiver" />
    <service android:name="universal.tools.notifications.NotificationIntentService" android:exported="true" />
    <!-- Restore Scheduled Notifications On Reboot -->
    <receiver android:name="universal.tools.notifications.ScheduledNotificationsRestorer">
      <intent-filter>
        <action android:name="android.intent.action.BOOT_COMPLETED" />
      </intent-filter>
    </receiver>
  </application>
  <uses-permission android:name="android.permission.VIBRATE" />
  <uses-permission android:name="android.permission.WAKE_LOCK" />
  <!-- Restore Scheduled Notifications On Reboot -->
  <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
</manifest>