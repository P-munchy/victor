// Autogenerated C# message buffer code.
// Source: comms/messaging/UiMessageDefinitionsU2G.clad
// Full command line: emitters/cozmo_CSharp_main_emitter.py -C src --output-file-override ../unity/Cozmo/Assets/Scripts/Channel/UiMessageDefinitionsU2G.cs comms/messaging/UiMessageDefinitionsU2G.clad

namespace Anki {

namespace Cozmo {

public class U2G_Ping
{
	private uint _counter; // uint_32

	public uint counter { get { return _counter; } set { _counter = value; } }


	/**** Constructors ****/

	public U2G_Ping()
	{
	}

	public U2G_Ping(uint counter)
	{
		this.counter = counter;
	}

	public U2G_Ping(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_Ping(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_counter = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_counter);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_Ping p = obj as U2G_Ping;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_Ping p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._counter.Equals(p._counter);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._counter.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ConnectToRobot
{
	private byte _robotID; // uint_8

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public U2G_ConnectToRobot()
	{
	}

	public U2G_ConnectToRobot(byte robotID)
	{
		this.robotID = robotID;
	}

	public U2G_ConnectToRobot(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ConnectToRobot(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_ConnectToRobot p = obj as U2G_ConnectToRobot;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_ConnectToRobot p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ConnectToUiDevice
{
	private byte _deviceID; // uint_8

	public byte deviceID { get { return _deviceID; } set { _deviceID = value; } }


	/**** Constructors ****/

	public U2G_ConnectToUiDevice()
	{
	}

	public U2G_ConnectToUiDevice(byte deviceID)
	{
		this.deviceID = deviceID;
	}

	public U2G_ConnectToUiDevice(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ConnectToUiDevice(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_deviceID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_deviceID);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_ConnectToUiDevice p = obj as U2G_ConnectToUiDevice;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_ConnectToUiDevice p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._deviceID.Equals(p._deviceID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._deviceID.GetHashCode();
			return hash;
		}
	}
}

public class U2G_DisconnectFromUiDevice
{
	private byte _deviceID; // uint_8

	public byte deviceID { get { return _deviceID; } set { _deviceID = value; } }


	/**** Constructors ****/

	public U2G_DisconnectFromUiDevice()
	{
	}

	public U2G_DisconnectFromUiDevice(byte deviceID)
	{
		this.deviceID = deviceID;
	}

	public U2G_DisconnectFromUiDevice(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_DisconnectFromUiDevice(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_deviceID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_deviceID);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_DisconnectFromUiDevice p = obj as U2G_DisconnectFromUiDevice;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_DisconnectFromUiDevice p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._deviceID.Equals(p._deviceID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._deviceID.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ForceAddRobot
{
	private byte[] _ipAddress; // uint_8[16]
	private byte _robotID; // uint_8
	private byte _isSimulated; // uint_8

	public byte[] ipAddress
	{
		get {
			return _ipAddress;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("ipAddress fixed-length array is null. Must have a length of 16.", "value");
			}
			if (value.Length != 16) {
				throw new System.ArgumentException("ipAddress fixed-length array is the wrong size. Must have a length of 16.", "value");
			}
			_ipAddress = value;
		}
	}

	public byte robotID { get { return _robotID; } set { _robotID = value; } }

	public byte isSimulated { get { return _isSimulated; } set { _isSimulated = value; } }


	/**** Constructors ****/

	public U2G_ForceAddRobot()
	{
		this.ipAddress = new byte[16];
	}

	public U2G_ForceAddRobot(byte[] ipAddress,
		byte robotID,
		byte isSimulated)
	{
		this.ipAddress = ipAddress;
		this.robotID = robotID;
		this.isSimulated = isSimulated;
	}

	public U2G_ForceAddRobot(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ForceAddRobot(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_ipAddress = new byte[16];
		for (int i = 0; i < 16; ++i) {
			_ipAddress[i] = reader.ReadByte();
		}
		_robotID = reader.ReadByte();
		_isSimulated = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		for (int i = 0; i < 16; ++i) {
			writer.Write((byte)_ipAddress[i]);
		}
		writer.Write((byte)_robotID);
		writer.Write((byte)_isSimulated);
	}

	public int Size 
	{
		get {
			return 18;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_ForceAddRobot p = obj as U2G_ForceAddRobot;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_ForceAddRobot p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return ArrayEquals<byte>(this._ipAddress,p._ipAddress)
			&& this._robotID.Equals(p._robotID)
			&& this._isSimulated.Equals(p._isSimulated);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._ipAddress.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._isSimulated.GetHashCode();
			return hash;
		}
	}
}

public class U2G_StartEngine
{
	private byte _asHost; // uint_8
	private byte[] _vizHostIP; // uint_8[16]

	public byte asHost { get { return _asHost; } set { _asHost = value; } }

	public byte[] vizHostIP
	{
		get {
			return _vizHostIP;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("vizHostIP fixed-length array is null. Must have a length of 16.", "value");
			}
			if (value.Length != 16) {
				throw new System.ArgumentException("vizHostIP fixed-length array is the wrong size. Must have a length of 16.", "value");
			}
			_vizHostIP = value;
		}
	}


	/**** Constructors ****/

	public U2G_StartEngine()
	{
		this.vizHostIP = new byte[16];
	}

	public U2G_StartEngine(byte asHost,
		byte[] vizHostIP)
	{
		this.asHost = asHost;
		this.vizHostIP = vizHostIP;
	}

	public U2G_StartEngine(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StartEngine(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_asHost = reader.ReadByte();
		_vizHostIP = new byte[16];
		for (int i = 0; i < 16; ++i) {
			_vizHostIP[i] = reader.ReadByte();
		}
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_asHost);
		for (int i = 0; i < 16; ++i) {
			writer.Write((byte)_vizHostIP[i]);
		}
	}

	public int Size 
	{
		get {
			return 17;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_StartEngine p = obj as U2G_StartEngine;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_StartEngine p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._asHost.Equals(p._asHost)
			&& ArrayEquals<byte>(this._vizHostIP,p._vizHostIP);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._asHost.GetHashCode();
			hash = hash * 23 + this._vizHostIP.GetHashCode();
			return hash;
		}
	}
}

public class U2G_DriveWheels
{
	private float _lwheel_speed_mmps; // float_32
	private float _rwheel_speed_mmps; // float_32

	public float lwheel_speed_mmps { get { return _lwheel_speed_mmps; } set { _lwheel_speed_mmps = value; } }

	public float rwheel_speed_mmps { get { return _rwheel_speed_mmps; } set { _rwheel_speed_mmps = value; } }


	/**** Constructors ****/

	public U2G_DriveWheels()
	{
	}

	public U2G_DriveWheels(float lwheel_speed_mmps,
		float rwheel_speed_mmps)
	{
		this.lwheel_speed_mmps = lwheel_speed_mmps;
		this.rwheel_speed_mmps = rwheel_speed_mmps;
	}

	public U2G_DriveWheels(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_DriveWheels(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_lwheel_speed_mmps = reader.ReadSingle();
		_rwheel_speed_mmps = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_lwheel_speed_mmps);
		writer.Write((float)_rwheel_speed_mmps);
	}

	public int Size 
	{
		get {
			return 8;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_DriveWheels p = obj as U2G_DriveWheels;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_DriveWheels p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._lwheel_speed_mmps.Equals(p._lwheel_speed_mmps)
			&& this._rwheel_speed_mmps.Equals(p._rwheel_speed_mmps);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._lwheel_speed_mmps.GetHashCode();
			hash = hash * 23 + this._rwheel_speed_mmps.GetHashCode();
			return hash;
		}
	}
}

public class U2G_TurnInPlace
{
	private float _angle_rad; // float_32
	private byte _robotID; // uint_8

	public float angle_rad { get { return _angle_rad; } set { _angle_rad = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public U2G_TurnInPlace()
	{
	}

	public U2G_TurnInPlace(float angle_rad,
		byte robotID)
	{
		this.angle_rad = angle_rad;
		this.robotID = robotID;
	}

	public U2G_TurnInPlace(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_TurnInPlace(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_angle_rad = reader.ReadSingle();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_angle_rad);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_TurnInPlace p = obj as U2G_TurnInPlace;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_TurnInPlace p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._angle_rad.Equals(p._angle_rad)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._angle_rad.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class U2G_MoveHead
{
	private float _speed_rad_per_sec; // float_32

	public float speed_rad_per_sec { get { return _speed_rad_per_sec; } set { _speed_rad_per_sec = value; } }


	/**** Constructors ****/

	public U2G_MoveHead()
	{
	}

	public U2G_MoveHead(float speed_rad_per_sec)
	{
		this.speed_rad_per_sec = speed_rad_per_sec;
	}

	public U2G_MoveHead(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_MoveHead(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_speed_rad_per_sec = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_speed_rad_per_sec);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_MoveHead p = obj as U2G_MoveHead;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_MoveHead p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._speed_rad_per_sec.Equals(p._speed_rad_per_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._speed_rad_per_sec.GetHashCode();
			return hash;
		}
	}
}

public class U2G_MoveLift
{
	private float _speed_rad_per_sec; // float_32

	public float speed_rad_per_sec { get { return _speed_rad_per_sec; } set { _speed_rad_per_sec = value; } }


	/**** Constructors ****/

	public U2G_MoveLift()
	{
	}

	public U2G_MoveLift(float speed_rad_per_sec)
	{
		this.speed_rad_per_sec = speed_rad_per_sec;
	}

	public U2G_MoveLift(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_MoveLift(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_speed_rad_per_sec = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_speed_rad_per_sec);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_MoveLift p = obj as U2G_MoveLift;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_MoveLift p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._speed_rad_per_sec.Equals(p._speed_rad_per_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._speed_rad_per_sec.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetLiftHeight
{
	private float _height_mm; // float_32
	private float _max_speed_rad_per_sec; // float_32
	private float _accel_rad_per_sec2; // float_32

	public float height_mm { get { return _height_mm; } set { _height_mm = value; } }

	public float max_speed_rad_per_sec { get { return _max_speed_rad_per_sec; } set { _max_speed_rad_per_sec = value; } }

	public float accel_rad_per_sec2 { get { return _accel_rad_per_sec2; } set { _accel_rad_per_sec2 = value; } }


	/**** Constructors ****/

	public U2G_SetLiftHeight()
	{
	}

	public U2G_SetLiftHeight(float height_mm,
		float max_speed_rad_per_sec,
		float accel_rad_per_sec2)
	{
		this.height_mm = height_mm;
		this.max_speed_rad_per_sec = max_speed_rad_per_sec;
		this.accel_rad_per_sec2 = accel_rad_per_sec2;
	}

	public U2G_SetLiftHeight(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetLiftHeight(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_height_mm = reader.ReadSingle();
		_max_speed_rad_per_sec = reader.ReadSingle();
		_accel_rad_per_sec2 = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_height_mm);
		writer.Write((float)_max_speed_rad_per_sec);
		writer.Write((float)_accel_rad_per_sec2);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetLiftHeight p = obj as U2G_SetLiftHeight;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetLiftHeight p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._height_mm.Equals(p._height_mm)
			&& this._max_speed_rad_per_sec.Equals(p._max_speed_rad_per_sec)
			&& this._accel_rad_per_sec2.Equals(p._accel_rad_per_sec2);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._height_mm.GetHashCode();
			hash = hash * 23 + this._max_speed_rad_per_sec.GetHashCode();
			hash = hash * 23 + this._accel_rad_per_sec2.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetHeadAngle
{
	private float _angle_rad; // float_32
	private float _max_speed_rad_per_sec; // float_32
	private float _accel_rad_per_sec2; // float_32

	public float angle_rad { get { return _angle_rad; } set { _angle_rad = value; } }

	public float max_speed_rad_per_sec { get { return _max_speed_rad_per_sec; } set { _max_speed_rad_per_sec = value; } }

	public float accel_rad_per_sec2 { get { return _accel_rad_per_sec2; } set { _accel_rad_per_sec2 = value; } }


	/**** Constructors ****/

	public U2G_SetHeadAngle()
	{
	}

	public U2G_SetHeadAngle(float angle_rad,
		float max_speed_rad_per_sec,
		float accel_rad_per_sec2)
	{
		this.angle_rad = angle_rad;
		this.max_speed_rad_per_sec = max_speed_rad_per_sec;
		this.accel_rad_per_sec2 = accel_rad_per_sec2;
	}

	public U2G_SetHeadAngle(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetHeadAngle(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_angle_rad = reader.ReadSingle();
		_max_speed_rad_per_sec = reader.ReadSingle();
		_accel_rad_per_sec2 = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_angle_rad);
		writer.Write((float)_max_speed_rad_per_sec);
		writer.Write((float)_accel_rad_per_sec2);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetHeadAngle p = obj as U2G_SetHeadAngle;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetHeadAngle p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._angle_rad.Equals(p._angle_rad)
			&& this._max_speed_rad_per_sec.Equals(p._max_speed_rad_per_sec)
			&& this._accel_rad_per_sec2.Equals(p._accel_rad_per_sec2);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._angle_rad.GetHashCode();
			hash = hash * 23 + this._max_speed_rad_per_sec.GetHashCode();
			hash = hash * 23 + this._accel_rad_per_sec2.GetHashCode();
			return hash;
		}
	}
}

public class U2G_TrackHeadToObject
{
	private uint _objectID; // uint_32
	private byte _robotID; // uint_8

	public uint objectID { get { return _objectID; } set { _objectID = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public U2G_TrackHeadToObject()
	{
	}

	public U2G_TrackHeadToObject(uint objectID,
		byte robotID)
	{
		this.objectID = objectID;
		this.robotID = robotID;
	}

	public U2G_TrackHeadToObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_TrackHeadToObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadUInt32();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_objectID);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_TrackHeadToObject p = obj as U2G_TrackHeadToObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_TrackHeadToObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class U2G_StopAllMotors
{
	/**** Constructors ****/

	public U2G_StopAllMotors()
	{
	}

	public U2G_StopAllMotors(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StopAllMotors(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_ImageRequest
{
	private byte _robotID; // uint_8
	private byte _mode; // uint_8

	public byte robotID { get { return _robotID; } set { _robotID = value; } }

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public U2G_ImageRequest()
	{
	}

	public U2G_ImageRequest(byte robotID,
		byte mode)
	{
		this.robotID = robotID;
		this.mode = mode;
	}

	public U2G_ImageRequest(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ImageRequest(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadByte();
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_robotID);
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 2;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_ImageRequest p = obj as U2G_ImageRequest;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_ImageRequest p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetRobotImageSendMode
{
	private byte _mode; // uint_8
	private byte _resolution; // uint_8

	public byte mode { get { return _mode; } set { _mode = value; } }

	public byte resolution { get { return _resolution; } set { _resolution = value; } }


	/**** Constructors ****/

	public U2G_SetRobotImageSendMode()
	{
	}

	public U2G_SetRobotImageSendMode(byte mode,
		byte resolution)
	{
		this.mode = mode;
		this.resolution = resolution;
	}

	public U2G_SetRobotImageSendMode(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetRobotImageSendMode(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_mode = reader.ReadByte();
		_resolution = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_mode);
		writer.Write((byte)_resolution);
	}

	public int Size 
	{
		get {
			return 2;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetRobotImageSendMode p = obj as U2G_SetRobotImageSendMode;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetRobotImageSendMode p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._mode.Equals(p._mode)
			&& this._resolution.Equals(p._resolution);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._mode.GetHashCode();
			hash = hash * 23 + this._resolution.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SaveImages
{
	private byte _mode; // uint_8

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public U2G_SaveImages()
	{
	}

	public U2G_SaveImages(byte mode)
	{
		this.mode = mode;
	}

	public U2G_SaveImages(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SaveImages(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SaveImages p = obj as U2G_SaveImages;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SaveImages p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SaveRobotState
{
	private byte _mode; // uint_8

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public U2G_SaveRobotState()
	{
	}

	public U2G_SaveRobotState(byte mode)
	{
		this.mode = mode;
	}

	public U2G_SaveRobotState(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SaveRobotState(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SaveRobotState p = obj as U2G_SaveRobotState;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SaveRobotState p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class U2G_EnableDisplay
{
	private byte _enable; // uint_8

	public byte enable { get { return _enable; } set { _enable = value; } }


	/**** Constructors ****/

	public U2G_EnableDisplay()
	{
	}

	public U2G_EnableDisplay(byte enable)
	{
		this.enable = enable;
	}

	public U2G_EnableDisplay(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_EnableDisplay(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_enable = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_enable);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_EnableDisplay p = obj as U2G_EnableDisplay;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_EnableDisplay p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._enable.Equals(p._enable);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._enable.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetHeadlights
{
	private byte _intensity; // uint_8

	public byte intensity { get { return _intensity; } set { _intensity = value; } }


	/**** Constructors ****/

	public U2G_SetHeadlights()
	{
	}

	public U2G_SetHeadlights(byte intensity)
	{
		this.intensity = intensity;
	}

	public U2G_SetHeadlights(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetHeadlights(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_intensity = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_intensity);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetHeadlights p = obj as U2G_SetHeadlights;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetHeadlights p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._intensity.Equals(p._intensity);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._intensity.GetHashCode();
			return hash;
		}
	}
}

public class U2G_GotoPose
{
	private float _x_mm; // float_32
	private float _y_mm; // float_32
	private float _rad; // float_32
	private byte _level; // uint_8
	private byte _useManualSpeed; // uint_8

	public float x_mm { get { return _x_mm; } set { _x_mm = value; } }

	public float y_mm { get { return _y_mm; } set { _y_mm = value; } }

	public float rad { get { return _rad; } set { _rad = value; } }

	public byte level { get { return _level; } set { _level = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public U2G_GotoPose()
	{
	}

	public U2G_GotoPose(float x_mm,
		float y_mm,
		float rad,
		byte level,
		byte useManualSpeed)
	{
		this.x_mm = x_mm;
		this.y_mm = y_mm;
		this.rad = rad;
		this.level = level;
		this.useManualSpeed = useManualSpeed;
	}

	public U2G_GotoPose(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_GotoPose(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_x_mm = reader.ReadSingle();
		_y_mm = reader.ReadSingle();
		_rad = reader.ReadSingle();
		_level = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_x_mm);
		writer.Write((float)_y_mm);
		writer.Write((float)_rad);
		writer.Write((byte)_level);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 14;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_GotoPose p = obj as U2G_GotoPose;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_GotoPose p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._x_mm.Equals(p._x_mm)
			&& this._y_mm.Equals(p._y_mm)
			&& this._rad.Equals(p._rad)
			&& this._level.Equals(p._level)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._x_mm.GetHashCode();
			hash = hash * 23 + this._y_mm.GetHashCode();
			hash = hash * 23 + this._rad.GetHashCode();
			hash = hash * 23 + this._level.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class U2G_PlaceObjectOnGround
{
	private float _x_mm; // float_32
	private float _y_mm; // float_32
	private float _rad; // float_32
	private byte _level; // uint_8
	private byte _useManualSpeed; // uint_8

	public float x_mm { get { return _x_mm; } set { _x_mm = value; } }

	public float y_mm { get { return _y_mm; } set { _y_mm = value; } }

	public float rad { get { return _rad; } set { _rad = value; } }

	public byte level { get { return _level; } set { _level = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public U2G_PlaceObjectOnGround()
	{
	}

	public U2G_PlaceObjectOnGround(float x_mm,
		float y_mm,
		float rad,
		byte level,
		byte useManualSpeed)
	{
		this.x_mm = x_mm;
		this.y_mm = y_mm;
		this.rad = rad;
		this.level = level;
		this.useManualSpeed = useManualSpeed;
	}

	public U2G_PlaceObjectOnGround(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_PlaceObjectOnGround(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_x_mm = reader.ReadSingle();
		_y_mm = reader.ReadSingle();
		_rad = reader.ReadSingle();
		_level = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_x_mm);
		writer.Write((float)_y_mm);
		writer.Write((float)_rad);
		writer.Write((byte)_level);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 14;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_PlaceObjectOnGround p = obj as U2G_PlaceObjectOnGround;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_PlaceObjectOnGround p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._x_mm.Equals(p._x_mm)
			&& this._y_mm.Equals(p._y_mm)
			&& this._rad.Equals(p._rad)
			&& this._level.Equals(p._level)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._x_mm.GetHashCode();
			hash = hash * 23 + this._y_mm.GetHashCode();
			hash = hash * 23 + this._rad.GetHashCode();
			hash = hash * 23 + this._level.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class U2G_PlaceObjectOnGroundHere
{
	/**** Constructors ****/

	public U2G_PlaceObjectOnGroundHere()
	{
	}

	public U2G_PlaceObjectOnGroundHere(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_PlaceObjectOnGroundHere(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_ExecuteTestPlan
{
	/**** Constructors ****/

	public U2G_ExecuteTestPlan()
	{
	}

	public U2G_ExecuteTestPlan(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ExecuteTestPlan(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_SelectNextObject
{
	/**** Constructors ****/

	public U2G_SelectNextObject()
	{
	}

	public U2G_SelectNextObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SelectNextObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_PickAndPlaceObject
{
	private int _objectID; // int_32
	private byte _usePreDockPose; // uint_8
	private byte _useManualSpeed; // uint_8

	public int objectID { get { return _objectID; } set { _objectID = value; } }

	public byte usePreDockPose { get { return _usePreDockPose; } set { _usePreDockPose = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public U2G_PickAndPlaceObject()
	{
	}

	public U2G_PickAndPlaceObject(int objectID,
		byte usePreDockPose,
		byte useManualSpeed)
	{
		this.objectID = objectID;
		this.usePreDockPose = usePreDockPose;
		this.useManualSpeed = useManualSpeed;
	}

	public U2G_PickAndPlaceObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_PickAndPlaceObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadInt32();
		_usePreDockPose = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_objectID);
		writer.Write((byte)_usePreDockPose);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 6;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_PickAndPlaceObject p = obj as U2G_PickAndPlaceObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_PickAndPlaceObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._usePreDockPose.Equals(p._usePreDockPose)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._usePreDockPose.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class U2G_TraverseObject
{
	private byte _usePreDockPose; // uint_8
	private byte _useManualSpeed; // uint_8

	public byte usePreDockPose { get { return _usePreDockPose; } set { _usePreDockPose = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public U2G_TraverseObject()
	{
	}

	public U2G_TraverseObject(byte usePreDockPose,
		byte useManualSpeed)
	{
		this.usePreDockPose = usePreDockPose;
		this.useManualSpeed = useManualSpeed;
	}

	public U2G_TraverseObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_TraverseObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_usePreDockPose = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_usePreDockPose);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 2;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_TraverseObject p = obj as U2G_TraverseObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_TraverseObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._usePreDockPose.Equals(p._usePreDockPose)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._usePreDockPose.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetRobotCarryingObject
{
	private int _objectID; // int_32
	private byte _robotID; // uint_8

	public int objectID { get { return _objectID; } set { _objectID = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public U2G_SetRobotCarryingObject()
	{
	}

	public U2G_SetRobotCarryingObject(int objectID,
		byte robotID)
	{
		this.objectID = objectID;
		this.robotID = robotID;
	}

	public U2G_SetRobotCarryingObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetRobotCarryingObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadInt32();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_objectID);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetRobotCarryingObject p = obj as U2G_SetRobotCarryingObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetRobotCarryingObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ClearAllBlocks
{
	/**** Constructors ****/

	public U2G_ClearAllBlocks()
	{
	}

	public U2G_ClearAllBlocks(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ClearAllBlocks(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_VisionWhileMoving
{
	private byte _enable; // uint_8

	public byte enable { get { return _enable; } set { _enable = value; } }


	/**** Constructors ****/

	public U2G_VisionWhileMoving()
	{
	}

	public U2G_VisionWhileMoving(byte enable)
	{
		this.enable = enable;
	}

	public U2G_VisionWhileMoving(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_VisionWhileMoving(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_enable = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_enable);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_VisionWhileMoving p = obj as U2G_VisionWhileMoving;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_VisionWhileMoving p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._enable.Equals(p._enable);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._enable.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ExecuteBehavior
{
	private byte _behaviorMode; // uint_8

	public byte behaviorMode { get { return _behaviorMode; } set { _behaviorMode = value; } }


	/**** Constructors ****/

	public U2G_ExecuteBehavior()
	{
	}

	public U2G_ExecuteBehavior(byte behaviorMode)
	{
		this.behaviorMode = behaviorMode;
	}

	public U2G_ExecuteBehavior(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ExecuteBehavior(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_behaviorMode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_behaviorMode);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_ExecuteBehavior p = obj as U2G_ExecuteBehavior;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_ExecuteBehavior p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._behaviorMode.Equals(p._behaviorMode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._behaviorMode.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetBehaviorState
{
	private byte _behaviorState; // uint_8

	public byte behaviorState { get { return _behaviorState; } set { _behaviorState = value; } }


	/**** Constructors ****/

	public U2G_SetBehaviorState()
	{
	}

	public U2G_SetBehaviorState(byte behaviorState)
	{
		this.behaviorState = behaviorState;
	}

	public U2G_SetBehaviorState(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetBehaviorState(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_behaviorState = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_behaviorState);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetBehaviorState p = obj as U2G_SetBehaviorState;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetBehaviorState p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._behaviorState.Equals(p._behaviorState);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._behaviorState.GetHashCode();
			return hash;
		}
	}
}

public class U2G_AbortPath
{
	/**** Constructors ****/

	public U2G_AbortPath()
	{
	}

	public U2G_AbortPath(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_AbortPath(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_AbortAll
{
	/**** Constructors ****/

	public U2G_AbortAll()
	{
	}

	public U2G_AbortAll(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_AbortAll(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_DrawPoseMarker
{
	private float _x_mm; // float_32
	private float _y_mm; // float_32
	private float _rad; // float_32
	private byte _level; // uint_8

	public float x_mm { get { return _x_mm; } set { _x_mm = value; } }

	public float y_mm { get { return _y_mm; } set { _y_mm = value; } }

	public float rad { get { return _rad; } set { _rad = value; } }

	public byte level { get { return _level; } set { _level = value; } }


	/**** Constructors ****/

	public U2G_DrawPoseMarker()
	{
	}

	public U2G_DrawPoseMarker(float x_mm,
		float y_mm,
		float rad,
		byte level)
	{
		this.x_mm = x_mm;
		this.y_mm = y_mm;
		this.rad = rad;
		this.level = level;
	}

	public U2G_DrawPoseMarker(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_DrawPoseMarker(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_x_mm = reader.ReadSingle();
		_y_mm = reader.ReadSingle();
		_rad = reader.ReadSingle();
		_level = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_x_mm);
		writer.Write((float)_y_mm);
		writer.Write((float)_rad);
		writer.Write((byte)_level);
	}

	public int Size 
	{
		get {
			return 13;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_DrawPoseMarker p = obj as U2G_DrawPoseMarker;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_DrawPoseMarker p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._x_mm.Equals(p._x_mm)
			&& this._y_mm.Equals(p._y_mm)
			&& this._rad.Equals(p._rad)
			&& this._level.Equals(p._level);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._x_mm.GetHashCode();
			hash = hash * 23 + this._y_mm.GetHashCode();
			hash = hash * 23 + this._rad.GetHashCode();
			hash = hash * 23 + this._level.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ErasePoseMarker
{
	/**** Constructors ****/

	public U2G_ErasePoseMarker()
	{
	}

	public U2G_ErasePoseMarker(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ErasePoseMarker(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_SetWheelControllerGains
{
	private float _kpLeft; // float_32
	private float _kiLeft; // float_32
	private float _maxIntegralErrorLeft; // float_32
	private float _kpRight; // float_32
	private float _kiRight; // float_32
	private float _maxIntegralErrorRight; // float_32

	public float kpLeft { get { return _kpLeft; } set { _kpLeft = value; } }

	public float kiLeft { get { return _kiLeft; } set { _kiLeft = value; } }

	public float maxIntegralErrorLeft { get { return _maxIntegralErrorLeft; } set { _maxIntegralErrorLeft = value; } }

	public float kpRight { get { return _kpRight; } set { _kpRight = value; } }

	public float kiRight { get { return _kiRight; } set { _kiRight = value; } }

	public float maxIntegralErrorRight { get { return _maxIntegralErrorRight; } set { _maxIntegralErrorRight = value; } }


	/**** Constructors ****/

	public U2G_SetWheelControllerGains()
	{
	}

	public U2G_SetWheelControllerGains(float kpLeft,
		float kiLeft,
		float maxIntegralErrorLeft,
		float kpRight,
		float kiRight,
		float maxIntegralErrorRight)
	{
		this.kpLeft = kpLeft;
		this.kiLeft = kiLeft;
		this.maxIntegralErrorLeft = maxIntegralErrorLeft;
		this.kpRight = kpRight;
		this.kiRight = kiRight;
		this.maxIntegralErrorRight = maxIntegralErrorRight;
	}

	public U2G_SetWheelControllerGains(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetWheelControllerGains(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_kpLeft = reader.ReadSingle();
		_kiLeft = reader.ReadSingle();
		_maxIntegralErrorLeft = reader.ReadSingle();
		_kpRight = reader.ReadSingle();
		_kiRight = reader.ReadSingle();
		_maxIntegralErrorRight = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_kpLeft);
		writer.Write((float)_kiLeft);
		writer.Write((float)_maxIntegralErrorLeft);
		writer.Write((float)_kpRight);
		writer.Write((float)_kiRight);
		writer.Write((float)_maxIntegralErrorRight);
	}

	public int Size 
	{
		get {
			return 24;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetWheelControllerGains p = obj as U2G_SetWheelControllerGains;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetWheelControllerGains p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._kpLeft.Equals(p._kpLeft)
			&& this._kiLeft.Equals(p._kiLeft)
			&& this._maxIntegralErrorLeft.Equals(p._maxIntegralErrorLeft)
			&& this._kpRight.Equals(p._kpRight)
			&& this._kiRight.Equals(p._kiRight)
			&& this._maxIntegralErrorRight.Equals(p._maxIntegralErrorRight);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._kpLeft.GetHashCode();
			hash = hash * 23 + this._kiLeft.GetHashCode();
			hash = hash * 23 + this._maxIntegralErrorLeft.GetHashCode();
			hash = hash * 23 + this._kpRight.GetHashCode();
			hash = hash * 23 + this._kiRight.GetHashCode();
			hash = hash * 23 + this._maxIntegralErrorRight.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetHeadControllerGains
{
	private float _kp; // float_32
	private float _ki; // float_32
	private float _maxIntegralError; // float_32

	public float kp { get { return _kp; } set { _kp = value; } }

	public float ki { get { return _ki; } set { _ki = value; } }

	public float maxIntegralError { get { return _maxIntegralError; } set { _maxIntegralError = value; } }


	/**** Constructors ****/

	public U2G_SetHeadControllerGains()
	{
	}

	public U2G_SetHeadControllerGains(float kp,
		float ki,
		float maxIntegralError)
	{
		this.kp = kp;
		this.ki = ki;
		this.maxIntegralError = maxIntegralError;
	}

	public U2G_SetHeadControllerGains(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetHeadControllerGains(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_kp = reader.ReadSingle();
		_ki = reader.ReadSingle();
		_maxIntegralError = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_kp);
		writer.Write((float)_ki);
		writer.Write((float)_maxIntegralError);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetHeadControllerGains p = obj as U2G_SetHeadControllerGains;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetHeadControllerGains p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._kp.Equals(p._kp)
			&& this._ki.Equals(p._ki)
			&& this._maxIntegralError.Equals(p._maxIntegralError);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._kp.GetHashCode();
			hash = hash * 23 + this._ki.GetHashCode();
			hash = hash * 23 + this._maxIntegralError.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetLiftControllerGains
{
	private float _kp; // float_32
	private float _ki; // float_32
	private float _maxIntegralError; // float_32

	public float kp { get { return _kp; } set { _kp = value; } }

	public float ki { get { return _ki; } set { _ki = value; } }

	public float maxIntegralError { get { return _maxIntegralError; } set { _maxIntegralError = value; } }


	/**** Constructors ****/

	public U2G_SetLiftControllerGains()
	{
	}

	public U2G_SetLiftControllerGains(float kp,
		float ki,
		float maxIntegralError)
	{
		this.kp = kp;
		this.ki = ki;
		this.maxIntegralError = maxIntegralError;
	}

	public U2G_SetLiftControllerGains(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetLiftControllerGains(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_kp = reader.ReadSingle();
		_ki = reader.ReadSingle();
		_maxIntegralError = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_kp);
		writer.Write((float)_ki);
		writer.Write((float)_maxIntegralError);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetLiftControllerGains p = obj as U2G_SetLiftControllerGains;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetLiftControllerGains p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._kp.Equals(p._kp)
			&& this._ki.Equals(p._ki)
			&& this._maxIntegralError.Equals(p._maxIntegralError);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._kp.GetHashCode();
			hash = hash * 23 + this._ki.GetHashCode();
			hash = hash * 23 + this._maxIntegralError.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SelectNextSoundScheme
{
	/**** Constructors ****/

	public U2G_SelectNextSoundScheme()
	{
	}

	public U2G_SelectNextSoundScheme(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SelectNextSoundScheme(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_StartTestMode
{
	private int _p1; // int_32
	private int _p2; // int_32
	private int _p3; // int_32
	private byte _mode; // uint_8

	public int p1 { get { return _p1; } set { _p1 = value; } }

	public int p2 { get { return _p2; } set { _p2 = value; } }

	public int p3 { get { return _p3; } set { _p3 = value; } }

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public U2G_StartTestMode()
	{
	}

	public U2G_StartTestMode(int p1,
		int p2,
		int p3,
		byte mode)
	{
		this.p1 = p1;
		this.p2 = p2;
		this.p3 = p3;
		this.mode = mode;
	}

	public U2G_StartTestMode(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StartTestMode(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_p1 = reader.ReadInt32();
		_p2 = reader.ReadInt32();
		_p3 = reader.ReadInt32();
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_p1);
		writer.Write((int)_p2);
		writer.Write((int)_p3);
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 13;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_StartTestMode p = obj as U2G_StartTestMode;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_StartTestMode p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._p1.Equals(p._p1)
			&& this._p2.Equals(p._p2)
			&& this._p3.Equals(p._p3)
			&& this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._p1.GetHashCode();
			hash = hash * 23 + this._p2.GetHashCode();
			hash = hash * 23 + this._p3.GetHashCode();
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class U2G_IMURequest
{
	private uint _length_ms; // uint_32

	public uint length_ms { get { return _length_ms; } set { _length_ms = value; } }


	/**** Constructors ****/

	public U2G_IMURequest()
	{
	}

	public U2G_IMURequest(uint length_ms)
	{
		this.length_ms = length_ms;
	}

	public U2G_IMURequest(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_IMURequest(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_length_ms = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_length_ms);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_IMURequest p = obj as U2G_IMURequest;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_IMURequest p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._length_ms.Equals(p._length_ms);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._length_ms.GetHashCode();
			return hash;
		}
	}
}

public class U2G_PlayAnimation
{
	private uint _numLoops; // uint_32
	private string _animationName; // string[uint_8]

	public uint numLoops { get { return _numLoops; } set { _numLoops = value; } }

	public string animationName
	{
		get {
			return _animationName;
		}
		set {
			if (!string.IsNullOrEmpty(value) && System.Text.Encoding.UTF8.GetByteCount(value) > 255) {
				throw new System.ArgumentException("animationName string is too long. Must decode to less than or equal to 255 bytes.", "value");
			}
			_animationName = value;
		}
	}


	/**** Constructors ****/

	public U2G_PlayAnimation()
	{
	}

	public U2G_PlayAnimation(uint numLoops,
		string animationName)
	{
		this.numLoops = numLoops;
		this.animationName = animationName;
	}

	public U2G_PlayAnimation(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_PlayAnimation(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_numLoops = reader.ReadUInt32();
		int _animationName_length = (int)reader.ReadByte();
		byte[] _animationName_bytes = reader.ReadBytes(_animationName_length);
		_animationName = System.Text.Encoding.UTF8.GetString(_animationName_bytes);
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_numLoops);
		if (_animationName != null) {
			byte[] _animationName_bytes = System.Text.Encoding.UTF8.GetBytes(_animationName);
			writer.Write((byte)_animationName_bytes.Length);
			writer.Write(_animationName_bytes);
		}
	}

	public int Size 
	{
		get {
			int result = 0;
			result += 4; // uint_32
			result += 1; // uint_8
			if (animationName != null) {
				result += System.Text.Encoding.UTF8.GetByteCount(animationName);
			}
			return result;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_PlayAnimation p = obj as U2G_PlayAnimation;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_PlayAnimation p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._numLoops.Equals(p._numLoops)
			&& this._animationName.Equals(p._animationName);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._numLoops.GetHashCode();
			hash = hash * 23 + this._animationName.GetHashCode();
			return hash;
		}
	}
}

public class U2G_ReadAnimationFile
{
	/**** Constructors ****/

	public U2G_ReadAnimationFile()
	{
	}

	public U2G_ReadAnimationFile(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_ReadAnimationFile(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_StartFaceTracking
{
	private byte _timeout_sec; // uint_8

	public byte timeout_sec { get { return _timeout_sec; } set { _timeout_sec = value; } }


	/**** Constructors ****/

	public U2G_StartFaceTracking()
	{
	}

	public U2G_StartFaceTracking(byte timeout_sec)
	{
		this.timeout_sec = timeout_sec;
	}

	public U2G_StartFaceTracking(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StartFaceTracking(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_timeout_sec = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_timeout_sec);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_StartFaceTracking p = obj as U2G_StartFaceTracking;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_StartFaceTracking p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._timeout_sec.Equals(p._timeout_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._timeout_sec.GetHashCode();
			return hash;
		}
	}
}

public class U2G_StopFaceTracking
{
	/**** Constructors ****/

	public U2G_StopFaceTracking()
	{
	}

	public U2G_StopFaceTracking(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StopFaceTracking(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_StartLookingForMarkers
{
	/**** Constructors ****/

	public U2G_StartLookingForMarkers()
	{
	}

	public U2G_StartLookingForMarkers(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StartLookingForMarkers(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_StopLookingForMarkers
{
	/**** Constructors ****/

	public U2G_StopLookingForMarkers()
	{
	}

	public U2G_StopLookingForMarkers(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_StopLookingForMarkers(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class U2G_SetVisionSystemParams
{
	private int _autoexposureOn; // int_32
	private float _exposureTime; // float_32
	private int _integerCountsIncrement; // int_32
	private float _minExposureTime; // float_32
	private float _maxExposureTime; // float_32
	private float _percentileToMakeHigh; // float_32
	private int _limitFramerate; // int_32
	private byte _highValue; // uint_8

	public int autoexposureOn { get { return _autoexposureOn; } set { _autoexposureOn = value; } }

	public float exposureTime { get { return _exposureTime; } set { _exposureTime = value; } }

	public int integerCountsIncrement { get { return _integerCountsIncrement; } set { _integerCountsIncrement = value; } }

	public float minExposureTime { get { return _minExposureTime; } set { _minExposureTime = value; } }

	public float maxExposureTime { get { return _maxExposureTime; } set { _maxExposureTime = value; } }

	public float percentileToMakeHigh { get { return _percentileToMakeHigh; } set { _percentileToMakeHigh = value; } }

	public int limitFramerate { get { return _limitFramerate; } set { _limitFramerate = value; } }

	public byte highValue { get { return _highValue; } set { _highValue = value; } }


	/**** Constructors ****/

	public U2G_SetVisionSystemParams()
	{
	}

	public U2G_SetVisionSystemParams(int autoexposureOn,
		float exposureTime,
		int integerCountsIncrement,
		float minExposureTime,
		float maxExposureTime,
		float percentileToMakeHigh,
		int limitFramerate,
		byte highValue)
	{
		this.autoexposureOn = autoexposureOn;
		this.exposureTime = exposureTime;
		this.integerCountsIncrement = integerCountsIncrement;
		this.minExposureTime = minExposureTime;
		this.maxExposureTime = maxExposureTime;
		this.percentileToMakeHigh = percentileToMakeHigh;
		this.limitFramerate = limitFramerate;
		this.highValue = highValue;
	}

	public U2G_SetVisionSystemParams(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetVisionSystemParams(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_autoexposureOn = reader.ReadInt32();
		_exposureTime = reader.ReadSingle();
		_integerCountsIncrement = reader.ReadInt32();
		_minExposureTime = reader.ReadSingle();
		_maxExposureTime = reader.ReadSingle();
		_percentileToMakeHigh = reader.ReadSingle();
		_limitFramerate = reader.ReadInt32();
		_highValue = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_autoexposureOn);
		writer.Write((float)_exposureTime);
		writer.Write((int)_integerCountsIncrement);
		writer.Write((float)_minExposureTime);
		writer.Write((float)_maxExposureTime);
		writer.Write((float)_percentileToMakeHigh);
		writer.Write((int)_limitFramerate);
		writer.Write((byte)_highValue);
	}

	public int Size 
	{
		get {
			return 29;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetVisionSystemParams p = obj as U2G_SetVisionSystemParams;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetVisionSystemParams p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._autoexposureOn.Equals(p._autoexposureOn)
			&& this._exposureTime.Equals(p._exposureTime)
			&& this._integerCountsIncrement.Equals(p._integerCountsIncrement)
			&& this._minExposureTime.Equals(p._minExposureTime)
			&& this._maxExposureTime.Equals(p._maxExposureTime)
			&& this._percentileToMakeHigh.Equals(p._percentileToMakeHigh)
			&& this._limitFramerate.Equals(p._limitFramerate)
			&& this._highValue.Equals(p._highValue);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._autoexposureOn.GetHashCode();
			hash = hash * 23 + this._exposureTime.GetHashCode();
			hash = hash * 23 + this._integerCountsIncrement.GetHashCode();
			hash = hash * 23 + this._minExposureTime.GetHashCode();
			hash = hash * 23 + this._maxExposureTime.GetHashCode();
			hash = hash * 23 + this._percentileToMakeHigh.GetHashCode();
			hash = hash * 23 + this._limitFramerate.GetHashCode();
			hash = hash * 23 + this._highValue.GetHashCode();
			return hash;
		}
	}
}

public class U2G_SetFaceDetectParams
{
	private float _scaleFactor; // float_32
	private int _minNeighbors; // int_32
	private int _minObjectHeight; // int_32
	private int _minObjectWidth; // int_32
	private int _maxObjectHeight; // int_32
	private int _maxObjectWidth; // int_32

	public float scaleFactor { get { return _scaleFactor; } set { _scaleFactor = value; } }

	public int minNeighbors { get { return _minNeighbors; } set { _minNeighbors = value; } }

	public int minObjectHeight { get { return _minObjectHeight; } set { _minObjectHeight = value; } }

	public int minObjectWidth { get { return _minObjectWidth; } set { _minObjectWidth = value; } }

	public int maxObjectHeight { get { return _maxObjectHeight; } set { _maxObjectHeight = value; } }

	public int maxObjectWidth { get { return _maxObjectWidth; } set { _maxObjectWidth = value; } }


	/**** Constructors ****/

	public U2G_SetFaceDetectParams()
	{
	}

	public U2G_SetFaceDetectParams(float scaleFactor,
		int minNeighbors,
		int minObjectHeight,
		int minObjectWidth,
		int maxObjectHeight,
		int maxObjectWidth)
	{
		this.scaleFactor = scaleFactor;
		this.minNeighbors = minNeighbors;
		this.minObjectHeight = minObjectHeight;
		this.minObjectWidth = minObjectWidth;
		this.maxObjectHeight = maxObjectHeight;
		this.maxObjectWidth = maxObjectWidth;
	}

	public U2G_SetFaceDetectParams(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public U2G_SetFaceDetectParams(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_scaleFactor = reader.ReadSingle();
		_minNeighbors = reader.ReadInt32();
		_minObjectHeight = reader.ReadInt32();
		_minObjectWidth = reader.ReadInt32();
		_maxObjectHeight = reader.ReadInt32();
		_maxObjectWidth = reader.ReadInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_scaleFactor);
		writer.Write((int)_minNeighbors);
		writer.Write((int)_minObjectHeight);
		writer.Write((int)_minObjectWidth);
		writer.Write((int)_maxObjectHeight);
		writer.Write((int)_maxObjectWidth);
	}

	public int Size 
	{
		get {
			return 24;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_SetFaceDetectParams p = obj as U2G_SetFaceDetectParams;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_SetFaceDetectParams p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._scaleFactor.Equals(p._scaleFactor)
			&& this._minNeighbors.Equals(p._minNeighbors)
			&& this._minObjectHeight.Equals(p._minObjectHeight)
			&& this._minObjectWidth.Equals(p._minObjectWidth)
			&& this._maxObjectHeight.Equals(p._maxObjectHeight)
			&& this._maxObjectWidth.Equals(p._maxObjectWidth);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._scaleFactor.GetHashCode();
			hash = hash * 23 + this._minNeighbors.GetHashCode();
			hash = hash * 23 + this._minObjectHeight.GetHashCode();
			hash = hash * 23 + this._minObjectWidth.GetHashCode();
			hash = hash * 23 + this._maxObjectHeight.GetHashCode();
			hash = hash * 23 + this._maxObjectWidth.GetHashCode();
			return hash;
		}
	}
}

public class U2G_Message {
	public enum Tag {
		Ping,	//0
		ConnectToRobot,	//1
		ConnectToUiDevice,	//2
		DisconnectFromUiDevice,	//3
		ForceAddRobot,	//4
		StartEngine,	//5
		DriveWheels,	//6
		TurnInPlace,	//7
		MoveHead,	//8
		MoveLift,	//9
		SetLiftHeight,	//10
		SetHeadAngle,	//11
		TrackHeadToObject,	//12
		StopAllMotors,	//13
		ImageRequest,	//14
		SetRobotImageSendMode,	//15
		SaveImages,	//16
		SaveRobotState,	//17
		EnableDisplay,	//18
		SetHeadlights,	//19
		GotoPose,	//20
		PlaceObjectOnGround,	//21
		PlaceObjectOnGroundHere,	//22
		ExecuteTestPlan,	//23
		SelectNextObject,	//24
		PickAndPlaceObject,	//25
		TraverseObject,	//26
		SetRobotCarryingObject,	//27
		ClearAllBlocks,	//28
		VisionWhileMoving,	//29
		ExecuteBehavior,	//30
		SetBehaviorState,	//31
		AbortPath,	//32
		AbortAll,	//33
		DrawPoseMarker,	//34
		ErasePoseMarker,	//35
		SetWheelControllerGains,	//36
		SetHeadControllerGains,	//37
		SetLiftControllerGains,	//38
		SelectNextSoundScheme,	//39
		StartTestMode,	//40
		IMURequest,	//41
		PlayAnimation,	//42
		ReadAnimationFile,	//43
		StartFaceTracking,	//44
		StopFaceTracking,	//45
		StartLookingForMarkers,	//46
		StopLookingForMarkers,	//47
		SetVisionSystemParams,	//48
		SetFaceDetectParams,	//49
		INVALID
	};

	private Tag _tag = Tag.INVALID;

	public Tag GetTag() { return _tag; }

	private object _state = null;

	public Anki.Cozmo.U2G_Ping Ping
	{
		get {
			if (_tag != Tag.Ping) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"Ping\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_Ping)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.Ping : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ConnectToRobot ConnectToRobot
	{
		get {
			if (_tag != Tag.ConnectToRobot) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ConnectToRobot\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ConnectToRobot)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ConnectToRobot : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ConnectToUiDevice ConnectToUiDevice
	{
		get {
			if (_tag != Tag.ConnectToUiDevice) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ConnectToUiDevice\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ConnectToUiDevice)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ConnectToUiDevice : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_DisconnectFromUiDevice DisconnectFromUiDevice
	{
		get {
			if (_tag != Tag.DisconnectFromUiDevice) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DisconnectFromUiDevice\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_DisconnectFromUiDevice)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DisconnectFromUiDevice : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ForceAddRobot ForceAddRobot
	{
		get {
			if (_tag != Tag.ForceAddRobot) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ForceAddRobot\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ForceAddRobot)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ForceAddRobot : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StartEngine StartEngine
	{
		get {
			if (_tag != Tag.StartEngine) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartEngine\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StartEngine)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartEngine : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_DriveWheels DriveWheels
	{
		get {
			if (_tag != Tag.DriveWheels) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DriveWheels\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_DriveWheels)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DriveWheels : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_TurnInPlace TurnInPlace
	{
		get {
			if (_tag != Tag.TurnInPlace) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"TurnInPlace\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_TurnInPlace)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.TurnInPlace : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_MoveHead MoveHead
	{
		get {
			if (_tag != Tag.MoveHead) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"MoveHead\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_MoveHead)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.MoveHead : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_MoveLift MoveLift
	{
		get {
			if (_tag != Tag.MoveLift) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"MoveLift\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_MoveLift)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.MoveLift : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetLiftHeight SetLiftHeight
	{
		get {
			if (_tag != Tag.SetLiftHeight) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetLiftHeight\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetLiftHeight)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetLiftHeight : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetHeadAngle SetHeadAngle
	{
		get {
			if (_tag != Tag.SetHeadAngle) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetHeadAngle\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetHeadAngle)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetHeadAngle : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_TrackHeadToObject TrackHeadToObject
	{
		get {
			if (_tag != Tag.TrackHeadToObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"TrackHeadToObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_TrackHeadToObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.TrackHeadToObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StopAllMotors StopAllMotors
	{
		get {
			if (_tag != Tag.StopAllMotors) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopAllMotors\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StopAllMotors)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopAllMotors : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ImageRequest ImageRequest
	{
		get {
			if (_tag != Tag.ImageRequest) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ImageRequest\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ImageRequest)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ImageRequest : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetRobotImageSendMode SetRobotImageSendMode
	{
		get {
			if (_tag != Tag.SetRobotImageSendMode) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetRobotImageSendMode\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetRobotImageSendMode)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetRobotImageSendMode : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SaveImages SaveImages
	{
		get {
			if (_tag != Tag.SaveImages) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SaveImages\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SaveImages)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SaveImages : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SaveRobotState SaveRobotState
	{
		get {
			if (_tag != Tag.SaveRobotState) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SaveRobotState\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SaveRobotState)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SaveRobotState : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_EnableDisplay EnableDisplay
	{
		get {
			if (_tag != Tag.EnableDisplay) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"EnableDisplay\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_EnableDisplay)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.EnableDisplay : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetHeadlights SetHeadlights
	{
		get {
			if (_tag != Tag.SetHeadlights) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetHeadlights\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetHeadlights)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetHeadlights : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_GotoPose GotoPose
	{
		get {
			if (_tag != Tag.GotoPose) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"GotoPose\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_GotoPose)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.GotoPose : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_PlaceObjectOnGround PlaceObjectOnGround
	{
		get {
			if (_tag != Tag.PlaceObjectOnGround) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlaceObjectOnGround\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_PlaceObjectOnGround)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlaceObjectOnGround : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_PlaceObjectOnGroundHere PlaceObjectOnGroundHere
	{
		get {
			if (_tag != Tag.PlaceObjectOnGroundHere) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlaceObjectOnGroundHere\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_PlaceObjectOnGroundHere)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlaceObjectOnGroundHere : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ExecuteTestPlan ExecuteTestPlan
	{
		get {
			if (_tag != Tag.ExecuteTestPlan) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ExecuteTestPlan\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ExecuteTestPlan)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ExecuteTestPlan : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SelectNextObject SelectNextObject
	{
		get {
			if (_tag != Tag.SelectNextObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SelectNextObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SelectNextObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SelectNextObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_PickAndPlaceObject PickAndPlaceObject
	{
		get {
			if (_tag != Tag.PickAndPlaceObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PickAndPlaceObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_PickAndPlaceObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PickAndPlaceObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_TraverseObject TraverseObject
	{
		get {
			if (_tag != Tag.TraverseObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"TraverseObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_TraverseObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.TraverseObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetRobotCarryingObject SetRobotCarryingObject
	{
		get {
			if (_tag != Tag.SetRobotCarryingObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetRobotCarryingObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetRobotCarryingObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetRobotCarryingObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ClearAllBlocks ClearAllBlocks
	{
		get {
			if (_tag != Tag.ClearAllBlocks) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ClearAllBlocks\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ClearAllBlocks)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ClearAllBlocks : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_VisionWhileMoving VisionWhileMoving
	{
		get {
			if (_tag != Tag.VisionWhileMoving) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"VisionWhileMoving\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_VisionWhileMoving)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.VisionWhileMoving : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ExecuteBehavior ExecuteBehavior
	{
		get {
			if (_tag != Tag.ExecuteBehavior) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ExecuteBehavior\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ExecuteBehavior)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ExecuteBehavior : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetBehaviorState SetBehaviorState
	{
		get {
			if (_tag != Tag.SetBehaviorState) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetBehaviorState\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetBehaviorState)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetBehaviorState : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_AbortPath AbortPath
	{
		get {
			if (_tag != Tag.AbortPath) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"AbortPath\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_AbortPath)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.AbortPath : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_AbortAll AbortAll
	{
		get {
			if (_tag != Tag.AbortAll) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"AbortAll\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_AbortAll)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.AbortAll : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_DrawPoseMarker DrawPoseMarker
	{
		get {
			if (_tag != Tag.DrawPoseMarker) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DrawPoseMarker\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_DrawPoseMarker)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DrawPoseMarker : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ErasePoseMarker ErasePoseMarker
	{
		get {
			if (_tag != Tag.ErasePoseMarker) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ErasePoseMarker\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ErasePoseMarker)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ErasePoseMarker : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetWheelControllerGains SetWheelControllerGains
	{
		get {
			if (_tag != Tag.SetWheelControllerGains) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetWheelControllerGains\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetWheelControllerGains)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetWheelControllerGains : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetHeadControllerGains SetHeadControllerGains
	{
		get {
			if (_tag != Tag.SetHeadControllerGains) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetHeadControllerGains\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetHeadControllerGains)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetHeadControllerGains : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetLiftControllerGains SetLiftControllerGains
	{
		get {
			if (_tag != Tag.SetLiftControllerGains) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetLiftControllerGains\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetLiftControllerGains)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetLiftControllerGains : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SelectNextSoundScheme SelectNextSoundScheme
	{
		get {
			if (_tag != Tag.SelectNextSoundScheme) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SelectNextSoundScheme\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SelectNextSoundScheme)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SelectNextSoundScheme : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StartTestMode StartTestMode
	{
		get {
			if (_tag != Tag.StartTestMode) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartTestMode\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StartTestMode)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartTestMode : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_IMURequest IMURequest
	{
		get {
			if (_tag != Tag.IMURequest) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"IMURequest\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_IMURequest)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.IMURequest : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_PlayAnimation PlayAnimation
	{
		get {
			if (_tag != Tag.PlayAnimation) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlayAnimation\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_PlayAnimation)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlayAnimation : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_ReadAnimationFile ReadAnimationFile
	{
		get {
			if (_tag != Tag.ReadAnimationFile) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ReadAnimationFile\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_ReadAnimationFile)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ReadAnimationFile : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StartFaceTracking StartFaceTracking
	{
		get {
			if (_tag != Tag.StartFaceTracking) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartFaceTracking\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StartFaceTracking)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartFaceTracking : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StopFaceTracking StopFaceTracking
	{
		get {
			if (_tag != Tag.StopFaceTracking) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopFaceTracking\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StopFaceTracking)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopFaceTracking : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StartLookingForMarkers StartLookingForMarkers
	{
		get {
			if (_tag != Tag.StartLookingForMarkers) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartLookingForMarkers\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StartLookingForMarkers)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartLookingForMarkers : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_StopLookingForMarkers StopLookingForMarkers
	{
		get {
			if (_tag != Tag.StopLookingForMarkers) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopLookingForMarkers\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_StopLookingForMarkers)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopLookingForMarkers : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetVisionSystemParams SetVisionSystemParams
	{
		get {
			if (_tag != Tag.SetVisionSystemParams) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetVisionSystemParams\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetVisionSystemParams)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetVisionSystemParams : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G_SetFaceDetectParams SetFaceDetectParams
	{
		get {
			if (_tag != Tag.SetFaceDetectParams) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetFaceDetectParams\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G_SetFaceDetectParams)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetFaceDetectParams : Tag.INVALID;
			_state = value;
		}
	}

	public System.IO.Stream Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Tag newTag = Tag.INVALID;
		newTag = (Tag)reader.ReadByte();
		switch(newTag) {
		case Tag.Ping:
			_state = new Anki.Cozmo.U2G_Ping(reader);
			break;
		case Tag.ConnectToRobot:
			_state = new Anki.Cozmo.U2G_ConnectToRobot(reader);
			break;
		case Tag.ConnectToUiDevice:
			_state = new Anki.Cozmo.U2G_ConnectToUiDevice(reader);
			break;
		case Tag.DisconnectFromUiDevice:
			_state = new Anki.Cozmo.U2G_DisconnectFromUiDevice(reader);
			break;
		case Tag.ForceAddRobot:
			_state = new Anki.Cozmo.U2G_ForceAddRobot(reader);
			break;
		case Tag.StartEngine:
			_state = new Anki.Cozmo.U2G_StartEngine(reader);
			break;
		case Tag.DriveWheels:
			_state = new Anki.Cozmo.U2G_DriveWheels(reader);
			break;
		case Tag.TurnInPlace:
			_state = new Anki.Cozmo.U2G_TurnInPlace(reader);
			break;
		case Tag.MoveHead:
			_state = new Anki.Cozmo.U2G_MoveHead(reader);
			break;
		case Tag.MoveLift:
			_state = new Anki.Cozmo.U2G_MoveLift(reader);
			break;
		case Tag.SetLiftHeight:
			_state = new Anki.Cozmo.U2G_SetLiftHeight(reader);
			break;
		case Tag.SetHeadAngle:
			_state = new Anki.Cozmo.U2G_SetHeadAngle(reader);
			break;
		case Tag.TrackHeadToObject:
			_state = new Anki.Cozmo.U2G_TrackHeadToObject(reader);
			break;
		case Tag.StopAllMotors:
			_state = new Anki.Cozmo.U2G_StopAllMotors(reader);
			break;
		case Tag.ImageRequest:
			_state = new Anki.Cozmo.U2G_ImageRequest(reader);
			break;
		case Tag.SetRobotImageSendMode:
			_state = new Anki.Cozmo.U2G_SetRobotImageSendMode(reader);
			break;
		case Tag.SaveImages:
			_state = new Anki.Cozmo.U2G_SaveImages(reader);
			break;
		case Tag.SaveRobotState:
			_state = new Anki.Cozmo.U2G_SaveRobotState(reader);
			break;
		case Tag.EnableDisplay:
			_state = new Anki.Cozmo.U2G_EnableDisplay(reader);
			break;
		case Tag.SetHeadlights:
			_state = new Anki.Cozmo.U2G_SetHeadlights(reader);
			break;
		case Tag.GotoPose:
			_state = new Anki.Cozmo.U2G_GotoPose(reader);
			break;
		case Tag.PlaceObjectOnGround:
			_state = new Anki.Cozmo.U2G_PlaceObjectOnGround(reader);
			break;
		case Tag.PlaceObjectOnGroundHere:
			_state = new Anki.Cozmo.U2G_PlaceObjectOnGroundHere(reader);
			break;
		case Tag.ExecuteTestPlan:
			_state = new Anki.Cozmo.U2G_ExecuteTestPlan(reader);
			break;
		case Tag.SelectNextObject:
			_state = new Anki.Cozmo.U2G_SelectNextObject(reader);
			break;
		case Tag.PickAndPlaceObject:
			_state = new Anki.Cozmo.U2G_PickAndPlaceObject(reader);
			break;
		case Tag.TraverseObject:
			_state = new Anki.Cozmo.U2G_TraverseObject(reader);
			break;
		case Tag.SetRobotCarryingObject:
			_state = new Anki.Cozmo.U2G_SetRobotCarryingObject(reader);
			break;
		case Tag.ClearAllBlocks:
			_state = new Anki.Cozmo.U2G_ClearAllBlocks(reader);
			break;
		case Tag.VisionWhileMoving:
			_state = new Anki.Cozmo.U2G_VisionWhileMoving(reader);
			break;
		case Tag.ExecuteBehavior:
			_state = new Anki.Cozmo.U2G_ExecuteBehavior(reader);
			break;
		case Tag.SetBehaviorState:
			_state = new Anki.Cozmo.U2G_SetBehaviorState(reader);
			break;
		case Tag.AbortPath:
			_state = new Anki.Cozmo.U2G_AbortPath(reader);
			break;
		case Tag.AbortAll:
			_state = new Anki.Cozmo.U2G_AbortAll(reader);
			break;
		case Tag.DrawPoseMarker:
			_state = new Anki.Cozmo.U2G_DrawPoseMarker(reader);
			break;
		case Tag.ErasePoseMarker:
			_state = new Anki.Cozmo.U2G_ErasePoseMarker(reader);
			break;
		case Tag.SetWheelControllerGains:
			_state = new Anki.Cozmo.U2G_SetWheelControllerGains(reader);
			break;
		case Tag.SetHeadControllerGains:
			_state = new Anki.Cozmo.U2G_SetHeadControllerGains(reader);
			break;
		case Tag.SetLiftControllerGains:
			_state = new Anki.Cozmo.U2G_SetLiftControllerGains(reader);
			break;
		case Tag.SelectNextSoundScheme:
			_state = new Anki.Cozmo.U2G_SelectNextSoundScheme(reader);
			break;
		case Tag.StartTestMode:
			_state = new Anki.Cozmo.U2G_StartTestMode(reader);
			break;
		case Tag.IMURequest:
			_state = new Anki.Cozmo.U2G_IMURequest(reader);
			break;
		case Tag.PlayAnimation:
			_state = new Anki.Cozmo.U2G_PlayAnimation(reader);
			break;
		case Tag.ReadAnimationFile:
			_state = new Anki.Cozmo.U2G_ReadAnimationFile(reader);
			break;
		case Tag.StartFaceTracking:
			_state = new Anki.Cozmo.U2G_StartFaceTracking(reader);
			break;
		case Tag.StopFaceTracking:
			_state = new Anki.Cozmo.U2G_StopFaceTracking(reader);
			break;
		case Tag.StartLookingForMarkers:
			_state = new Anki.Cozmo.U2G_StartLookingForMarkers(reader);
			break;
		case Tag.StopLookingForMarkers:
			_state = new Anki.Cozmo.U2G_StopLookingForMarkers(reader);
			break;
		case Tag.SetVisionSystemParams:
			_state = new Anki.Cozmo.U2G_SetVisionSystemParams(reader);
			break;
		case Tag.SetFaceDetectParams:
			_state = new Anki.Cozmo.U2G_SetFaceDetectParams(reader);
			break;
		default:
			break;
		}
		_tag = newTag;
		return stream;
	}

	public System.IO.Stream Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		writer.Write((byte)GetTag());
		switch(GetTag()) {
		case Tag.Ping:
			Ping.Pack(writer);
			break;
		case Tag.ConnectToRobot:
			ConnectToRobot.Pack(writer);
			break;
		case Tag.ConnectToUiDevice:
			ConnectToUiDevice.Pack(writer);
			break;
		case Tag.DisconnectFromUiDevice:
			DisconnectFromUiDevice.Pack(writer);
			break;
		case Tag.ForceAddRobot:
			ForceAddRobot.Pack(writer);
			break;
		case Tag.StartEngine:
			StartEngine.Pack(writer);
			break;
		case Tag.DriveWheels:
			DriveWheels.Pack(writer);
			break;
		case Tag.TurnInPlace:
			TurnInPlace.Pack(writer);
			break;
		case Tag.MoveHead:
			MoveHead.Pack(writer);
			break;
		case Tag.MoveLift:
			MoveLift.Pack(writer);
			break;
		case Tag.SetLiftHeight:
			SetLiftHeight.Pack(writer);
			break;
		case Tag.SetHeadAngle:
			SetHeadAngle.Pack(writer);
			break;
		case Tag.TrackHeadToObject:
			TrackHeadToObject.Pack(writer);
			break;
		case Tag.StopAllMotors:
			StopAllMotors.Pack(writer);
			break;
		case Tag.ImageRequest:
			ImageRequest.Pack(writer);
			break;
		case Tag.SetRobotImageSendMode:
			SetRobotImageSendMode.Pack(writer);
			break;
		case Tag.SaveImages:
			SaveImages.Pack(writer);
			break;
		case Tag.SaveRobotState:
			SaveRobotState.Pack(writer);
			break;
		case Tag.EnableDisplay:
			EnableDisplay.Pack(writer);
			break;
		case Tag.SetHeadlights:
			SetHeadlights.Pack(writer);
			break;
		case Tag.GotoPose:
			GotoPose.Pack(writer);
			break;
		case Tag.PlaceObjectOnGround:
			PlaceObjectOnGround.Pack(writer);
			break;
		case Tag.PlaceObjectOnGroundHere:
			PlaceObjectOnGroundHere.Pack(writer);
			break;
		case Tag.ExecuteTestPlan:
			ExecuteTestPlan.Pack(writer);
			break;
		case Tag.SelectNextObject:
			SelectNextObject.Pack(writer);
			break;
		case Tag.PickAndPlaceObject:
			PickAndPlaceObject.Pack(writer);
			break;
		case Tag.TraverseObject:
			TraverseObject.Pack(writer);
			break;
		case Tag.SetRobotCarryingObject:
			SetRobotCarryingObject.Pack(writer);
			break;
		case Tag.ClearAllBlocks:
			ClearAllBlocks.Pack(writer);
			break;
		case Tag.VisionWhileMoving:
			VisionWhileMoving.Pack(writer);
			break;
		case Tag.ExecuteBehavior:
			ExecuteBehavior.Pack(writer);
			break;
		case Tag.SetBehaviorState:
			SetBehaviorState.Pack(writer);
			break;
		case Tag.AbortPath:
			AbortPath.Pack(writer);
			break;
		case Tag.AbortAll:
			AbortAll.Pack(writer);
			break;
		case Tag.DrawPoseMarker:
			DrawPoseMarker.Pack(writer);
			break;
		case Tag.ErasePoseMarker:
			ErasePoseMarker.Pack(writer);
			break;
		case Tag.SetWheelControllerGains:
			SetWheelControllerGains.Pack(writer);
			break;
		case Tag.SetHeadControllerGains:
			SetHeadControllerGains.Pack(writer);
			break;
		case Tag.SetLiftControllerGains:
			SetLiftControllerGains.Pack(writer);
			break;
		case Tag.SelectNextSoundScheme:
			SelectNextSoundScheme.Pack(writer);
			break;
		case Tag.StartTestMode:
			StartTestMode.Pack(writer);
			break;
		case Tag.IMURequest:
			IMURequest.Pack(writer);
			break;
		case Tag.PlayAnimation:
			PlayAnimation.Pack(writer);
			break;
		case Tag.ReadAnimationFile:
			ReadAnimationFile.Pack(writer);
			break;
		case Tag.StartFaceTracking:
			StartFaceTracking.Pack(writer);
			break;
		case Tag.StopFaceTracking:
			StopFaceTracking.Pack(writer);
			break;
		case Tag.StartLookingForMarkers:
			StartLookingForMarkers.Pack(writer);
			break;
		case Tag.StopLookingForMarkers:
			StopLookingForMarkers.Pack(writer);
			break;
		case Tag.SetVisionSystemParams:
			SetVisionSystemParams.Pack(writer);
			break;
		case Tag.SetFaceDetectParams:
			SetFaceDetectParams.Pack(writer);
			break;
		default:
			break;
		}
		return stream;
	}

	public int Size
	{
		get {
			int result = 1; // tag = uint_8
			switch(GetTag()) {
			case Tag.Ping:
				result += Ping.Size;
				break;
			case Tag.ConnectToRobot:
				result += ConnectToRobot.Size;
				break;
			case Tag.ConnectToUiDevice:
				result += ConnectToUiDevice.Size;
				break;
			case Tag.DisconnectFromUiDevice:
				result += DisconnectFromUiDevice.Size;
				break;
			case Tag.ForceAddRobot:
				result += ForceAddRobot.Size;
				break;
			case Tag.StartEngine:
				result += StartEngine.Size;
				break;
			case Tag.DriveWheels:
				result += DriveWheels.Size;
				break;
			case Tag.TurnInPlace:
				result += TurnInPlace.Size;
				break;
			case Tag.MoveHead:
				result += MoveHead.Size;
				break;
			case Tag.MoveLift:
				result += MoveLift.Size;
				break;
			case Tag.SetLiftHeight:
				result += SetLiftHeight.Size;
				break;
			case Tag.SetHeadAngle:
				result += SetHeadAngle.Size;
				break;
			case Tag.TrackHeadToObject:
				result += TrackHeadToObject.Size;
				break;
			case Tag.StopAllMotors:
				result += StopAllMotors.Size;
				break;
			case Tag.ImageRequest:
				result += ImageRequest.Size;
				break;
			case Tag.SetRobotImageSendMode:
				result += SetRobotImageSendMode.Size;
				break;
			case Tag.SaveImages:
				result += SaveImages.Size;
				break;
			case Tag.SaveRobotState:
				result += SaveRobotState.Size;
				break;
			case Tag.EnableDisplay:
				result += EnableDisplay.Size;
				break;
			case Tag.SetHeadlights:
				result += SetHeadlights.Size;
				break;
			case Tag.GotoPose:
				result += GotoPose.Size;
				break;
			case Tag.PlaceObjectOnGround:
				result += PlaceObjectOnGround.Size;
				break;
			case Tag.PlaceObjectOnGroundHere:
				result += PlaceObjectOnGroundHere.Size;
				break;
			case Tag.ExecuteTestPlan:
				result += ExecuteTestPlan.Size;
				break;
			case Tag.SelectNextObject:
				result += SelectNextObject.Size;
				break;
			case Tag.PickAndPlaceObject:
				result += PickAndPlaceObject.Size;
				break;
			case Tag.TraverseObject:
				result += TraverseObject.Size;
				break;
			case Tag.SetRobotCarryingObject:
				result += SetRobotCarryingObject.Size;
				break;
			case Tag.ClearAllBlocks:
				result += ClearAllBlocks.Size;
				break;
			case Tag.VisionWhileMoving:
				result += VisionWhileMoving.Size;
				break;
			case Tag.ExecuteBehavior:
				result += ExecuteBehavior.Size;
				break;
			case Tag.SetBehaviorState:
				result += SetBehaviorState.Size;
				break;
			case Tag.AbortPath:
				result += AbortPath.Size;
				break;
			case Tag.AbortAll:
				result += AbortAll.Size;
				break;
			case Tag.DrawPoseMarker:
				result += DrawPoseMarker.Size;
				break;
			case Tag.ErasePoseMarker:
				result += ErasePoseMarker.Size;
				break;
			case Tag.SetWheelControllerGains:
				result += SetWheelControllerGains.Size;
				break;
			case Tag.SetHeadControllerGains:
				result += SetHeadControllerGains.Size;
				break;
			case Tag.SetLiftControllerGains:
				result += SetLiftControllerGains.Size;
				break;
			case Tag.SelectNextSoundScheme:
				result += SelectNextSoundScheme.Size;
				break;
			case Tag.StartTestMode:
				result += StartTestMode.Size;
				break;
			case Tag.IMURequest:
				result += IMURequest.Size;
				break;
			case Tag.PlayAnimation:
				result += PlayAnimation.Size;
				break;
			case Tag.ReadAnimationFile:
				result += ReadAnimationFile.Size;
				break;
			case Tag.StartFaceTracking:
				result += StartFaceTracking.Size;
				break;
			case Tag.StopFaceTracking:
				result += StopFaceTracking.Size;
				break;
			case Tag.StartLookingForMarkers:
				result += StartLookingForMarkers.Size;
				break;
			case Tag.StopLookingForMarkers:
				result += StopLookingForMarkers.Size;
				break;
			case Tag.SetVisionSystemParams:
				result += SetVisionSystemParams.Size;
				break;
			case Tag.SetFaceDetectParams:
				result += SetFaceDetectParams.Size;
				break;
			default:
				return 0;
			}
			return result;
		}
	}
	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		U2G_Message p = obj as U2G_Message;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(U2G_Message p)
	{
		if ((object) p == null)
		{
			return false;
		}

		if (!this._tag.Equals(p._tag))
		{
			return false;
		}

		switch(GetTag()) {

		case Tag.Ping:
			return this.Ping.Equals(p.Ping);
		case Tag.ConnectToRobot:
			return this.ConnectToRobot.Equals(p.ConnectToRobot);
		case Tag.ConnectToUiDevice:
			return this.ConnectToUiDevice.Equals(p.ConnectToUiDevice);
		case Tag.DisconnectFromUiDevice:
			return this.DisconnectFromUiDevice.Equals(p.DisconnectFromUiDevice);
		case Tag.ForceAddRobot:
			return this.ForceAddRobot.Equals(p.ForceAddRobot);
		case Tag.StartEngine:
			return this.StartEngine.Equals(p.StartEngine);
		case Tag.DriveWheels:
			return this.DriveWheels.Equals(p.DriveWheels);
		case Tag.TurnInPlace:
			return this.TurnInPlace.Equals(p.TurnInPlace);
		case Tag.MoveHead:
			return this.MoveHead.Equals(p.MoveHead);
		case Tag.MoveLift:
			return this.MoveLift.Equals(p.MoveLift);
		case Tag.SetLiftHeight:
			return this.SetLiftHeight.Equals(p.SetLiftHeight);
		case Tag.SetHeadAngle:
			return this.SetHeadAngle.Equals(p.SetHeadAngle);
		case Tag.TrackHeadToObject:
			return this.TrackHeadToObject.Equals(p.TrackHeadToObject);
		case Tag.StopAllMotors:
			return this.StopAllMotors.Equals(p.StopAllMotors);
		case Tag.ImageRequest:
			return this.ImageRequest.Equals(p.ImageRequest);
		case Tag.SetRobotImageSendMode:
			return this.SetRobotImageSendMode.Equals(p.SetRobotImageSendMode);
		case Tag.SaveImages:
			return this.SaveImages.Equals(p.SaveImages);
		case Tag.SaveRobotState:
			return this.SaveRobotState.Equals(p.SaveRobotState);
		case Tag.EnableDisplay:
			return this.EnableDisplay.Equals(p.EnableDisplay);
		case Tag.SetHeadlights:
			return this.SetHeadlights.Equals(p.SetHeadlights);
		case Tag.GotoPose:
			return this.GotoPose.Equals(p.GotoPose);
		case Tag.PlaceObjectOnGround:
			return this.PlaceObjectOnGround.Equals(p.PlaceObjectOnGround);
		case Tag.PlaceObjectOnGroundHere:
			return this.PlaceObjectOnGroundHere.Equals(p.PlaceObjectOnGroundHere);
		case Tag.ExecuteTestPlan:
			return this.ExecuteTestPlan.Equals(p.ExecuteTestPlan);
		case Tag.SelectNextObject:
			return this.SelectNextObject.Equals(p.SelectNextObject);
		case Tag.PickAndPlaceObject:
			return this.PickAndPlaceObject.Equals(p.PickAndPlaceObject);
		case Tag.TraverseObject:
			return this.TraverseObject.Equals(p.TraverseObject);
		case Tag.SetRobotCarryingObject:
			return this.SetRobotCarryingObject.Equals(p.SetRobotCarryingObject);
		case Tag.ClearAllBlocks:
			return this.ClearAllBlocks.Equals(p.ClearAllBlocks);
		case Tag.VisionWhileMoving:
			return this.VisionWhileMoving.Equals(p.VisionWhileMoving);
		case Tag.ExecuteBehavior:
			return this.ExecuteBehavior.Equals(p.ExecuteBehavior);
		case Tag.SetBehaviorState:
			return this.SetBehaviorState.Equals(p.SetBehaviorState);
		case Tag.AbortPath:
			return this.AbortPath.Equals(p.AbortPath);
		case Tag.AbortAll:
			return this.AbortAll.Equals(p.AbortAll);
		case Tag.DrawPoseMarker:
			return this.DrawPoseMarker.Equals(p.DrawPoseMarker);
		case Tag.ErasePoseMarker:
			return this.ErasePoseMarker.Equals(p.ErasePoseMarker);
		case Tag.SetWheelControllerGains:
			return this.SetWheelControllerGains.Equals(p.SetWheelControllerGains);
		case Tag.SetHeadControllerGains:
			return this.SetHeadControllerGains.Equals(p.SetHeadControllerGains);
		case Tag.SetLiftControllerGains:
			return this.SetLiftControllerGains.Equals(p.SetLiftControllerGains);
		case Tag.SelectNextSoundScheme:
			return this.SelectNextSoundScheme.Equals(p.SelectNextSoundScheme);
		case Tag.StartTestMode:
			return this.StartTestMode.Equals(p.StartTestMode);
		case Tag.IMURequest:
			return this.IMURequest.Equals(p.IMURequest);
		case Tag.PlayAnimation:
			return this.PlayAnimation.Equals(p.PlayAnimation);
		case Tag.ReadAnimationFile:
			return this.ReadAnimationFile.Equals(p.ReadAnimationFile);
		case Tag.StartFaceTracking:
			return this.StartFaceTracking.Equals(p.StartFaceTracking);
		case Tag.StopFaceTracking:
			return this.StopFaceTracking.Equals(p.StopFaceTracking);
		case Tag.StartLookingForMarkers:
			return this.StartLookingForMarkers.Equals(p.StartLookingForMarkers);
		case Tag.StopLookingForMarkers:
			return this.StopLookingForMarkers.Equals(p.StopLookingForMarkers);
		case Tag.SetVisionSystemParams:
			return this.SetVisionSystemParams.Equals(p.SetVisionSystemParams);
		case Tag.SetFaceDetectParams:
			return this.SetFaceDetectParams.Equals(p.SetFaceDetectParams);
		default:
			return false;
		}
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._tag.GetHashCode();
			switch(GetTag()) {
			case Tag.Ping:
				hash = hash * 23 + this.Ping.GetHashCode();
				break;
			case Tag.ConnectToRobot:
				hash = hash * 23 + this.ConnectToRobot.GetHashCode();
				break;
			case Tag.ConnectToUiDevice:
				hash = hash * 23 + this.ConnectToUiDevice.GetHashCode();
				break;
			case Tag.DisconnectFromUiDevice:
				hash = hash * 23 + this.DisconnectFromUiDevice.GetHashCode();
				break;
			case Tag.ForceAddRobot:
				hash = hash * 23 + this.ForceAddRobot.GetHashCode();
				break;
			case Tag.StartEngine:
				hash = hash * 23 + this.StartEngine.GetHashCode();
				break;
			case Tag.DriveWheels:
				hash = hash * 23 + this.DriveWheels.GetHashCode();
				break;
			case Tag.TurnInPlace:
				hash = hash * 23 + this.TurnInPlace.GetHashCode();
				break;
			case Tag.MoveHead:
				hash = hash * 23 + this.MoveHead.GetHashCode();
				break;
			case Tag.MoveLift:
				hash = hash * 23 + this.MoveLift.GetHashCode();
				break;
			case Tag.SetLiftHeight:
				hash = hash * 23 + this.SetLiftHeight.GetHashCode();
				break;
			case Tag.SetHeadAngle:
				hash = hash * 23 + this.SetHeadAngle.GetHashCode();
				break;
			case Tag.TrackHeadToObject:
				hash = hash * 23 + this.TrackHeadToObject.GetHashCode();
				break;
			case Tag.StopAllMotors:
				hash = hash * 23 + this.StopAllMotors.GetHashCode();
				break;
			case Tag.ImageRequest:
				hash = hash * 23 + this.ImageRequest.GetHashCode();
				break;
			case Tag.SetRobotImageSendMode:
				hash = hash * 23 + this.SetRobotImageSendMode.GetHashCode();
				break;
			case Tag.SaveImages:
				hash = hash * 23 + this.SaveImages.GetHashCode();
				break;
			case Tag.SaveRobotState:
				hash = hash * 23 + this.SaveRobotState.GetHashCode();
				break;
			case Tag.EnableDisplay:
				hash = hash * 23 + this.EnableDisplay.GetHashCode();
				break;
			case Tag.SetHeadlights:
				hash = hash * 23 + this.SetHeadlights.GetHashCode();
				break;
			case Tag.GotoPose:
				hash = hash * 23 + this.GotoPose.GetHashCode();
				break;
			case Tag.PlaceObjectOnGround:
				hash = hash * 23 + this.PlaceObjectOnGround.GetHashCode();
				break;
			case Tag.PlaceObjectOnGroundHere:
				hash = hash * 23 + this.PlaceObjectOnGroundHere.GetHashCode();
				break;
			case Tag.ExecuteTestPlan:
				hash = hash * 23 + this.ExecuteTestPlan.GetHashCode();
				break;
			case Tag.SelectNextObject:
				hash = hash * 23 + this.SelectNextObject.GetHashCode();
				break;
			case Tag.PickAndPlaceObject:
				hash = hash * 23 + this.PickAndPlaceObject.GetHashCode();
				break;
			case Tag.TraverseObject:
				hash = hash * 23 + this.TraverseObject.GetHashCode();
				break;
			case Tag.SetRobotCarryingObject:
				hash = hash * 23 + this.SetRobotCarryingObject.GetHashCode();
				break;
			case Tag.ClearAllBlocks:
				hash = hash * 23 + this.ClearAllBlocks.GetHashCode();
				break;
			case Tag.VisionWhileMoving:
				hash = hash * 23 + this.VisionWhileMoving.GetHashCode();
				break;
			case Tag.ExecuteBehavior:
				hash = hash * 23 + this.ExecuteBehavior.GetHashCode();
				break;
			case Tag.SetBehaviorState:
				hash = hash * 23 + this.SetBehaviorState.GetHashCode();
				break;
			case Tag.AbortPath:
				hash = hash * 23 + this.AbortPath.GetHashCode();
				break;
			case Tag.AbortAll:
				hash = hash * 23 + this.AbortAll.GetHashCode();
				break;
			case Tag.DrawPoseMarker:
				hash = hash * 23 + this.DrawPoseMarker.GetHashCode();
				break;
			case Tag.ErasePoseMarker:
				hash = hash * 23 + this.ErasePoseMarker.GetHashCode();
				break;
			case Tag.SetWheelControllerGains:
				hash = hash * 23 + this.SetWheelControllerGains.GetHashCode();
				break;
			case Tag.SetHeadControllerGains:
				hash = hash * 23 + this.SetHeadControllerGains.GetHashCode();
				break;
			case Tag.SetLiftControllerGains:
				hash = hash * 23 + this.SetLiftControllerGains.GetHashCode();
				break;
			case Tag.SelectNextSoundScheme:
				hash = hash * 23 + this.SelectNextSoundScheme.GetHashCode();
				break;
			case Tag.StartTestMode:
				hash = hash * 23 + this.StartTestMode.GetHashCode();
				break;
			case Tag.IMURequest:
				hash = hash * 23 + this.IMURequest.GetHashCode();
				break;
			case Tag.PlayAnimation:
				hash = hash * 23 + this.PlayAnimation.GetHashCode();
				break;
			case Tag.ReadAnimationFile:
				hash = hash * 23 + this.ReadAnimationFile.GetHashCode();
				break;
			case Tag.StartFaceTracking:
				hash = hash * 23 + this.StartFaceTracking.GetHashCode();
				break;
			case Tag.StopFaceTracking:
				hash = hash * 23 + this.StopFaceTracking.GetHashCode();
				break;
			case Tag.StartLookingForMarkers:
				hash = hash * 23 + this.StartLookingForMarkers.GetHashCode();
				break;
			case Tag.StopLookingForMarkers:
				hash = hash * 23 + this.StopLookingForMarkers.GetHashCode();
				break;
			case Tag.SetVisionSystemParams:
				hash = hash * 23 + this.SetVisionSystemParams.GetHashCode();
				break;
			case Tag.SetFaceDetectParams:
				hash = hash * 23 + this.SetFaceDetectParams.GetHashCode();
				break;
			default:
				break;
			}
			return hash;
		}
	}
}

} // namespace Cozmo

} // namespace Anki

