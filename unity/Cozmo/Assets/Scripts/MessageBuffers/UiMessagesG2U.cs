// Autogenerated C# message buffer code.
// Source: anki/cozmo/messageBuffers/game/UiMessagesG2U.clad
// Full command line: ../lib/anki/cozmo-engine/tools/message-buffers/emitters/CSharp_emitter.py -C src -I ../lib/anki/cozmo-engine/clad/src --output-file ../unity/Cozmo/Assets/Scripts/MessageBuffers/UiMessagesG2U.cs anki/cozmo/messageBuffers/game/UiMessagesG2U.clad

namespace Anki {

namespace Cozmo {

namespace G2U {

public class Ping
{
	private uint _counter; // uint_32

	public uint counter { get { return _counter; } set { _counter = value; } }


	/**** Constructors ****/

	public Ping()
	{
	}

	public Ping(uint counter)
	{
		this.counter = counter;
	}

	public Ping(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public Ping(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_counter = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_counter);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(Ping a, Ping b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(Ping a, Ping b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as Ping);
	}

	public bool Equals(Ping p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._counter.Equals(p._counter);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._counter.GetHashCode();
			return hash;
		}
	}
}

public class RobotAvailable
{
	private uint _robotID; // uint_32

	public uint robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public RobotAvailable()
	{
	}

	public RobotAvailable(uint robotID)
	{
		this.robotID = robotID;
	}

	public RobotAvailable(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotAvailable(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotAvailable a, RobotAvailable b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotAvailable a, RobotAvailable b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotAvailable);
	}

	public bool Equals(RobotAvailable p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class UiDeviceAvailable
{
	private uint _deviceID; // uint_32

	public uint deviceID { get { return _deviceID; } set { _deviceID = value; } }


	/**** Constructors ****/

	public UiDeviceAvailable()
	{
	}

	public UiDeviceAvailable(uint deviceID)
	{
		this.deviceID = deviceID;
	}

	public UiDeviceAvailable(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public UiDeviceAvailable(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_deviceID = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_deviceID);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(UiDeviceAvailable a, UiDeviceAvailable b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(UiDeviceAvailable a, UiDeviceAvailable b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as UiDeviceAvailable);
	}

	public bool Equals(UiDeviceAvailable p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._deviceID.Equals(p._deviceID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._deviceID.GetHashCode();
			return hash;
		}
	}
}

public class RobotConnected
{
	private uint _robotID; // uint_32
	private byte _successful; // uint_8

	public uint robotID { get { return _robotID; } set { _robotID = value; } }

	public byte successful { get { return _successful; } set { _successful = value; } }


	/**** Constructors ****/

	public RobotConnected()
	{
	}

	public RobotConnected(uint robotID,
		byte successful)
	{
		this.robotID = robotID;
		this.successful = successful;
	}

	public RobotConnected(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotConnected(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
		_successful = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
		writer.Write((byte)_successful);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotConnected a, RobotConnected b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotConnected a, RobotConnected b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotConnected);
	}

	public bool Equals(RobotConnected p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._successful.Equals(p._successful);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._successful.GetHashCode();
			return hash;
		}
	}
}

public class RobotDisconnected
{
	private uint _robotID; // uint_32
	private float _timeSinceLastMsg_sec; // float_32

	public uint robotID { get { return _robotID; } set { _robotID = value; } }

	public float timeSinceLastMsg_sec { get { return _timeSinceLastMsg_sec; } set { _timeSinceLastMsg_sec = value; } }


	/**** Constructors ****/

	public RobotDisconnected()
	{
	}

	public RobotDisconnected(uint robotID,
		float timeSinceLastMsg_sec)
	{
		this.robotID = robotID;
		this.timeSinceLastMsg_sec = timeSinceLastMsg_sec;
	}

	public RobotDisconnected(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotDisconnected(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
		_timeSinceLastMsg_sec = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
		writer.Write((float)_timeSinceLastMsg_sec);
	}

	public int Size 
	{
		get {
			return 8;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotDisconnected a, RobotDisconnected b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotDisconnected a, RobotDisconnected b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotDisconnected);
	}

	public bool Equals(RobotDisconnected p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._timeSinceLastMsg_sec.Equals(p._timeSinceLastMsg_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._timeSinceLastMsg_sec.GetHashCode();
			return hash;
		}
	}
}

public class UiDeviceConnected
{
	private uint _deviceID; // uint_32
	private byte _successful; // uint_8

	public uint deviceID { get { return _deviceID; } set { _deviceID = value; } }

	public byte successful { get { return _successful; } set { _successful = value; } }


	/**** Constructors ****/

	public UiDeviceConnected()
	{
	}

	public UiDeviceConnected(uint deviceID,
		byte successful)
	{
		this.deviceID = deviceID;
		this.successful = successful;
	}

	public UiDeviceConnected(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public UiDeviceConnected(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_deviceID = reader.ReadUInt32();
		_successful = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_deviceID);
		writer.Write((byte)_successful);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(UiDeviceConnected a, UiDeviceConnected b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(UiDeviceConnected a, UiDeviceConnected b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as UiDeviceConnected);
	}

	public bool Equals(UiDeviceConnected p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._deviceID.Equals(p._deviceID)
			&& this._successful.Equals(p._successful);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._deviceID.GetHashCode();
			hash = hash * 23 + this._successful.GetHashCode();
			return hash;
		}
	}
}

public class RobotState
{
	private float _pose_x; // float_32
	private float _pose_y; // float_32
	private float _pose_z; // float_32
	private float _poseAngle_rad; // float_32
	private float _pose_quaternion0; // float_32
	private float _pose_quaternion1; // float_32
	private float _pose_quaternion2; // float_32
	private float _pose_quaternion3; // float_32
	private float _leftWheelSpeed_mmps; // float_32
	private float _rightWheelSpeed_mmps; // float_32
	private float _headAngle_rad; // float_32
	private float _liftHeight_mm; // float_32
	private float _batteryVoltage; // float_32
	private int _carryingObjectID; // int_32
	private int _carryingObjectOnTopID; // int_32
	private int _headTrackingObjectID; // int_32
	private uint _status; // uint_32
	private byte _robotID; // uint_8

	public float pose_x { get { return _pose_x; } set { _pose_x = value; } }

	public float pose_y { get { return _pose_y; } set { _pose_y = value; } }

	public float pose_z { get { return _pose_z; } set { _pose_z = value; } }

	public float poseAngle_rad { get { return _poseAngle_rad; } set { _poseAngle_rad = value; } }

	public float pose_quaternion0 { get { return _pose_quaternion0; } set { _pose_quaternion0 = value; } }

	public float pose_quaternion1 { get { return _pose_quaternion1; } set { _pose_quaternion1 = value; } }

	public float pose_quaternion2 { get { return _pose_quaternion2; } set { _pose_quaternion2 = value; } }

	public float pose_quaternion3 { get { return _pose_quaternion3; } set { _pose_quaternion3 = value; } }

	public float leftWheelSpeed_mmps { get { return _leftWheelSpeed_mmps; } set { _leftWheelSpeed_mmps = value; } }

	public float rightWheelSpeed_mmps { get { return _rightWheelSpeed_mmps; } set { _rightWheelSpeed_mmps = value; } }

	public float headAngle_rad { get { return _headAngle_rad; } set { _headAngle_rad = value; } }

	public float liftHeight_mm { get { return _liftHeight_mm; } set { _liftHeight_mm = value; } }

	public float batteryVoltage { get { return _batteryVoltage; } set { _batteryVoltage = value; } }

	public int carryingObjectID { get { return _carryingObjectID; } set { _carryingObjectID = value; } }

	public int carryingObjectOnTopID { get { return _carryingObjectOnTopID; } set { _carryingObjectOnTopID = value; } }

	public int headTrackingObjectID { get { return _headTrackingObjectID; } set { _headTrackingObjectID = value; } }

	public uint status { get { return _status; } set { _status = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public RobotState()
	{
	}

	public RobotState(float pose_x,
		float pose_y,
		float pose_z,
		float poseAngle_rad,
		float pose_quaternion0,
		float pose_quaternion1,
		float pose_quaternion2,
		float pose_quaternion3,
		float leftWheelSpeed_mmps,
		float rightWheelSpeed_mmps,
		float headAngle_rad,
		float liftHeight_mm,
		float batteryVoltage,
		int carryingObjectID,
		int carryingObjectOnTopID,
		int headTrackingObjectID,
		uint status,
		byte robotID)
	{
		this.pose_x = pose_x;
		this.pose_y = pose_y;
		this.pose_z = pose_z;
		this.poseAngle_rad = poseAngle_rad;
		this.pose_quaternion0 = pose_quaternion0;
		this.pose_quaternion1 = pose_quaternion1;
		this.pose_quaternion2 = pose_quaternion2;
		this.pose_quaternion3 = pose_quaternion3;
		this.leftWheelSpeed_mmps = leftWheelSpeed_mmps;
		this.rightWheelSpeed_mmps = rightWheelSpeed_mmps;
		this.headAngle_rad = headAngle_rad;
		this.liftHeight_mm = liftHeight_mm;
		this.batteryVoltage = batteryVoltage;
		this.carryingObjectID = carryingObjectID;
		this.carryingObjectOnTopID = carryingObjectOnTopID;
		this.headTrackingObjectID = headTrackingObjectID;
		this.status = status;
		this.robotID = robotID;
	}

	public RobotState(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotState(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_pose_x = reader.ReadSingle();
		_pose_y = reader.ReadSingle();
		_pose_z = reader.ReadSingle();
		_poseAngle_rad = reader.ReadSingle();
		_pose_quaternion0 = reader.ReadSingle();
		_pose_quaternion1 = reader.ReadSingle();
		_pose_quaternion2 = reader.ReadSingle();
		_pose_quaternion3 = reader.ReadSingle();
		_leftWheelSpeed_mmps = reader.ReadSingle();
		_rightWheelSpeed_mmps = reader.ReadSingle();
		_headAngle_rad = reader.ReadSingle();
		_liftHeight_mm = reader.ReadSingle();
		_batteryVoltage = reader.ReadSingle();
		_carryingObjectID = reader.ReadInt32();
		_carryingObjectOnTopID = reader.ReadInt32();
		_headTrackingObjectID = reader.ReadInt32();
		_status = reader.ReadUInt32();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_pose_x);
		writer.Write((float)_pose_y);
		writer.Write((float)_pose_z);
		writer.Write((float)_poseAngle_rad);
		writer.Write((float)_pose_quaternion0);
		writer.Write((float)_pose_quaternion1);
		writer.Write((float)_pose_quaternion2);
		writer.Write((float)_pose_quaternion3);
		writer.Write((float)_leftWheelSpeed_mmps);
		writer.Write((float)_rightWheelSpeed_mmps);
		writer.Write((float)_headAngle_rad);
		writer.Write((float)_liftHeight_mm);
		writer.Write((float)_batteryVoltage);
		writer.Write((int)_carryingObjectID);
		writer.Write((int)_carryingObjectOnTopID);
		writer.Write((int)_headTrackingObjectID);
		writer.Write((uint)_status);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 69;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotState a, RobotState b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotState a, RobotState b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotState);
	}

	public bool Equals(RobotState p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._pose_x.Equals(p._pose_x)
			&& this._pose_y.Equals(p._pose_y)
			&& this._pose_z.Equals(p._pose_z)
			&& this._poseAngle_rad.Equals(p._poseAngle_rad)
			&& this._pose_quaternion0.Equals(p._pose_quaternion0)
			&& this._pose_quaternion1.Equals(p._pose_quaternion1)
			&& this._pose_quaternion2.Equals(p._pose_quaternion2)
			&& this._pose_quaternion3.Equals(p._pose_quaternion3)
			&& this._leftWheelSpeed_mmps.Equals(p._leftWheelSpeed_mmps)
			&& this._rightWheelSpeed_mmps.Equals(p._rightWheelSpeed_mmps)
			&& this._headAngle_rad.Equals(p._headAngle_rad)
			&& this._liftHeight_mm.Equals(p._liftHeight_mm)
			&& this._batteryVoltage.Equals(p._batteryVoltage)
			&& this._carryingObjectID.Equals(p._carryingObjectID)
			&& this._carryingObjectOnTopID.Equals(p._carryingObjectOnTopID)
			&& this._headTrackingObjectID.Equals(p._headTrackingObjectID)
			&& this._status.Equals(p._status)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._pose_x.GetHashCode();
			hash = hash * 23 + this._pose_y.GetHashCode();
			hash = hash * 23 + this._pose_z.GetHashCode();
			hash = hash * 23 + this._poseAngle_rad.GetHashCode();
			hash = hash * 23 + this._pose_quaternion0.GetHashCode();
			hash = hash * 23 + this._pose_quaternion1.GetHashCode();
			hash = hash * 23 + this._pose_quaternion2.GetHashCode();
			hash = hash * 23 + this._pose_quaternion3.GetHashCode();
			hash = hash * 23 + this._leftWheelSpeed_mmps.GetHashCode();
			hash = hash * 23 + this._rightWheelSpeed_mmps.GetHashCode();
			hash = hash * 23 + this._headAngle_rad.GetHashCode();
			hash = hash * 23 + this._liftHeight_mm.GetHashCode();
			hash = hash * 23 + this._batteryVoltage.GetHashCode();
			hash = hash * 23 + this._carryingObjectID.GetHashCode();
			hash = hash * 23 + this._carryingObjectOnTopID.GetHashCode();
			hash = hash * 23 + this._headTrackingObjectID.GetHashCode();
			hash = hash * 23 + this._status.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class ImageChunk
{
	private uint _imageId; // uint_32
	private uint _frameTimeStamp; // uint_32
	private ushort _nrows; // uint_16
	private ushort _ncols; // uint_16
	private ushort _chunkSize; // uint_16
	private byte _imageEncoding; // uint_8
	private byte _imageChunkCount; // uint_8
	private byte _chunkId; // uint_8
	private byte[] _data; // uint_8[1400]

	public uint imageId { get { return _imageId; } set { _imageId = value; } }

	public uint frameTimeStamp { get { return _frameTimeStamp; } set { _frameTimeStamp = value; } }

	public ushort nrows { get { return _nrows; } set { _nrows = value; } }

	public ushort ncols { get { return _ncols; } set { _ncols = value; } }

	public ushort chunkSize { get { return _chunkSize; } set { _chunkSize = value; } }

	public byte imageEncoding { get { return _imageEncoding; } set { _imageEncoding = value; } }

	public byte imageChunkCount { get { return _imageChunkCount; } set { _imageChunkCount = value; } }

	public byte chunkId { get { return _chunkId; } set { _chunkId = value; } }

	public byte[] data
	{
		get {
			return _data;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("data fixed-length array is null. Must have a length of 1400.", "value");
			}
			if (value.Length != 1400) {
				throw new System.ArgumentException("data fixed-length array is the wrong size. Must have a length of 1400.", "value");
			}
			_data = value;
		}
	}


	/**** Constructors ****/

	public ImageChunk()
	{
		this.data = new byte[1400];
	}

	public ImageChunk(uint imageId,
		uint frameTimeStamp,
		ushort nrows,
		ushort ncols,
		ushort chunkSize,
		byte imageEncoding,
		byte imageChunkCount,
		byte chunkId,
		byte[] data)
	{
		this.imageId = imageId;
		this.frameTimeStamp = frameTimeStamp;
		this.nrows = nrows;
		this.ncols = ncols;
		this.chunkSize = chunkSize;
		this.imageEncoding = imageEncoding;
		this.imageChunkCount = imageChunkCount;
		this.chunkId = chunkId;
		this.data = data;
	}

	public ImageChunk(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ImageChunk(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_imageId = reader.ReadUInt32();
		_frameTimeStamp = reader.ReadUInt32();
		_nrows = reader.ReadUInt16();
		_ncols = reader.ReadUInt16();
		_chunkSize = reader.ReadUInt16();
		_imageEncoding = reader.ReadByte();
		_imageChunkCount = reader.ReadByte();
		_chunkId = reader.ReadByte();
		_data = new byte[1400];
		for (int i = 0; i < 1400; ++i) {
			_data[i] = reader.ReadByte();
		}
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_imageId);
		writer.Write((uint)_frameTimeStamp);
		writer.Write((ushort)_nrows);
		writer.Write((ushort)_ncols);
		writer.Write((ushort)_chunkSize);
		writer.Write((byte)_imageEncoding);
		writer.Write((byte)_imageChunkCount);
		writer.Write((byte)_chunkId);
		for (int i = 0; i < 1400; ++i) {
			writer.Write((byte)_data[i]);
		}
	}

	public int Size 
	{
		get {
			return 1417;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(ImageChunk a, ImageChunk b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(ImageChunk a, ImageChunk b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as ImageChunk);
	}

	public bool Equals(ImageChunk p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._imageId.Equals(p._imageId)
			&& this._frameTimeStamp.Equals(p._frameTimeStamp)
			&& this._nrows.Equals(p._nrows)
			&& this._ncols.Equals(p._ncols)
			&& this._chunkSize.Equals(p._chunkSize)
			&& this._imageEncoding.Equals(p._imageEncoding)
			&& this._imageChunkCount.Equals(p._imageChunkCount)
			&& this._chunkId.Equals(p._chunkId)
			&& ArrayEquals<byte>(this._data,p._data);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._imageId.GetHashCode();
			hash = hash * 23 + this._frameTimeStamp.GetHashCode();
			hash = hash * 23 + this._nrows.GetHashCode();
			hash = hash * 23 + this._ncols.GetHashCode();
			hash = hash * 23 + this._chunkSize.GetHashCode();
			hash = hash * 23 + this._imageEncoding.GetHashCode();
			hash = hash * 23 + this._imageChunkCount.GetHashCode();
			hash = hash * 23 + this._chunkId.GetHashCode();
			return hash;
		}
	}
}

public class RobotObservedObject
{
	private uint _robotID; // uint_32
	private uint _objectFamily; // uint_32
	private uint _objectType; // uint_32
	private int _objectID; // int_32
	private float _img_topLeft_x; // float_32
	private float _img_topLeft_y; // float_32
	private float _img_width; // float_32
	private float _img_height; // float_32
	private float _world_x; // float_32
	private float _world_y; // float_32
	private float _world_z; // float_32
	private float _quaternion0; // float_32
	private float _quaternion1; // float_32
	private float _quaternion2; // float_32
	private float _quaternion3; // float_32
	private float _topFaceOrientation_rad; // float_32
	private byte _markersVisible; // uint_8
	private byte _isActive; // uint_8

	public uint robotID { get { return _robotID; } set { _robotID = value; } }

	public uint objectFamily { get { return _objectFamily; } set { _objectFamily = value; } }

	public uint objectType { get { return _objectType; } set { _objectType = value; } }

	public int objectID { get { return _objectID; } set { _objectID = value; } }

	public float img_topLeft_x { get { return _img_topLeft_x; } set { _img_topLeft_x = value; } }

	public float img_topLeft_y { get { return _img_topLeft_y; } set { _img_topLeft_y = value; } }

	public float img_width { get { return _img_width; } set { _img_width = value; } }

	public float img_height { get { return _img_height; } set { _img_height = value; } }

	public float world_x { get { return _world_x; } set { _world_x = value; } }

	public float world_y { get { return _world_y; } set { _world_y = value; } }

	public float world_z { get { return _world_z; } set { _world_z = value; } }

	public float quaternion0 { get { return _quaternion0; } set { _quaternion0 = value; } }

	public float quaternion1 { get { return _quaternion1; } set { _quaternion1 = value; } }

	public float quaternion2 { get { return _quaternion2; } set { _quaternion2 = value; } }

	public float quaternion3 { get { return _quaternion3; } set { _quaternion3 = value; } }

	public float topFaceOrientation_rad { get { return _topFaceOrientation_rad; } set { _topFaceOrientation_rad = value; } }

	public byte markersVisible { get { return _markersVisible; } set { _markersVisible = value; } }

	public byte isActive { get { return _isActive; } set { _isActive = value; } }


	/**** Constructors ****/

	public RobotObservedObject()
	{
	}

	public RobotObservedObject(uint robotID,
		uint objectFamily,
		uint objectType,
		int objectID,
		float img_topLeft_x,
		float img_topLeft_y,
		float img_width,
		float img_height,
		float world_x,
		float world_y,
		float world_z,
		float quaternion0,
		float quaternion1,
		float quaternion2,
		float quaternion3,
		float topFaceOrientation_rad,
		byte markersVisible,
		byte isActive)
	{
		this.robotID = robotID;
		this.objectFamily = objectFamily;
		this.objectType = objectType;
		this.objectID = objectID;
		this.img_topLeft_x = img_topLeft_x;
		this.img_topLeft_y = img_topLeft_y;
		this.img_width = img_width;
		this.img_height = img_height;
		this.world_x = world_x;
		this.world_y = world_y;
		this.world_z = world_z;
		this.quaternion0 = quaternion0;
		this.quaternion1 = quaternion1;
		this.quaternion2 = quaternion2;
		this.quaternion3 = quaternion3;
		this.topFaceOrientation_rad = topFaceOrientation_rad;
		this.markersVisible = markersVisible;
		this.isActive = isActive;
	}

	public RobotObservedObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotObservedObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
		_objectFamily = reader.ReadUInt32();
		_objectType = reader.ReadUInt32();
		_objectID = reader.ReadInt32();
		_img_topLeft_x = reader.ReadSingle();
		_img_topLeft_y = reader.ReadSingle();
		_img_width = reader.ReadSingle();
		_img_height = reader.ReadSingle();
		_world_x = reader.ReadSingle();
		_world_y = reader.ReadSingle();
		_world_z = reader.ReadSingle();
		_quaternion0 = reader.ReadSingle();
		_quaternion1 = reader.ReadSingle();
		_quaternion2 = reader.ReadSingle();
		_quaternion3 = reader.ReadSingle();
		_topFaceOrientation_rad = reader.ReadSingle();
		_markersVisible = reader.ReadByte();
		_isActive = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
		writer.Write((uint)_objectFamily);
		writer.Write((uint)_objectType);
		writer.Write((int)_objectID);
		writer.Write((float)_img_topLeft_x);
		writer.Write((float)_img_topLeft_y);
		writer.Write((float)_img_width);
		writer.Write((float)_img_height);
		writer.Write((float)_world_x);
		writer.Write((float)_world_y);
		writer.Write((float)_world_z);
		writer.Write((float)_quaternion0);
		writer.Write((float)_quaternion1);
		writer.Write((float)_quaternion2);
		writer.Write((float)_quaternion3);
		writer.Write((float)_topFaceOrientation_rad);
		writer.Write((byte)_markersVisible);
		writer.Write((byte)_isActive);
	}

	public int Size 
	{
		get {
			return 66;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotObservedObject a, RobotObservedObject b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotObservedObject a, RobotObservedObject b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotObservedObject);
	}

	public bool Equals(RobotObservedObject p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._objectFamily.Equals(p._objectFamily)
			&& this._objectType.Equals(p._objectType)
			&& this._objectID.Equals(p._objectID)
			&& this._img_topLeft_x.Equals(p._img_topLeft_x)
			&& this._img_topLeft_y.Equals(p._img_topLeft_y)
			&& this._img_width.Equals(p._img_width)
			&& this._img_height.Equals(p._img_height)
			&& this._world_x.Equals(p._world_x)
			&& this._world_y.Equals(p._world_y)
			&& this._world_z.Equals(p._world_z)
			&& this._quaternion0.Equals(p._quaternion0)
			&& this._quaternion1.Equals(p._quaternion1)
			&& this._quaternion2.Equals(p._quaternion2)
			&& this._quaternion3.Equals(p._quaternion3)
			&& this._topFaceOrientation_rad.Equals(p._topFaceOrientation_rad)
			&& this._markersVisible.Equals(p._markersVisible)
			&& this._isActive.Equals(p._isActive);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._objectFamily.GetHashCode();
			hash = hash * 23 + this._objectType.GetHashCode();
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._img_topLeft_x.GetHashCode();
			hash = hash * 23 + this._img_topLeft_y.GetHashCode();
			hash = hash * 23 + this._img_width.GetHashCode();
			hash = hash * 23 + this._img_height.GetHashCode();
			hash = hash * 23 + this._world_x.GetHashCode();
			hash = hash * 23 + this._world_y.GetHashCode();
			hash = hash * 23 + this._world_z.GetHashCode();
			hash = hash * 23 + this._quaternion0.GetHashCode();
			hash = hash * 23 + this._quaternion1.GetHashCode();
			hash = hash * 23 + this._quaternion2.GetHashCode();
			hash = hash * 23 + this._quaternion3.GetHashCode();
			hash = hash * 23 + this._topFaceOrientation_rad.GetHashCode();
			hash = hash * 23 + this._markersVisible.GetHashCode();
			hash = hash * 23 + this._isActive.GetHashCode();
			return hash;
		}
	}
}

public class RobotObservedNothing
{
	private uint _robotID; // uint_32

	public uint robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public RobotObservedNothing()
	{
	}

	public RobotObservedNothing(uint robotID)
	{
		this.robotID = robotID;
	}

	public RobotObservedNothing(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotObservedNothing(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotObservedNothing a, RobotObservedNothing b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotObservedNothing a, RobotObservedNothing b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotObservedNothing);
	}

	public bool Equals(RobotObservedNothing p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class RobotDeletedObject
{
	private uint _robotID; // uint_32
	private uint _objectID; // uint_32

	public uint robotID { get { return _robotID; } set { _robotID = value; } }

	public uint objectID { get { return _objectID; } set { _objectID = value; } }


	/**** Constructors ****/

	public RobotDeletedObject()
	{
	}

	public RobotDeletedObject(uint robotID,
		uint objectID)
	{
		this.robotID = robotID;
		this.objectID = objectID;
	}

	public RobotDeletedObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotDeletedObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
		_objectID = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
		writer.Write((uint)_objectID);
	}

	public int Size 
	{
		get {
			return 8;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotDeletedObject a, RobotDeletedObject b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotDeletedObject a, RobotDeletedObject b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotDeletedObject);
	}

	public bool Equals(RobotDeletedObject p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._objectID.Equals(p._objectID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._objectID.GetHashCode();
			return hash;
		}
	}
}

public class DeviceDetectedVisionMarker
{
	private uint _markerType; // uint_32
	private float _x_upperLeft; // float_32
	private float _y_upperLeft; // float_32
	private float _x_lowerLeft; // float_32
	private float _y_lowerLeft; // float_32
	private float _x_upperRight; // float_32
	private float _y_upperRight; // float_32
	private float _x_lowerRight; // float_32
	private float _y_lowerRight; // float_32

	public uint markerType { get { return _markerType; } set { _markerType = value; } }

	public float x_upperLeft { get { return _x_upperLeft; } set { _x_upperLeft = value; } }

	public float y_upperLeft { get { return _y_upperLeft; } set { _y_upperLeft = value; } }

	public float x_lowerLeft { get { return _x_lowerLeft; } set { _x_lowerLeft = value; } }

	public float y_lowerLeft { get { return _y_lowerLeft; } set { _y_lowerLeft = value; } }

	public float x_upperRight { get { return _x_upperRight; } set { _x_upperRight = value; } }

	public float y_upperRight { get { return _y_upperRight; } set { _y_upperRight = value; } }

	public float x_lowerRight { get { return _x_lowerRight; } set { _x_lowerRight = value; } }

	public float y_lowerRight { get { return _y_lowerRight; } set { _y_lowerRight = value; } }


	/**** Constructors ****/

	public DeviceDetectedVisionMarker()
	{
	}

	public DeviceDetectedVisionMarker(uint markerType,
		float x_upperLeft,
		float y_upperLeft,
		float x_lowerLeft,
		float y_lowerLeft,
		float x_upperRight,
		float y_upperRight,
		float x_lowerRight,
		float y_lowerRight)
	{
		this.markerType = markerType;
		this.x_upperLeft = x_upperLeft;
		this.y_upperLeft = y_upperLeft;
		this.x_lowerLeft = x_lowerLeft;
		this.y_lowerLeft = y_lowerLeft;
		this.x_upperRight = x_upperRight;
		this.y_upperRight = y_upperRight;
		this.x_lowerRight = x_lowerRight;
		this.y_lowerRight = y_lowerRight;
	}

	public DeviceDetectedVisionMarker(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public DeviceDetectedVisionMarker(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_markerType = reader.ReadUInt32();
		_x_upperLeft = reader.ReadSingle();
		_y_upperLeft = reader.ReadSingle();
		_x_lowerLeft = reader.ReadSingle();
		_y_lowerLeft = reader.ReadSingle();
		_x_upperRight = reader.ReadSingle();
		_y_upperRight = reader.ReadSingle();
		_x_lowerRight = reader.ReadSingle();
		_y_lowerRight = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_markerType);
		writer.Write((float)_x_upperLeft);
		writer.Write((float)_y_upperLeft);
		writer.Write((float)_x_lowerLeft);
		writer.Write((float)_y_lowerLeft);
		writer.Write((float)_x_upperRight);
		writer.Write((float)_y_upperRight);
		writer.Write((float)_x_lowerRight);
		writer.Write((float)_y_lowerRight);
	}

	public int Size 
	{
		get {
			return 36;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(DeviceDetectedVisionMarker a, DeviceDetectedVisionMarker b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(DeviceDetectedVisionMarker a, DeviceDetectedVisionMarker b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as DeviceDetectedVisionMarker);
	}

	public bool Equals(DeviceDetectedVisionMarker p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._markerType.Equals(p._markerType)
			&& this._x_upperLeft.Equals(p._x_upperLeft)
			&& this._y_upperLeft.Equals(p._y_upperLeft)
			&& this._x_lowerLeft.Equals(p._x_lowerLeft)
			&& this._y_lowerLeft.Equals(p._y_lowerLeft)
			&& this._x_upperRight.Equals(p._x_upperRight)
			&& this._y_upperRight.Equals(p._y_upperRight)
			&& this._x_lowerRight.Equals(p._x_lowerRight)
			&& this._y_lowerRight.Equals(p._y_lowerRight);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._markerType.GetHashCode();
			hash = hash * 23 + this._x_upperLeft.GetHashCode();
			hash = hash * 23 + this._y_upperLeft.GetHashCode();
			hash = hash * 23 + this._x_lowerLeft.GetHashCode();
			hash = hash * 23 + this._y_lowerLeft.GetHashCode();
			hash = hash * 23 + this._x_upperRight.GetHashCode();
			hash = hash * 23 + this._y_upperRight.GetHashCode();
			hash = hash * 23 + this._x_lowerRight.GetHashCode();
			hash = hash * 23 + this._y_lowerRight.GetHashCode();
			return hash;
		}
	}
}

public class RobotCompletedAction
{
	private uint _robotID; // uint_32
	private Anki.Cozmo.RobotActionType _actionType; // RobotActionType
	private Anki.Cozmo.ActionResult _result; // ActionResult
	private int[] _objectIDs; // int_32[5]
	private byte _numObjects; // uint_8

	public uint robotID { get { return _robotID; } set { _robotID = value; } }

	public Anki.Cozmo.RobotActionType actionType { get { return _actionType; } set { _actionType = value; } }

	public Anki.Cozmo.ActionResult result { get { return _result; } set { _result = value; } }

	public int[] objectIDs
	{
		get {
			return _objectIDs;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("objectIDs fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("objectIDs fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_objectIDs = value;
		}
	}

	public byte numObjects { get { return _numObjects; } set { _numObjects = value; } }


	/**** Constructors ****/

	public RobotCompletedAction()
	{
		this.objectIDs = new int[5];
	}

	public RobotCompletedAction(uint robotID,
		Anki.Cozmo.RobotActionType actionType,
		Anki.Cozmo.ActionResult result,
		int[] objectIDs,
		byte numObjects)
	{
		this.robotID = robotID;
		this.actionType = actionType;
		this.result = result;
		this.objectIDs = objectIDs;
		this.numObjects = numObjects;
	}

	public RobotCompletedAction(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public RobotCompletedAction(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadUInt32();
		_actionType = (Anki.Cozmo.RobotActionType)reader.ReadInt32();
		_result = (Anki.Cozmo.ActionResult)reader.ReadInt32();
		_objectIDs = new int[5];
		for (int i = 0; i < 5; ++i) {
			_objectIDs[i] = reader.ReadInt32();
		}
		_numObjects = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_robotID);
		writer.Write((int)_actionType);
		writer.Write((int)_result);
		for (int i = 0; i < 5; ++i) {
			writer.Write((int)_objectIDs[i]);
		}
		writer.Write((byte)_numObjects);
	}

	public int Size 
	{
		get {
			return 33;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(RobotCompletedAction a, RobotCompletedAction b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(RobotCompletedAction a, RobotCompletedAction b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as RobotCompletedAction);
	}

	public bool Equals(RobotCompletedAction p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._actionType.Equals(p._actionType)
			&& this._result.Equals(p._result)
			&& ArrayEquals<int>(this._objectIDs,p._objectIDs)
			&& this._numObjects.Equals(p._numObjects);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._actionType.GetHashCode();
			hash = hash * 23 + this._result.GetHashCode();
			hash = hash * 23 + this._numObjects.GetHashCode();
			return hash;
		}
	}
}

public class PlaySound
{
	private string _soundFilename; // string[uint_8]
	private byte _numLoops; // uint_8
	private byte _volume; // uint_8

	public string soundFilename
	{
		get {
			return _soundFilename;
		}
		set {
			if (!string.IsNullOrEmpty(value) && System.Text.Encoding.UTF8.GetByteCount(value) > 255) {
				throw new System.ArgumentException("soundFilename string is too long. Must decode to less than or equal to 255 bytes.", "value");
			}
			_soundFilename = value;
		}
	}

	public byte numLoops { get { return _numLoops; } set { _numLoops = value; } }

	public byte volume { get { return _volume; } set { _volume = value; } }


	/**** Constructors ****/

	public PlaySound()
	{
	}

	public PlaySound(string soundFilename,
		byte numLoops,
		byte volume)
	{
		this.soundFilename = soundFilename;
		this.numLoops = numLoops;
		this.volume = volume;
	}

	public PlaySound(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public PlaySound(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		int _soundFilename_length = (int)reader.ReadByte();
		byte[] _soundFilename_bytes = reader.ReadBytes(_soundFilename_length);
		_soundFilename = System.Text.Encoding.UTF8.GetString(_soundFilename_bytes);
		_numLoops = reader.ReadByte();
		_volume = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		if (_soundFilename != null) {
			byte[] _soundFilename_bytes = System.Text.Encoding.UTF8.GetBytes(_soundFilename);
			writer.Write((byte)_soundFilename_bytes.Length);
			writer.Write(_soundFilename_bytes);
		}
		else {
			writer.Write((byte)0);
		}
		writer.Write((byte)_numLoops);
		writer.Write((byte)_volume);
	}

	public int Size 
	{
		get {
			int result = 0;
			result += 1; // uint_8
			if (soundFilename != null) {
				result += System.Text.Encoding.UTF8.GetByteCount(soundFilename);
			}
			result += 1; // uint_8
			result += 1; // uint_8
			return result;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(PlaySound a, PlaySound b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(PlaySound a, PlaySound b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as PlaySound);
	}

	public bool Equals(PlaySound p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._soundFilename.Equals(p._soundFilename)
			&& this._numLoops.Equals(p._numLoops)
			&& this._volume.Equals(p._volume);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._numLoops.GetHashCode();
			hash = hash * 23 + this._volume.GetHashCode();
			return hash;
		}
	}
}

public class StopSound
{
	/**** Constructors ****/

	public StopSound()
	{
	}

	public StopSound(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StopSound(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class ActiveObjectMoved
{
	private uint _objectID; // uint_32
	private float _xAccel; // float_32
	private float _yAccel; // float_32
	private float _zAccel; // float_32
	private byte _robotID; // uint_8
	private byte _upAxis; // uint_8

	public uint objectID { get { return _objectID; } set { _objectID = value; } }

	public float xAccel { get { return _xAccel; } set { _xAccel = value; } }

	public float yAccel { get { return _yAccel; } set { _yAccel = value; } }

	public float zAccel { get { return _zAccel; } set { _zAccel = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }

	public byte upAxis { get { return _upAxis; } set { _upAxis = value; } }


	/**** Constructors ****/

	public ActiveObjectMoved()
	{
	}

	public ActiveObjectMoved(uint objectID,
		float xAccel,
		float yAccel,
		float zAccel,
		byte robotID,
		byte upAxis)
	{
		this.objectID = objectID;
		this.xAccel = xAccel;
		this.yAccel = yAccel;
		this.zAccel = zAccel;
		this.robotID = robotID;
		this.upAxis = upAxis;
	}

	public ActiveObjectMoved(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ActiveObjectMoved(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadUInt32();
		_xAccel = reader.ReadSingle();
		_yAccel = reader.ReadSingle();
		_zAccel = reader.ReadSingle();
		_robotID = reader.ReadByte();
		_upAxis = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_objectID);
		writer.Write((float)_xAccel);
		writer.Write((float)_yAccel);
		writer.Write((float)_zAccel);
		writer.Write((byte)_robotID);
		writer.Write((byte)_upAxis);
	}

	public int Size 
	{
		get {
			return 18;
		}
	}

	public static bool ArrayEquals<T>(System.Collections.Generic.IList<T> a1, System.Collections.Generic.IList<T> a2) {
		if (System.Object.ReferenceEquals(a1, a2))
			return true;

		if (System.Object.ReferenceEquals(a1, null) || System.Object.ReferenceEquals(a2, null))
			return false;

		if (a1.Count != a2.Count)
			return false;

		for (int i = 0; i < a1.Count; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public static bool operator ==(ActiveObjectMoved a, ActiveObjectMoved b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(ActiveObjectMoved a, ActiveObjectMoved b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as ActiveObjectMoved);
	}

	public bool Equals(ActiveObjectMoved p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._xAccel.Equals(p._xAccel)
			&& this._yAccel.Equals(p._yAccel)
			&& this._zAccel.Equals(p._zAccel)
			&& this._robotID.Equals(p._robotID)
			&& this._upAxis.Equals(p._upAxis);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._xAccel.GetHashCode();
			hash = hash * 23 + this._yAccel.GetHashCode();
			hash = hash * 23 + this._zAccel.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._upAxis.GetHashCode();
			return hash;
		}
	}
}

public class Message {
	public enum Tag {
		Ping,	//0
		RobotAvailable,	//1
		UiDeviceAvailable,	//2
		RobotConnected,	//3
		RobotDisconnected,	//4
		UiDeviceConnected,	//5
		RobotState,	//6
		ImageChunk,	//7
		RobotObservedObject,	//8
		RobotObservedNothing,	//9
		RobotDeletedObject,	//10
		DeviceDetectedVisionMarker,	//11
		RobotCompletedAction,	//12
		PlaySound,	//13
		StopSound,	//14
		ActiveObjectMoved,	//15
		INVALID
	};

	private Tag _tag = Tag.INVALID;

	public Tag GetTag() { return _tag; }

	private object _state = null;

	public Anki.Cozmo.G2U.Ping Ping
	{
		get {
			if (_tag != Tag.Ping) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"Ping\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.Ping)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.Ping : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotAvailable RobotAvailable
	{
		get {
			if (_tag != Tag.RobotAvailable) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotAvailable\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotAvailable)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotAvailable : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.UiDeviceAvailable UiDeviceAvailable
	{
		get {
			if (_tag != Tag.UiDeviceAvailable) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"UiDeviceAvailable\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.UiDeviceAvailable)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.UiDeviceAvailable : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotConnected RobotConnected
	{
		get {
			if (_tag != Tag.RobotConnected) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotConnected\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotConnected)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotConnected : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotDisconnected RobotDisconnected
	{
		get {
			if (_tag != Tag.RobotDisconnected) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotDisconnected\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotDisconnected)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotDisconnected : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.UiDeviceConnected UiDeviceConnected
	{
		get {
			if (_tag != Tag.UiDeviceConnected) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"UiDeviceConnected\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.UiDeviceConnected)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.UiDeviceConnected : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotState RobotState
	{
		get {
			if (_tag != Tag.RobotState) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotState\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotState)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotState : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.ImageChunk ImageChunk
	{
		get {
			if (_tag != Tag.ImageChunk) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ImageChunk\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.ImageChunk)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ImageChunk : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotObservedObject RobotObservedObject
	{
		get {
			if (_tag != Tag.RobotObservedObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotObservedObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotObservedObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotObservedObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotObservedNothing RobotObservedNothing
	{
		get {
			if (_tag != Tag.RobotObservedNothing) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotObservedNothing\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotObservedNothing)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotObservedNothing : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotDeletedObject RobotDeletedObject
	{
		get {
			if (_tag != Tag.RobotDeletedObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotDeletedObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotDeletedObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotDeletedObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.DeviceDetectedVisionMarker DeviceDetectedVisionMarker
	{
		get {
			if (_tag != Tag.DeviceDetectedVisionMarker) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DeviceDetectedVisionMarker\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.DeviceDetectedVisionMarker)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DeviceDetectedVisionMarker : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.RobotCompletedAction RobotCompletedAction
	{
		get {
			if (_tag != Tag.RobotCompletedAction) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"RobotCompletedAction\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.RobotCompletedAction)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.RobotCompletedAction : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.PlaySound PlaySound
	{
		get {
			if (_tag != Tag.PlaySound) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlaySound\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.PlaySound)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlaySound : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.StopSound StopSound
	{
		get {
			if (_tag != Tag.StopSound) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopSound\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.StopSound)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopSound : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.G2U.ActiveObjectMoved ActiveObjectMoved
	{
		get {
			if (_tag != Tag.ActiveObjectMoved) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ActiveObjectMoved\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.G2U.ActiveObjectMoved)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ActiveObjectMoved : Tag.INVALID;
			_state = value;
		}
	}

	/**** Constructors ****/

	public Message()
	{
	}

	public Message(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public Message(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		Tag newTag = (Tag)reader.ReadByte();
		switch(newTag) {
		case Tag.Ping:
			Ping = new Anki.Cozmo.G2U.Ping(reader);
			break;
		case Tag.RobotAvailable:
			RobotAvailable = new Anki.Cozmo.G2U.RobotAvailable(reader);
			break;
		case Tag.UiDeviceAvailable:
			UiDeviceAvailable = new Anki.Cozmo.G2U.UiDeviceAvailable(reader);
			break;
		case Tag.RobotConnected:
			RobotConnected = new Anki.Cozmo.G2U.RobotConnected(reader);
			break;
		case Tag.RobotDisconnected:
			RobotDisconnected = new Anki.Cozmo.G2U.RobotDisconnected(reader);
			break;
		case Tag.UiDeviceConnected:
			UiDeviceConnected = new Anki.Cozmo.G2U.UiDeviceConnected(reader);
			break;
		case Tag.RobotState:
			RobotState = new Anki.Cozmo.G2U.RobotState(reader);
			break;
		case Tag.ImageChunk:
			ImageChunk = new Anki.Cozmo.G2U.ImageChunk(reader);
			break;
		case Tag.RobotObservedObject:
			RobotObservedObject = new Anki.Cozmo.G2U.RobotObservedObject(reader);
			break;
		case Tag.RobotObservedNothing:
			RobotObservedNothing = new Anki.Cozmo.G2U.RobotObservedNothing(reader);
			break;
		case Tag.RobotDeletedObject:
			RobotDeletedObject = new Anki.Cozmo.G2U.RobotDeletedObject(reader);
			break;
		case Tag.DeviceDetectedVisionMarker:
			DeviceDetectedVisionMarker = new Anki.Cozmo.G2U.DeviceDetectedVisionMarker(reader);
			break;
		case Tag.RobotCompletedAction:
			RobotCompletedAction = new Anki.Cozmo.G2U.RobotCompletedAction(reader);
			break;
		case Tag.PlaySound:
			PlaySound = new Anki.Cozmo.G2U.PlaySound(reader);
			break;
		case Tag.StopSound:
			StopSound = new Anki.Cozmo.G2U.StopSound(reader);
			break;
		case Tag.ActiveObjectMoved:
			ActiveObjectMoved = new Anki.Cozmo.G2U.ActiveObjectMoved(reader);
			break;
		default:
			break;

		}
		_tag = newTag;
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)GetTag());
		switch(GetTag()) {
		case Tag.Ping:
			if (Ping == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			Ping.Pack(writer);
			break;
		case Tag.RobotAvailable:
			if (RobotAvailable == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotAvailable.Pack(writer);
			break;
		case Tag.UiDeviceAvailable:
			if (UiDeviceAvailable == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			UiDeviceAvailable.Pack(writer);
			break;
		case Tag.RobotConnected:
			if (RobotConnected == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotConnected.Pack(writer);
			break;
		case Tag.RobotDisconnected:
			if (RobotDisconnected == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotDisconnected.Pack(writer);
			break;
		case Tag.UiDeviceConnected:
			if (UiDeviceConnected == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			UiDeviceConnected.Pack(writer);
			break;
		case Tag.RobotState:
			if (RobotState == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotState.Pack(writer);
			break;
		case Tag.ImageChunk:
			if (ImageChunk == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			ImageChunk.Pack(writer);
			break;
		case Tag.RobotObservedObject:
			if (RobotObservedObject == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotObservedObject.Pack(writer);
			break;
		case Tag.RobotObservedNothing:
			if (RobotObservedNothing == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotObservedNothing.Pack(writer);
			break;
		case Tag.RobotDeletedObject:
			if (RobotDeletedObject == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotDeletedObject.Pack(writer);
			break;
		case Tag.DeviceDetectedVisionMarker:
			if (DeviceDetectedVisionMarker == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			DeviceDetectedVisionMarker.Pack(writer);
			break;
		case Tag.RobotCompletedAction:
			if (RobotCompletedAction == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			RobotCompletedAction.Pack(writer);
			break;
		case Tag.PlaySound:
			if (PlaySound == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			PlaySound.Pack(writer);
			break;
		case Tag.StopSound:
			if (StopSound == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			StopSound.Pack(writer);
			break;
		case Tag.ActiveObjectMoved:
			if (ActiveObjectMoved == null) {
				throw new System.InvalidOperationException("Arrays in messages may not have null entries.");
			}
			ActiveObjectMoved.Pack(writer);
			break;
		default:
			break;
		}
	}

	public int Size 
	{
		get {
			int result = 1; // tag = byte
			switch(GetTag()) {
			case Tag.Ping:
				if (Ping == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += Ping.Size;
				break;
			case Tag.RobotAvailable:
				if (RobotAvailable == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotAvailable.Size;
				break;
			case Tag.UiDeviceAvailable:
				if (UiDeviceAvailable == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += UiDeviceAvailable.Size;
				break;
			case Tag.RobotConnected:
				if (RobotConnected == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotConnected.Size;
				break;
			case Tag.RobotDisconnected:
				if (RobotDisconnected == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotDisconnected.Size;
				break;
			case Tag.UiDeviceConnected:
				if (UiDeviceConnected == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += UiDeviceConnected.Size;
				break;
			case Tag.RobotState:
				if (RobotState == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotState.Size;
				break;
			case Tag.ImageChunk:
				if (ImageChunk == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += ImageChunk.Size;
				break;
			case Tag.RobotObservedObject:
				if (RobotObservedObject == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotObservedObject.Size;
				break;
			case Tag.RobotObservedNothing:
				if (RobotObservedNothing == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotObservedNothing.Size;
				break;
			case Tag.RobotDeletedObject:
				if (RobotDeletedObject == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotDeletedObject.Size;
				break;
			case Tag.DeviceDetectedVisionMarker:
				if (DeviceDetectedVisionMarker == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += DeviceDetectedVisionMarker.Size;
				break;
			case Tag.RobotCompletedAction:
				if (RobotCompletedAction == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += RobotCompletedAction.Size;
				break;
			case Tag.PlaySound:
				if (PlaySound == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += PlaySound.Size;
				break;
			case Tag.StopSound:
				if (StopSound == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += StopSound.Size;
				break;
			case Tag.ActiveObjectMoved:
				if (ActiveObjectMoved == null) {
					throw new System.InvalidOperationException("Messages may not have null members.");
				}
				result += ActiveObjectMoved.Size;
				break;
			default:
				// Just tag size
				break;
			}
			return result;
		}
	}

	public static bool operator ==(Message a, Message b)
	{
		if (System.Object.ReferenceEquals(a, null))
		{
			return System.Object.ReferenceEquals(b, null);
		}

		return a.Equals(b);
	}

	public static bool operator !=(Message a, Message b)
	{
		return !(a == b);
	}

	public override bool Equals(System.Object obj)
	{
		return this.Equals(obj as Message);
	}

	public bool Equals(Message p)
	{
		if (System.Object.ReferenceEquals(p, null))
		{
			return false;
		}

		return (_tag == p._tag && _state.Equals(p._state));
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._tag.GetHashCode();
			hash = hash * 23 + this._state.GetHashCode();
			return hash;
		}
	}
}

} // namespace G2U

} // namespace Cozmo

} // namespace Anki

