// Autogenerated C# message buffer code.
// Source: anki/cozmo/messageBuffers/game/UiMessagesU2G.clad
// Full command line: ../lib/anki/cozmo-engine/tools/message-buffers/emitters/CSharp_emitter.py -C src --output-file ../unity/Cozmo/Assets/Scripts/MessageBuffers/UiMessagesU2G.cs anki/cozmo/messageBuffers/game/UiMessagesU2G.clad

namespace Anki {

namespace Cozmo {

namespace U2G {

public class Ping
{
	private uint _counter; // uint_32

	public uint counter { get { return _counter; } set { _counter = value; } }


	/**** Constructors ****/

	public Ping()
	{
	}

	public Ping(uint counter)
	{
		this.counter = counter;
	}

	public Ping(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public Ping(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_counter = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_counter);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		Ping p = obj as Ping;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(Ping p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._counter.Equals(p._counter);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._counter.GetHashCode();
			return hash;
		}
	}
}

public class ConnectToRobot
{
	private byte _robotID; // uint_8

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public ConnectToRobot()
	{
	}

	public ConnectToRobot(byte robotID)
	{
		this.robotID = robotID;
	}

	public ConnectToRobot(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ConnectToRobot(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		ConnectToRobot p = obj as ConnectToRobot;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(ConnectToRobot p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class ConnectToUiDevice
{
	private byte _deviceID; // uint_8

	public byte deviceID { get { return _deviceID; } set { _deviceID = value; } }


	/**** Constructors ****/

	public ConnectToUiDevice()
	{
	}

	public ConnectToUiDevice(byte deviceID)
	{
		this.deviceID = deviceID;
	}

	public ConnectToUiDevice(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ConnectToUiDevice(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_deviceID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_deviceID);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		ConnectToUiDevice p = obj as ConnectToUiDevice;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(ConnectToUiDevice p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._deviceID.Equals(p._deviceID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._deviceID.GetHashCode();
			return hash;
		}
	}
}

public class DisconnectFromUiDevice
{
	private byte _deviceID; // uint_8

	public byte deviceID { get { return _deviceID; } set { _deviceID = value; } }


	/**** Constructors ****/

	public DisconnectFromUiDevice()
	{
	}

	public DisconnectFromUiDevice(byte deviceID)
	{
		this.deviceID = deviceID;
	}

	public DisconnectFromUiDevice(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public DisconnectFromUiDevice(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_deviceID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_deviceID);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		DisconnectFromUiDevice p = obj as DisconnectFromUiDevice;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(DisconnectFromUiDevice p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._deviceID.Equals(p._deviceID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._deviceID.GetHashCode();
			return hash;
		}
	}
}

public class ForceAddRobot
{
	private byte[] _ipAddress; // uint_8[16]
	private byte _robotID; // uint_8
	private byte _isSimulated; // uint_8

	public byte[] ipAddress
	{
		get {
			return _ipAddress;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("ipAddress fixed-length array is null. Must have a length of 16.", "value");
			}
			if (value.Length != 16) {
				throw new System.ArgumentException("ipAddress fixed-length array is the wrong size. Must have a length of 16.", "value");
			}
			_ipAddress = value;
		}
	}

	public byte robotID { get { return _robotID; } set { _robotID = value; } }

	public byte isSimulated { get { return _isSimulated; } set { _isSimulated = value; } }


	/**** Constructors ****/

	public ForceAddRobot()
	{
		this.ipAddress = new byte[16];
	}

	public ForceAddRobot(byte[] ipAddress,
		byte robotID,
		byte isSimulated)
	{
		this.ipAddress = ipAddress;
		this.robotID = robotID;
		this.isSimulated = isSimulated;
	}

	public ForceAddRobot(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ForceAddRobot(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_ipAddress = new byte[16];
		for (int i = 0; i < 16; ++i) {
			_ipAddress[i] = reader.ReadByte();
		}
		_robotID = reader.ReadByte();
		_isSimulated = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		for (int i = 0; i < 16; ++i) {
			writer.Write((byte)_ipAddress[i]);
		}
		writer.Write((byte)_robotID);
		writer.Write((byte)_isSimulated);
	}

	public int Size 
	{
		get {
			return 18;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		ForceAddRobot p = obj as ForceAddRobot;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(ForceAddRobot p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return ArrayEquals<byte>(this._ipAddress,p._ipAddress)
			&& this._robotID.Equals(p._robotID)
			&& this._isSimulated.Equals(p._isSimulated);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._ipAddress.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._isSimulated.GetHashCode();
			return hash;
		}
	}
}

public class StartEngine
{
	private byte _asHost; // uint_8
	private byte[] _vizHostIP; // uint_8[16]

	public byte asHost { get { return _asHost; } set { _asHost = value; } }

	public byte[] vizHostIP
	{
		get {
			return _vizHostIP;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("vizHostIP fixed-length array is null. Must have a length of 16.", "value");
			}
			if (value.Length != 16) {
				throw new System.ArgumentException("vizHostIP fixed-length array is the wrong size. Must have a length of 16.", "value");
			}
			_vizHostIP = value;
		}
	}


	/**** Constructors ****/

	public StartEngine()
	{
		this.vizHostIP = new byte[16];
	}

	public StartEngine(byte asHost,
		byte[] vizHostIP)
	{
		this.asHost = asHost;
		this.vizHostIP = vizHostIP;
	}

	public StartEngine(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StartEngine(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_asHost = reader.ReadByte();
		_vizHostIP = new byte[16];
		for (int i = 0; i < 16; ++i) {
			_vizHostIP[i] = reader.ReadByte();
		}
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_asHost);
		for (int i = 0; i < 16; ++i) {
			writer.Write((byte)_vizHostIP[i]);
		}
	}

	public int Size 
	{
		get {
			return 17;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		StartEngine p = obj as StartEngine;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(StartEngine p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._asHost.Equals(p._asHost)
			&& ArrayEquals<byte>(this._vizHostIP,p._vizHostIP);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._asHost.GetHashCode();
			hash = hash * 23 + this._vizHostIP.GetHashCode();
			return hash;
		}
	}
}

public class DriveWheels
{
	private float _lwheel_speed_mmps; // float_32
	private float _rwheel_speed_mmps; // float_32

	public float lwheel_speed_mmps { get { return _lwheel_speed_mmps; } set { _lwheel_speed_mmps = value; } }

	public float rwheel_speed_mmps { get { return _rwheel_speed_mmps; } set { _rwheel_speed_mmps = value; } }


	/**** Constructors ****/

	public DriveWheels()
	{
	}

	public DriveWheels(float lwheel_speed_mmps,
		float rwheel_speed_mmps)
	{
		this.lwheel_speed_mmps = lwheel_speed_mmps;
		this.rwheel_speed_mmps = rwheel_speed_mmps;
	}

	public DriveWheels(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public DriveWheels(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_lwheel_speed_mmps = reader.ReadSingle();
		_rwheel_speed_mmps = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_lwheel_speed_mmps);
		writer.Write((float)_rwheel_speed_mmps);
	}

	public int Size 
	{
		get {
			return 8;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		DriveWheels p = obj as DriveWheels;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(DriveWheels p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._lwheel_speed_mmps.Equals(p._lwheel_speed_mmps)
			&& this._rwheel_speed_mmps.Equals(p._rwheel_speed_mmps);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._lwheel_speed_mmps.GetHashCode();
			hash = hash * 23 + this._rwheel_speed_mmps.GetHashCode();
			return hash;
		}
	}
}

public class TurnInPlace
{
	private float _angle_rad; // float_32
	private byte _robotID; // uint_8

	public float angle_rad { get { return _angle_rad; } set { _angle_rad = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public TurnInPlace()
	{
	}

	public TurnInPlace(float angle_rad,
		byte robotID)
	{
		this.angle_rad = angle_rad;
		this.robotID = robotID;
	}

	public TurnInPlace(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public TurnInPlace(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_angle_rad = reader.ReadSingle();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_angle_rad);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		TurnInPlace p = obj as TurnInPlace;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(TurnInPlace p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._angle_rad.Equals(p._angle_rad)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._angle_rad.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class FaceObject
{
	private uint _objectID; // uint_32
	private float _turnAngleTol; // float_32
	private float _maxTurnAngle; // float_32
	private byte _robotID; // uint_8
	private byte _headTrackWhenDone; // uint_8

	public uint objectID { get { return _objectID; } set { _objectID = value; } }

	public float turnAngleTol { get { return _turnAngleTol; } set { _turnAngleTol = value; } }

	public float maxTurnAngle { get { return _maxTurnAngle; } set { _maxTurnAngle = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }

	public byte headTrackWhenDone { get { return _headTrackWhenDone; } set { _headTrackWhenDone = value; } }


	/**** Constructors ****/

	public FaceObject()
	{
	}

	public FaceObject(uint objectID,
		float turnAngleTol,
		float maxTurnAngle,
		byte robotID,
		byte headTrackWhenDone)
	{
		this.objectID = objectID;
		this.turnAngleTol = turnAngleTol;
		this.maxTurnAngle = maxTurnAngle;
		this.robotID = robotID;
		this.headTrackWhenDone = headTrackWhenDone;
	}

	public FaceObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public FaceObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadUInt32();
		_turnAngleTol = reader.ReadSingle();
		_maxTurnAngle = reader.ReadSingle();
		_robotID = reader.ReadByte();
		_headTrackWhenDone = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_objectID);
		writer.Write((float)_turnAngleTol);
		writer.Write((float)_maxTurnAngle);
		writer.Write((byte)_robotID);
		writer.Write((byte)_headTrackWhenDone);
	}

	public int Size 
	{
		get {
			return 14;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		FaceObject p = obj as FaceObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(FaceObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._turnAngleTol.Equals(p._turnAngleTol)
			&& this._maxTurnAngle.Equals(p._maxTurnAngle)
			&& this._robotID.Equals(p._robotID)
			&& this._headTrackWhenDone.Equals(p._headTrackWhenDone);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._turnAngleTol.GetHashCode();
			hash = hash * 23 + this._maxTurnAngle.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._headTrackWhenDone.GetHashCode();
			return hash;
		}
	}
}

public class MoveHead
{
	private float _speed_rad_per_sec; // float_32

	public float speed_rad_per_sec { get { return _speed_rad_per_sec; } set { _speed_rad_per_sec = value; } }


	/**** Constructors ****/

	public MoveHead()
	{
	}

	public MoveHead(float speed_rad_per_sec)
	{
		this.speed_rad_per_sec = speed_rad_per_sec;
	}

	public MoveHead(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public MoveHead(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_speed_rad_per_sec = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_speed_rad_per_sec);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		MoveHead p = obj as MoveHead;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(MoveHead p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._speed_rad_per_sec.Equals(p._speed_rad_per_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._speed_rad_per_sec.GetHashCode();
			return hash;
		}
	}
}

public class MoveLift
{
	private float _speed_rad_per_sec; // float_32

	public float speed_rad_per_sec { get { return _speed_rad_per_sec; } set { _speed_rad_per_sec = value; } }


	/**** Constructors ****/

	public MoveLift()
	{
	}

	public MoveLift(float speed_rad_per_sec)
	{
		this.speed_rad_per_sec = speed_rad_per_sec;
	}

	public MoveLift(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public MoveLift(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_speed_rad_per_sec = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_speed_rad_per_sec);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		MoveLift p = obj as MoveLift;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(MoveLift p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._speed_rad_per_sec.Equals(p._speed_rad_per_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._speed_rad_per_sec.GetHashCode();
			return hash;
		}
	}
}

public class SetLiftHeight
{
	private float _height_mm; // float_32
	private float _max_speed_rad_per_sec; // float_32
	private float _accel_rad_per_sec2; // float_32

	public float height_mm { get { return _height_mm; } set { _height_mm = value; } }

	public float max_speed_rad_per_sec { get { return _max_speed_rad_per_sec; } set { _max_speed_rad_per_sec = value; } }

	public float accel_rad_per_sec2 { get { return _accel_rad_per_sec2; } set { _accel_rad_per_sec2 = value; } }


	/**** Constructors ****/

	public SetLiftHeight()
	{
	}

	public SetLiftHeight(float height_mm,
		float max_speed_rad_per_sec,
		float accel_rad_per_sec2)
	{
		this.height_mm = height_mm;
		this.max_speed_rad_per_sec = max_speed_rad_per_sec;
		this.accel_rad_per_sec2 = accel_rad_per_sec2;
	}

	public SetLiftHeight(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetLiftHeight(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_height_mm = reader.ReadSingle();
		_max_speed_rad_per_sec = reader.ReadSingle();
		_accel_rad_per_sec2 = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_height_mm);
		writer.Write((float)_max_speed_rad_per_sec);
		writer.Write((float)_accel_rad_per_sec2);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetLiftHeight p = obj as SetLiftHeight;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetLiftHeight p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._height_mm.Equals(p._height_mm)
			&& this._max_speed_rad_per_sec.Equals(p._max_speed_rad_per_sec)
			&& this._accel_rad_per_sec2.Equals(p._accel_rad_per_sec2);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._height_mm.GetHashCode();
			hash = hash * 23 + this._max_speed_rad_per_sec.GetHashCode();
			hash = hash * 23 + this._accel_rad_per_sec2.GetHashCode();
			return hash;
		}
	}
}

public class SetHeadAngle
{
	private float _angle_rad; // float_32
	private float _max_speed_rad_per_sec; // float_32
	private float _accel_rad_per_sec2; // float_32

	public float angle_rad { get { return _angle_rad; } set { _angle_rad = value; } }

	public float max_speed_rad_per_sec { get { return _max_speed_rad_per_sec; } set { _max_speed_rad_per_sec = value; } }

	public float accel_rad_per_sec2 { get { return _accel_rad_per_sec2; } set { _accel_rad_per_sec2 = value; } }


	/**** Constructors ****/

	public SetHeadAngle()
	{
	}

	public SetHeadAngle(float angle_rad,
		float max_speed_rad_per_sec,
		float accel_rad_per_sec2)
	{
		this.angle_rad = angle_rad;
		this.max_speed_rad_per_sec = max_speed_rad_per_sec;
		this.accel_rad_per_sec2 = accel_rad_per_sec2;
	}

	public SetHeadAngle(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetHeadAngle(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_angle_rad = reader.ReadSingle();
		_max_speed_rad_per_sec = reader.ReadSingle();
		_accel_rad_per_sec2 = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_angle_rad);
		writer.Write((float)_max_speed_rad_per_sec);
		writer.Write((float)_accel_rad_per_sec2);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetHeadAngle p = obj as SetHeadAngle;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetHeadAngle p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._angle_rad.Equals(p._angle_rad)
			&& this._max_speed_rad_per_sec.Equals(p._max_speed_rad_per_sec)
			&& this._accel_rad_per_sec2.Equals(p._accel_rad_per_sec2);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._angle_rad.GetHashCode();
			hash = hash * 23 + this._max_speed_rad_per_sec.GetHashCode();
			hash = hash * 23 + this._accel_rad_per_sec2.GetHashCode();
			return hash;
		}
	}
}

public class TrackHeadToObject
{
	private uint _objectID; // uint_32
	private byte _robotID; // uint_8

	public uint objectID { get { return _objectID; } set { _objectID = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public TrackHeadToObject()
	{
	}

	public TrackHeadToObject(uint objectID,
		byte robotID)
	{
		this.objectID = objectID;
		this.robotID = robotID;
	}

	public TrackHeadToObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public TrackHeadToObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadUInt32();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_objectID);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		TrackHeadToObject p = obj as TrackHeadToObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(TrackHeadToObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class StopAllMotors
{
	/**** Constructors ****/

	public StopAllMotors()
	{
	}

	public StopAllMotors(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StopAllMotors(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class ImageRequest
{
	private byte _robotID; // uint_8
	private byte _mode; // uint_8

	public byte robotID { get { return _robotID; } set { _robotID = value; } }

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public ImageRequest()
	{
	}

	public ImageRequest(byte robotID,
		byte mode)
	{
		this.robotID = robotID;
		this.mode = mode;
	}

	public ImageRequest(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ImageRequest(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_robotID = reader.ReadByte();
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_robotID);
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 2;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		ImageRequest p = obj as ImageRequest;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(ImageRequest p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._robotID.Equals(p._robotID)
			&& this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._robotID.GetHashCode();
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class SetRobotImageSendMode
{
	private byte _mode; // uint_8
	private byte _resolution; // uint_8

	public byte mode { get { return _mode; } set { _mode = value; } }

	public byte resolution { get { return _resolution; } set { _resolution = value; } }


	/**** Constructors ****/

	public SetRobotImageSendMode()
	{
	}

	public SetRobotImageSendMode(byte mode,
		byte resolution)
	{
		this.mode = mode;
		this.resolution = resolution;
	}

	public SetRobotImageSendMode(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetRobotImageSendMode(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_mode = reader.ReadByte();
		_resolution = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_mode);
		writer.Write((byte)_resolution);
	}

	public int Size 
	{
		get {
			return 2;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetRobotImageSendMode p = obj as SetRobotImageSendMode;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetRobotImageSendMode p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._mode.Equals(p._mode)
			&& this._resolution.Equals(p._resolution);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._mode.GetHashCode();
			hash = hash * 23 + this._resolution.GetHashCode();
			return hash;
		}
	}
}

public class SaveImages
{
	private byte _mode; // uint_8

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public SaveImages()
	{
	}

	public SaveImages(byte mode)
	{
		this.mode = mode;
	}

	public SaveImages(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SaveImages(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SaveImages p = obj as SaveImages;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SaveImages p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class SaveRobotState
{
	private byte _mode; // uint_8

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public SaveRobotState()
	{
	}

	public SaveRobotState(byte mode)
	{
		this.mode = mode;
	}

	public SaveRobotState(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SaveRobotState(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SaveRobotState p = obj as SaveRobotState;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SaveRobotState p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class EnableDisplay
{
	private byte _enable; // uint_8

	public byte enable { get { return _enable; } set { _enable = value; } }


	/**** Constructors ****/

	public EnableDisplay()
	{
	}

	public EnableDisplay(byte enable)
	{
		this.enable = enable;
	}

	public EnableDisplay(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public EnableDisplay(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_enable = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_enable);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		EnableDisplay p = obj as EnableDisplay;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(EnableDisplay p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._enable.Equals(p._enable);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._enable.GetHashCode();
			return hash;
		}
	}
}

public class SetHeadlights
{
	private byte _intensity; // uint_8

	public byte intensity { get { return _intensity; } set { _intensity = value; } }


	/**** Constructors ****/

	public SetHeadlights()
	{
	}

	public SetHeadlights(byte intensity)
	{
		this.intensity = intensity;
	}

	public SetHeadlights(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetHeadlights(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_intensity = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_intensity);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetHeadlights p = obj as SetHeadlights;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetHeadlights p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._intensity.Equals(p._intensity);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._intensity.GetHashCode();
			return hash;
		}
	}
}

public class GotoPose
{
	private float _x_mm; // float_32
	private float _y_mm; // float_32
	private float _rad; // float_32
	private byte _level; // uint_8
	private byte _useManualSpeed; // uint_8

	public float x_mm { get { return _x_mm; } set { _x_mm = value; } }

	public float y_mm { get { return _y_mm; } set { _y_mm = value; } }

	public float rad { get { return _rad; } set { _rad = value; } }

	public byte level { get { return _level; } set { _level = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public GotoPose()
	{
	}

	public GotoPose(float x_mm,
		float y_mm,
		float rad,
		byte level,
		byte useManualSpeed)
	{
		this.x_mm = x_mm;
		this.y_mm = y_mm;
		this.rad = rad;
		this.level = level;
		this.useManualSpeed = useManualSpeed;
	}

	public GotoPose(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public GotoPose(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_x_mm = reader.ReadSingle();
		_y_mm = reader.ReadSingle();
		_rad = reader.ReadSingle();
		_level = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_x_mm);
		writer.Write((float)_y_mm);
		writer.Write((float)_rad);
		writer.Write((byte)_level);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 14;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		GotoPose p = obj as GotoPose;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(GotoPose p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._x_mm.Equals(p._x_mm)
			&& this._y_mm.Equals(p._y_mm)
			&& this._rad.Equals(p._rad)
			&& this._level.Equals(p._level)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._x_mm.GetHashCode();
			hash = hash * 23 + this._y_mm.GetHashCode();
			hash = hash * 23 + this._rad.GetHashCode();
			hash = hash * 23 + this._level.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class PlaceObjectOnGround
{
	private float _x_mm; // float_32
	private float _y_mm; // float_32
	private float _rad; // float_32
	private byte _level; // uint_8
	private byte _useManualSpeed; // uint_8

	public float x_mm { get { return _x_mm; } set { _x_mm = value; } }

	public float y_mm { get { return _y_mm; } set { _y_mm = value; } }

	public float rad { get { return _rad; } set { _rad = value; } }

	public byte level { get { return _level; } set { _level = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public PlaceObjectOnGround()
	{
	}

	public PlaceObjectOnGround(float x_mm,
		float y_mm,
		float rad,
		byte level,
		byte useManualSpeed)
	{
		this.x_mm = x_mm;
		this.y_mm = y_mm;
		this.rad = rad;
		this.level = level;
		this.useManualSpeed = useManualSpeed;
	}

	public PlaceObjectOnGround(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public PlaceObjectOnGround(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_x_mm = reader.ReadSingle();
		_y_mm = reader.ReadSingle();
		_rad = reader.ReadSingle();
		_level = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_x_mm);
		writer.Write((float)_y_mm);
		writer.Write((float)_rad);
		writer.Write((byte)_level);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 14;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		PlaceObjectOnGround p = obj as PlaceObjectOnGround;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(PlaceObjectOnGround p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._x_mm.Equals(p._x_mm)
			&& this._y_mm.Equals(p._y_mm)
			&& this._rad.Equals(p._rad)
			&& this._level.Equals(p._level)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._x_mm.GetHashCode();
			hash = hash * 23 + this._y_mm.GetHashCode();
			hash = hash * 23 + this._rad.GetHashCode();
			hash = hash * 23 + this._level.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class PlaceObjectOnGroundHere
{
	/**** Constructors ****/

	public PlaceObjectOnGroundHere()
	{
	}

	public PlaceObjectOnGroundHere(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public PlaceObjectOnGroundHere(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class ExecuteTestPlan
{
	/**** Constructors ****/

	public ExecuteTestPlan()
	{
	}

	public ExecuteTestPlan(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ExecuteTestPlan(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class SelectNextObject
{
	/**** Constructors ****/

	public SelectNextObject()
	{
	}

	public SelectNextObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SelectNextObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class PickAndPlaceObject
{
	private int _objectID; // int_32
	private byte _usePreDockPose; // uint_8
	private byte _useManualSpeed; // uint_8

	public int objectID { get { return _objectID; } set { _objectID = value; } }

	public byte usePreDockPose { get { return _usePreDockPose; } set { _usePreDockPose = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public PickAndPlaceObject()
	{
	}

	public PickAndPlaceObject(int objectID,
		byte usePreDockPose,
		byte useManualSpeed)
	{
		this.objectID = objectID;
		this.usePreDockPose = usePreDockPose;
		this.useManualSpeed = useManualSpeed;
	}

	public PickAndPlaceObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public PickAndPlaceObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadInt32();
		_usePreDockPose = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_objectID);
		writer.Write((byte)_usePreDockPose);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 6;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		PickAndPlaceObject p = obj as PickAndPlaceObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(PickAndPlaceObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._usePreDockPose.Equals(p._usePreDockPose)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._usePreDockPose.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class TraverseObject
{
	private byte _usePreDockPose; // uint_8
	private byte _useManualSpeed; // uint_8

	public byte usePreDockPose { get { return _usePreDockPose; } set { _usePreDockPose = value; } }

	public byte useManualSpeed { get { return _useManualSpeed; } set { _useManualSpeed = value; } }


	/**** Constructors ****/

	public TraverseObject()
	{
	}

	public TraverseObject(byte usePreDockPose,
		byte useManualSpeed)
	{
		this.usePreDockPose = usePreDockPose;
		this.useManualSpeed = useManualSpeed;
	}

	public TraverseObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public TraverseObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_usePreDockPose = reader.ReadByte();
		_useManualSpeed = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_usePreDockPose);
		writer.Write((byte)_useManualSpeed);
	}

	public int Size 
	{
		get {
			return 2;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		TraverseObject p = obj as TraverseObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(TraverseObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._usePreDockPose.Equals(p._usePreDockPose)
			&& this._useManualSpeed.Equals(p._useManualSpeed);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._usePreDockPose.GetHashCode();
			hash = hash * 23 + this._useManualSpeed.GetHashCode();
			return hash;
		}
	}
}

public class SetRobotCarryingObject
{
	private int _objectID; // int_32
	private byte _robotID; // uint_8

	public int objectID { get { return _objectID; } set { _objectID = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public SetRobotCarryingObject()
	{
	}

	public SetRobotCarryingObject(int objectID,
		byte robotID)
	{
		this.objectID = objectID;
		this.robotID = robotID;
	}

	public SetRobotCarryingObject(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetRobotCarryingObject(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadInt32();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_objectID);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetRobotCarryingObject p = obj as SetRobotCarryingObject;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetRobotCarryingObject p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class ClearAllBlocks
{
	/**** Constructors ****/

	public ClearAllBlocks()
	{
	}

	public ClearAllBlocks(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ClearAllBlocks(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class VisionWhileMoving
{
	private byte _enable; // uint_8

	public byte enable { get { return _enable; } set { _enable = value; } }


	/**** Constructors ****/

	public VisionWhileMoving()
	{
	}

	public VisionWhileMoving(byte enable)
	{
		this.enable = enable;
	}

	public VisionWhileMoving(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public VisionWhileMoving(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_enable = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_enable);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		VisionWhileMoving p = obj as VisionWhileMoving;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(VisionWhileMoving p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._enable.Equals(p._enable);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._enable.GetHashCode();
			return hash;
		}
	}
}

public class ExecuteBehavior
{
	private byte _behaviorMode; // uint_8

	public byte behaviorMode { get { return _behaviorMode; } set { _behaviorMode = value; } }


	/**** Constructors ****/

	public ExecuteBehavior()
	{
	}

	public ExecuteBehavior(byte behaviorMode)
	{
		this.behaviorMode = behaviorMode;
	}

	public ExecuteBehavior(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ExecuteBehavior(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_behaviorMode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_behaviorMode);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		ExecuteBehavior p = obj as ExecuteBehavior;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(ExecuteBehavior p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._behaviorMode.Equals(p._behaviorMode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._behaviorMode.GetHashCode();
			return hash;
		}
	}
}

public class SetBehaviorState
{
	private byte _behaviorState; // uint_8

	public byte behaviorState { get { return _behaviorState; } set { _behaviorState = value; } }


	/**** Constructors ****/

	public SetBehaviorState()
	{
	}

	public SetBehaviorState(byte behaviorState)
	{
		this.behaviorState = behaviorState;
	}

	public SetBehaviorState(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetBehaviorState(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_behaviorState = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_behaviorState);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetBehaviorState p = obj as SetBehaviorState;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetBehaviorState p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._behaviorState.Equals(p._behaviorState);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._behaviorState.GetHashCode();
			return hash;
		}
	}
}

public class AbortPath
{
	/**** Constructors ****/

	public AbortPath()
	{
	}

	public AbortPath(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public AbortPath(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class AbortAll
{
	/**** Constructors ****/

	public AbortAll()
	{
	}

	public AbortAll(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public AbortAll(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class CancelAction
{
	private int _actionType; // int_32
	private byte _robotID; // uint_8

	public int actionType { get { return _actionType; } set { _actionType = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public CancelAction()
	{
	}

	public CancelAction(int actionType,
		byte robotID)
	{
		this.actionType = actionType;
		this.robotID = robotID;
	}

	public CancelAction(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public CancelAction(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_actionType = reader.ReadInt32();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_actionType);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 5;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		CancelAction p = obj as CancelAction;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(CancelAction p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._actionType.Equals(p._actionType)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._actionType.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class DrawPoseMarker
{
	private float _x_mm; // float_32
	private float _y_mm; // float_32
	private float _rad; // float_32
	private byte _level; // uint_8

	public float x_mm { get { return _x_mm; } set { _x_mm = value; } }

	public float y_mm { get { return _y_mm; } set { _y_mm = value; } }

	public float rad { get { return _rad; } set { _rad = value; } }

	public byte level { get { return _level; } set { _level = value; } }


	/**** Constructors ****/

	public DrawPoseMarker()
	{
	}

	public DrawPoseMarker(float x_mm,
		float y_mm,
		float rad,
		byte level)
	{
		this.x_mm = x_mm;
		this.y_mm = y_mm;
		this.rad = rad;
		this.level = level;
	}

	public DrawPoseMarker(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public DrawPoseMarker(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_x_mm = reader.ReadSingle();
		_y_mm = reader.ReadSingle();
		_rad = reader.ReadSingle();
		_level = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_x_mm);
		writer.Write((float)_y_mm);
		writer.Write((float)_rad);
		writer.Write((byte)_level);
	}

	public int Size 
	{
		get {
			return 13;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		DrawPoseMarker p = obj as DrawPoseMarker;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(DrawPoseMarker p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._x_mm.Equals(p._x_mm)
			&& this._y_mm.Equals(p._y_mm)
			&& this._rad.Equals(p._rad)
			&& this._level.Equals(p._level);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._x_mm.GetHashCode();
			hash = hash * 23 + this._y_mm.GetHashCode();
			hash = hash * 23 + this._rad.GetHashCode();
			hash = hash * 23 + this._level.GetHashCode();
			return hash;
		}
	}
}

public class ErasePoseMarker
{
	/**** Constructors ****/

	public ErasePoseMarker()
	{
	}

	public ErasePoseMarker(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ErasePoseMarker(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class SetWheelControllerGains
{
	private float _kpLeft; // float_32
	private float _kiLeft; // float_32
	private float _maxIntegralErrorLeft; // float_32
	private float _kpRight; // float_32
	private float _kiRight; // float_32
	private float _maxIntegralErrorRight; // float_32

	public float kpLeft { get { return _kpLeft; } set { _kpLeft = value; } }

	public float kiLeft { get { return _kiLeft; } set { _kiLeft = value; } }

	public float maxIntegralErrorLeft { get { return _maxIntegralErrorLeft; } set { _maxIntegralErrorLeft = value; } }

	public float kpRight { get { return _kpRight; } set { _kpRight = value; } }

	public float kiRight { get { return _kiRight; } set { _kiRight = value; } }

	public float maxIntegralErrorRight { get { return _maxIntegralErrorRight; } set { _maxIntegralErrorRight = value; } }


	/**** Constructors ****/

	public SetWheelControllerGains()
	{
	}

	public SetWheelControllerGains(float kpLeft,
		float kiLeft,
		float maxIntegralErrorLeft,
		float kpRight,
		float kiRight,
		float maxIntegralErrorRight)
	{
		this.kpLeft = kpLeft;
		this.kiLeft = kiLeft;
		this.maxIntegralErrorLeft = maxIntegralErrorLeft;
		this.kpRight = kpRight;
		this.kiRight = kiRight;
		this.maxIntegralErrorRight = maxIntegralErrorRight;
	}

	public SetWheelControllerGains(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetWheelControllerGains(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_kpLeft = reader.ReadSingle();
		_kiLeft = reader.ReadSingle();
		_maxIntegralErrorLeft = reader.ReadSingle();
		_kpRight = reader.ReadSingle();
		_kiRight = reader.ReadSingle();
		_maxIntegralErrorRight = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_kpLeft);
		writer.Write((float)_kiLeft);
		writer.Write((float)_maxIntegralErrorLeft);
		writer.Write((float)_kpRight);
		writer.Write((float)_kiRight);
		writer.Write((float)_maxIntegralErrorRight);
	}

	public int Size 
	{
		get {
			return 24;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetWheelControllerGains p = obj as SetWheelControllerGains;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetWheelControllerGains p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._kpLeft.Equals(p._kpLeft)
			&& this._kiLeft.Equals(p._kiLeft)
			&& this._maxIntegralErrorLeft.Equals(p._maxIntegralErrorLeft)
			&& this._kpRight.Equals(p._kpRight)
			&& this._kiRight.Equals(p._kiRight)
			&& this._maxIntegralErrorRight.Equals(p._maxIntegralErrorRight);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._kpLeft.GetHashCode();
			hash = hash * 23 + this._kiLeft.GetHashCode();
			hash = hash * 23 + this._maxIntegralErrorLeft.GetHashCode();
			hash = hash * 23 + this._kpRight.GetHashCode();
			hash = hash * 23 + this._kiRight.GetHashCode();
			hash = hash * 23 + this._maxIntegralErrorRight.GetHashCode();
			return hash;
		}
	}
}

public class SetHeadControllerGains
{
	private float _kp; // float_32
	private float _ki; // float_32
	private float _maxIntegralError; // float_32

	public float kp { get { return _kp; } set { _kp = value; } }

	public float ki { get { return _ki; } set { _ki = value; } }

	public float maxIntegralError { get { return _maxIntegralError; } set { _maxIntegralError = value; } }


	/**** Constructors ****/

	public SetHeadControllerGains()
	{
	}

	public SetHeadControllerGains(float kp,
		float ki,
		float maxIntegralError)
	{
		this.kp = kp;
		this.ki = ki;
		this.maxIntegralError = maxIntegralError;
	}

	public SetHeadControllerGains(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetHeadControllerGains(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_kp = reader.ReadSingle();
		_ki = reader.ReadSingle();
		_maxIntegralError = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_kp);
		writer.Write((float)_ki);
		writer.Write((float)_maxIntegralError);
	}

	public int Size 
	{
		get {
			return 12;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetHeadControllerGains p = obj as SetHeadControllerGains;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetHeadControllerGains p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._kp.Equals(p._kp)
			&& this._ki.Equals(p._ki)
			&& this._maxIntegralError.Equals(p._maxIntegralError);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._kp.GetHashCode();
			hash = hash * 23 + this._ki.GetHashCode();
			hash = hash * 23 + this._maxIntegralError.GetHashCode();
			return hash;
		}
	}
}

public class SetLiftControllerGains
{
	private float _kp; // float_32
	private float _kd; // float_32
	private float _ki; // float_32
	private float _maxIntegralError; // float_32

	public float kp { get { return _kp; } set { _kp = value; } }

	public float kd { get { return _kd; } set { _kd = value; } }

	public float ki { get { return _ki; } set { _ki = value; } }

	public float maxIntegralError { get { return _maxIntegralError; } set { _maxIntegralError = value; } }


	/**** Constructors ****/

	public SetLiftControllerGains()
	{
	}

	public SetLiftControllerGains(float kp,
		float kd,
		float ki,
		float maxIntegralError)
	{
		this.kp = kp;
		this.kd = kd;
		this.ki = ki;
		this.maxIntegralError = maxIntegralError;
	}

	public SetLiftControllerGains(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetLiftControllerGains(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_kp = reader.ReadSingle();
		_kd = reader.ReadSingle();
		_ki = reader.ReadSingle();
		_maxIntegralError = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_kp);
		writer.Write((float)_kd);
		writer.Write((float)_ki);
		writer.Write((float)_maxIntegralError);
	}

	public int Size 
	{
		get {
			return 16;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetLiftControllerGains p = obj as SetLiftControllerGains;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetLiftControllerGains p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._kp.Equals(p._kp)
			&& this._kd.Equals(p._kd)
			&& this._ki.Equals(p._ki)
			&& this._maxIntegralError.Equals(p._maxIntegralError);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._kp.GetHashCode();
			hash = hash * 23 + this._kd.GetHashCode();
			hash = hash * 23 + this._ki.GetHashCode();
			hash = hash * 23 + this._maxIntegralError.GetHashCode();
			return hash;
		}
	}
}

public class SelectNextSoundScheme
{
	/**** Constructors ****/

	public SelectNextSoundScheme()
	{
	}

	public SelectNextSoundScheme(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SelectNextSoundScheme(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class StartTestMode
{
	private int _p1; // int_32
	private int _p2; // int_32
	private int _p3; // int_32
	private byte _mode; // uint_8

	public int p1 { get { return _p1; } set { _p1 = value; } }

	public int p2 { get { return _p2; } set { _p2 = value; } }

	public int p3 { get { return _p3; } set { _p3 = value; } }

	public byte mode { get { return _mode; } set { _mode = value; } }


	/**** Constructors ****/

	public StartTestMode()
	{
	}

	public StartTestMode(int p1,
		int p2,
		int p3,
		byte mode)
	{
		this.p1 = p1;
		this.p2 = p2;
		this.p3 = p3;
		this.mode = mode;
	}

	public StartTestMode(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StartTestMode(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_p1 = reader.ReadInt32();
		_p2 = reader.ReadInt32();
		_p3 = reader.ReadInt32();
		_mode = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_p1);
		writer.Write((int)_p2);
		writer.Write((int)_p3);
		writer.Write((byte)_mode);
	}

	public int Size 
	{
		get {
			return 13;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		StartTestMode p = obj as StartTestMode;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(StartTestMode p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._p1.Equals(p._p1)
			&& this._p2.Equals(p._p2)
			&& this._p3.Equals(p._p3)
			&& this._mode.Equals(p._mode);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._p1.GetHashCode();
			hash = hash * 23 + this._p2.GetHashCode();
			hash = hash * 23 + this._p3.GetHashCode();
			hash = hash * 23 + this._mode.GetHashCode();
			return hash;
		}
	}
}

public class IMURequest
{
	private uint _length_ms; // uint_32

	public uint length_ms { get { return _length_ms; } set { _length_ms = value; } }


	/**** Constructors ****/

	public IMURequest()
	{
	}

	public IMURequest(uint length_ms)
	{
		this.length_ms = length_ms;
	}

	public IMURequest(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public IMURequest(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_length_ms = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_length_ms);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		IMURequest p = obj as IMURequest;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(IMURequest p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._length_ms.Equals(p._length_ms);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._length_ms.GetHashCode();
			return hash;
		}
	}
}

public class PlayAnimation
{
	private uint _numLoops; // uint_32
	private string _animationName; // string[uint_8]

	public uint numLoops { get { return _numLoops; } set { _numLoops = value; } }

	public string animationName
	{
		get {
			return _animationName;
		}
		set {
			if (!string.IsNullOrEmpty(value) && System.Text.Encoding.UTF8.GetByteCount(value) > 255) {
				throw new System.ArgumentException("animationName string is too long. Must decode to less than or equal to 255 bytes.", "value");
			}
			_animationName = value;
		}
	}


	/**** Constructors ****/

	public PlayAnimation()
	{
	}

	public PlayAnimation(uint numLoops,
		string animationName)
	{
		this.numLoops = numLoops;
		this.animationName = animationName;
	}

	public PlayAnimation(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public PlayAnimation(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_numLoops = reader.ReadUInt32();
		int _animationName_length = (int)reader.ReadByte();
		byte[] _animationName_bytes = reader.ReadBytes(_animationName_length);
		_animationName = System.Text.Encoding.UTF8.GetString(_animationName_bytes);
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_numLoops);
		if (_animationName != null) {
			byte[] _animationName_bytes = System.Text.Encoding.UTF8.GetBytes(_animationName);
			writer.Write((byte)_animationName_bytes.Length);
			writer.Write(_animationName_bytes);
		}
	}

	public int Size 
	{
		get {
			int result = 0;
			result += 4; // uint_32
			result += 1; // uint_8
			if (animationName != null) {
				result += System.Text.Encoding.UTF8.GetByteCount(animationName);
			}
			return result;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		PlayAnimation p = obj as PlayAnimation;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(PlayAnimation p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._numLoops.Equals(p._numLoops)
			&& this._animationName.Equals(p._animationName);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._numLoops.GetHashCode();
			hash = hash * 23 + this._animationName.GetHashCode();
			return hash;
		}
	}
}

public class ReadAnimationFile
{
	/**** Constructors ****/

	public ReadAnimationFile()
	{
	}

	public ReadAnimationFile(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public ReadAnimationFile(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class StartFaceTracking
{
	private byte _timeout_sec; // uint_8

	public byte timeout_sec { get { return _timeout_sec; } set { _timeout_sec = value; } }


	/**** Constructors ****/

	public StartFaceTracking()
	{
	}

	public StartFaceTracking(byte timeout_sec)
	{
		this.timeout_sec = timeout_sec;
	}

	public StartFaceTracking(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StartFaceTracking(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_timeout_sec = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((byte)_timeout_sec);
	}

	public int Size 
	{
		get {
			return 1;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		StartFaceTracking p = obj as StartFaceTracking;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(StartFaceTracking p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._timeout_sec.Equals(p._timeout_sec);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._timeout_sec.GetHashCode();
			return hash;
		}
	}
}

public class StopFaceTracking
{
	/**** Constructors ****/

	public StopFaceTracking()
	{
	}

	public StopFaceTracking(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StopFaceTracking(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class StartLookingForMarkers
{
	/**** Constructors ****/

	public StartLookingForMarkers()
	{
	}

	public StartLookingForMarkers(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StartLookingForMarkers(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class StopLookingForMarkers
{
	/**** Constructors ****/

	public StopLookingForMarkers()
	{
	}

	public StopLookingForMarkers(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public StopLookingForMarkers(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
	}

	public void Pack(System.IO.Stream stream)
	{
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
	}

	public int Size 
	{
		get {
			return 0;
		}
	}

}

public class SetVisionSystemParams
{
	private int _autoexposureOn; // int_32
	private float _exposureTime; // float_32
	private int _integerCountsIncrement; // int_32
	private float _minExposureTime; // float_32
	private float _maxExposureTime; // float_32
	private float _percentileToMakeHigh; // float_32
	private int _limitFramerate; // int_32
	private byte _highValue; // uint_8

	public int autoexposureOn { get { return _autoexposureOn; } set { _autoexposureOn = value; } }

	public float exposureTime { get { return _exposureTime; } set { _exposureTime = value; } }

	public int integerCountsIncrement { get { return _integerCountsIncrement; } set { _integerCountsIncrement = value; } }

	public float minExposureTime { get { return _minExposureTime; } set { _minExposureTime = value; } }

	public float maxExposureTime { get { return _maxExposureTime; } set { _maxExposureTime = value; } }

	public float percentileToMakeHigh { get { return _percentileToMakeHigh; } set { _percentileToMakeHigh = value; } }

	public int limitFramerate { get { return _limitFramerate; } set { _limitFramerate = value; } }

	public byte highValue { get { return _highValue; } set { _highValue = value; } }


	/**** Constructors ****/

	public SetVisionSystemParams()
	{
	}

	public SetVisionSystemParams(int autoexposureOn,
		float exposureTime,
		int integerCountsIncrement,
		float minExposureTime,
		float maxExposureTime,
		float percentileToMakeHigh,
		int limitFramerate,
		byte highValue)
	{
		this.autoexposureOn = autoexposureOn;
		this.exposureTime = exposureTime;
		this.integerCountsIncrement = integerCountsIncrement;
		this.minExposureTime = minExposureTime;
		this.maxExposureTime = maxExposureTime;
		this.percentileToMakeHigh = percentileToMakeHigh;
		this.limitFramerate = limitFramerate;
		this.highValue = highValue;
	}

	public SetVisionSystemParams(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetVisionSystemParams(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_autoexposureOn = reader.ReadInt32();
		_exposureTime = reader.ReadSingle();
		_integerCountsIncrement = reader.ReadInt32();
		_minExposureTime = reader.ReadSingle();
		_maxExposureTime = reader.ReadSingle();
		_percentileToMakeHigh = reader.ReadSingle();
		_limitFramerate = reader.ReadInt32();
		_highValue = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((int)_autoexposureOn);
		writer.Write((float)_exposureTime);
		writer.Write((int)_integerCountsIncrement);
		writer.Write((float)_minExposureTime);
		writer.Write((float)_maxExposureTime);
		writer.Write((float)_percentileToMakeHigh);
		writer.Write((int)_limitFramerate);
		writer.Write((byte)_highValue);
	}

	public int Size 
	{
		get {
			return 29;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetVisionSystemParams p = obj as SetVisionSystemParams;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetVisionSystemParams p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._autoexposureOn.Equals(p._autoexposureOn)
			&& this._exposureTime.Equals(p._exposureTime)
			&& this._integerCountsIncrement.Equals(p._integerCountsIncrement)
			&& this._minExposureTime.Equals(p._minExposureTime)
			&& this._maxExposureTime.Equals(p._maxExposureTime)
			&& this._percentileToMakeHigh.Equals(p._percentileToMakeHigh)
			&& this._limitFramerate.Equals(p._limitFramerate)
			&& this._highValue.Equals(p._highValue);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._autoexposureOn.GetHashCode();
			hash = hash * 23 + this._exposureTime.GetHashCode();
			hash = hash * 23 + this._integerCountsIncrement.GetHashCode();
			hash = hash * 23 + this._minExposureTime.GetHashCode();
			hash = hash * 23 + this._maxExposureTime.GetHashCode();
			hash = hash * 23 + this._percentileToMakeHigh.GetHashCode();
			hash = hash * 23 + this._limitFramerate.GetHashCode();
			hash = hash * 23 + this._highValue.GetHashCode();
			return hash;
		}
	}
}

public class SetFaceDetectParams
{
	private float _scaleFactor; // float_32
	private int _minNeighbors; // int_32
	private int _minObjectHeight; // int_32
	private int _minObjectWidth; // int_32
	private int _maxObjectHeight; // int_32
	private int _maxObjectWidth; // int_32

	public float scaleFactor { get { return _scaleFactor; } set { _scaleFactor = value; } }

	public int minNeighbors { get { return _minNeighbors; } set { _minNeighbors = value; } }

	public int minObjectHeight { get { return _minObjectHeight; } set { _minObjectHeight = value; } }

	public int minObjectWidth { get { return _minObjectWidth; } set { _minObjectWidth = value; } }

	public int maxObjectHeight { get { return _maxObjectHeight; } set { _maxObjectHeight = value; } }

	public int maxObjectWidth { get { return _maxObjectWidth; } set { _maxObjectWidth = value; } }


	/**** Constructors ****/

	public SetFaceDetectParams()
	{
	}

	public SetFaceDetectParams(float scaleFactor,
		int minNeighbors,
		int minObjectHeight,
		int minObjectWidth,
		int maxObjectHeight,
		int maxObjectWidth)
	{
		this.scaleFactor = scaleFactor;
		this.minNeighbors = minNeighbors;
		this.minObjectHeight = minObjectHeight;
		this.minObjectWidth = minObjectWidth;
		this.maxObjectHeight = maxObjectHeight;
		this.maxObjectWidth = maxObjectWidth;
	}

	public SetFaceDetectParams(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetFaceDetectParams(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_scaleFactor = reader.ReadSingle();
		_minNeighbors = reader.ReadInt32();
		_minObjectHeight = reader.ReadInt32();
		_minObjectWidth = reader.ReadInt32();
		_maxObjectHeight = reader.ReadInt32();
		_maxObjectWidth = reader.ReadInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((float)_scaleFactor);
		writer.Write((int)_minNeighbors);
		writer.Write((int)_minObjectHeight);
		writer.Write((int)_minObjectWidth);
		writer.Write((int)_maxObjectHeight);
		writer.Write((int)_maxObjectWidth);
	}

	public int Size 
	{
		get {
			return 24;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetFaceDetectParams p = obj as SetFaceDetectParams;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetFaceDetectParams p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._scaleFactor.Equals(p._scaleFactor)
			&& this._minNeighbors.Equals(p._minNeighbors)
			&& this._minObjectHeight.Equals(p._minObjectHeight)
			&& this._minObjectWidth.Equals(p._minObjectWidth)
			&& this._maxObjectHeight.Equals(p._maxObjectHeight)
			&& this._maxObjectWidth.Equals(p._maxObjectWidth);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._scaleFactor.GetHashCode();
			hash = hash * 23 + this._minNeighbors.GetHashCode();
			hash = hash * 23 + this._minObjectHeight.GetHashCode();
			hash = hash * 23 + this._minObjectWidth.GetHashCode();
			hash = hash * 23 + this._maxObjectHeight.GetHashCode();
			hash = hash * 23 + this._maxObjectWidth.GetHashCode();
			return hash;
		}
	}
}

public class SetActiveObjectLEDs
{
	private uint _objectID; // uint_32
	private uint _onColor; // uint_32
	private uint _offColor; // uint_32
	private uint _onPeriod_ms; // uint_32
	private uint _offPeriod_ms; // uint_32
	private uint _transitionOnPeriod_ms; // uint_32
	private uint _transitionOffPeriod_ms; // uint_32
	private float _relativeToX; // float_32
	private float _relativeToY; // float_32
	private byte _whichLEDs; // uint_8
	private byte _makeRelative; // uint_8
	private byte _turnOffUnspecifiedLEDs; // uint_8
	private byte _robotID; // uint_8

	public uint objectID { get { return _objectID; } set { _objectID = value; } }

	public uint onColor { get { return _onColor; } set { _onColor = value; } }

	public uint offColor { get { return _offColor; } set { _offColor = value; } }

	public uint onPeriod_ms { get { return _onPeriod_ms; } set { _onPeriod_ms = value; } }

	public uint offPeriod_ms { get { return _offPeriod_ms; } set { _offPeriod_ms = value; } }

	public uint transitionOnPeriod_ms { get { return _transitionOnPeriod_ms; } set { _transitionOnPeriod_ms = value; } }

	public uint transitionOffPeriod_ms { get { return _transitionOffPeriod_ms; } set { _transitionOffPeriod_ms = value; } }

	public float relativeToX { get { return _relativeToX; } set { _relativeToX = value; } }

	public float relativeToY { get { return _relativeToY; } set { _relativeToY = value; } }

	public byte whichLEDs { get { return _whichLEDs; } set { _whichLEDs = value; } }

	public byte makeRelative { get { return _makeRelative; } set { _makeRelative = value; } }

	public byte turnOffUnspecifiedLEDs { get { return _turnOffUnspecifiedLEDs; } set { _turnOffUnspecifiedLEDs = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public SetActiveObjectLEDs()
	{
	}

	public SetActiveObjectLEDs(uint objectID,
		uint onColor,
		uint offColor,
		uint onPeriod_ms,
		uint offPeriod_ms,
		uint transitionOnPeriod_ms,
		uint transitionOffPeriod_ms,
		float relativeToX,
		float relativeToY,
		byte whichLEDs,
		byte makeRelative,
		byte turnOffUnspecifiedLEDs,
		byte robotID)
	{
		this.objectID = objectID;
		this.onColor = onColor;
		this.offColor = offColor;
		this.onPeriod_ms = onPeriod_ms;
		this.offPeriod_ms = offPeriod_ms;
		this.transitionOnPeriod_ms = transitionOnPeriod_ms;
		this.transitionOffPeriod_ms = transitionOffPeriod_ms;
		this.relativeToX = relativeToX;
		this.relativeToY = relativeToY;
		this.whichLEDs = whichLEDs;
		this.makeRelative = makeRelative;
		this.turnOffUnspecifiedLEDs = turnOffUnspecifiedLEDs;
		this.robotID = robotID;
	}

	public SetActiveObjectLEDs(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetActiveObjectLEDs(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadUInt32();
		_onColor = reader.ReadUInt32();
		_offColor = reader.ReadUInt32();
		_onPeriod_ms = reader.ReadUInt32();
		_offPeriod_ms = reader.ReadUInt32();
		_transitionOnPeriod_ms = reader.ReadUInt32();
		_transitionOffPeriod_ms = reader.ReadUInt32();
		_relativeToX = reader.ReadSingle();
		_relativeToY = reader.ReadSingle();
		_whichLEDs = reader.ReadByte();
		_makeRelative = reader.ReadByte();
		_turnOffUnspecifiedLEDs = reader.ReadByte();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_objectID);
		writer.Write((uint)_onColor);
		writer.Write((uint)_offColor);
		writer.Write((uint)_onPeriod_ms);
		writer.Write((uint)_offPeriod_ms);
		writer.Write((uint)_transitionOnPeriod_ms);
		writer.Write((uint)_transitionOffPeriod_ms);
		writer.Write((float)_relativeToX);
		writer.Write((float)_relativeToY);
		writer.Write((byte)_whichLEDs);
		writer.Write((byte)_makeRelative);
		writer.Write((byte)_turnOffUnspecifiedLEDs);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 40;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetActiveObjectLEDs p = obj as SetActiveObjectLEDs;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetActiveObjectLEDs p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& this._onColor.Equals(p._onColor)
			&& this._offColor.Equals(p._offColor)
			&& this._onPeriod_ms.Equals(p._onPeriod_ms)
			&& this._offPeriod_ms.Equals(p._offPeriod_ms)
			&& this._transitionOnPeriod_ms.Equals(p._transitionOnPeriod_ms)
			&& this._transitionOffPeriod_ms.Equals(p._transitionOffPeriod_ms)
			&& this._relativeToX.Equals(p._relativeToX)
			&& this._relativeToY.Equals(p._relativeToY)
			&& this._whichLEDs.Equals(p._whichLEDs)
			&& this._makeRelative.Equals(p._makeRelative)
			&& this._turnOffUnspecifiedLEDs.Equals(p._turnOffUnspecifiedLEDs)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._onColor.GetHashCode();
			hash = hash * 23 + this._offColor.GetHashCode();
			hash = hash * 23 + this._onPeriod_ms.GetHashCode();
			hash = hash * 23 + this._offPeriod_ms.GetHashCode();
			hash = hash * 23 + this._transitionOnPeriod_ms.GetHashCode();
			hash = hash * 23 + this._transitionOffPeriod_ms.GetHashCode();
			hash = hash * 23 + this._relativeToX.GetHashCode();
			hash = hash * 23 + this._relativeToY.GetHashCode();
			hash = hash * 23 + this._whichLEDs.GetHashCode();
			hash = hash * 23 + this._makeRelative.GetHashCode();
			hash = hash * 23 + this._turnOffUnspecifiedLEDs.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class SetAllActiveObjectLEDs
{
	private uint _objectID; // uint_32
	private uint[] _onColor; // uint_32[8]
	private uint[] _offColor; // uint_32[8]
	private uint[] _onPeriod_ms; // uint_32[8]
	private uint[] _offPeriod_ms; // uint_32[8]
	private uint[] _transitionOnPeriod_ms; // uint_32[8]
	private uint[] _transitionOffPeriod_ms; // uint_32[8]
	private float _relativeToX; // float_32
	private float _relativeToY; // float_32
	private byte _makeRelative; // uint_8
	private byte _robotID; // uint_8

	public uint objectID { get { return _objectID; } set { _objectID = value; } }

	public uint[] onColor
	{
		get {
			return _onColor;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("onColor fixed-length array is null. Must have a length of 8.", "value");
			}
			if (value.Length != 8) {
				throw new System.ArgumentException("onColor fixed-length array is the wrong size. Must have a length of 8.", "value");
			}
			_onColor = value;
		}
	}

	public uint[] offColor
	{
		get {
			return _offColor;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("offColor fixed-length array is null. Must have a length of 8.", "value");
			}
			if (value.Length != 8) {
				throw new System.ArgumentException("offColor fixed-length array is the wrong size. Must have a length of 8.", "value");
			}
			_offColor = value;
		}
	}

	public uint[] onPeriod_ms
	{
		get {
			return _onPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("onPeriod_ms fixed-length array is null. Must have a length of 8.", "value");
			}
			if (value.Length != 8) {
				throw new System.ArgumentException("onPeriod_ms fixed-length array is the wrong size. Must have a length of 8.", "value");
			}
			_onPeriod_ms = value;
		}
	}

	public uint[] offPeriod_ms
	{
		get {
			return _offPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("offPeriod_ms fixed-length array is null. Must have a length of 8.", "value");
			}
			if (value.Length != 8) {
				throw new System.ArgumentException("offPeriod_ms fixed-length array is the wrong size. Must have a length of 8.", "value");
			}
			_offPeriod_ms = value;
		}
	}

	public uint[] transitionOnPeriod_ms
	{
		get {
			return _transitionOnPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("transitionOnPeriod_ms fixed-length array is null. Must have a length of 8.", "value");
			}
			if (value.Length != 8) {
				throw new System.ArgumentException("transitionOnPeriod_ms fixed-length array is the wrong size. Must have a length of 8.", "value");
			}
			_transitionOnPeriod_ms = value;
		}
	}

	public uint[] transitionOffPeriod_ms
	{
		get {
			return _transitionOffPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("transitionOffPeriod_ms fixed-length array is null. Must have a length of 8.", "value");
			}
			if (value.Length != 8) {
				throw new System.ArgumentException("transitionOffPeriod_ms fixed-length array is the wrong size. Must have a length of 8.", "value");
			}
			_transitionOffPeriod_ms = value;
		}
	}

	public float relativeToX { get { return _relativeToX; } set { _relativeToX = value; } }

	public float relativeToY { get { return _relativeToY; } set { _relativeToY = value; } }

	public byte makeRelative { get { return _makeRelative; } set { _makeRelative = value; } }

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public SetAllActiveObjectLEDs()
	{
		this.onColor = new uint[8];
		this.offColor = new uint[8];
		this.onPeriod_ms = new uint[8];
		this.offPeriod_ms = new uint[8];
		this.transitionOnPeriod_ms = new uint[8];
		this.transitionOffPeriod_ms = new uint[8];
	}

	public SetAllActiveObjectLEDs(uint objectID,
		uint[] onColor,
		uint[] offColor,
		uint[] onPeriod_ms,
		uint[] offPeriod_ms,
		uint[] transitionOnPeriod_ms,
		uint[] transitionOffPeriod_ms,
		float relativeToX,
		float relativeToY,
		byte makeRelative,
		byte robotID)
	{
		this.objectID = objectID;
		this.onColor = onColor;
		this.offColor = offColor;
		this.onPeriod_ms = onPeriod_ms;
		this.offPeriod_ms = offPeriod_ms;
		this.transitionOnPeriod_ms = transitionOnPeriod_ms;
		this.transitionOffPeriod_ms = transitionOffPeriod_ms;
		this.relativeToX = relativeToX;
		this.relativeToY = relativeToY;
		this.makeRelative = makeRelative;
		this.robotID = robotID;
	}

	public SetAllActiveObjectLEDs(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetAllActiveObjectLEDs(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_objectID = reader.ReadUInt32();
		_onColor = new uint[8];
		for (int i = 0; i < 8; ++i) {
			_onColor[i] = reader.ReadUInt32();
		}
		_offColor = new uint[8];
		for (int i = 0; i < 8; ++i) {
			_offColor[i] = reader.ReadUInt32();
		}
		_onPeriod_ms = new uint[8];
		for (int i = 0; i < 8; ++i) {
			_onPeriod_ms[i] = reader.ReadUInt32();
		}
		_offPeriod_ms = new uint[8];
		for (int i = 0; i < 8; ++i) {
			_offPeriod_ms[i] = reader.ReadUInt32();
		}
		_transitionOnPeriod_ms = new uint[8];
		for (int i = 0; i < 8; ++i) {
			_transitionOnPeriod_ms[i] = reader.ReadUInt32();
		}
		_transitionOffPeriod_ms = new uint[8];
		for (int i = 0; i < 8; ++i) {
			_transitionOffPeriod_ms[i] = reader.ReadUInt32();
		}
		_relativeToX = reader.ReadSingle();
		_relativeToY = reader.ReadSingle();
		_makeRelative = reader.ReadByte();
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_objectID);
		for (int i = 0; i < 8; ++i) {
			writer.Write((uint)_onColor[i]);
		}
		for (int i = 0; i < 8; ++i) {
			writer.Write((uint)_offColor[i]);
		}
		for (int i = 0; i < 8; ++i) {
			writer.Write((uint)_onPeriod_ms[i]);
		}
		for (int i = 0; i < 8; ++i) {
			writer.Write((uint)_offPeriod_ms[i]);
		}
		for (int i = 0; i < 8; ++i) {
			writer.Write((uint)_transitionOnPeriod_ms[i]);
		}
		for (int i = 0; i < 8; ++i) {
			writer.Write((uint)_transitionOffPeriod_ms[i]);
		}
		writer.Write((float)_relativeToX);
		writer.Write((float)_relativeToY);
		writer.Write((byte)_makeRelative);
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 206;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetAllActiveObjectLEDs p = obj as SetAllActiveObjectLEDs;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetAllActiveObjectLEDs p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._objectID.Equals(p._objectID)
			&& ArrayEquals<uint>(this._onColor,p._onColor)
			&& ArrayEquals<uint>(this._offColor,p._offColor)
			&& ArrayEquals<uint>(this._onPeriod_ms,p._onPeriod_ms)
			&& ArrayEquals<uint>(this._offPeriod_ms,p._offPeriod_ms)
			&& ArrayEquals<uint>(this._transitionOnPeriod_ms,p._transitionOnPeriod_ms)
			&& ArrayEquals<uint>(this._transitionOffPeriod_ms,p._transitionOffPeriod_ms)
			&& this._relativeToX.Equals(p._relativeToX)
			&& this._relativeToY.Equals(p._relativeToY)
			&& this._makeRelative.Equals(p._makeRelative)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._objectID.GetHashCode();
			hash = hash * 23 + this._onColor.GetHashCode();
			hash = hash * 23 + this._offColor.GetHashCode();
			hash = hash * 23 + this._onPeriod_ms.GetHashCode();
			hash = hash * 23 + this._offPeriod_ms.GetHashCode();
			hash = hash * 23 + this._transitionOnPeriod_ms.GetHashCode();
			hash = hash * 23 + this._transitionOffPeriod_ms.GetHashCode();
			hash = hash * 23 + this._relativeToX.GetHashCode();
			hash = hash * 23 + this._relativeToY.GetHashCode();
			hash = hash * 23 + this._makeRelative.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class SetBackpackLEDs
{
	private uint[] _onColor; // uint_32[5]
	private uint[] _offColor; // uint_32[5]
	private uint[] _onPeriod_ms; // uint_32[5]
	private uint[] _offPeriod_ms; // uint_32[5]
	private uint[] _transitionOnPeriod_ms; // uint_32[5]
	private uint[] _transitionOffPeriod_ms; // uint_32[5]
	private byte _robotID; // uint_8

	public uint[] onColor
	{
		get {
			return _onColor;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("onColor fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("onColor fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_onColor = value;
		}
	}

	public uint[] offColor
	{
		get {
			return _offColor;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("offColor fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("offColor fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_offColor = value;
		}
	}

	public uint[] onPeriod_ms
	{
		get {
			return _onPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("onPeriod_ms fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("onPeriod_ms fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_onPeriod_ms = value;
		}
	}

	public uint[] offPeriod_ms
	{
		get {
			return _offPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("offPeriod_ms fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("offPeriod_ms fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_offPeriod_ms = value;
		}
	}

	public uint[] transitionOnPeriod_ms
	{
		get {
			return _transitionOnPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("transitionOnPeriod_ms fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("transitionOnPeriod_ms fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_transitionOnPeriod_ms = value;
		}
	}

	public uint[] transitionOffPeriod_ms
	{
		get {
			return _transitionOffPeriod_ms;
		}
		set {
			if (value == null) {
				throw new System.ArgumentException("transitionOffPeriod_ms fixed-length array is null. Must have a length of 5.", "value");
			}
			if (value.Length != 5) {
				throw new System.ArgumentException("transitionOffPeriod_ms fixed-length array is the wrong size. Must have a length of 5.", "value");
			}
			_transitionOffPeriod_ms = value;
		}
	}

	public byte robotID { get { return _robotID; } set { _robotID = value; } }


	/**** Constructors ****/

	public SetBackpackLEDs()
	{
		this.onColor = new uint[5];
		this.offColor = new uint[5];
		this.onPeriod_ms = new uint[5];
		this.offPeriod_ms = new uint[5];
		this.transitionOnPeriod_ms = new uint[5];
		this.transitionOffPeriod_ms = new uint[5];
	}

	public SetBackpackLEDs(uint[] onColor,
		uint[] offColor,
		uint[] onPeriod_ms,
		uint[] offPeriod_ms,
		uint[] transitionOnPeriod_ms,
		uint[] transitionOffPeriod_ms,
		byte robotID)
	{
		this.onColor = onColor;
		this.offColor = offColor;
		this.onPeriod_ms = onPeriod_ms;
		this.offPeriod_ms = offPeriod_ms;
		this.transitionOnPeriod_ms = transitionOnPeriod_ms;
		this.transitionOffPeriod_ms = transitionOffPeriod_ms;
		this.robotID = robotID;
	}

	public SetBackpackLEDs(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public SetBackpackLEDs(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_onColor = new uint[5];
		for (int i = 0; i < 5; ++i) {
			_onColor[i] = reader.ReadUInt32();
		}
		_offColor = new uint[5];
		for (int i = 0; i < 5; ++i) {
			_offColor[i] = reader.ReadUInt32();
		}
		_onPeriod_ms = new uint[5];
		for (int i = 0; i < 5; ++i) {
			_onPeriod_ms[i] = reader.ReadUInt32();
		}
		_offPeriod_ms = new uint[5];
		for (int i = 0; i < 5; ++i) {
			_offPeriod_ms[i] = reader.ReadUInt32();
		}
		_transitionOnPeriod_ms = new uint[5];
		for (int i = 0; i < 5; ++i) {
			_transitionOnPeriod_ms[i] = reader.ReadUInt32();
		}
		_transitionOffPeriod_ms = new uint[5];
		for (int i = 0; i < 5; ++i) {
			_transitionOffPeriod_ms[i] = reader.ReadUInt32();
		}
		_robotID = reader.ReadByte();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		for (int i = 0; i < 5; ++i) {
			writer.Write((uint)_onColor[i]);
		}
		for (int i = 0; i < 5; ++i) {
			writer.Write((uint)_offColor[i]);
		}
		for (int i = 0; i < 5; ++i) {
			writer.Write((uint)_onPeriod_ms[i]);
		}
		for (int i = 0; i < 5; ++i) {
			writer.Write((uint)_offPeriod_ms[i]);
		}
		for (int i = 0; i < 5; ++i) {
			writer.Write((uint)_transitionOnPeriod_ms[i]);
		}
		for (int i = 0; i < 5; ++i) {
			writer.Write((uint)_transitionOffPeriod_ms[i]);
		}
		writer.Write((byte)_robotID);
	}

	public int Size 
	{
		get {
			return 121;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		SetBackpackLEDs p = obj as SetBackpackLEDs;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(SetBackpackLEDs p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return ArrayEquals<uint>(this._onColor,p._onColor)
			&& ArrayEquals<uint>(this._offColor,p._offColor)
			&& ArrayEquals<uint>(this._onPeriod_ms,p._onPeriod_ms)
			&& ArrayEquals<uint>(this._offPeriod_ms,p._offPeriod_ms)
			&& ArrayEquals<uint>(this._transitionOnPeriod_ms,p._transitionOnPeriod_ms)
			&& ArrayEquals<uint>(this._transitionOffPeriod_ms,p._transitionOffPeriod_ms)
			&& this._robotID.Equals(p._robotID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._onColor.GetHashCode();
			hash = hash * 23 + this._offColor.GetHashCode();
			hash = hash * 23 + this._onPeriod_ms.GetHashCode();
			hash = hash * 23 + this._offPeriod_ms.GetHashCode();
			hash = hash * 23 + this._transitionOnPeriod_ms.GetHashCode();
			hash = hash * 23 + this._transitionOffPeriod_ms.GetHashCode();
			hash = hash * 23 + this._robotID.GetHashCode();
			return hash;
		}
	}
}

public class VisualizeQuad
{
	private uint _quadID; // uint_32
	private uint _color; // uint_32
	private float _xUpperLeft; // float_32
	private float _yUpperLeft; // float_32
	private float _zUpperLeft; // float_32
	private float _xLowerLeft; // float_32
	private float _yLowerLeft; // float_32
	private float _zLowerLeft; // float_32
	private float _xUpperRight; // float_32
	private float _yUpperRight; // float_32
	private float _zUpperRight; // float_32
	private float _xLowerRight; // float_32
	private float _yLowerRight; // float_32
	private float _zLowerRight; // float_32

	public uint quadID { get { return _quadID; } set { _quadID = value; } }

	public uint color { get { return _color; } set { _color = value; } }

	public float xUpperLeft { get { return _xUpperLeft; } set { _xUpperLeft = value; } }

	public float yUpperLeft { get { return _yUpperLeft; } set { _yUpperLeft = value; } }

	public float zUpperLeft { get { return _zUpperLeft; } set { _zUpperLeft = value; } }

	public float xLowerLeft { get { return _xLowerLeft; } set { _xLowerLeft = value; } }

	public float yLowerLeft { get { return _yLowerLeft; } set { _yLowerLeft = value; } }

	public float zLowerLeft { get { return _zLowerLeft; } set { _zLowerLeft = value; } }

	public float xUpperRight { get { return _xUpperRight; } set { _xUpperRight = value; } }

	public float yUpperRight { get { return _yUpperRight; } set { _yUpperRight = value; } }

	public float zUpperRight { get { return _zUpperRight; } set { _zUpperRight = value; } }

	public float xLowerRight { get { return _xLowerRight; } set { _xLowerRight = value; } }

	public float yLowerRight { get { return _yLowerRight; } set { _yLowerRight = value; } }

	public float zLowerRight { get { return _zLowerRight; } set { _zLowerRight = value; } }


	/**** Constructors ****/

	public VisualizeQuad()
	{
	}

	public VisualizeQuad(uint quadID,
		uint color,
		float xUpperLeft,
		float yUpperLeft,
		float zUpperLeft,
		float xLowerLeft,
		float yLowerLeft,
		float zLowerLeft,
		float xUpperRight,
		float yUpperRight,
		float zUpperRight,
		float xLowerRight,
		float yLowerRight,
		float zLowerRight)
	{
		this.quadID = quadID;
		this.color = color;
		this.xUpperLeft = xUpperLeft;
		this.yUpperLeft = yUpperLeft;
		this.zUpperLeft = zUpperLeft;
		this.xLowerLeft = xLowerLeft;
		this.yLowerLeft = yLowerLeft;
		this.zLowerLeft = zLowerLeft;
		this.xUpperRight = xUpperRight;
		this.yUpperRight = yUpperRight;
		this.zUpperRight = zUpperRight;
		this.xLowerRight = xLowerRight;
		this.yLowerRight = yLowerRight;
		this.zLowerRight = zLowerRight;
	}

	public VisualizeQuad(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public VisualizeQuad(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_quadID = reader.ReadUInt32();
		_color = reader.ReadUInt32();
		_xUpperLeft = reader.ReadSingle();
		_yUpperLeft = reader.ReadSingle();
		_zUpperLeft = reader.ReadSingle();
		_xLowerLeft = reader.ReadSingle();
		_yLowerLeft = reader.ReadSingle();
		_zLowerLeft = reader.ReadSingle();
		_xUpperRight = reader.ReadSingle();
		_yUpperRight = reader.ReadSingle();
		_zUpperRight = reader.ReadSingle();
		_xLowerRight = reader.ReadSingle();
		_yLowerRight = reader.ReadSingle();
		_zLowerRight = reader.ReadSingle();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_quadID);
		writer.Write((uint)_color);
		writer.Write((float)_xUpperLeft);
		writer.Write((float)_yUpperLeft);
		writer.Write((float)_zUpperLeft);
		writer.Write((float)_xLowerLeft);
		writer.Write((float)_yLowerLeft);
		writer.Write((float)_zLowerLeft);
		writer.Write((float)_xUpperRight);
		writer.Write((float)_yUpperRight);
		writer.Write((float)_zUpperRight);
		writer.Write((float)_xLowerRight);
		writer.Write((float)_yLowerRight);
		writer.Write((float)_zLowerRight);
	}

	public int Size 
	{
		get {
			return 56;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		VisualizeQuad p = obj as VisualizeQuad;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(VisualizeQuad p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._quadID.Equals(p._quadID)
			&& this._color.Equals(p._color)
			&& this._xUpperLeft.Equals(p._xUpperLeft)
			&& this._yUpperLeft.Equals(p._yUpperLeft)
			&& this._zUpperLeft.Equals(p._zUpperLeft)
			&& this._xLowerLeft.Equals(p._xLowerLeft)
			&& this._yLowerLeft.Equals(p._yLowerLeft)
			&& this._zLowerLeft.Equals(p._zLowerLeft)
			&& this._xUpperRight.Equals(p._xUpperRight)
			&& this._yUpperRight.Equals(p._yUpperRight)
			&& this._zUpperRight.Equals(p._zUpperRight)
			&& this._xLowerRight.Equals(p._xLowerRight)
			&& this._yLowerRight.Equals(p._yLowerRight)
			&& this._zLowerRight.Equals(p._zLowerRight);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._quadID.GetHashCode();
			hash = hash * 23 + this._color.GetHashCode();
			hash = hash * 23 + this._xUpperLeft.GetHashCode();
			hash = hash * 23 + this._yUpperLeft.GetHashCode();
			hash = hash * 23 + this._zUpperLeft.GetHashCode();
			hash = hash * 23 + this._xLowerLeft.GetHashCode();
			hash = hash * 23 + this._yLowerLeft.GetHashCode();
			hash = hash * 23 + this._zLowerLeft.GetHashCode();
			hash = hash * 23 + this._xUpperRight.GetHashCode();
			hash = hash * 23 + this._yUpperRight.GetHashCode();
			hash = hash * 23 + this._zUpperRight.GetHashCode();
			hash = hash * 23 + this._xLowerRight.GetHashCode();
			hash = hash * 23 + this._yLowerRight.GetHashCode();
			hash = hash * 23 + this._zLowerRight.GetHashCode();
			return hash;
		}
	}
}

public class EraseQuad
{
	private uint _quadID; // uint_32

	public uint quadID { get { return _quadID; } set { _quadID = value; } }


	/**** Constructors ****/

	public EraseQuad()
	{
	}

	public EraseQuad(uint quadID)
	{
		this.quadID = quadID;
	}

	public EraseQuad(System.IO.Stream stream)
	{
		Unpack(stream);
	}

	public EraseQuad(System.IO.BinaryReader reader)
	{
		Unpack(reader);
	}

	public void Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Unpack(reader);
	}

	public void Unpack(System.IO.BinaryReader reader)
	{
		_quadID = reader.ReadUInt32();
	}

	public void Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		Pack(writer);
	}

	public void Pack(System.IO.BinaryWriter writer)
	{
		writer.Write((uint)_quadID);
	}

	public int Size 
	{
		get {
			return 4;
		}
	}

	public static bool ArrayEquals<T>(T[] a1, T[] a2) {
		if (ReferenceEquals(a1, a2))
			return true;

		if (a1 == null || a2 == null)
			return false;

		if (a1.Length != a2.Length)
			return false;

		for (int i = 0; i < a1.Length; i++)
		{
			if (!a1[i].Equals(a2[i])) {
				return false;
			}
		}
		return true;
	}

	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		EraseQuad p = obj as EraseQuad;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(EraseQuad p)
	{
		if ((object) p == null)
		{
			return false;
		}

		return this._quadID.Equals(p._quadID);
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._quadID.GetHashCode();
			return hash;
		}
	}
}

public class Message {
	public enum Tag {
		Ping,	//0
		ConnectToRobot,	//1
		ConnectToUiDevice,	//2
		DisconnectFromUiDevice,	//3
		ForceAddRobot,	//4
		StartEngine,	//5
		DriveWheels,	//6
		TurnInPlace,	//7
		FaceObject,	//8
		MoveHead,	//9
		MoveLift,	//10
		SetLiftHeight,	//11
		SetHeadAngle,	//12
		TrackHeadToObject,	//13
		StopAllMotors,	//14
		ImageRequest,	//15
		SetRobotImageSendMode,	//16
		SaveImages,	//17
		SaveRobotState,	//18
		EnableDisplay,	//19
		SetHeadlights,	//20
		GotoPose,	//21
		PlaceObjectOnGround,	//22
		PlaceObjectOnGroundHere,	//23
		ExecuteTestPlan,	//24
		SelectNextObject,	//25
		PickAndPlaceObject,	//26
		TraverseObject,	//27
		SetRobotCarryingObject,	//28
		ClearAllBlocks,	//29
		VisionWhileMoving,	//30
		ExecuteBehavior,	//31
		SetBehaviorState,	//32
		AbortPath,	//33
		AbortAll,	//34
		CancelAction,	//35
		DrawPoseMarker,	//36
		ErasePoseMarker,	//37
		SetWheelControllerGains,	//38
		SetHeadControllerGains,	//39
		SetLiftControllerGains,	//40
		SelectNextSoundScheme,	//41
		StartTestMode,	//42
		IMURequest,	//43
		PlayAnimation,	//44
		ReadAnimationFile,	//45
		StartFaceTracking,	//46
		StopFaceTracking,	//47
		StartLookingForMarkers,	//48
		StopLookingForMarkers,	//49
		SetVisionSystemParams,	//50
		SetFaceDetectParams,	//51
		SetActiveObjectLEDs,	//52
		SetAllActiveObjectLEDs,	//53
		SetBackpackLEDs,	//54
		VisualizeQuad,	//55
		EraseQuad,	//56
		INVALID
	};

	private Tag _tag = Tag.INVALID;

	public Tag GetTag() { return _tag; }

	private object _state = null;

	public Anki.Cozmo.U2G.Ping Ping
	{
		get {
			if (_tag != Tag.Ping) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"Ping\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.Ping)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.Ping : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ConnectToRobot ConnectToRobot
	{
		get {
			if (_tag != Tag.ConnectToRobot) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ConnectToRobot\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ConnectToRobot)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ConnectToRobot : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ConnectToUiDevice ConnectToUiDevice
	{
		get {
			if (_tag != Tag.ConnectToUiDevice) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ConnectToUiDevice\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ConnectToUiDevice)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ConnectToUiDevice : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.DisconnectFromUiDevice DisconnectFromUiDevice
	{
		get {
			if (_tag != Tag.DisconnectFromUiDevice) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DisconnectFromUiDevice\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.DisconnectFromUiDevice)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DisconnectFromUiDevice : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ForceAddRobot ForceAddRobot
	{
		get {
			if (_tag != Tag.ForceAddRobot) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ForceAddRobot\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ForceAddRobot)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ForceAddRobot : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StartEngine StartEngine
	{
		get {
			if (_tag != Tag.StartEngine) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartEngine\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StartEngine)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartEngine : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.DriveWheels DriveWheels
	{
		get {
			if (_tag != Tag.DriveWheels) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DriveWheels\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.DriveWheels)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DriveWheels : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.TurnInPlace TurnInPlace
	{
		get {
			if (_tag != Tag.TurnInPlace) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"TurnInPlace\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.TurnInPlace)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.TurnInPlace : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.FaceObject FaceObject
	{
		get {
			if (_tag != Tag.FaceObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"FaceObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.FaceObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.FaceObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.MoveHead MoveHead
	{
		get {
			if (_tag != Tag.MoveHead) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"MoveHead\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.MoveHead)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.MoveHead : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.MoveLift MoveLift
	{
		get {
			if (_tag != Tag.MoveLift) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"MoveLift\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.MoveLift)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.MoveLift : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetLiftHeight SetLiftHeight
	{
		get {
			if (_tag != Tag.SetLiftHeight) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetLiftHeight\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetLiftHeight)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetLiftHeight : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetHeadAngle SetHeadAngle
	{
		get {
			if (_tag != Tag.SetHeadAngle) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetHeadAngle\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetHeadAngle)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetHeadAngle : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.TrackHeadToObject TrackHeadToObject
	{
		get {
			if (_tag != Tag.TrackHeadToObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"TrackHeadToObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.TrackHeadToObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.TrackHeadToObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StopAllMotors StopAllMotors
	{
		get {
			if (_tag != Tag.StopAllMotors) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopAllMotors\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StopAllMotors)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopAllMotors : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ImageRequest ImageRequest
	{
		get {
			if (_tag != Tag.ImageRequest) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ImageRequest\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ImageRequest)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ImageRequest : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetRobotImageSendMode SetRobotImageSendMode
	{
		get {
			if (_tag != Tag.SetRobotImageSendMode) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetRobotImageSendMode\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetRobotImageSendMode)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetRobotImageSendMode : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SaveImages SaveImages
	{
		get {
			if (_tag != Tag.SaveImages) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SaveImages\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SaveImages)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SaveImages : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SaveRobotState SaveRobotState
	{
		get {
			if (_tag != Tag.SaveRobotState) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SaveRobotState\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SaveRobotState)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SaveRobotState : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.EnableDisplay EnableDisplay
	{
		get {
			if (_tag != Tag.EnableDisplay) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"EnableDisplay\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.EnableDisplay)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.EnableDisplay : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetHeadlights SetHeadlights
	{
		get {
			if (_tag != Tag.SetHeadlights) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetHeadlights\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetHeadlights)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetHeadlights : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.GotoPose GotoPose
	{
		get {
			if (_tag != Tag.GotoPose) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"GotoPose\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.GotoPose)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.GotoPose : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.PlaceObjectOnGround PlaceObjectOnGround
	{
		get {
			if (_tag != Tag.PlaceObjectOnGround) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlaceObjectOnGround\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.PlaceObjectOnGround)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlaceObjectOnGround : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.PlaceObjectOnGroundHere PlaceObjectOnGroundHere
	{
		get {
			if (_tag != Tag.PlaceObjectOnGroundHere) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlaceObjectOnGroundHere\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.PlaceObjectOnGroundHere)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlaceObjectOnGroundHere : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ExecuteTestPlan ExecuteTestPlan
	{
		get {
			if (_tag != Tag.ExecuteTestPlan) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ExecuteTestPlan\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ExecuteTestPlan)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ExecuteTestPlan : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SelectNextObject SelectNextObject
	{
		get {
			if (_tag != Tag.SelectNextObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SelectNextObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SelectNextObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SelectNextObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.PickAndPlaceObject PickAndPlaceObject
	{
		get {
			if (_tag != Tag.PickAndPlaceObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PickAndPlaceObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.PickAndPlaceObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PickAndPlaceObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.TraverseObject TraverseObject
	{
		get {
			if (_tag != Tag.TraverseObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"TraverseObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.TraverseObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.TraverseObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetRobotCarryingObject SetRobotCarryingObject
	{
		get {
			if (_tag != Tag.SetRobotCarryingObject) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetRobotCarryingObject\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetRobotCarryingObject)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetRobotCarryingObject : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ClearAllBlocks ClearAllBlocks
	{
		get {
			if (_tag != Tag.ClearAllBlocks) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ClearAllBlocks\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ClearAllBlocks)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ClearAllBlocks : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.VisionWhileMoving VisionWhileMoving
	{
		get {
			if (_tag != Tag.VisionWhileMoving) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"VisionWhileMoving\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.VisionWhileMoving)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.VisionWhileMoving : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ExecuteBehavior ExecuteBehavior
	{
		get {
			if (_tag != Tag.ExecuteBehavior) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ExecuteBehavior\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ExecuteBehavior)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ExecuteBehavior : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetBehaviorState SetBehaviorState
	{
		get {
			if (_tag != Tag.SetBehaviorState) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetBehaviorState\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetBehaviorState)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetBehaviorState : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.AbortPath AbortPath
	{
		get {
			if (_tag != Tag.AbortPath) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"AbortPath\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.AbortPath)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.AbortPath : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.AbortAll AbortAll
	{
		get {
			if (_tag != Tag.AbortAll) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"AbortAll\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.AbortAll)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.AbortAll : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.CancelAction CancelAction
	{
		get {
			if (_tag != Tag.CancelAction) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"CancelAction\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.CancelAction)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.CancelAction : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.DrawPoseMarker DrawPoseMarker
	{
		get {
			if (_tag != Tag.DrawPoseMarker) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"DrawPoseMarker\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.DrawPoseMarker)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.DrawPoseMarker : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ErasePoseMarker ErasePoseMarker
	{
		get {
			if (_tag != Tag.ErasePoseMarker) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ErasePoseMarker\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ErasePoseMarker)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ErasePoseMarker : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetWheelControllerGains SetWheelControllerGains
	{
		get {
			if (_tag != Tag.SetWheelControllerGains) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetWheelControllerGains\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetWheelControllerGains)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetWheelControllerGains : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetHeadControllerGains SetHeadControllerGains
	{
		get {
			if (_tag != Tag.SetHeadControllerGains) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetHeadControllerGains\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetHeadControllerGains)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetHeadControllerGains : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetLiftControllerGains SetLiftControllerGains
	{
		get {
			if (_tag != Tag.SetLiftControllerGains) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetLiftControllerGains\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetLiftControllerGains)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetLiftControllerGains : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SelectNextSoundScheme SelectNextSoundScheme
	{
		get {
			if (_tag != Tag.SelectNextSoundScheme) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SelectNextSoundScheme\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SelectNextSoundScheme)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SelectNextSoundScheme : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StartTestMode StartTestMode
	{
		get {
			if (_tag != Tag.StartTestMode) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartTestMode\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StartTestMode)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartTestMode : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.IMURequest IMURequest
	{
		get {
			if (_tag != Tag.IMURequest) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"IMURequest\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.IMURequest)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.IMURequest : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.PlayAnimation PlayAnimation
	{
		get {
			if (_tag != Tag.PlayAnimation) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"PlayAnimation\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.PlayAnimation)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.PlayAnimation : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.ReadAnimationFile ReadAnimationFile
	{
		get {
			if (_tag != Tag.ReadAnimationFile) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"ReadAnimationFile\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.ReadAnimationFile)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.ReadAnimationFile : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StartFaceTracking StartFaceTracking
	{
		get {
			if (_tag != Tag.StartFaceTracking) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartFaceTracking\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StartFaceTracking)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartFaceTracking : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StopFaceTracking StopFaceTracking
	{
		get {
			if (_tag != Tag.StopFaceTracking) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopFaceTracking\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StopFaceTracking)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopFaceTracking : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StartLookingForMarkers StartLookingForMarkers
	{
		get {
			if (_tag != Tag.StartLookingForMarkers) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StartLookingForMarkers\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StartLookingForMarkers)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StartLookingForMarkers : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.StopLookingForMarkers StopLookingForMarkers
	{
		get {
			if (_tag != Tag.StopLookingForMarkers) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"StopLookingForMarkers\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.StopLookingForMarkers)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.StopLookingForMarkers : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetVisionSystemParams SetVisionSystemParams
	{
		get {
			if (_tag != Tag.SetVisionSystemParams) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetVisionSystemParams\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetVisionSystemParams)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetVisionSystemParams : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetFaceDetectParams SetFaceDetectParams
	{
		get {
			if (_tag != Tag.SetFaceDetectParams) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetFaceDetectParams\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetFaceDetectParams)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetFaceDetectParams : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetActiveObjectLEDs SetActiveObjectLEDs
	{
		get {
			if (_tag != Tag.SetActiveObjectLEDs) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetActiveObjectLEDs\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetActiveObjectLEDs)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetActiveObjectLEDs : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetAllActiveObjectLEDs SetAllActiveObjectLEDs
	{
		get {
			if (_tag != Tag.SetAllActiveObjectLEDs) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetAllActiveObjectLEDs\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetAllActiveObjectLEDs)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetAllActiveObjectLEDs : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.SetBackpackLEDs SetBackpackLEDs
	{
		get {
			if (_tag != Tag.SetBackpackLEDs) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"SetBackpackLEDs\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.SetBackpackLEDs)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.SetBackpackLEDs : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.VisualizeQuad VisualizeQuad
	{
		get {
			if (_tag != Tag.VisualizeQuad) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"VisualizeQuad\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.VisualizeQuad)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.VisualizeQuad : Tag.INVALID;
			_state = value;
		}
	}

	public Anki.Cozmo.U2G.EraseQuad EraseQuad
	{
		get {
			if (_tag != Tag.EraseQuad) {
				throw new System.InvalidOperationException(string.Format(
					"Cannot access union member \"EraseQuad\" when a value of type {0} is stored.",
					_tag.ToString()));
			}
			return (Anki.Cozmo.U2G.EraseQuad)this._state;
		}
		
		set {
			_tag = (value != null) ? Tag.EraseQuad : Tag.INVALID;
			_state = value;
		}
	}

	public System.IO.Stream Unpack(System.IO.Stream stream)
	{
		System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
		Tag newTag = Tag.INVALID;
		newTag = (Tag)reader.ReadByte();
		switch(newTag) {
		case Tag.Ping:
			_state = new Anki.Cozmo.U2G.Ping(reader);
			break;
		case Tag.ConnectToRobot:
			_state = new Anki.Cozmo.U2G.ConnectToRobot(reader);
			break;
		case Tag.ConnectToUiDevice:
			_state = new Anki.Cozmo.U2G.ConnectToUiDevice(reader);
			break;
		case Tag.DisconnectFromUiDevice:
			_state = new Anki.Cozmo.U2G.DisconnectFromUiDevice(reader);
			break;
		case Tag.ForceAddRobot:
			_state = new Anki.Cozmo.U2G.ForceAddRobot(reader);
			break;
		case Tag.StartEngine:
			_state = new Anki.Cozmo.U2G.StartEngine(reader);
			break;
		case Tag.DriveWheels:
			_state = new Anki.Cozmo.U2G.DriveWheels(reader);
			break;
		case Tag.TurnInPlace:
			_state = new Anki.Cozmo.U2G.TurnInPlace(reader);
			break;
		case Tag.FaceObject:
			_state = new Anki.Cozmo.U2G.FaceObject(reader);
			break;
		case Tag.MoveHead:
			_state = new Anki.Cozmo.U2G.MoveHead(reader);
			break;
		case Tag.MoveLift:
			_state = new Anki.Cozmo.U2G.MoveLift(reader);
			break;
		case Tag.SetLiftHeight:
			_state = new Anki.Cozmo.U2G.SetLiftHeight(reader);
			break;
		case Tag.SetHeadAngle:
			_state = new Anki.Cozmo.U2G.SetHeadAngle(reader);
			break;
		case Tag.TrackHeadToObject:
			_state = new Anki.Cozmo.U2G.TrackHeadToObject(reader);
			break;
		case Tag.StopAllMotors:
			_state = new Anki.Cozmo.U2G.StopAllMotors(reader);
			break;
		case Tag.ImageRequest:
			_state = new Anki.Cozmo.U2G.ImageRequest(reader);
			break;
		case Tag.SetRobotImageSendMode:
			_state = new Anki.Cozmo.U2G.SetRobotImageSendMode(reader);
			break;
		case Tag.SaveImages:
			_state = new Anki.Cozmo.U2G.SaveImages(reader);
			break;
		case Tag.SaveRobotState:
			_state = new Anki.Cozmo.U2G.SaveRobotState(reader);
			break;
		case Tag.EnableDisplay:
			_state = new Anki.Cozmo.U2G.EnableDisplay(reader);
			break;
		case Tag.SetHeadlights:
			_state = new Anki.Cozmo.U2G.SetHeadlights(reader);
			break;
		case Tag.GotoPose:
			_state = new Anki.Cozmo.U2G.GotoPose(reader);
			break;
		case Tag.PlaceObjectOnGround:
			_state = new Anki.Cozmo.U2G.PlaceObjectOnGround(reader);
			break;
		case Tag.PlaceObjectOnGroundHere:
			_state = new Anki.Cozmo.U2G.PlaceObjectOnGroundHere(reader);
			break;
		case Tag.ExecuteTestPlan:
			_state = new Anki.Cozmo.U2G.ExecuteTestPlan(reader);
			break;
		case Tag.SelectNextObject:
			_state = new Anki.Cozmo.U2G.SelectNextObject(reader);
			break;
		case Tag.PickAndPlaceObject:
			_state = new Anki.Cozmo.U2G.PickAndPlaceObject(reader);
			break;
		case Tag.TraverseObject:
			_state = new Anki.Cozmo.U2G.TraverseObject(reader);
			break;
		case Tag.SetRobotCarryingObject:
			_state = new Anki.Cozmo.U2G.SetRobotCarryingObject(reader);
			break;
		case Tag.ClearAllBlocks:
			_state = new Anki.Cozmo.U2G.ClearAllBlocks(reader);
			break;
		case Tag.VisionWhileMoving:
			_state = new Anki.Cozmo.U2G.VisionWhileMoving(reader);
			break;
		case Tag.ExecuteBehavior:
			_state = new Anki.Cozmo.U2G.ExecuteBehavior(reader);
			break;
		case Tag.SetBehaviorState:
			_state = new Anki.Cozmo.U2G.SetBehaviorState(reader);
			break;
		case Tag.AbortPath:
			_state = new Anki.Cozmo.U2G.AbortPath(reader);
			break;
		case Tag.AbortAll:
			_state = new Anki.Cozmo.U2G.AbortAll(reader);
			break;
		case Tag.CancelAction:
			_state = new Anki.Cozmo.U2G.CancelAction(reader);
			break;
		case Tag.DrawPoseMarker:
			_state = new Anki.Cozmo.U2G.DrawPoseMarker(reader);
			break;
		case Tag.ErasePoseMarker:
			_state = new Anki.Cozmo.U2G.ErasePoseMarker(reader);
			break;
		case Tag.SetWheelControllerGains:
			_state = new Anki.Cozmo.U2G.SetWheelControllerGains(reader);
			break;
		case Tag.SetHeadControllerGains:
			_state = new Anki.Cozmo.U2G.SetHeadControllerGains(reader);
			break;
		case Tag.SetLiftControllerGains:
			_state = new Anki.Cozmo.U2G.SetLiftControllerGains(reader);
			break;
		case Tag.SelectNextSoundScheme:
			_state = new Anki.Cozmo.U2G.SelectNextSoundScheme(reader);
			break;
		case Tag.StartTestMode:
			_state = new Anki.Cozmo.U2G.StartTestMode(reader);
			break;
		case Tag.IMURequest:
			_state = new Anki.Cozmo.U2G.IMURequest(reader);
			break;
		case Tag.PlayAnimation:
			_state = new Anki.Cozmo.U2G.PlayAnimation(reader);
			break;
		case Tag.ReadAnimationFile:
			_state = new Anki.Cozmo.U2G.ReadAnimationFile(reader);
			break;
		case Tag.StartFaceTracking:
			_state = new Anki.Cozmo.U2G.StartFaceTracking(reader);
			break;
		case Tag.StopFaceTracking:
			_state = new Anki.Cozmo.U2G.StopFaceTracking(reader);
			break;
		case Tag.StartLookingForMarkers:
			_state = new Anki.Cozmo.U2G.StartLookingForMarkers(reader);
			break;
		case Tag.StopLookingForMarkers:
			_state = new Anki.Cozmo.U2G.StopLookingForMarkers(reader);
			break;
		case Tag.SetVisionSystemParams:
			_state = new Anki.Cozmo.U2G.SetVisionSystemParams(reader);
			break;
		case Tag.SetFaceDetectParams:
			_state = new Anki.Cozmo.U2G.SetFaceDetectParams(reader);
			break;
		case Tag.SetActiveObjectLEDs:
			_state = new Anki.Cozmo.U2G.SetActiveObjectLEDs(reader);
			break;
		case Tag.SetAllActiveObjectLEDs:
			_state = new Anki.Cozmo.U2G.SetAllActiveObjectLEDs(reader);
			break;
		case Tag.SetBackpackLEDs:
			_state = new Anki.Cozmo.U2G.SetBackpackLEDs(reader);
			break;
		case Tag.VisualizeQuad:
			_state = new Anki.Cozmo.U2G.VisualizeQuad(reader);
			break;
		case Tag.EraseQuad:
			_state = new Anki.Cozmo.U2G.EraseQuad(reader);
			break;
		default:
			break;
		}
		_tag = newTag;
		return stream;
	}

	public System.IO.Stream Pack(System.IO.Stream stream)
	{
		System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
		writer.Write((byte)GetTag());
		switch(GetTag()) {
		case Tag.Ping:
			Ping.Pack(writer);
			break;
		case Tag.ConnectToRobot:
			ConnectToRobot.Pack(writer);
			break;
		case Tag.ConnectToUiDevice:
			ConnectToUiDevice.Pack(writer);
			break;
		case Tag.DisconnectFromUiDevice:
			DisconnectFromUiDevice.Pack(writer);
			break;
		case Tag.ForceAddRobot:
			ForceAddRobot.Pack(writer);
			break;
		case Tag.StartEngine:
			StartEngine.Pack(writer);
			break;
		case Tag.DriveWheels:
			DriveWheels.Pack(writer);
			break;
		case Tag.TurnInPlace:
			TurnInPlace.Pack(writer);
			break;
		case Tag.FaceObject:
			FaceObject.Pack(writer);
			break;
		case Tag.MoveHead:
			MoveHead.Pack(writer);
			break;
		case Tag.MoveLift:
			MoveLift.Pack(writer);
			break;
		case Tag.SetLiftHeight:
			SetLiftHeight.Pack(writer);
			break;
		case Tag.SetHeadAngle:
			SetHeadAngle.Pack(writer);
			break;
		case Tag.TrackHeadToObject:
			TrackHeadToObject.Pack(writer);
			break;
		case Tag.StopAllMotors:
			StopAllMotors.Pack(writer);
			break;
		case Tag.ImageRequest:
			ImageRequest.Pack(writer);
			break;
		case Tag.SetRobotImageSendMode:
			SetRobotImageSendMode.Pack(writer);
			break;
		case Tag.SaveImages:
			SaveImages.Pack(writer);
			break;
		case Tag.SaveRobotState:
			SaveRobotState.Pack(writer);
			break;
		case Tag.EnableDisplay:
			EnableDisplay.Pack(writer);
			break;
		case Tag.SetHeadlights:
			SetHeadlights.Pack(writer);
			break;
		case Tag.GotoPose:
			GotoPose.Pack(writer);
			break;
		case Tag.PlaceObjectOnGround:
			PlaceObjectOnGround.Pack(writer);
			break;
		case Tag.PlaceObjectOnGroundHere:
			PlaceObjectOnGroundHere.Pack(writer);
			break;
		case Tag.ExecuteTestPlan:
			ExecuteTestPlan.Pack(writer);
			break;
		case Tag.SelectNextObject:
			SelectNextObject.Pack(writer);
			break;
		case Tag.PickAndPlaceObject:
			PickAndPlaceObject.Pack(writer);
			break;
		case Tag.TraverseObject:
			TraverseObject.Pack(writer);
			break;
		case Tag.SetRobotCarryingObject:
			SetRobotCarryingObject.Pack(writer);
			break;
		case Tag.ClearAllBlocks:
			ClearAllBlocks.Pack(writer);
			break;
		case Tag.VisionWhileMoving:
			VisionWhileMoving.Pack(writer);
			break;
		case Tag.ExecuteBehavior:
			ExecuteBehavior.Pack(writer);
			break;
		case Tag.SetBehaviorState:
			SetBehaviorState.Pack(writer);
			break;
		case Tag.AbortPath:
			AbortPath.Pack(writer);
			break;
		case Tag.AbortAll:
			AbortAll.Pack(writer);
			break;
		case Tag.CancelAction:
			CancelAction.Pack(writer);
			break;
		case Tag.DrawPoseMarker:
			DrawPoseMarker.Pack(writer);
			break;
		case Tag.ErasePoseMarker:
			ErasePoseMarker.Pack(writer);
			break;
		case Tag.SetWheelControllerGains:
			SetWheelControllerGains.Pack(writer);
			break;
		case Tag.SetHeadControllerGains:
			SetHeadControllerGains.Pack(writer);
			break;
		case Tag.SetLiftControllerGains:
			SetLiftControllerGains.Pack(writer);
			break;
		case Tag.SelectNextSoundScheme:
			SelectNextSoundScheme.Pack(writer);
			break;
		case Tag.StartTestMode:
			StartTestMode.Pack(writer);
			break;
		case Tag.IMURequest:
			IMURequest.Pack(writer);
			break;
		case Tag.PlayAnimation:
			PlayAnimation.Pack(writer);
			break;
		case Tag.ReadAnimationFile:
			ReadAnimationFile.Pack(writer);
			break;
		case Tag.StartFaceTracking:
			StartFaceTracking.Pack(writer);
			break;
		case Tag.StopFaceTracking:
			StopFaceTracking.Pack(writer);
			break;
		case Tag.StartLookingForMarkers:
			StartLookingForMarkers.Pack(writer);
			break;
		case Tag.StopLookingForMarkers:
			StopLookingForMarkers.Pack(writer);
			break;
		case Tag.SetVisionSystemParams:
			SetVisionSystemParams.Pack(writer);
			break;
		case Tag.SetFaceDetectParams:
			SetFaceDetectParams.Pack(writer);
			break;
		case Tag.SetActiveObjectLEDs:
			SetActiveObjectLEDs.Pack(writer);
			break;
		case Tag.SetAllActiveObjectLEDs:
			SetAllActiveObjectLEDs.Pack(writer);
			break;
		case Tag.SetBackpackLEDs:
			SetBackpackLEDs.Pack(writer);
			break;
		case Tag.VisualizeQuad:
			VisualizeQuad.Pack(writer);
			break;
		case Tag.EraseQuad:
			EraseQuad.Pack(writer);
			break;
		default:
			break;
		}
		return stream;
	}

	public int Size
	{
		get {
			int result = 1; // tag = uint_8
			switch(GetTag()) {
			case Tag.Ping:
				result += Ping.Size;
				break;
			case Tag.ConnectToRobot:
				result += ConnectToRobot.Size;
				break;
			case Tag.ConnectToUiDevice:
				result += ConnectToUiDevice.Size;
				break;
			case Tag.DisconnectFromUiDevice:
				result += DisconnectFromUiDevice.Size;
				break;
			case Tag.ForceAddRobot:
				result += ForceAddRobot.Size;
				break;
			case Tag.StartEngine:
				result += StartEngine.Size;
				break;
			case Tag.DriveWheels:
				result += DriveWheels.Size;
				break;
			case Tag.TurnInPlace:
				result += TurnInPlace.Size;
				break;
			case Tag.FaceObject:
				result += FaceObject.Size;
				break;
			case Tag.MoveHead:
				result += MoveHead.Size;
				break;
			case Tag.MoveLift:
				result += MoveLift.Size;
				break;
			case Tag.SetLiftHeight:
				result += SetLiftHeight.Size;
				break;
			case Tag.SetHeadAngle:
				result += SetHeadAngle.Size;
				break;
			case Tag.TrackHeadToObject:
				result += TrackHeadToObject.Size;
				break;
			case Tag.StopAllMotors:
				result += StopAllMotors.Size;
				break;
			case Tag.ImageRequest:
				result += ImageRequest.Size;
				break;
			case Tag.SetRobotImageSendMode:
				result += SetRobotImageSendMode.Size;
				break;
			case Tag.SaveImages:
				result += SaveImages.Size;
				break;
			case Tag.SaveRobotState:
				result += SaveRobotState.Size;
				break;
			case Tag.EnableDisplay:
				result += EnableDisplay.Size;
				break;
			case Tag.SetHeadlights:
				result += SetHeadlights.Size;
				break;
			case Tag.GotoPose:
				result += GotoPose.Size;
				break;
			case Tag.PlaceObjectOnGround:
				result += PlaceObjectOnGround.Size;
				break;
			case Tag.PlaceObjectOnGroundHere:
				result += PlaceObjectOnGroundHere.Size;
				break;
			case Tag.ExecuteTestPlan:
				result += ExecuteTestPlan.Size;
				break;
			case Tag.SelectNextObject:
				result += SelectNextObject.Size;
				break;
			case Tag.PickAndPlaceObject:
				result += PickAndPlaceObject.Size;
				break;
			case Tag.TraverseObject:
				result += TraverseObject.Size;
				break;
			case Tag.SetRobotCarryingObject:
				result += SetRobotCarryingObject.Size;
				break;
			case Tag.ClearAllBlocks:
				result += ClearAllBlocks.Size;
				break;
			case Tag.VisionWhileMoving:
				result += VisionWhileMoving.Size;
				break;
			case Tag.ExecuteBehavior:
				result += ExecuteBehavior.Size;
				break;
			case Tag.SetBehaviorState:
				result += SetBehaviorState.Size;
				break;
			case Tag.AbortPath:
				result += AbortPath.Size;
				break;
			case Tag.AbortAll:
				result += AbortAll.Size;
				break;
			case Tag.CancelAction:
				result += CancelAction.Size;
				break;
			case Tag.DrawPoseMarker:
				result += DrawPoseMarker.Size;
				break;
			case Tag.ErasePoseMarker:
				result += ErasePoseMarker.Size;
				break;
			case Tag.SetWheelControllerGains:
				result += SetWheelControllerGains.Size;
				break;
			case Tag.SetHeadControllerGains:
				result += SetHeadControllerGains.Size;
				break;
			case Tag.SetLiftControllerGains:
				result += SetLiftControllerGains.Size;
				break;
			case Tag.SelectNextSoundScheme:
				result += SelectNextSoundScheme.Size;
				break;
			case Tag.StartTestMode:
				result += StartTestMode.Size;
				break;
			case Tag.IMURequest:
				result += IMURequest.Size;
				break;
			case Tag.PlayAnimation:
				result += PlayAnimation.Size;
				break;
			case Tag.ReadAnimationFile:
				result += ReadAnimationFile.Size;
				break;
			case Tag.StartFaceTracking:
				result += StartFaceTracking.Size;
				break;
			case Tag.StopFaceTracking:
				result += StopFaceTracking.Size;
				break;
			case Tag.StartLookingForMarkers:
				result += StartLookingForMarkers.Size;
				break;
			case Tag.StopLookingForMarkers:
				result += StopLookingForMarkers.Size;
				break;
			case Tag.SetVisionSystemParams:
				result += SetVisionSystemParams.Size;
				break;
			case Tag.SetFaceDetectParams:
				result += SetFaceDetectParams.Size;
				break;
			case Tag.SetActiveObjectLEDs:
				result += SetActiveObjectLEDs.Size;
				break;
			case Tag.SetAllActiveObjectLEDs:
				result += SetAllActiveObjectLEDs.Size;
				break;
			case Tag.SetBackpackLEDs:
				result += SetBackpackLEDs.Size;
				break;
			case Tag.VisualizeQuad:
				result += VisualizeQuad.Size;
				break;
			case Tag.EraseQuad:
				result += EraseQuad.Size;
				break;
			default:
				return 0;
			}
			return result;
		}
	}
	public override bool Equals(System.Object obj)
	{
		if (obj == null)
		{
			return false;
		}

		Message p = obj as Message;
		if ((System.Object) p == null)
		{
			return false;
		}

		return this.Equals(p);
	}

	public bool Equals(Message p)
	{
		if ((object) p == null)
		{
			return false;
		}

		if (!this._tag.Equals(p._tag))
		{
			return false;
		}

		switch(GetTag()) {

		case Tag.Ping:
			return this.Ping.Equals(p.Ping);
		case Tag.ConnectToRobot:
			return this.ConnectToRobot.Equals(p.ConnectToRobot);
		case Tag.ConnectToUiDevice:
			return this.ConnectToUiDevice.Equals(p.ConnectToUiDevice);
		case Tag.DisconnectFromUiDevice:
			return this.DisconnectFromUiDevice.Equals(p.DisconnectFromUiDevice);
		case Tag.ForceAddRobot:
			return this.ForceAddRobot.Equals(p.ForceAddRobot);
		case Tag.StartEngine:
			return this.StartEngine.Equals(p.StartEngine);
		case Tag.DriveWheels:
			return this.DriveWheels.Equals(p.DriveWheels);
		case Tag.TurnInPlace:
			return this.TurnInPlace.Equals(p.TurnInPlace);
		case Tag.FaceObject:
			return this.FaceObject.Equals(p.FaceObject);
		case Tag.MoveHead:
			return this.MoveHead.Equals(p.MoveHead);
		case Tag.MoveLift:
			return this.MoveLift.Equals(p.MoveLift);
		case Tag.SetLiftHeight:
			return this.SetLiftHeight.Equals(p.SetLiftHeight);
		case Tag.SetHeadAngle:
			return this.SetHeadAngle.Equals(p.SetHeadAngle);
		case Tag.TrackHeadToObject:
			return this.TrackHeadToObject.Equals(p.TrackHeadToObject);
		case Tag.StopAllMotors:
			return this.StopAllMotors.Equals(p.StopAllMotors);
		case Tag.ImageRequest:
			return this.ImageRequest.Equals(p.ImageRequest);
		case Tag.SetRobotImageSendMode:
			return this.SetRobotImageSendMode.Equals(p.SetRobotImageSendMode);
		case Tag.SaveImages:
			return this.SaveImages.Equals(p.SaveImages);
		case Tag.SaveRobotState:
			return this.SaveRobotState.Equals(p.SaveRobotState);
		case Tag.EnableDisplay:
			return this.EnableDisplay.Equals(p.EnableDisplay);
		case Tag.SetHeadlights:
			return this.SetHeadlights.Equals(p.SetHeadlights);
		case Tag.GotoPose:
			return this.GotoPose.Equals(p.GotoPose);
		case Tag.PlaceObjectOnGround:
			return this.PlaceObjectOnGround.Equals(p.PlaceObjectOnGround);
		case Tag.PlaceObjectOnGroundHere:
			return this.PlaceObjectOnGroundHere.Equals(p.PlaceObjectOnGroundHere);
		case Tag.ExecuteTestPlan:
			return this.ExecuteTestPlan.Equals(p.ExecuteTestPlan);
		case Tag.SelectNextObject:
			return this.SelectNextObject.Equals(p.SelectNextObject);
		case Tag.PickAndPlaceObject:
			return this.PickAndPlaceObject.Equals(p.PickAndPlaceObject);
		case Tag.TraverseObject:
			return this.TraverseObject.Equals(p.TraverseObject);
		case Tag.SetRobotCarryingObject:
			return this.SetRobotCarryingObject.Equals(p.SetRobotCarryingObject);
		case Tag.ClearAllBlocks:
			return this.ClearAllBlocks.Equals(p.ClearAllBlocks);
		case Tag.VisionWhileMoving:
			return this.VisionWhileMoving.Equals(p.VisionWhileMoving);
		case Tag.ExecuteBehavior:
			return this.ExecuteBehavior.Equals(p.ExecuteBehavior);
		case Tag.SetBehaviorState:
			return this.SetBehaviorState.Equals(p.SetBehaviorState);
		case Tag.AbortPath:
			return this.AbortPath.Equals(p.AbortPath);
		case Tag.AbortAll:
			return this.AbortAll.Equals(p.AbortAll);
		case Tag.CancelAction:
			return this.CancelAction.Equals(p.CancelAction);
		case Tag.DrawPoseMarker:
			return this.DrawPoseMarker.Equals(p.DrawPoseMarker);
		case Tag.ErasePoseMarker:
			return this.ErasePoseMarker.Equals(p.ErasePoseMarker);
		case Tag.SetWheelControllerGains:
			return this.SetWheelControllerGains.Equals(p.SetWheelControllerGains);
		case Tag.SetHeadControllerGains:
			return this.SetHeadControllerGains.Equals(p.SetHeadControllerGains);
		case Tag.SetLiftControllerGains:
			return this.SetLiftControllerGains.Equals(p.SetLiftControllerGains);
		case Tag.SelectNextSoundScheme:
			return this.SelectNextSoundScheme.Equals(p.SelectNextSoundScheme);
		case Tag.StartTestMode:
			return this.StartTestMode.Equals(p.StartTestMode);
		case Tag.IMURequest:
			return this.IMURequest.Equals(p.IMURequest);
		case Tag.PlayAnimation:
			return this.PlayAnimation.Equals(p.PlayAnimation);
		case Tag.ReadAnimationFile:
			return this.ReadAnimationFile.Equals(p.ReadAnimationFile);
		case Tag.StartFaceTracking:
			return this.StartFaceTracking.Equals(p.StartFaceTracking);
		case Tag.StopFaceTracking:
			return this.StopFaceTracking.Equals(p.StopFaceTracking);
		case Tag.StartLookingForMarkers:
			return this.StartLookingForMarkers.Equals(p.StartLookingForMarkers);
		case Tag.StopLookingForMarkers:
			return this.StopLookingForMarkers.Equals(p.StopLookingForMarkers);
		case Tag.SetVisionSystemParams:
			return this.SetVisionSystemParams.Equals(p.SetVisionSystemParams);
		case Tag.SetFaceDetectParams:
			return this.SetFaceDetectParams.Equals(p.SetFaceDetectParams);
		case Tag.SetActiveObjectLEDs:
			return this.SetActiveObjectLEDs.Equals(p.SetActiveObjectLEDs);
		case Tag.SetAllActiveObjectLEDs:
			return this.SetAllActiveObjectLEDs.Equals(p.SetAllActiveObjectLEDs);
		case Tag.SetBackpackLEDs:
			return this.SetBackpackLEDs.Equals(p.SetBackpackLEDs);
		case Tag.VisualizeQuad:
			return this.VisualizeQuad.Equals(p.VisualizeQuad);
		case Tag.EraseQuad:
			return this.EraseQuad.Equals(p.EraseQuad);
		default:
			return false;
		}
	}

	public override int GetHashCode()
	{
		unchecked
		{
			int hash = 17;
			hash = hash * 23 + this._tag.GetHashCode();
			switch(GetTag()) {
			case Tag.Ping:
				hash = hash * 23 + this.Ping.GetHashCode();
				break;
			case Tag.ConnectToRobot:
				hash = hash * 23 + this.ConnectToRobot.GetHashCode();
				break;
			case Tag.ConnectToUiDevice:
				hash = hash * 23 + this.ConnectToUiDevice.GetHashCode();
				break;
			case Tag.DisconnectFromUiDevice:
				hash = hash * 23 + this.DisconnectFromUiDevice.GetHashCode();
				break;
			case Tag.ForceAddRobot:
				hash = hash * 23 + this.ForceAddRobot.GetHashCode();
				break;
			case Tag.StartEngine:
				hash = hash * 23 + this.StartEngine.GetHashCode();
				break;
			case Tag.DriveWheels:
				hash = hash * 23 + this.DriveWheels.GetHashCode();
				break;
			case Tag.TurnInPlace:
				hash = hash * 23 + this.TurnInPlace.GetHashCode();
				break;
			case Tag.FaceObject:
				hash = hash * 23 + this.FaceObject.GetHashCode();
				break;
			case Tag.MoveHead:
				hash = hash * 23 + this.MoveHead.GetHashCode();
				break;
			case Tag.MoveLift:
				hash = hash * 23 + this.MoveLift.GetHashCode();
				break;
			case Tag.SetLiftHeight:
				hash = hash * 23 + this.SetLiftHeight.GetHashCode();
				break;
			case Tag.SetHeadAngle:
				hash = hash * 23 + this.SetHeadAngle.GetHashCode();
				break;
			case Tag.TrackHeadToObject:
				hash = hash * 23 + this.TrackHeadToObject.GetHashCode();
				break;
			case Tag.StopAllMotors:
				hash = hash * 23 + this.StopAllMotors.GetHashCode();
				break;
			case Tag.ImageRequest:
				hash = hash * 23 + this.ImageRequest.GetHashCode();
				break;
			case Tag.SetRobotImageSendMode:
				hash = hash * 23 + this.SetRobotImageSendMode.GetHashCode();
				break;
			case Tag.SaveImages:
				hash = hash * 23 + this.SaveImages.GetHashCode();
				break;
			case Tag.SaveRobotState:
				hash = hash * 23 + this.SaveRobotState.GetHashCode();
				break;
			case Tag.EnableDisplay:
				hash = hash * 23 + this.EnableDisplay.GetHashCode();
				break;
			case Tag.SetHeadlights:
				hash = hash * 23 + this.SetHeadlights.GetHashCode();
				break;
			case Tag.GotoPose:
				hash = hash * 23 + this.GotoPose.GetHashCode();
				break;
			case Tag.PlaceObjectOnGround:
				hash = hash * 23 + this.PlaceObjectOnGround.GetHashCode();
				break;
			case Tag.PlaceObjectOnGroundHere:
				hash = hash * 23 + this.PlaceObjectOnGroundHere.GetHashCode();
				break;
			case Tag.ExecuteTestPlan:
				hash = hash * 23 + this.ExecuteTestPlan.GetHashCode();
				break;
			case Tag.SelectNextObject:
				hash = hash * 23 + this.SelectNextObject.GetHashCode();
				break;
			case Tag.PickAndPlaceObject:
				hash = hash * 23 + this.PickAndPlaceObject.GetHashCode();
				break;
			case Tag.TraverseObject:
				hash = hash * 23 + this.TraverseObject.GetHashCode();
				break;
			case Tag.SetRobotCarryingObject:
				hash = hash * 23 + this.SetRobotCarryingObject.GetHashCode();
				break;
			case Tag.ClearAllBlocks:
				hash = hash * 23 + this.ClearAllBlocks.GetHashCode();
				break;
			case Tag.VisionWhileMoving:
				hash = hash * 23 + this.VisionWhileMoving.GetHashCode();
				break;
			case Tag.ExecuteBehavior:
				hash = hash * 23 + this.ExecuteBehavior.GetHashCode();
				break;
			case Tag.SetBehaviorState:
				hash = hash * 23 + this.SetBehaviorState.GetHashCode();
				break;
			case Tag.AbortPath:
				hash = hash * 23 + this.AbortPath.GetHashCode();
				break;
			case Tag.AbortAll:
				hash = hash * 23 + this.AbortAll.GetHashCode();
				break;
			case Tag.CancelAction:
				hash = hash * 23 + this.CancelAction.GetHashCode();
				break;
			case Tag.DrawPoseMarker:
				hash = hash * 23 + this.DrawPoseMarker.GetHashCode();
				break;
			case Tag.ErasePoseMarker:
				hash = hash * 23 + this.ErasePoseMarker.GetHashCode();
				break;
			case Tag.SetWheelControllerGains:
				hash = hash * 23 + this.SetWheelControllerGains.GetHashCode();
				break;
			case Tag.SetHeadControllerGains:
				hash = hash * 23 + this.SetHeadControllerGains.GetHashCode();
				break;
			case Tag.SetLiftControllerGains:
				hash = hash * 23 + this.SetLiftControllerGains.GetHashCode();
				break;
			case Tag.SelectNextSoundScheme:
				hash = hash * 23 + this.SelectNextSoundScheme.GetHashCode();
				break;
			case Tag.StartTestMode:
				hash = hash * 23 + this.StartTestMode.GetHashCode();
				break;
			case Tag.IMURequest:
				hash = hash * 23 + this.IMURequest.GetHashCode();
				break;
			case Tag.PlayAnimation:
				hash = hash * 23 + this.PlayAnimation.GetHashCode();
				break;
			case Tag.ReadAnimationFile:
				hash = hash * 23 + this.ReadAnimationFile.GetHashCode();
				break;
			case Tag.StartFaceTracking:
				hash = hash * 23 + this.StartFaceTracking.GetHashCode();
				break;
			case Tag.StopFaceTracking:
				hash = hash * 23 + this.StopFaceTracking.GetHashCode();
				break;
			case Tag.StartLookingForMarkers:
				hash = hash * 23 + this.StartLookingForMarkers.GetHashCode();
				break;
			case Tag.StopLookingForMarkers:
				hash = hash * 23 + this.StopLookingForMarkers.GetHashCode();
				break;
			case Tag.SetVisionSystemParams:
				hash = hash * 23 + this.SetVisionSystemParams.GetHashCode();
				break;
			case Tag.SetFaceDetectParams:
				hash = hash * 23 + this.SetFaceDetectParams.GetHashCode();
				break;
			case Tag.SetActiveObjectLEDs:
				hash = hash * 23 + this.SetActiveObjectLEDs.GetHashCode();
				break;
			case Tag.SetAllActiveObjectLEDs:
				hash = hash * 23 + this.SetAllActiveObjectLEDs.GetHashCode();
				break;
			case Tag.SetBackpackLEDs:
				hash = hash * 23 + this.SetBackpackLEDs.GetHashCode();
				break;
			case Tag.VisualizeQuad:
				hash = hash * 23 + this.VisualizeQuad.GetHashCode();
				break;
			case Tag.EraseQuad:
				hash = hash * 23 + this.EraseQuad.GetHashCode();
				break;
			default:
				break;
			}
			return hash;
		}
	}
}

} // namespace U2G

} // namespace Cozmo

} // namespace Anki

