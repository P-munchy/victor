// Messages to be communicated over the wire from Victor to an External Device.
//  for the C-Like Abstract Data language
// Author: Nicolas Kent
// Copyright: Anki Inc (c) 2018

#include "clad/types/animationTrigger.clad"
#include "clad/types/faceEnrollmentResult.clad"
#include "clad/types/loadedKnownFace.clad"
#include "clad/types/sayTextStylesSDK.clad"

namespace Anki {
namespace Cozmo {
namespace ExternalComms {

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Actions

// ====================================================
//          Robot Transport Security Messages
// ====================================================

// Request initial pairing, supplying the robot's highest pairing protocol
// version
enum uint_8 RtsMode {
    RAW,
    CLAD,
    CLAD_ENCRYPTED,
}

enum uint_8 RtsConnType {
    FirstTimePair,
    Reconnection,
}

message RtsWifiScanResult {
    uint_8      authType,
    uint_8      signalStrength,
    string      wifiSsidHex,
}

message RtsWifiScanResult_2 {
    uint_8      authType,
    uint_8      signalStrength,
    string      wifiSsidHex,
    bool        hidden,
}

message RtsConnRequest {
    uint_8      publicKey[32]
}

message RtsConnResponse {
    RtsConnType connectionType,
    uint_8      publicKey[32]
}

message RtsNonceMessage {
    uint_8      toRobotNonce[24],
    uint_8      toDeviceNonce[24]
}

message RtsAck {
    uint_8      rtsConnectionTag
}

message RtsChallengeMessage {
    uint_32     number
}

message RtsChallengeSuccessMessage {
    //
}

message RtsWifiConnectRequest {
    string      wifiSsidHex,
    string      password,
    uint_8      timeout,
    uint_8      authType,
    bool        hidden,
}

message RtsWifiConnectResponse {
    string      wifiSsidHex,
    uint_8      wifiState,
}

message RtsWifiIpRequest {
    //
}

message RtsWifiIpResponse {
    uint_8      hasIpV4,
    uint_8      hasIpV6,
    uint_8      ipV4[4],
    uint_8      ipV6[16],
}

message RtsStatusRequest {
    //
}

message RtsStatusResponse {
    string      wifiSsidHex,
    uint_8      wifiState,
    bool        accessPoint,
    uint_8      bleState,
    uint_8      batteryState,
}

message RtsStatusResponse_2 {
    string      wifiSsidHex,
    uint_8      wifiState,
    bool        accessPoint,
    uint_8      bleState,
    uint_8      batteryState,
    string      version,
    bool        otaInProgress,
}

message RtsWifiScanRequest {
    //
}

message RtsWifiScanResponse {
    uint_8                  statusCode,
    RtsWifiScanResult       scanResult[uint_8],
}

message RtsWifiScanResponse_2 {
    uint_8                  statusCode,
    RtsWifiScanResult_2     scanResult[uint_8],
}

message RtsOtaUpdateRequest {
    string      url
}

message RtsOtaCancelRequest {

}

message RtsOtaUpdateResponse {
    uint_8      status,
    uint_64     current,
    uint_64     expected,
}

message RtsWifiAccessPointRequest {
    bool        enable,
}

message RtsWifiAccessPointResponse {
    bool        enabled,
    string      ssid,
    string      password,
}

message RtsCancelPairing {
    //
}

message RtsForceDisconnect {
    //
}

message RtsSshRequest {
    string      sshAuthorizedKeyBytes[uint_16],
}

message RtsSshResponse {
    
}

message RtsLogRequest {
    uint_8      mode,
    string      filter[uint_16],
}

message RtsLogResponse {
    uint_8      exitCode,
    uint_32     fileId,
}

message RtsFileDownload {
    uint_8      status,
    uint_32     fileId,
    uint_32     packetNumber,
    uint_32     packetTotal,
    uint_8      fileChunk[uint_16],
}

message Error {
    //
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Rts Version 2
union RtsConnection_2 {
    Error                           Error                       = 0x00,
    RtsConnRequest                  RtsConnRequest              = 0x01,
    RtsConnResponse                 RtsConnResponse             = 0x02,
    RtsNonceMessage                 RtsNonceMessage             = 0x03,
    RtsChallengeMessage             RtsChallengeMessage         = 0x04,
    RtsChallengeSuccessMessage      RtsChallengeSuccessMessage  = 0x05,
    RtsWifiConnectRequest           RtsWifiConnectRequest       = 0x06,
    RtsWifiConnectResponse          RtsWifiConnectResponse      = 0x07,
    RtsWifiIpRequest                RtsWifiIpRequest            = 0x08,
    RtsWifiIpResponse               RtsWifiIpResponse           = 0x09,
    RtsStatusRequest                RtsStatusRequest            = 0x0A,
    RtsStatusResponse_2             RtsStatusResponse_2         = 0x0B,     // This message is update from v1 to include build version.
    RtsWifiScanRequest              RtsWifiScanRequest          = 0x0C,
    RtsWifiScanResponse_2           RtsWifiScanResponse_2       = 0x0D,     // This message is update from v1 to include hidden flag.
    RtsOtaUpdateRequest             RtsOtaUpdateRequest         = 0x0E,
    RtsOtaUpdateResponse            RtsOtaUpdateResponse        = 0x0F,
    RtsCancelPairing                RtsCancelPairing            = 0x10,
    RtsForceDisconnect              RtsForceDisconnect          = 0x11,
    RtsAck                          RtsAck                      = 0x12,
    RtsWifiAccessPointRequest       RtsWifiAccessPointRequest   = 0x13,
    RtsWifiAccessPointResponse      RtsWifiAccessPointResponse  = 0x14,
    RtsSshRequest                   RtsSshRequest               = 0x15,
    RtsSshResponse                  RtsSshResponse              = 0x16,
    // New in v2
    RtsOtaCancelRequest             RtsOtaCancelRequest         = 0x17,     // * new in v2
    RtsLogRequest                   RtsLogRequest               = 0x18,     // * new in v2
    RtsLogResponse                  RtsLogResponse              = 0x19,     // * new in v2
    RtsFileDownload                 RtsFileDownload             = 0x1A,     // * new in v2
}

// The post-factory set of versions
union RtsConnection {
    Error                           Error                       = 0x00,
    // Skipping 0x01 so that enum vals match the RTS protocol version
    //                              Reserved                    = 0x01, 
    RtsConnection_2                 RtsConnection_2             = 0x02,
}

// The factory set of supported messages
union RtsConnection_1 {
    Error                           Error                       = 0x00,
    RtsConnRequest                  RtsConnRequest              = 0x01,
    RtsConnResponse                 RtsConnResponse             = 0x02,
    RtsNonceMessage                 RtsNonceMessage             = 0x03,
    RtsChallengeMessage             RtsChallengeMessage         = 0x04,
    RtsChallengeSuccessMessage      RtsChallengeSuccessMessage  = 0x05,
    RtsWifiConnectRequest           RtsWifiConnectRequest       = 0x06,
    RtsWifiConnectResponse          RtsWifiConnectResponse      = 0x07,
    RtsWifiIpRequest                RtsWifiIpRequest            = 0x08,
    RtsWifiIpResponse               RtsWifiIpResponse           = 0x09,
    RtsStatusRequest                RtsStatusRequest            = 0x0A,
    RtsStatusResponse               RtsStatusResponse           = 0x0B,
    RtsWifiScanRequest              RtsWifiScanRequest          = 0x0C,
    RtsWifiScanResponse             RtsWifiScanResponse         = 0x0D,
    RtsOtaUpdateRequest             RtsOtaUpdateRequest         = 0x0E,
    RtsOtaUpdateResponse            RtsOtaUpdateResponse        = 0x0F,
    RtsCancelPairing                RtsCancelPairing            = 0x10,
    RtsForceDisconnect              RtsForceDisconnect          = 0x11,
    RtsAck                          RtsAck                      = 0x12,
    RtsWifiAccessPointRequest       RtsWifiAccessPointRequest   = 0x13,
    RtsWifiAccessPointResponse      RtsWifiAccessPointResponse  = 0x14,
    RtsSshRequest                   RtsSshRequest               = 0x15,
    RtsSshResponse                  RtsSshResponse              = 0x16,
}

// ====================================================
//                      App General
// ====================================================

enum uint_16 RobotStatus {
  Exploring,
}

// Tell the app the robot's ui exposed status
message RobotStatusRequest {
    //
}

// Tell the app the robot's ui exposed status
message RobotStatusResponse {
    RobotStatus     response
}

union AppGeneral {
    Error                       Error                       = 0x00,
    RobotStatusRequest          RobotStatusRequest          = 0x01,
    RobotStatusResponse         RobotStatusResponse         = 0x02,
}

// ====================================================
//                      Meet Victor
// ====================================================

// The app requests that the robot perform some non-instantaneous action, usually
// an action with an associated voice command, such as "go to your charger"
// todo (VIC-1398): eventually AppIntent should be its own union of structures, but
// currently there's only one intent, with one arg, and it's not possible to transmit
// a union over the temporary webservice handler. This will need replacing once the
// real app->engine channel is working
//
// Start Meet Victor
message AppIntent {
  string intent,
  string param,
}

// Status messages that will be superceded by some sort of generic status message (VIC-1423)
message MeetVictorStarted
{
    string name
}

// Tell the app the robot is starting a facial scan for the Meet Victor flow
message MeetVictorFaceScanStarted
{
}

// Tell the app the robot is finishing a facial scan for the Meet Victor flow
message MeetVictorFaceScanComplete
{
}

// RobotEnrolledFace - Broadcast by BehaviorEnrollFace when it completes.
// Contains either success or error condition.
message FaceEnrollmentCompleted
{
  FaceEnrollmentResult result,
  int_32               faceID,
  string               name
}

// CancelFaceEnrollment - Unsets face enrollment settings, meaning BehaviorEnrollFace will no
//                        longer be activatable
//
// Cancels Meet Victor.
message CancelFaceEnrollment {
}

// Request a list of names and IDs
message RequestEnrolledNames {
}

// Receives the requested list of names and IDs.
message EnrolledNamesResponse {
  Vision::LoadedKnownFace faces[uint_8],
}

// Rename given ID+oldName pair to use newName. For safety if current face with given ID
// does not match oldName, nothing happens.
// On success, a RobotLoadedKnownFace message with faceID and newName will be sent.
message UpdateEnrolledFaceByID {
  int_32 faceID,
  string oldName,
  string newName
}

// Erase a face record by ID
message EraseEnrolledFaceByID {
  int_32 faceID
}

// Erase all enrolled faces (use with care!)
message EraseAllEnrolledFaces {
}

// SetFaceToEnroll - Send face enrollments settings. Actual face enrollment only happens
//                   when the BehaviorEnrollFace runs. That behavior requires these settings
//                   be sent in order to be activatable.
//
// If you want to change where the enrolled face is saved (e.g., merge final enrollment into an
// existing face), use this before `AppIntent`.
message SetFaceToEnroll {
    string name,

    int_32 observedID=0,  // The ID of a specific observed face to enroll (0 for next one we see)
    int_32 saveID=0,      // The ID of an existing face to merge final enrollment into (0 for none,
                          // i.e. use observedID)

    bool saveToRobot=1,   // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
    bool sayName=0,       // Play say-name/celebration animations on success before completing
    bool useMusic=0       // Starts special music during say-name animations (will leave music playing!)
}

union MeetVictor {
    Error                       Error                       = 0x00,
    AppIntent                   AppIntent                   = 0x01,
    MeetVictorStarted           MeetVictorStarted           = 0x02,
    MeetVictorFaceScanStarted   MeetVictorFaceScanStarted   = 0x03,
    MeetVictorFaceScanComplete  MeetVictorFaceScanComplete  = 0x04,
    FaceEnrollmentCompleted     FaceEnrollmentCompleted     = 0x05,
    CancelFaceEnrollment        CancelFaceEnrollment        = 0x06,
    RequestEnrolledNames        RequestEnrolledNames        = 0x07,
    EnrolledNamesResponse       EnrolledNamesResponse       = 0x08,
    UpdateEnrolledFaceByID      UpdateEnrolledFaceByID      = 0x09,
    EraseEnrolledFaceByID       EraseEnrolledFaceByID       = 0x0A,
    EraseAllEnrolledFaces       EraseAllEnrolledFaces       = 0x0B,
    SetFaceToEnroll             SetFaceToEnroll             = 0x0C,
}

// ====================================================
//                    Motor Control
// ====================================================

message DriveWheels {
    float_32 lwheel_speed_mmps,
    float_32 rwheel_speed_mmps,
    float_32 lwheel_accel_mmps2 = 0.0,
    float_32 rwheel_accel_mmps2 = 0.0
}

message DriveArc {
  float_32 speed,               // Target speed in mm/sec
                                // If curvatureRadius_mm == 0, the speed is in rad/s where +ve means CCW rotation.
  float_32 accel,               // Acceleration to approach target speed in mm/sec^2 (Sign is ignored)
                                // (or rad/s^2 if curvatureRadius_mm == 0)
                                // 0: Max acceleration
  int_16 curvatureRadius_mm     // Radius of arc to drive
                                // u16_MAX or u16_MIN: Straight
                                // +ve: curves left, -ve: curves right
                                // 0: Point turn
}

message MoveHead {
    float_32 speed_rad_per_sec
}

message MoveLift {
    float_32 speed_rad_per_sec
}

union MotorControl {
    Error                       Error                       = 0x00,
    DriveWheels                 DriveWheels                 = 0x01,
    DriveArc                    DriveArc                    = 0x02,
    MoveHead                    MoveHead                    = 0x03,
    MoveLift                    MoveLift                    = 0x04,
}

// ====================================================
//          Robot Animation Messages
// ====================================================

// PlayAnimation
message PlayAnimation {
    uint_32 numLoops,
    string animationName,
    bool    ignoreBodyTrack=0,
    bool    ignoreHeadTrack=0,
    bool    ignoreLiftTrack=0
}

// RequestAvailableAnimations
message RequestAvailableAnimations {
  
}

message SayText {
  string                 text,
  AnimationTrigger       playEvent,      // Set AnimationTrigger::Count to only play the Tts without an animation
  SayTextVoiceStyleSDK   voiceStyle,
  float_32               durationScalar = 1.0,
  float_32               voicePitch = 0.0,
  bool                   fitToDuration   // No longer supported
}

union Animations {
  PlayAnimation                 playAnimation = 0x00,
  RequestAvailableAnimations    requestAvailableAnimations = 0x01,
  SayText                       SayText = 0x02,

}

// ====================================================
//                   Movement Actions
// ====================================================

// DriveOffChargerContacts
//  Mostly useful for SDK usage where motors are locked while on the charger.
//  This action drives forward slightly to get off the charger.
message DriveOffChargerContacts {

}

// DriveStraight
//  Drives a straight line forward or backward without using the planner.
message DriveStraight {
   float_32 speed_mmps,  // Speed should be positive
   float_32 dist_mm,     // Use +ve for forward, -ve for backward
   bool shouldPlayAnimation = 1
}

// TurnInPlace
// If isAbsolute == 0, turns the specified number of radians, *relative to the robot's current heading*
// If isAbsolute != 0, turns to the specified absolute orientation.
message TurnInPlace {
    float_32 angle_rad, // relative mode: postive turns left negative turns right
    float_32 speed_rad_per_sec = 0.0,
    float_32 accel_rad_per_sec2 = 0.0,
    float_32 tol_rad = 0.0, // This should be no smaller than POINT_TURN_ANGLE_TOL from cozmoEngineConfig.h.
                            // Smaller values are ignored except 0 which is interpreted to mean
                            // default tolerance of POINT_TURN_ANGLE_TOL.
    uint_8 isAbsolute       // 0: angle_rad is relative to current orientation, 1: angle_rad is absolute angle to turn to
}

// SetHeadAngle
message SetHeadAngle {
    float_32 angle_rad,
    float_32 max_speed_rad_per_sec,
    float_32 accel_rad_per_sec2,
    float_32 duration_sec
}

// SetLiftHeight
message SetLiftHeight {
    float_32 height_mm,
    float_32 max_speed_rad_per_sec,
    float_32 accel_rad_per_sec2,
    float_32 duration_sec
}

union MovementAction {
    Error                       Error                       = 0x00,
    DriveOffChargerContacts     DriveOffChargerContacts     = 0x01,
    DriveStraight               DriveStraight               = 0x02,
    TurnInPlace                 TurnInPlace                 = 0x03,
    SetHeadAngle                SetHeadAngle                = 0x04,
    SetLiftHeight               SetLiftHeight               = 0x05,
}

// ====================================================
//                    Victor Display
// ====================================================

message SetBackpackLEDs {
  uint_32  onColor[3],
  uint_32  offColor[3],
  uint_32  onPeriod_ms[3],
  uint_32  offPeriod_ms[3],
  uint_32  transitionOnPeriod_ms[3],
  uint_32  transitionOffPeriod_ms[3],
  int_32   offset[3]
}

union VictorDisplay {
    Error                       Error                       = 0x00,
    SetBackpackLEDs             SetBackpackLEDs             = 0x01,
}

// ====================================================
//                      Outer Union
// ====================================================

union ExternalComms {
    Error                       Error                       = 0x00,
    RtsConnection_1             RtsConnection_1             = 0x01,
    RtsConnection               RtsConnection               = 0x04,
    AppGeneral                  AppGeneral                  = 0x02,
    MeetVictor                  MeetVictor                  = 0x03,
    MotorControl                MotorControl                = 0x05,
    MovementAction              MovementAction              = 0x06,
    Animations                  Animations                  = 0x07,
    VictorDisplay               VictorDisplay               = 0x08,
}

} // namespace ExternalComms
} // namespace Cozmo
} // namespace Anki
