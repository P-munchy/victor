// Messages to be communicated over the wire from an External Device to a Victor.
//  for the C-Like Abstract Data language
// Author: Nicolas Kent
// Copyright: Anki Inc (c) 2018

namespace Anki {
namespace Victor {
namespace DeviceToRobot {

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Actions

// ====================================================
//          Robot Transport Security Messages
// ====================================================

// Request initial pairing, supplying the robot's highest pairing protocol
// version
message RTSInitializationMessage 
{
    uint_8		INITIALIZATION_TYPE,
    uint_8	    PUBLIC_KEY[32]
}

message RTSAckMessage {
    uint_8		RTS_MESSAGE_TYPE
}

message RTSChallengeMessage {
    uint_32  	NUMBER
}

message RTSWifiScanRequestMessage {
    //
}

// [Clad, device]
message RTSWifiConnectRequestMessage {
    string		SSID,
    string		PW
}

message RTSWifiIpRequestMessage {
    //
}

message RTSDisconnectionMessage {
    //
}

message RTSStatusRequestMessage {
    //
}

message RTSOtaUpdateRequestMessage {
    string      URL
}

message RTSCancelPairingMessage {
    //
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

union RtsConnection {
    RTSInitializationMessage        rtsInitializationMessage        = 0x00,
    RTSAckMessage                   rtsAckMessage                   = 0x01,
    RTSChallengeMessage             rtsChallengeMessage             = 0x02,
    RTSWifiScanRequestMessage       rtsWifiScanRequestMessage       = 0x03,
    RTSWifiConnectRequestMessage    rtsWifiConnectRequestMessage    = 0x04,
    RTSWifiIpRequestMessage         rtsWifiIpRequestMessage         = 0x05,
    RTSDisconnectionMessage         rtsDisconnectionMessage         = 0x06,
    RTSStatusRequestMessage         rtsStatusRequestMessage         = 0x07,
    RTSOtaUpdateRequestMessage      rtsOtaUpdateRequestMessage      = 0x08,
    RTSCancelPairingMessage         rtsCancelPairingMessage         = 0x09,
}

// ====================================================
//                      App General
// ====================================================

// Request stats to display on app status screen
message RobotStatusRequest
{
}

union AppGeneral {
    RobotStatusRequest          robotStatusRequest          = 0x00
}

// ====================================================
//                      Meet Victor
// ====================================================

// Request the robot enter the Meet Victor UX flow
message MeetVictorRequest
{
}

// Specify a name for a given face ID in the meet victor UX flow
message MeetVictorSetUserName
{
    string  faceID,
    string  name
}

// Finish the meet victor UX flow, communicating success or failure
message MeetVictorComplete
{
    bool    success
}

union MeetVictor {
    MeetVictorRequest           meetVictorRequest           = 0x00,
    MeetVictorSetUserName       meetVictorSetUserName       = 0x01,
    MeetVictorComplete          meetVictorComplete          = 0x02
}

// ====================================================
//                      Outer Union
// ====================================================

union DeviceToRobot {
    RtsConnection               rtsConnection               = 0x00,
    AppGeneral                  appGeneral                  = 0x01,
    MeetVictor                  meetVictor                  = 0x02
}

} // namespace ExternalInterface
} // namespace Victor
} // namespace Anki
