// Messages to be communicated over the wire from an External Device to a Victor.
//  for the C-Like Abstract Data language
// Author: Nicolas Kent
// Copyright: Anki Inc (c) 2018

namespace Anki {
namespace Victor {
namespace DeviceToRobot {

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Actions

// ====================================================
//          Robot Transport Security Messages
// ====================================================

// Request initial pairing, supplying the robot's highest pairing protocol
// version
message RTSInitializationMessage 
{
    uint8		INITIALIZATION_TYPE,
    uint8	    PUBLIC_KEY[32]
}

message RTSAckMessage {
    uint8		RTS_MESSAGE_TYPE
}

message RTSChallengeMessage {
    uint32  	NUMBER
}

message RTSWifiScanRequestMessage {
    //
}

// [Clad, device]
message RTSWifiConnectRequestMessage {
    string		SSID,
    string		PW
}

message RTSWifiIpRequestMessage {
    //
}

message RTSDisconnectionMessage {
    //
}

message RTSStatusRequestMessage {
    //
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

message PairingProtocolResponse
{
    uint_16 version
}

// Send a generated public key to the robot
message PairingPublicKey
{
    uint_8  publicKey[32] // make this array length a constant
}

// Respond to the robot's nonce with a modified nonce
message PairingAck
{
    uint_8  ack,
    uint_8  nonce[24] // Make this array length a clad constant
}

// Responds to the robot's encryption challenge with response
message PairingCryptoChallengeResponse
{
    uint_32 number
}

// The app can inform the robot to cancel the pairing at any stage
message PairingCancel
{
}

// ====================================================
//                   Wifi Connection
// ====================================================

// Request a list of visible wifi networks from the robot
message WifiNetworkListRequest
{
}

// Tell the robot which wifi ssid to connect to and which password to send it
message WifiSendNetworkCredentials
{
    string  ssid,
    string  password
}

// Request the robot's IP address on the active wifi network
message RobotIPAddressRequest
{
}

// Tell the robot the address of Anki cloud services
message SendOTAAddress
{
    string  address
}

union Connection {
    PairingProtocolResponse         pairingProtocolResponse         = 0x00,
    PairingPublicKey                pairingPublicKey                = 0x01,
    PairingAck                      pairingAck                      = 0x02,
    PairingCryptoChallengeResponse  pairingCryptoChallengeResponse  = 0x03,
    PairingCancel                   pairingCancel                   = 0x04,
    WifiNetworkListRequest          wifiNetworkListRequest          = 0x05,
    WifiSendNetworkCredentials      wifiSendNetworkCredentials      = 0x06,
    RobotIPAddressRequest           robotIPAddressRequest           = 0x07,
    SendOTAAddress                  sendOTAAddress                  = 0x08
}

// ====================================================
//                      App General
// ====================================================

// Request stats to display on app status screen
message RobotStatusRequest
{
}

union AppGeneral {
    RobotStatusRequest          robotStatusRequest          = 0x00
}

// ====================================================
//                      Meet Victor
// ====================================================

// Request the robot enter the Meet Victor UX flow
message MeetVictorRequest
{
}

// Specify a name for a given face ID in the meet victor UX flow
message MeetVictorSetUserName
{
    string  faceID,
    string  name
}

// Finish the meet victor UX flow, communicating success or failure
message MeetVictorComplete
{
    bool    success
}

union MeetVictor {
    MeetVictorRequest           meetVictorRequest           = 0x00,
    MeetVictorSetUserName       meetVictorSetUserName       = 0x01,
    MeetVictorComplete          meetVictorComplete          = 0x02
}

// ====================================================
//                      Outer Union
// ====================================================

union DeviceToRobot {
    Connection                  connection                  = 0x00,
    AppGeneral                  appGeneral                  = 0x01,
    MeetVictor                  meetVictor                  = 0x02
}

} // namespace ExternalInterface
} // namespace Victor
} // namespace Anki
