// Messages to be communicated over the wire from Victor to an External Device.
//  for the C-Like Abstract Data language
// Author: Nicolas Kent
// Copyright: Anki Inc (c) 2018

namespace Anki {
namespace Victor {
namespace RobotToDevice {

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Actions

// ====================================================
//          Robot Transport Security Messages
// ====================================================

// Request initial pairing, supplying the robot's highest pairing protocol
// version
enum uint_8 RTSMode
{
    RAW,
    CLAD,
    CLAD_ENCRYPTED
}

message RTSInitializationMessage 
{
    uint_8		INITIALIZATION_TYPE,
    uint_8	    PUBLIC_KEY[32]
}

message RTSNonceMessage {
    uint_8  	NONCE[24]		// TODO: WE MIGHT WANT 2 NONCES
}

message RTSAckMessage {
    uint_8		RTS_MESSAGE_TYPE
}

message RTSChallengeMessage {
    uint_32  	NUMBER
}

message RTSConnectionMessage {
    //
}

// [Clad, device]
message RTSWifiConnectRequestMessage {
    string		SSID,
    string		PW
}

message RTSWifiIpRequestMessage {
    //
}

message RTSDisconnectionMessage {
    //
}

message RTSStatusRequestMessage {
    //
}

message RTSOtaUpdateResponseMessage {
    uint_8      STATUS,
    uint_8      PROGRESS,
}

message RTSCancelPairingMessage {
    //
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

union RtsConnection {
    RTSInitializationMessage        rtsInitializationMessage        = 0x00,
    RTSNonceMessage                 rtsNonceMessage                 = 0x01,
    RTSAckMessage                   rtsAckMessage                   = 0x02,
    RTSChallengeMessage             rtsChallengeMessage             = 0x03,
    RTSConnectionMessage            rtsConnectionMessage            = 0x04,
    RTSWifiConnectRequestMessage    rtsWifiConnectRequestMessage    = 0x05,
    RTSWifiIpRequestMessage         rtsWifiIpRequestMessage         = 0x06,
    RTSDisconnectionMessage         rtsDisconnectionMessage         = 0x07,
    RTSStatusRequestMessage         rtsStatusRequestMessage         = 0x08,
    RTSOtaUpdateResponseMessage     rtsOtaUpdateResponseMessage     = 0x09,
    RTSCancelPairingMessage         rtsCancelPairingMessage         = 0x0A,
}

// ====================================================
//                      App General
// ====================================================

enum uint_16 RobotStatus {
  Exploring,
}

// Tell the app the robot's ui exposed status
message RobotStatusResponse
{
    RobotStatus     response
}

union AppGeneral {
    RobotStatusResponse         robotStatusResponse         = 0x00
}

// ====================================================
//                      Meet Victor
// ====================================================

// Tell the app that the robot is ready to enter the Meet Victor UX flow with
// a face ID
message MeetVictorReadyResponse
{
    string  faceID
}

// Tell the app the robot is starting a facial scan for the Meet Victor UX flow
message MeetVictorFaceScanStarted
{
}

// Tell the app the robot is finishing a facial scan for the Meet Victor UX flow
message MeetVictorFaceScanComplete
{
}

// Tell the app the robot encountered an error during the Meet Victor UX flow
message MeetVictorError
{
    string  errorString // most likely enum, change when we figure the enums out
}

union MeetVictor {
    MeetVictorReadyResponse     meetVictorReadyResponse     = 0x00,
    MeetVictorFaceScanStarted   meetVictorFaceScanStarted   = 0x01,
    MeetVictorFaceScanComplete  meetVictorFaceScanComplete  = 0x02,
    MeetVictorError             meetVictorError             = 0x03
}

// ====================================================
//                      Outer Union
// ====================================================

union RobotToDevice {
    RtsConnection               rtsConnection               = 0x00,
    AppGeneral                  appGeneral                  = 0x01,
    MeetVictor                  meetVictor                  = 0x02
}

} // namespace ExternalInterface
} // namespace Victor
} // namespace Anki
